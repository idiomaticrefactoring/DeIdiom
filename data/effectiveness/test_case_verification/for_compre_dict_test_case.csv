repo_name,file_html,cl,me,old_code,new_code,flag_pass,test_html_list
gunicorn,https://github.com/benoitc/gunicorn/tree/master/gunicorn/util.py,,test_import_app_py_ext,kwargs = {kw.arg: ast.literal_eval(kw.value) for kw in expression.keywords},"
kwargs = dict()
for kw in expression.keywords:
    kwargs[kw.arg] = ast.literal_eval(kw.value)
",1,"[['https://github.com/benoitc/gunicorn/tree/master/tests/test_util.py', 'tests.test_util', '', 'test_import_app_py_ext']]"
feature_engine,https://github.com/feature-engine/feature_engine/tree/master/feature_engine/encoding/ordinal.py,,test_ordered_encoding_1_variable_ignore_format,"self.encoder_dict_[var] = {k: i for (i, k) in enumerate(t, 0)}","
self.encoder_dict_[var] = dict()
for (i, k) in enumerate(t, 0):
    self.encoder_dict_[var][k] = i
",1,"[['https://github.com/feature-engine/feature_engine/tree/master/tests/test_encoding/test_ordinal_encoder.py', 'tests.test_encoding.test_ordinal_encoder', '', 'test_variables_cast_as_category'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_encoding/test_ordinal_encoder.py', 'tests.test_encoding.test_ordinal_encoder', '', 'test_fit_raises_error_if_df_contains_na'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_encoding/test_ordinal_encoder.py', 'tests.test_encoding.test_ordinal_encoder', '', 'test_transform_raises_error_if_df_contains_na'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_encoding/test_ordinal_encoder.py', 'tests.test_encoding.test_ordinal_encoder', '', 'test_error_if_ordinal_encoding_and_no_y_passed'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_encoding/test_ordinal_encoder.py', 'tests.test_encoding.test_ordinal_encoder', '', 'test_ordered_encoding_1_variable'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_encoding/test_ordinal_encoder.py', 'tests.test_encoding.test_ordinal_encoder', '', 'test_error_if_input_df_contains_categories_not_present_in_training_df'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_encoding/test_ordinal_encoder.py', 'tests.test_encoding.test_ordinal_encoder', '', 'test_ordered_encoding_1_variable_ignore_format']]"
feature_engine,https://github.com/feature-engine/feature_engine/tree/master/feature_engine/creation/mathematical_combination.py,,test_error_when_null_values_in_variable,"self.combination_dict_ = {f""{operation}({'-'.join(vars_ls)})"": operation for operation in self.math_operations_}","tmp_DictComp0 = dict()
for operation in self.math_operations_:
    tmp_DictComp0[f""{operation}({'-'.join(vars_ls)})""] = operation

self.combination_dict_ = tmp_DictComp0
",1,"[['https://github.com/feature-engine/feature_engine/tree/master/tests/test_creation/test_mathematical_combination.py', 'tests.test_creation.test_mathematical_combination', '', 'test_error_when_null_values_in_variable']]"
feature_engine,https://github.com/feature-engine/feature_engine/tree/master/feature_engine/selection/target_mean_selection.py,,test_df_cat_and_num_variables_r2,"tmp_split = {f: roc_auc_score(y_test, X_test[f]) for f in self.variables_}","
tmp_split = dict()
for f in self.variables_:
    tmp_split[f] = roc_auc_score(y_test, X_test[f])
",1,"[['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_target_mean_selection.py', 'tests.test_selection.test_target_mean_selection', '', 'test_numerical_variables_roc_auc'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_target_mean_selection.py', 'tests.test_selection.test_target_mean_selection', '', 'test_error_if_fit_input_not_dataframe'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_target_mean_selection.py', 'tests.test_selection.test_target_mean_selection', '', 'test_categorical_variables_roc_auc'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_target_mean_selection.py', 'tests.test_selection.test_target_mean_selection', '', 'test_df_cat_and_num_variables_roc_auc'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_target_mean_selection.py', 'tests.test_selection.test_target_mean_selection', '', 'test_error_if_input_not_df'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_target_mean_selection.py', 'tests.test_selection.test_target_mean_selection', '', 'test_error_if_y_not_passed'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_target_mean_selection.py', 'tests.test_selection.test_target_mean_selection', '', 'test_df_cat_and_num_variables_r2']]"
feature_engine,https://github.com/feature-engine/feature_engine/tree/master/feature_engine/selection/target_mean_selection.py,,test_df_cat_and_num_variables_r2,"tmp_split = {f: r2_score(y_test, X_test[f]) for f in self.variables_}","
tmp_split = dict()
for f in self.variables_:
    tmp_split[f] = r2_score(y_test, X_test[f])
",1,"[['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_target_mean_selection.py', 'tests.test_selection.test_target_mean_selection', '', 'test_numerical_variables_roc_auc'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_target_mean_selection.py', 'tests.test_selection.test_target_mean_selection', '', 'test_error_if_fit_input_not_dataframe'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_target_mean_selection.py', 'tests.test_selection.test_target_mean_selection', '', 'test_categorical_variables_roc_auc'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_target_mean_selection.py', 'tests.test_selection.test_target_mean_selection', '', 'test_df_cat_and_num_variables_roc_auc'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_target_mean_selection.py', 'tests.test_selection.test_target_mean_selection', '', 'test_error_if_input_not_df'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_target_mean_selection.py', 'tests.test_selection.test_target_mean_selection', '', 'test_error_if_y_not_passed'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_target_mean_selection.py', 'tests.test_selection.test_target_mean_selection', '', 'test_df_cat_and_num_variables_r2']]"
feature_engine,https://github.com/feature-engine/feature_engine/tree/master/feature_engine/imputation/categorical.py,,test_error_when_variable_contains_multiple_modes,self.imputer_dict_ = {var: self.fill_value for var in self.variables_},"tmp_DictComp0 = dict()
for var in self.variables_:
    tmp_DictComp0[var] = self.fill_value

self.imputer_dict_ = tmp_DictComp0
",1,"[['https://github.com/feature-engine/feature_engine/tree/master/tests/test_imputation/test_categorical_imputer.py', 'tests.test_imputation.test_categorical_imputer', '', 'test_error_when_variable_contains_multiple_modes']]"
jiant,https://github.com/nyu-mll/jiant/tree/master/jiant/utils/python/datastructures.py,,test_set_dict_keys,return {k: d[k] for k in key_list},"tmp_DictComp0 = dict()
for k in key_list:
    tmp_DictComp0[k] = d[k]

return tmp_DictComp0
",1,"[['https://github.com/nyu-mll/jiant/tree/master/tests/utils/python/test_datastructures.py', 'tests.utils.python.test_datastructures', '', 'test_set_dict_keys']]"
nox,https://github.com/theacodes/nox/tree/master/nox/_option_set.py,TestOptionSet,test_parser_groupless_option,"groups = {name: parser.add_argument_group(*option_group.args, **option_group.kwargs) for (name, option_group) in self.groups.items()}","
groups = dict()
for (name, option_group) in self.groups.items():
    groups[name] = parser.add_argument_group(*option_group.args, **option_group.kwargs)
",1,"[['https://github.com/theacodes/nox/tree/master/tests/test__option_set.py', 'tests.test__option_set', 'TestOptionSet', 'test_parser_hidden_option'], ['https://github.com/theacodes/nox/tree/master/tests/test__option_set.py', 'tests.test__option_set', 'TestOptionSet', 'test_parser_groupless_option']]"
tfc,https://github.com/maqp/tfc/tree/master/src/common/gateway.py,TestGatewaySettings,test_store_and_load_of_settings,"serialized = json.dumps(self, default=lambda o: {k: self.__dict__[k] for k in self.key_list}, indent=4)","def my_comprehension_func(self):
    tmp_DictComp0 = dict()
    for k in self.key_list:
        tmp_DictComp0[k] = self.__dict__[k]
    return tmp_DictComp0

serialized = json.dumps(self, default=lambda o: my_comprehension_func(self), indent=4)
",1,"[['https://github.com/maqp/tfc/tree/master/tests/common/test_gateway.py', 'tests.common.test_gateway', 'TestGatewaySettings', 'test_store_and_load_of_settings']]"
fiber,https://github.com/uber/fiber/tree/master/fiber/config.py,TestMisc,test_config_sync,return {k: global_vars[k] for k in vars(_current_config)},"tmp_DictComp0 = dict()
for k in vars(_current_config):
    tmp_DictComp0[k] = global_vars[k]

return tmp_DictComp0
",1,"[['https://github.com/uber/fiber/tree/master/tests/test_config.py', 'tests.test_config', 'TestMisc', 'test_config_sync']]"
folium,https://github.com/python-visualization/folium/tree/master/folium/utilities.py,,test_parse_options,"return {camelize(key): value for (key, value) in kwargs.items() if value is not None}","tmp_DictComp0 = dict()
for (key, value) in kwargs.items():
    if value is not None:
        tmp_DictComp0[camelize(key)] = value

return tmp_DictComp0
",1,"[['https://github.com/python-visualization/folium/tree/master/tests/test_utilities.py', 'tests.test_utilities', '', 'test_parse_options']]"
andriller,https://github.com/den4uk/andriller/tree/master/andriller/utils.py,,test_get_koi,result = {k: None for k in keys},"
result = dict()
for k in keys:
    result[k] = None
",1,"[['https://github.com/den4uk/andriller/tree/master/tests/test_utils.py', 'tests.test_utils', '', 'test_get_koi']]"
borgmatic,https://github.com/borgmatic-collective/borgmatic/tree/master/borgmatic/execute.py,,test_log_outputs_skips_logs_for_process_with_none_stdout,"process_for_output_buffer = {output_buffer_for_process(process, exclude_stdouts): process for process in processes if process.stdout or process.stderr}","
process_for_output_buffer = dict()
for process in processes:
    if process.stdout or process.stderr:
        process_for_output_buffer[output_buffer_for_process(process, exclude_stdouts)] = process
",1,"[['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/integration/test_execute.py', 'tests.integration.test_execute', '', 'test_log_outputs_logs_each_line_separately'], ['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/integration/test_execute.py', 'tests.integration.test_execute', '', 'test_log_outputs_with_no_output_logs_nothing'], ['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/integration/test_execute.py', 'tests.integration.test_execute', '', 'test_log_outputs_with_unfinished_process_re_polls'], ['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/integration/test_execute.py', 'tests.integration.test_execute', '', 'test_log_outputs_truncates_long_error_output'], ['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/integration/test_execute.py', 'tests.integration.test_execute', '', 'test_log_outputs_includes_error_output_in_exception'], ['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/integration/test_execute.py', 'tests.integration.test_execute', '', 'test_log_outputs_kills_other_processes_when_one_errors'], ['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/integration/test_execute.py', 'tests.integration.test_execute', '', 'test_log_outputs_does_not_error_when_one_process_exits'], ['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/integration/test_execute.py', 'tests.integration.test_execute', '', 'test_log_outputs_vents_other_processes_when_one_exits'], ['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/integration/test_execute.py', 'tests.integration.test_execute', '', 'test_log_outputs_skips_logs_for_process_with_none_stdout']]"
borgmatic,https://github.com/borgmatic-collective/borgmatic/tree/master/borgmatic/commands/arguments.py,,test_parse_subparser_arguments_consumes_subparser_arguments_after_subparser_name,"alias_to_subparser_name = {alias: subparser_name for (subparser_name, aliases) in SUBPARSER_ALIASES.items() for alias in aliases}","
alias_to_subparser_name = dict()
for (subparser_name, aliases) in SUBPARSER_ALIASES.items():
    for alias in aliases:
        alias_to_subparser_name[alias] = subparser_name
",1,"[['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/commands/test_arguments.py', 'tests.unit.commands.test_arguments', '', 'test_parse_subparser_arguments_passes_through_unknown_arguments_before_subparser_name'], ['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/commands/test_arguments.py', 'tests.unit.commands.test_arguments', '', 'test_parse_subparser_arguments_consumes_subparser_arguments_with_alias'], ['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/commands/test_arguments.py', 'tests.unit.commands.test_arguments', '', 'test_parse_subparser_arguments_applies_default_subparsers'], ['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/commands/test_arguments.py', 'tests.unit.commands.test_arguments', '', 'test_parse_subparser_arguments_consumes_multiple_subparser_arguments'], ['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/commands/test_arguments.py', 'tests.unit.commands.test_arguments', '', 'test_parse_subparser_arguments_consumes_subparser_arguments_before_subparser_name'], ['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/commands/test_arguments.py', 'tests.unit.commands.test_arguments', '', 'test_parse_subparser_arguments_passes_through_unknown_arguments_after_subparser_name'], ['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/commands/test_arguments.py', 'tests.unit.commands.test_arguments', '', 'test_parse_subparser_arguments_parses_borg_options_and_skips_other_subparsers'], ['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/commands/test_arguments.py', 'tests.unit.commands.test_arguments', '', 'test_parse_subparser_arguments_consumes_subparser_arguments_after_subparser_name']]"
borgmatic,https://github.com/borgmatic-collective/borgmatic/tree/master/borgmatic/hooks/dispatch.py,,test_call_hooks_calls_each_hook_and_collects_return_values,"return {hook_name: call_hook(function_name, hooks, log_prefix, hook_name, *args, **kwargs) for hook_name in hook_names if hooks.get(hook_name)}","tmp_DictComp0 = dict()
for hook_name in hook_names:
    if hooks.get(hook_name):
        tmp_DictComp0[hook_name] = call_hook(function_name, hooks, log_prefix, hook_name, *args, **kwargs)

return tmp_DictComp0
",1,"[['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/hooks/test_dispatch.py', 'tests.unit.hooks.test_dispatch', '', 'test_call_hooks_calls_skips_return_values_for_missing_hooks'], ['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/hooks/test_dispatch.py', 'tests.unit.hooks.test_dispatch', '', 'test_call_hooks_calls_skips_return_values_for_null_hooks'], ['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/hooks/test_dispatch.py', 'tests.unit.hooks.test_dispatch', '', 'test_call_hooks_calls_each_hook_and_collects_return_values']]"
borgmatic,https://github.com/borgmatic-collective/borgmatic/tree/master/borgmatic/borg/create.py,,test_map_directories_to_devices_with_missing_path_does_not_error,return {directory: os.stat(directory).st_dev if os.path.exists(directory) else None for directory in directories},"tmp_DictComp0 = dict()
for directory in directories:
    tmp_DictComp0[directory] = os.stat(directory).st_dev if os.path.exists(directory) else None

return tmp_DictComp0
",1,"[['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/borg/test_create.py', 'tests.unit.borg.test_create', '', 'test_map_directories_to_devices_gives_device_id_per_path'], ['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/borg/test_create.py', 'tests.unit.borg.test_create', '', 'test_map_directories_to_devices_with_missing_path_does_not_error']]"
doit,https://github.com/pydoit/doit/tree/master/doit/plugin.py,TestPluginDict,test_to_dict,return {k: self.get_plugin(k) for k in self.keys()},"tmp_DictComp0 = dict()
for k in self.keys():
    tmp_DictComp0[k] = self.get_plugin(k)

return tmp_DictComp0
",1,"[['https://github.com/pydoit/doit/tree/master/tests/test_plugin.py', 'tests.test_plugin', 'TestPluginDict', 'test_to_dict']]"
cesium,https://github.com/cesium-ml/cesium/tree/master/cesium/data_management.py,,test_parse_headerfile,"header.rename(columns={c: 'label' for c in ['label', 'target', 'class', 'class_label']}, inplace=True)","tmp_DictComp0 = dict()
for c in ['label', 'target', 'class', 'class_label']:
    tmp_DictComp0[c] = 'label'

header.rename(columns=tmp_DictComp0, inplace=True)
",1,"[['https://github.com/cesium-ml/cesium/tree/master/cesium/tests/test_data_management.py', 'cesium.tests.test_data_management', '', 'test_parse_headerfile']]"
python-louvain,https://github.com/taynaud/python-louvain/tree/master/community/community_louvain.py,RenumberTest,test_renumber_unchanged,"ret = {k: renumbering[v] for (k, v) in dictionary.items()}","
ret = dict()
for (k, v) in dictionary.items():
    ret[k] = renumbering[v]
",1,"[['https://github.com/taynaud/python-louvain/tree/master//test_community.py', 'test_community', 'RenumberTest', 'test_renumber_changed'], ['https://github.com/taynaud/python-louvain/tree/master//test_community.py', 'test_community', 'RenumberTest', 'test_renumber_unchanged']]"
bottle,https://github.com/bottlepy/bottle/tree/master//bottle.py,TestConfDict,test_load_module,"obj = {key: getattr(config_obj, key) for key in dir(config_obj) if key.isupper()}","
obj = dict()
for key in dir(config_obj):
    if key.isupper():
        obj[key] = getattr(config_obj, key)
",1,"[['https://github.com/bottlepy/bottle/tree/master/test/test_config.py', 'test.test_config', 'TestConfDict', 'test_load_module']]"
pygorithm,https://github.com/OmkarPathak/pygorithm/tree/master/pygorithm/data_structures/graph.py,TestKruskal,test_minimum_spanning_tree,"self.graph = {k: self.graph[k] for k in sorted(self.graph, key=self.graph.get, reverse=False)}","tmp_DictComp0 = dict()
for k in sorted(self.graph, key=self.graph.get, reverse=False):
    tmp_DictComp0[k] = self.graph[k]

self.graph = tmp_DictComp0
",1,"[['https://github.com/OmkarPathak/pygorithm/tree/master/tests/test_data_structure.py', 'tests.test_data_structure', 'TestKruskal', 'test_minimum_spanning_tree_2'], ['https://github.com/OmkarPathak/pygorithm/tree/master/tests/test_data_structure.py', 'tests.test_data_structure', 'TestKruskal', 'test_minimum_spanning_tree']]"
jc,https://github.com/kellyjonbrazil/jc/tree/master/jc/cli.py,MyTests,test_cli_magic_parser,"magic_dict.update({mc: entry['argument'] for mc in entry.get('magic_commands', [])})","tmp_DictComp0 = dict()
for mc in entry.get('magic_commands', []):
    tmp_DictComp0[mc] = entry['argument']

magic_dict.update(tmp_DictComp0)
",1,"[['https://github.com/kellyjonbrazil/jc/tree/master/tests/test_cli.py', 'tests.test_cli', 'MyTests', 'test_cli_magic_parser']]"
jc,https://github.com/kellyjonbrazil/jc/tree/master/jc/parsers/ini.py,MyTests,test_ini_nodata,raw_output = {s: dict(ini.items(s)) for s in ini.sections()},"
raw_output = dict()
for s in ini.sections():
    raw_output[s] = dict(ini.items(s))
",1,"[['https://github.com/kellyjonbrazil/jc/tree/master/tests/test_ini.py', 'tests.test_ini', 'MyTests', 'test_ini_test'], ['https://github.com/kellyjonbrazil/jc/tree/master/tests/test_ini.py', 'tests.test_ini', 'MyTests', 'test_ini_iptelserver'], ['https://github.com/kellyjonbrazil/jc/tree/master/tests/test_ini.py', 'tests.test_ini', 'MyTests', 'test_ini_nodata']]"
jc,https://github.com/kellyjonbrazil/jc/tree/master/jc/parsers/ini.py,MyTests,test_ini_nodata,output_dict = {s: dict(ini.items(s)) for s in ini.sections()},"
output_dict = dict()
for s in ini.sections():
    output_dict[s] = dict(ini.items(s))
",1,"[['https://github.com/kellyjonbrazil/jc/tree/master/tests/test_ini.py', 'tests.test_ini', 'MyTests', 'test_ini_test'], ['https://github.com/kellyjonbrazil/jc/tree/master/tests/test_ini.py', 'tests.test_ini', 'MyTests', 'test_ini_iptelserver'], ['https://github.com/kellyjonbrazil/jc/tree/master/tests/test_ini.py', 'tests.test_ini', 'MyTests', 'test_ini_nodata']]"
LibCST,https://github.com/Instagram/LibCST/tree/master/libcst/metadata/wrapper.py,BaseMetadataProviderTest,test_batchable_provider,return {type(p): MappingProxyType(dict(p._computed)) for p in providers},"tmp_DictComp0 = dict()
for p in providers:
    tmp_DictComp0[type(p)] = MappingProxyType(dict(p._computed))

return tmp_DictComp0
",1,"[['https://github.com/Instagram/LibCST/tree/master/libcst/metadata/tests/test_base_provider.py', 'libcst.metadata.tests.test_base_provider', 'BaseMetadataProviderTest', 'test_batchable_provider']]"
pydicom,https://github.com/pydicom/pydicom/tree/master/pydicom/datadict.py,TestDict,test_add_entries,"keyword_dict.update({val[4]: tag for (tag, val) in new_entries_dict.items()})","tmp_DictComp0 = dict()
for (tag, val) in new_entries_dict.items():
    tmp_DictComp0[val[4]] = tag

keyword_dict.update(tmp_DictComp0)
",1,"[['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_dictionary.py', 'pydicom.tests.test_dictionary', 'TestDict', 'test_add_entries_raises_for_private_tags'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_dictionary.py', 'pydicom.tests.test_dictionary', 'TestDict', 'test_add_entries']]"
pydicom,https://github.com/pydicom/pydicom/tree/master/pydicom/fileset.py,TestFileSet_Load,test_find_values,has_element = {element: False for element in element_list},"
has_element = dict()
for element in element_list:
    has_element[element] = False
",1,"[['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_fileset.py', 'pydicom.tests.test_fileset', 'TestFileSet_Load', 'test_find_values_load'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_fileset.py', 'pydicom.tests.test_fileset', 'TestFileSet_Load', 'test_find_values']]"
pydicom,https://github.com/pydicom/pydicom/tree/master/pydicom/fileset.py,TestFileSet_Load,test_find_values,"results: Dict[Union[str, int], List[Any]] = {element: [] for element in element_list}","
results = dict()
for element in element_list:
    results[element] = []
",1,"[['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_fileset.py', 'pydicom.tests.test_fileset', 'TestFileSet_Load', 'test_find_values_load'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_fileset.py', 'pydicom.tests.test_fileset', 'TestFileSet_Load', 'test_find_values']]"
pydicom,https://github.com/pydicom/pydicom/tree/master/pydicom/dataset.py,TestDataset,test_dir_filter,matches.update({x: 1 for x in match}),"tmp_DictComp0 = dict()
for x in match:
    tmp_DictComp0[x] = 1

matches.update(tmp_DictComp0)
",1,"[['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_dataset.py', 'pydicom.tests.test_dataset', 'TestDataset', 'test_dir'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_dataset.py', 'pydicom.tests.test_dataset', 'TestDataset', 'test_dir_filter']]"
pydicom,https://github.com/pydicom/pydicom/tree/master/pydicom/pixel_data_handlers/util.py,TestDataset,test_pixel_array_already_have,"return {kw: id(getattr(ds, kw, None)) for kw in keywords}","tmp_DictComp0 = dict()
for kw in keywords:
    tmp_DictComp0[kw] = id(getattr(ds, kw, None))

return tmp_DictComp0
",1,"[['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_dataset.py', 'pydicom.tests.test_dataset', 'TestDataset', 'test_pixel_array_already_have']]"
papermill,https://github.com/nteract/papermill/tree/master/papermill/utils.py,,test_remove_args,"return {k: v for (k, v) in kwargs.items() if k not in args}","tmp_DictComp0 = dict()
for (k, v) in kwargs.items():
    if k not in args:
        tmp_DictComp0[k] = v

return tmp_DictComp0
",1,"[['https://github.com/nteract/papermill/tree/master/papermill/tests/test_utils.py', 'papermill.tests.test_utils', '', 'test_remove_args']]"
papermill,https://github.com/nteract/papermill/tree/master/papermill/inspection.py,,test_str_path,return {p.name: p._asdict() for p in params},"tmp_DictComp0 = dict()
for p in params:
    tmp_DictComp0[p.name] = p._asdict()

return tmp_DictComp0
",1,"[['https://github.com/nteract/papermill/tree/master/papermill/tests/test_inspect.py', 'papermill.tests.test_inspect', '', 'test_str_path']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_AnalyzedResult,test_analyzed_result_serialization,"args.update({k: v for (k, v) in _dict.items() if k not in cls._properties})","tmp_DictComp0 = dict()
for (k, v) in _dict.items():
    if k not in cls._properties:
        tmp_DictComp0[k] = v

args.update(tmp_DictComp0)
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_AnalyzedResult', 'test_analyzed_result_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_QueryResult,test_query_result_serialization,"args.update({k: v for (k, v) in _dict.items() if k not in cls._properties})","tmp_DictComp0 = dict()
for (k, v) in _dict.items():
    if k not in cls._properties:
        tmp_DictComp0[k] = v

args.update(tmp_DictComp0)
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_QueryResult', 'test_query_result_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_QueryResult', 'test_query_result_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_Context,test_context_serialization,"args.update({k: v for (k, v) in _dict.items() if k not in cls._properties})","tmp_DictComp0 = dict()
for (k, v) in _dict.items():
    if k not in cls._properties:
        tmp_DictComp0[k] = v

args.update(tmp_DictComp0)
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_Context', 'test_context_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_DialogNodeContext,test_dialog_node_context_serialization,"args.update({k: v for (k, v) in _dict.items() if k not in cls._properties})","tmp_DictComp0 = dict()
for (k, v) in _dict.items():
    if k not in cls._properties:
        tmp_DictComp0[k] = v

args.update(tmp_DictComp0)
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_DialogNodeContext', 'test_dialog_node_context_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_DialogNodeOutput,test_dialog_node_output_serialization,"args.update({k: v for (k, v) in _dict.items() if k not in cls._properties})","tmp_DictComp0 = dict()
for (k, v) in _dict.items():
    if k not in cls._properties:
        tmp_DictComp0[k] = v

args.update(tmp_DictComp0)
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_DialogNodeOutput', 'test_dialog_node_output_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_MessageInput,test_message_input_serialization,"args.update({k: v for (k, v) in _dict.items() if k not in cls._properties})","tmp_DictComp0 = dict()
for (k, v) in _dict.items():
    if k not in cls._properties:
        tmp_DictComp0[k] = v

args.update(tmp_DictComp0)
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_MessageInput', 'test_message_input_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_MessageInput', 'test_message_input_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_OutputData,test_output_data_serialization,"args.update({k: v for (k, v) in _dict.items() if k not in cls._properties})","tmp_DictComp0 = dict()
for (k, v) in _dict.items():
    if k not in cls._properties:
        tmp_DictComp0[k] = v

args.update(tmp_DictComp0)
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_OutputData', 'test_output_data_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_QueryNoticesResult,test_query_notices_result_serialization,"args.update({k: v for (k, v) in _dict.items() if k not in cls._properties})","tmp_DictComp0 = dict()
for (k, v) in _dict.items():
    if k not in cls._properties:
        tmp_DictComp0[k] = v

args.update(tmp_DictComp0)
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_QueryNoticesResult', 'test_query_notices_result_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_QueryResult,test_query_result_serialization,"args.update({k: v for (k, v) in _dict.items() if k not in cls._properties})","tmp_DictComp0 = dict()
for (k, v) in _dict.items():
    if k not in cls._properties:
        tmp_DictComp0[k] = v

args.update(tmp_DictComp0)
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_QueryResult', 'test_query_result_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_QueryResult', 'test_query_result_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v2.py,TestModel_MessageContext,test_message_context_serialization,"args['skills'] = {k: MessageContextSkill.from_dict(v) for (k, v) in _dict.get('skills').items()}","
args['skills'] = dict()
for (k, v) in _dict.get('skills').items():
    args['skills'][k] = MessageContextSkill.from_dict(v)
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_MessageContext', 'test_message_context_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v2.py,TestModel_MessageContextSkillSystem,test_message_context_skill_system_serialization,"args.update({k: v for (k, v) in _dict.items() if k not in cls._properties})","tmp_DictComp0 = dict()
for (k, v) in _dict.items():
    if k not in cls._properties:
        tmp_DictComp0[k] = v

args.update(tmp_DictComp0)
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_MessageContextSkillSystem', 'test_message_context_skill_system_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v2.py,TestModel_MessageContextStateless,test_message_context_stateless_serialization,"args['skills'] = {k: MessageContextSkill.from_dict(v) for (k, v) in _dict.get('skills').items()}","
args['skills'] = dict()
for (k, v) in _dict.get('skills').items():
    args['skills'][k] = MessageContextSkill.from_dict(v)
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_MessageContextStateless', 'test_message_context_stateless_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v2.py,TestModel_SearchResultHighlight,test_search_result_highlight_serialization,"args.update({k: v for (k, v) in _dict.items() if k not in cls._properties})","tmp_DictComp0 = dict()
for (k, v) in _dict.items():
    if k not in cls._properties:
        tmp_DictComp0[k] = v

args.update(tmp_DictComp0)
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_SearchResultHighlight', 'test_search_result_highlight_serialization']]"
octodns,https://github.com/octodns/octodns/tree/master/octodns/zone.py,TestTinyDnsFileSource,test_populate_normal,desired_records = {r: r for r in desired.records},"
desired_records = dict()
for r in desired.records:
    desired_records[r] = r
",1,"[['https://github.com/octodns/octodns/tree/master/tests/test_octodns_source_tinydns.py', 'tests.test_octodns_source_tinydns', 'TestTinyDnsFileSource', 'test_populate_normal_sub1'], ['https://github.com/octodns/octodns/tree/master/tests/test_octodns_zone.py', 'tests.test_octodns_zone', 'TestZone', 'test_excluded_records'], ['https://github.com/octodns/octodns/tree/master/tests/test_octodns_zone.py', 'tests.test_octodns_zone', 'TestZone', 'test_included_records'], ['https://github.com/octodns/octodns/tree/master/tests/test_octodns_source_tinydns.py', 'tests.test_octodns_source_tinydns', 'TestTinyDnsFileSource', 'test_populate_in_addr_arpa'], ['https://github.com/octodns/octodns/tree/master/tests/test_octodns_zone.py', 'tests.test_octodns_zone', 'TestZone', 'test_not_included_records'], ['https://github.com/octodns/octodns/tree/master/tests/test_octodns_source_tinydns.py', 'tests.test_octodns_source_tinydns', 'TestTinyDnsFileSource', 'test_populate_normal_sub2'], ['https://github.com/octodns/octodns/tree/master/tests/test_octodns_zone.py', 'tests.test_octodns_zone', 'TestZone', 'test_ignored_records'], ['https://github.com/octodns/octodns/tree/master/tests/test_octodns_zone.py', 'tests.test_octodns_zone', 'TestZone', 'test_changes'], ['https://github.com/octodns/octodns/tree/master/tests/test_octodns_zone.py', 'tests.test_octodns_zone', 'TestZone', 'test_unsupporting'], ['https://github.com/octodns/octodns/tree/master/tests/test_octodns_source_tinydns.py', 'tests.test_octodns_source_tinydns', 'TestTinyDnsFileSource', 'test_populate_normal']]"
evalml,https://github.com/alteryx/evalml/tree/master/evalml/pipelines/components/utils.py,,test_make_pipeline_from_multiple_graphs_with_sampler,component_classes = {component.name: component for component in all_components()},"
component_classes = dict()
for component in all_components():
    component_classes[component.name] = component
",1,"[['https://github.com/alteryx/evalml/tree/master/evalml/tests/component_tests/test_utils.py', 'evalml.tests.component_tests.test_utils', '', 'test_handle_component_class_names'], ['https://github.com/alteryx/evalml/tree/master/evalml/tests/pipeline_tests/test_pipeline_utils.py', 'evalml.tests.pipeline_tests.test_pipeline_utils', '', 'test_make_pipeline_from_multiple_graphs_with_sampler']]"
evalml,https://github.com/alteryx/evalml/tree/master/evalml/data_checks/highly_null_data_check.py,,test_highly_null_data_check_warnings,"highly_null_cols = {key: value for (key, value) in percent_null_cols.items() if value >= self.pct_null_col_threshold and value != 0}","
highly_null_cols = dict()
for (key, value) in percent_null_cols.items():
    if value >= self.pct_null_col_threshold and value != 0:
        highly_null_cols[key] = value
",1,"[['https://github.com/alteryx/evalml/tree/master/evalml/tests/data_checks_tests/test_highly_null_data_check.py', 'evalml.tests.data_checks_tests.test_highly_null_data_check', '', 'test_highly_null_data_check_separate_rows_cols'], ['https://github.com/alteryx/evalml/tree/master/evalml/tests/data_checks_tests/test_highly_null_data_check.py', 'evalml.tests.data_checks_tests.test_highly_null_data_check', '', 'test_highly_null_data_check_input_formats'], ['https://github.com/alteryx/evalml/tree/master/evalml/tests/data_checks_tests/test_highly_null_data_check.py', 'evalml.tests.data_checks_tests.test_highly_null_data_check', '', 'test_highly_null_data_check_warnings']]"
evalml,https://github.com/alteryx/evalml/tree/master/evalml/data_checks/highly_null_data_check.py,,test_highly_null_data_check_warnings,highly_null_cols_indices = {col_: X[col_][X[col_].isnull()].index.tolist() for col_ in highly_null_cols},"
highly_null_cols_indices = dict()
for col_ in highly_null_cols:
    highly_null_cols_indices[col_] = X[col_][X[col_].isnull()].index.tolist()
",1,"[['https://github.com/alteryx/evalml/tree/master/evalml/tests/data_checks_tests/test_highly_null_data_check.py', 'evalml.tests.data_checks_tests.test_highly_null_data_check', '', 'test_highly_null_data_check_separate_rows_cols'], ['https://github.com/alteryx/evalml/tree/master/evalml/tests/data_checks_tests/test_highly_null_data_check.py', 'evalml.tests.data_checks_tests.test_highly_null_data_check', '', 'test_highly_null_data_check_input_formats'], ['https://github.com/alteryx/evalml/tree/master/evalml/tests/data_checks_tests/test_highly_null_data_check.py', 'evalml.tests.data_checks_tests.test_highly_null_data_check', '', 'test_highly_null_data_check_warnings']]"
evalml,https://github.com/alteryx/evalml/tree/master/evalml/data_checks/id_columns_data_check.py,,test_id_columns_warning,id_cols = {col: 0.95 for col in cols_named_id},"
id_cols = dict()
for col in cols_named_id:
    id_cols[col] = 0.95
",1,"[['https://github.com/alteryx/evalml/tree/master/evalml/tests/data_checks_tests/test_id_columns_data_check.py', 'evalml.tests.data_checks_tests.test_id_columns_data_check', '', 'test_id_cols_data_check_input_formats'], ['https://github.com/alteryx/evalml/tree/master/evalml/tests/data_checks_tests/test_id_columns_data_check.py', 'evalml.tests.data_checks_tests.test_id_columns_data_check', '', 'test_id_columns_strings'], ['https://github.com/alteryx/evalml/tree/master/evalml/tests/data_checks_tests/test_id_columns_data_check.py', 'evalml.tests.data_checks_tests.test_id_columns_data_check', '', 'test_id_columns_warning']]"
evalml,https://github.com/alteryx/evalml/tree/master/evalml/data_checks/id_columns_data_check.py,,test_id_columns_warning,"id_cols_above_threshold = {key: value for (key, value) in id_cols.items() if value >= self.id_threshold}","
id_cols_above_threshold = dict()
for (key, value) in id_cols.items():
    if value >= self.id_threshold:
        id_cols_above_threshold[key] = value
",1,"[['https://github.com/alteryx/evalml/tree/master/evalml/tests/data_checks_tests/test_id_columns_data_check.py', 'evalml.tests.data_checks_tests.test_id_columns_data_check', '', 'test_id_cols_data_check_input_formats'], ['https://github.com/alteryx/evalml/tree/master/evalml/tests/data_checks_tests/test_id_columns_data_check.py', 'evalml.tests.data_checks_tests.test_id_columns_data_check', '', 'test_id_columns_strings'], ['https://github.com/alteryx/evalml/tree/master/evalml/tests/data_checks_tests/test_id_columns_data_check.py', 'evalml.tests.data_checks_tests.test_id_columns_data_check', '', 'test_id_columns_warning']]"
evalml,https://github.com/alteryx/evalml/tree/master/evalml/data_checks/uniqueness_data_check.py,,test_uniqueness_data_check_warnings,"results['warnings'].append(DataCheckWarning(message=warning_not_unique_enough.format(', '.join([""'{}'"".format(str(col)) for col in not_unique_enough_cols]), self.problem_type), data_check_name=self.name, message_code=DataCheckMessageCode.NOT_UNIQUE_ENOUGH, details={'columns': not_unique_enough_cols, 'uniqueness_score': {col: res.loc[col] for col in not_unique_enough_cols}}).to_dict())","tmp_DictComp0 = dict()
for col in not_unique_enough_cols:
    tmp_DictComp0[col] = res.loc[col]

results['warnings'].append(DataCheckWarning(message=warning_not_unique_enough.format(', '.join([""'{}'"".format(str(col)) for col in not_unique_enough_cols]), self.problem_type), data_check_name=self.name, message_code=DataCheckMessageCode.NOT_UNIQUE_ENOUGH, details={'columns': not_unique_enough_cols, 'uniqueness_score': tmp_DictComp0}).to_dict())
",1,"[['https://github.com/alteryx/evalml/tree/master/evalml/tests/data_checks_tests/test_uniqueness_data_check.py', 'evalml.tests.data_checks_tests.test_uniqueness_data_check', '', 'test_uniqueness_data_check_warnings']]"
evalml,https://github.com/alteryx/evalml/tree/master/evalml/data_checks/uniqueness_data_check.py,,test_uniqueness_data_check_warnings,"results['warnings'].append(DataCheckWarning(message=warning_too_unique.format(', '.join([""'{}'"".format(str(col)) for col in too_unique_cols]), self.problem_type), data_check_name=self.name, message_code=DataCheckMessageCode.TOO_UNIQUE, details={'columns': too_unique_cols, 'uniqueness_score': {col: res.loc[col] for col in too_unique_cols}}).to_dict())","tmp_DictComp0 = dict()
for col in too_unique_cols:
    tmp_DictComp0[col] = res.loc[col]

results['warnings'].append(DataCheckWarning(message=warning_too_unique.format(', '.join([""'{}'"".format(str(col)) for col in too_unique_cols]), self.problem_type), data_check_name=self.name, message_code=DataCheckMessageCode.TOO_UNIQUE, details={'columns': too_unique_cols, 'uniqueness_score': tmp_DictComp0}).to_dict())
",1,"[['https://github.com/alteryx/evalml/tree/master/evalml/tests/data_checks_tests/test_uniqueness_data_check.py', 'evalml.tests.data_checks_tests.test_uniqueness_data_check', '', 'test_uniqueness_data_check_warnings']]"
evalml,https://github.com/alteryx/evalml/tree/master/evalml/data_checks/sparsity_data_check.py,,test_sparsity_data_check_warnings,"results['warnings'].append(DataCheckWarning(message=warning_too_unique.format(', '.join([""'{}'"".format(str(col)) for col in too_sparse_cols]), self.problem_type), data_check_name=self.name, message_code=DataCheckMessageCode.TOO_SPARSE, details={'columns': too_sparse_cols, 'sparsity_score': {col: res.loc[col] for col in too_sparse_cols}}).to_dict())","tmp_DictComp0 = dict()
for col in too_sparse_cols:
    tmp_DictComp0[col] = res.loc[col]

results['warnings'].append(DataCheckWarning(message=warning_too_unique.format(', '.join([""'{}'"".format(str(col)) for col in too_sparse_cols]), self.problem_type), data_check_name=self.name, message_code=DataCheckMessageCode.TOO_SPARSE, details={'columns': too_sparse_cols, 'sparsity_score': tmp_DictComp0}).to_dict())
",1,"[['https://github.com/alteryx/evalml/tree/master/evalml/tests/data_checks_tests/test_sparsity_data_check.py', 'evalml.tests.data_checks_tests.test_sparsity_data_check', '', 'test_sparsity_data_check_warnings']]"
evalml,https://github.com/alteryx/evalml/tree/master/evalml/model_understanding/decision_boundary.py,,test_find_confusion_matrix_per_threshold_errors,"final_obj_dict = {k: v[0] for (k, v) in objective_dict.items()}","
final_obj_dict = dict()
for (k, v) in objective_dict.items():
    final_obj_dict[k] = v[0]
",1,"[['https://github.com/alteryx/evalml/tree/master/evalml/tests/model_understanding_tests/test_decision_boundary.py', 'evalml.tests.model_understanding_tests.test_decision_boundary', '', 'test_find_confusion_matrix_per_threshold_args_pass_through'], ['https://github.com/alteryx/evalml/tree/master/evalml/tests/model_understanding_tests/test_decision_boundary.py', 'evalml.tests.model_understanding_tests.test_decision_boundary', '', 'test_find_confusion_matrix_per_threshold_errors']]"
evalml,https://github.com/alteryx/evalml/tree/master/evalml/model_understanding/graphs.py,,test_partial_dependence_baseline,custom_range = {cat: list(X_cats[cat].dropna().unique()) for cat in X_cats.columns},"
custom_range = dict()
for cat in X_cats.columns:
    custom_range[cat] = list(X_cats[cat].dropna().unique())
",1,"[['https://github.com/alteryx/evalml/tree/master/evalml/tests/model_understanding_tests/test_partial_dependence.py', 'evalml.tests.model_understanding_tests.test_partial_dependence', '', 'test_partial_dependence_scale_error'], ['https://github.com/alteryx/evalml/tree/master/evalml/tests/model_understanding_tests/test_partial_dependence.py', 'evalml.tests.model_understanding_tests.test_partial_dependence', '', 'test_partial_dependence_respect_grid_resolution'], ['https://github.com/alteryx/evalml/tree/master/evalml/tests/model_understanding_tests/test_partial_dependence.py', 'evalml.tests.model_understanding_tests.test_partial_dependence', '', 'test_partial_dependence_not_fitted'], ['https://github.com/alteryx/evalml/tree/master/evalml/tests/model_understanding_tests/test_partial_dependence.py', 'evalml.tests.model_understanding_tests.test_partial_dependence', '', 'test_partial_dependence_baseline']]"
evalml,https://github.com/alteryx/evalml/tree/master/evalml/model_understanding/graphs.py,,test_partial_dependence_baseline,"custom_range = {date: _range_for_dates(X_dt.ww.loc[:, date], percentiles, grid_resolution) for date in X_dt.columns}","
custom_range = dict()
for date in X_dt.columns:
    custom_range[date] = _range_for_dates(X_dt.ww.loc[:, date], percentiles, grid_resolution)
",1,"[['https://github.com/alteryx/evalml/tree/master/evalml/tests/model_understanding_tests/test_partial_dependence.py', 'evalml.tests.model_understanding_tests.test_partial_dependence', '', 'test_partial_dependence_scale_error'], ['https://github.com/alteryx/evalml/tree/master/evalml/tests/model_understanding_tests/test_partial_dependence.py', 'evalml.tests.model_understanding_tests.test_partial_dependence', '', 'test_partial_dependence_respect_grid_resolution'], ['https://github.com/alteryx/evalml/tree/master/evalml/tests/model_understanding_tests/test_partial_dependence.py', 'evalml.tests.model_understanding_tests.test_partial_dependence', '', 'test_partial_dependence_not_fitted'], ['https://github.com/alteryx/evalml/tree/master/evalml/tests/model_understanding_tests/test_partial_dependence.py', 'evalml.tests.model_understanding_tests.test_partial_dependence', '', 'test_partial_dependence_baseline']]"
evalml,https://github.com/alteryx/evalml/tree/master/evalml/utils/gen_utils.py,,test_pad_with_nans_with_series_name,padding = pd.DataFrame({col: [np.nan] * num_to_pad for col in pd_data.columns}),"tmp_DictComp0 = dict()
for col in pd_data.columns:
    tmp_DictComp0[col] = [np.nan] * num_to_pad

padding = pd.DataFrame(tmp_DictComp0)
",1,"[['https://github.com/alteryx/evalml/tree/master/evalml/tests/utils_tests/test_gen_utils.py', 'evalml.tests.utils_tests.test_gen_utils', '', 'test_pad_with_nans_with_series_name']]"
mlens,https://github.com/flennerhag/mlens/tree/master/mlens/utils/formatting.py,,test_estimator_lists,"duplicates = {key: val for (key, val) in duplicates.items() if val > 1}","tmp_DictComp0 = dict()
for (key, val) in duplicates.items():
    if val > 1:
        tmp_DictComp0[key] = val

duplicates = tmp_DictComp0
",1,"[['https://github.com/flennerhag/mlens/tree/master/mlens/utils/tests/test_formatting.py', 'mlens.utils.tests.test_formatting', '', 'test_formatting_list'], ['https://github.com/flennerhag/mlens/tree/master/mlens/utils/tests/test_dummy.py', 'mlens.utils.tests.test_dummy', '', 'test_estimator_lists']]"
mlens,https://github.com/flennerhag/mlens/tree/master/mlens/utils/formatting.py,,test_estimator_lists,name_count = {key: 1 for key in duplicates},"
name_count = dict()
for key in duplicates:
    name_count[key] = 1
",1,"[['https://github.com/flennerhag/mlens/tree/master/mlens/utils/tests/test_formatting.py', 'mlens.utils.tests.test_formatting', '', 'test_formatting_list'], ['https://github.com/flennerhag/mlens/tree/master/mlens/utils/tests/test_dummy.py', 'mlens.utils.tests.test_dummy', '', 'test_estimator_lists']]"
httpx,https://github.com/encode/httpx/tree/master/httpx/_models.py,,test_headers,"return {key.decode(self.encoding): None for (_, key, value) in self._list}.keys()","tmp_DictComp0 = dict()
for (_, key, value) in self._list:
    tmp_DictComp0[key.decode(self.encoding)] = None

return tmp_DictComp0.keys()
",1,"[['https://github.com/encode/httpx/tree/master/tests/models/test_headers.py', 'tests.models.test_headers', '', 'test_headers']]"
zdict,https://github.com/zdict/zdict/tree/master/zdict/loader.py,,test_get_dictionary_map,"return {cls(None).provider: cls for (_, cls) in chain.from_iterable((getmembers(mod, predicate=_is_dict) for mod in (import_module('{}.{}'.format(package, f.partition('.py')[0])) for f in os.listdir(dictionaries.__path__[0]) if not f.startswith('_') and f.endswith('.py') and (f not in exclude_files))))}","tmp_DictComp0 = dict()
for (_, cls) in chain.from_iterable((getmembers(mod, predicate=_is_dict) for mod in (import_module('{}.{}'.format(package, f.partition('.py')[0])) for f in os.listdir(dictionaries.__path__[0]) if not f.startswith('_') and f.endswith('.py') and (f not in exclude_files)))):
    tmp_DictComp0[cls(None).provider] = cls

return tmp_DictComp0
",1,"[['https://github.com/zdict/zdict/tree/master/zdict/tests/test_loader.py', 'zdict.tests.test_loader', '', 'test_get_dictionary_map']]"
detect-secrets,https://github.com/Yelp/detect-secrets/tree/master/detect_secrets/main.py,TestScanString,test_failed_high_entropy_string,results = {plugin.secret_type: 'False' for plugin in registered_plugins},"
results = dict()
for plugin in registered_plugins:
    results[plugin.secret_type] = 'False'
",1,"[['https://github.com/Yelp/detect-secrets/tree/master/tests/main_test.py', 'tests.main_test', 'TestScanString', 'test_basic'], ['https://github.com/Yelp/detect-secrets/tree/master/tests/main_test.py', 'tests.main_test', 'TestScanString', 'test_failed_high_entropy_string']]"
detect-secrets,https://github.com/Yelp/detect-secrets/tree/master/detect_secrets/core/secrets_collection.py,,test_merge,mapping = {secret: secret for secret in self.data[filename]},"
mapping = dict()
for secret in self.data[filename]:
    mapping[secret] = secret
",1,"[['https://github.com/Yelp/detect-secrets/tree/master/tests/core/secrets_collection_test.py', 'tests.core.secrets_collection_test', '', 'test_merge']]"
skidl,https://github.com/devbisme/skidl/tree/master/skidl/part.py,,test_connect_6,"cpy.fields = {k: v for (k, v) in self.fields.items()}","
cpy.fields = dict()
for (k, v) in self.fields.items():
    cpy.fields[k] = v
",1,"[['https://github.com/devbisme/skidl/tree/master/tests/test_connect.py', 'tests.test_connect', '', 'test_connect_2'], ['https://github.com/devbisme/skidl/tree/master/tests/test_connect.py', 'tests.test_connect', '', 'test_connect_3'], ['https://github.com/devbisme/skidl/tree/master/tests/test_connect.py', 'tests.test_connect', '', 'test_connect_6']]"
skidl,https://github.com/devbisme/skidl/tree/master/skidl/netlist_to_skidl.py,,test_parser_1,template_comp_fields = {fld.name: fld.value for fld in template_comp.fields},"
template_comp_fields = dict()
for fld in template_comp.fields:
    template_comp_fields[fld.name] = fld.value
",1,"[['https://github.com/devbisme/skidl/tree/master/tests/test_parse.py', 'tests.test_parse', '', 'test_parser_1']]"
skidl,https://github.com/devbisme/skidl/tree/master/skidl/netlist_to_skidl.py,,test_parser_1,comp_templates = {comp_key(comp): comp for comp in ntlst.parts},"
comp_templates = dict()
for comp in ntlst.parts:
    comp_templates[comp_key(comp)] = comp
",1,"[['https://github.com/devbisme/skidl/tree/master/tests/test_parse.py', 'tests.test_parse', '', 'test_parser_1']]"
pydantic,https://github.com/samuelcolvin/pydantic/tree/master/pydantic/schema.py,,test_model_name_maps,"return {v: k for (k, v) in name_model_map.items()}","tmp_DictComp0 = dict()
for (k, v) in name_model_map.items():
    tmp_DictComp0[v] = k

return tmp_DictComp0
",1,"[['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_schema.py', 'tests.test_schema', '', 'test_model_name_maps']]"
pydantic,https://github.com/samuelcolvin/pydantic/tree/master/pydantic/env_settings.py,,test_read_env_file_cast_sensitive,"return {k.lower(): v for (k, v) in file_vars.items()}","tmp_DictComp0 = dict()
for (k, v) in file_vars.items():
    tmp_DictComp0[k.lower()] = v

return tmp_DictComp0
",1,"[['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_settings.py', 'tests.test_settings', '', 'test_read_env_file_syntax_wrong'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_settings.py', 'tests.test_settings', '', 'test_read_env_file_cast_sensitive']]"
dulwich,https://github.com/dulwich/dulwich/tree/master/dulwich/refs.py,StripPeeledRefsTests,test_strip_peeled_refs,"return {ref: sha for (ref, sha) in refs.items() if not ref.endswith(ANNOTATED_TAG_SUFFIX)}","tmp_DictComp0 = dict()
for (ref, sha) in refs.items():
    if not ref.endswith(ANNOTATED_TAG_SUFFIX):
        tmp_DictComp0[ref] = sha

return tmp_DictComp0
",1,"[['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_refs.py', 'dulwich.tests.test_refs', 'StripPeeledRefsTests', 'test_strip_peeled_refs']]"
ubelt,https://github.com/Erotemic/ubelt/tree/master/ubelt/util_dict.py,,test_dict_hist_ordered,hist_ = {k: 0 for k in labels},"
hist_ = dict()
for k in labels:
    hist_[k] = 0
",1,"[['https://github.com/Erotemic/ubelt/tree/master/tests/test_dict.py', 'tests.test_dict', '', 'test_dict_hist_ordered']]"
elasticdl,https://github.com/sql-machine-learning/elasticdl/tree/master/elasticdl_client/common/k8s_volume.py,K8SVolumeTest,test_parse_volume_and_mount,volumes_per_type = {type_name: {} for type_name in _ALLOWED_VOLUME_TYPES},"
volumes_per_type = dict()
for type_name in _ALLOWED_VOLUME_TYPES:
    volumes_per_type[type_name] = {}
",1,"[['https://github.com/sql-machine-learning/elasticdl/tree/master/elasticdl_client/tests/k8s_volume_test.py', 'elasticdl_client.tests.k8s_volume_test', 'K8SVolumeTest', 'test_parse_multiple_mount_on_one_volume'], ['https://github.com/sql-machine-learning/elasticdl/tree/master/elasticdl_client/tests/k8s_volume_test.py', 'elasticdl_client.tests.k8s_volume_test', 'K8SVolumeTest', 'test_parse_volume_and_mount']]"
MuGo,https://github.com/brilee/MuGo/tree/master//go.py,TestDataSetHelpers,test_onehot,"NEIGHBORS = {(x, y): list(filter(check_bounds, [(x + 1, y), (x - 1, y), (x, y + 1), (x, y - 1)])) for (x, y) in ALL_COORDS}","
NEIGHBORS = dict()
for (x, y) in ALL_COORDS:
    NEIGHBORS[x, y] = list(filter(check_bounds, [(x + 1, y), (x - 1, y), (x, y + 1), (x, y - 1)]))
",1,"[['https://github.com/brilee/MuGo/tree/master/tests/test_datasets.py', 'tests.test_datasets', 'TestDataSetHelpers', 'test_onehot']]"
MuGo,https://github.com/brilee/MuGo/tree/master//go.py,TestDataSetHelpers,test_onehot,"DIAGONALS = {(x, y): list(filter(check_bounds, [(x + 1, y + 1), (x + 1, y - 1), (x - 1, y + 1), (x - 1, y - 1)])) for (x, y) in ALL_COORDS}","
DIAGONALS = dict()
for (x, y) in ALL_COORDS:
    DIAGONALS[x, y] = list(filter(check_bounds, [(x + 1, y + 1), (x + 1, y - 1), (x - 1, y + 1), (x - 1, y - 1)]))
",1,"[['https://github.com/brilee/MuGo/tree/master/tests/test_datasets.py', 'tests.test_datasets', 'TestDataSetHelpers', 'test_onehot']]"
asv,https://github.com/airspeed-velocity/asv/tree/master/asv/util.py,,test_exception,"env = {_fix_env(k): _fix_env(v) for (k, v) in env.items()}","tmp_DictComp0 = dict()
for (k, v) in env.items():
    tmp_DictComp0[_fix_env(k)] = _fix_env(v)

env = tmp_DictComp0
",1,"[['https://github.com/airspeed-velocity/asv/tree/master/test/test_find.py', 'test.test_find', '', 'test_find_timeout'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_subprocess.py', 'test.test_subprocess', '', 'test_output_timeout'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_subprocess.py', 'test.test_subprocess', '', 'test_stderr_redirect'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_subprocess.py', 'test.test_subprocess', '', 'test_large_output'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_subprocess.py', 'test.test_subprocess', '', 'test_no_timeout'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_subprocess.py', 'test.test_subprocess', '', 'test_timeout'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_subprocess.py', 'test.test_subprocess', '', 'test_env'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_find.py', 'test.test_find', '', 'test_find_inverted'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_find.py', 'test.test_find', '', 'test_find'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_subprocess.py', 'test.test_subprocess', '', 'test_popen'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_util.py', 'test.test_util', '', 'test_check_output_exit_code'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_subprocess.py', 'test.test_subprocess', '', 'test_exception']]"
Axelrod,https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/interaction_utils.py,TestMatch,test_compute_normalised_state_distribution,"normalized_count = Counter({key: value / total for (key, value) in interactions_count.items()})","tmp_DictComp0 = dict()
for (key, value) in interactions_count.items():
    tmp_DictComp0[key] = value / total

normalized_count = Counter(tmp_DictComp0)
",1,"[['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_interaction_utils.py', 'axelrod.tests.unit.test_interaction_utils', 'TestMatch', 'test_compute_normalised_state_distribution']]"
Axelrod,https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/strategies/lookerup.py,TestLookupTable,test_from_pattern,"new_table = {Plays(*key): value for (key, value) in new_table.items()}","tmp_DictComp0 = dict()
for (key, value) in new_table.items():
    tmp_DictComp0[Plays(*key)] = value

new_table = tmp_DictComp0
",1,"[['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/strategies/test_lookerup.py', 'axelrod.tests.strategies.test_lookerup', 'TestLookupTableHelperFunctions', 'test_make_keys_into_plays_always_returns_new_dict'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/strategies/test_lookerup.py', 'axelrod.tests.strategies.test_lookerup', 'TestLookupTableHelperFunctions', 'test_make_keys_into_plays'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/strategies/test_lookerup.py', 'axelrod.tests.strategies.test_lookerup', 'TestLookupTable', 'test_from_pattern']]"
forseti-security,https://github.com/forseti-security/forseti-security/tree/master/google/cloud/forseti/services/scanner/dao.py,ScannerDaoTest,test_convert_sqlalchemy_object_to_dict,"return {c.key: getattr(sqlalchemy_obj, c.key) for c in inspect(sqlalchemy_obj).mapper.column_attrs}","tmp_DictComp0 = dict()
for c in inspect(sqlalchemy_obj).mapper.column_attrs:
    tmp_DictComp0[c.key] = getattr(sqlalchemy_obj, c.key)

return tmp_DictComp0
",1,"[['https://github.com/forseti-security/forseti-security/tree/master/tests/services/scanner/scanner_dao_test.py', 'tests.services.scanner.scanner_dao_test', 'ScannerDaoTest', 'test_convert_sqlalchemy_object_to_dict']]"
dynaconf,https://github.com/rochacbruno/dynaconf/tree/master/dynaconf/loaders/env_loader.py,,test_backwards_compat_using_env_argument,"data = {key[trim_len:]: parse_conf_data(data, tomlfy=True, box_settings=obj) for (key, data) in environ.items() if key.startswith(env_) and (not (ignore_unknown and key[trim_len:] not in known_keys))}","tmp_DictComp0 = dict()
for (key, data) in environ.items():
    if key.startswith(env_) and (not (ignore_unknown and key[trim_len:] not in known_keys)):
        tmp_DictComp0[key[trim_len:]] = parse_conf_data(data, tomlfy=True, box_settings=obj)

data = tmp_DictComp0
",1,"[['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_env_loader.py', 'tests.test_env_loader', '', 'test_can_load_in_to_dict'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_env_loader.py', 'tests.test_env_loader', '', 'test_env_is_not_str_raises'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_env_loader.py', 'tests.test_env_loader', '', 'test_filtering_unknown_variables_with_prefix'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_env_loader.py', 'tests.test_env_loader', '', 'test_filtering_unknown_variables'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_env_loader.py', 'tests.test_env_loader', '', 'test_empty_string_prefix'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_env_loader.py', 'tests.test_env_loader', '', 'test_none_as_string_prefix'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_env_loader.py', 'tests.test_env_loader', '', 'test_no_prefix'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_env_loader.py', 'tests.test_env_loader', '', 'test_backwards_compat_using_env_argument']]"
dynaconf,https://github.com/rochacbruno/dynaconf/tree/master/dynaconf/loaders/toml_loader.py,,test_encode_nulls,"return {key: encode_nulls(value) for (key, value) in data.items()}","tmp_DictComp0 = dict()
for (key, value) in data.items():
    tmp_DictComp0[key] = encode_nulls(value)

return tmp_DictComp0
",1,"[['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_toml_loader.py', 'tests.test_toml_loader', '', 'test_encode_nulls']]"
dynaconf,https://github.com/rochacbruno/dynaconf/tree/master/dynaconf/loaders/redis_loader.py,,test_redis_not_configured,"redis_data = {upperfy(key): unparse_conf_data(value) for (key, value) in data.items()}","
redis_data = dict()
for (key, value) in data.items():
    redis_data[upperfy(key)] = unparse_conf_data(value)
",1,"[['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_redis.py', 'tests.test_redis', '', 'test_redis_not_configured']]"
dynaconf,https://github.com/rochacbruno/dynaconf/tree/master/dynaconf/vendor_src/dotenv/cli.py,,test_help,"dotenv_as_dict = {to_env(k): to_env(v) for (k, v) in dotenv_values(file).items() if v is not None}","
dotenv_as_dict = dict()
for (k, v) in dotenv_values(file).items():
    if v is not None:
        dotenv_as_dict[to_env(k)] = to_env(v)
",1,"[['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_cli.py', 'tests.test_cli', '', 'test_list_with_missing_key'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_cli.py', 'tests.test_cli', '', 'test_banner'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_cli.py', 'tests.test_cli', '', 'test_instance_import_error'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_cli.py', 'tests.test_cli', '', 'test_list_with_key'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_cli.py', 'tests.test_cli', '', 'test_list_with_invalid_key'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_cli.py', 'tests.test_cli', '', 'test_init_with_env_warns'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_cli.py', 'tests.test_cli', '', 'test_instance_pypath_error'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_cli.py', 'tests.test_cli', '', 'test_list_export_json'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_cli.py', 'tests.test_cli', '', 'test_validate'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_cli.py', 'tests.test_cli', '', 'test_init_with_instance_raises'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_cli.py', 'tests.test_cli', '', 'test_list_with_all'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_cli.py', 'tests.test_cli', '', 'test_list_with_instance'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_cli.py', 'tests.test_cli', '', 'test_list'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_cli.py', 'tests.test_cli', '', 'test_list_with_key_export_json'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_cli.py', 'tests.test_cli', '', 'test_list_with_instance_from_env'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_cli.py', 'tests.test_cli', '', 'test_instance_attribute_error'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_cli.py', 'tests.test_cli', '', 'test_version'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_cli.py', 'tests.test_cli', '', 'test_help']]"
dynaconf,https://github.com/rochacbruno/dynaconf/tree/master/dynaconf/vendor/dotenv/cli.py,,test_help,"C = {to_env(C): to_env(A) for (C, A) in dotenv_values(B).items() if A is not None}","tmp_DictComp0 = dict()
for (C, A) in dotenv_values(B).items():
    if A is not None:
        tmp_DictComp0[to_env(C)] = to_env(A)

C = tmp_DictComp0
",1,"[['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_cli.py', 'tests.test_cli', '', 'test_list_with_missing_key'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_cli.py', 'tests.test_cli', '', 'test_banner'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_cli.py', 'tests.test_cli', '', 'test_instance_import_error'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_cli.py', 'tests.test_cli', '', 'test_list_with_key'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_cli.py', 'tests.test_cli', '', 'test_list_with_invalid_key'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_cli.py', 'tests.test_cli', '', 'test_init_with_env_warns'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_cli.py', 'tests.test_cli', '', 'test_instance_pypath_error'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_cli.py', 'tests.test_cli', '', 'test_list_export_json'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_cli.py', 'tests.test_cli', '', 'test_validate'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_cli.py', 'tests.test_cli', '', 'test_init_with_instance_raises'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_cli.py', 'tests.test_cli', '', 'test_list_with_all'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_cli.py', 'tests.test_cli', '', 'test_list_with_instance'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_cli.py', 'tests.test_cli', '', 'test_list'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_cli.py', 'tests.test_cli', '', 'test_list_with_key_export_json'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_cli.py', 'tests.test_cli', '', 'test_list_with_instance_from_env'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_cli.py', 'tests.test_cli', '', 'test_instance_attribute_error'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_cli.py', 'tests.test_cli', '', 'test_version'], ['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_cli.py', 'tests.test_cli', '', 'test_help']]"
DataProfiler,https://github.com/capitalone/DataProfiler/tree/master/dataprofiler/labelers/classification_report_utils.py,TestClassificationReport,test_classification_report,report_dict = {label[0]: label[1:] for label in rows},"
report_dict = dict()
for label in rows:
    report_dict[label[0]] = label[1:]
",1,"[['https://github.com/capitalone/DataProfiler/tree/master/dataprofiler/tests/labelers/test_classification_report_utils.py', 'dataprofiler.tests.labelers.test_classification_report_utils', 'TestClassificationReport', 'test_print_classification_report'], ['https://github.com/capitalone/DataProfiler/tree/master/dataprofiler/tests/labelers/test_classification_report_utils.py', 'dataprofiler.tests.labelers.test_classification_report_utils', 'TestClassificationReport', 'test_classification_report']]"
DataProfiler,https://github.com/capitalone/DataProfiler/tree/master/dataprofiler/profilers/unstructured_text_profile.py,TestUnstructuredTextProfile,test_diff_profiles,"self_word_count = {k.lower(): v for (k, v) in self_word_count.items()}","tmp_DictComp0 = dict()
for (k, v) in self_word_count.items():
    tmp_DictComp0[k.lower()] = v

self_word_count = tmp_DictComp0
",1,"[['https://github.com/capitalone/DataProfiler/tree/master/dataprofiler/tests/profilers/test_unstructured_text_profile.py', 'dataprofiler.tests.profilers.test_unstructured_text_profile', 'TestUnstructuredTextProfile', 'test_diff_profiles']]"
DataProfiler,https://github.com/capitalone/DataProfiler/tree/master/dataprofiler/profilers/unstructured_text_profile.py,TestUnstructuredTextProfile,test_diff_profiles,"other_word_count = {k.lower(): v for (k, v) in other_word_count.items()}","tmp_DictComp0 = dict()
for (k, v) in other_word_count.items():
    tmp_DictComp0[k.lower()] = v

other_word_count = tmp_DictComp0
",1,"[['https://github.com/capitalone/DataProfiler/tree/master/dataprofiler/tests/profilers/test_unstructured_text_profile.py', 'dataprofiler.tests.profilers.test_unstructured_text_profile', 'TestUnstructuredTextProfile', 'test_diff_profiles']]"
goatools,https://github.com/tanghaibao/goatools/tree/master/tests/utils.py,,test_semantic_similarity,return {o.item_id: o for o in godag.values()},"tmp_DictComp0 = dict()
for o in godag.values():
    tmp_DictComp0[o.item_id] = o

return tmp_DictComp0
",1,"[['https://github.com/tanghaibao/goatools/tree/master/tests/test_semantic_faster.py', 'tests.test_semantic_faster', '', 'test_semantic_similarity']]"
goatools,https://github.com/tanghaibao/goatools/tree/master/goatools/associations.py,,test_i96,"kws_ncbi = {k: v for (k, v) in kws.items() if k in AnnoOptions.keys_exp}","
kws_ncbi = dict()
for (k, v) in kws.items():
    if k in AnnoOptions.keys_exp:
        kws_ncbi[k] = v
",1,"[['https://github.com/tanghaibao/goatools/tree/master/tests/test_i96_goea_ncbi.py', 'tests.test_i96_goea_ncbi', '', 'test_i96']]"
goatools,https://github.com/tanghaibao/goatools/tree/master/goatools/go_enrichment.py,,test_bonferroni,"kws['fld2col_widths'] = {f: objprt.default_fld2col_widths.get(f, 8) for f in prt_flds}","
kws['fld2col_widths'] = dict()
for f in prt_flds:
    kws['fld2col_widths'][f] = objprt.default_fld2col_widths.get(f, 8)
",1,"[['https://github.com/tanghaibao/goatools/tree/master/tests/test_goea_local.py', 'tests.test_goea_local', '', 'test_goea_bonferroni'], ['https://github.com/tanghaibao/goatools/tree/master/tests/test_goea_statsmodels.py', 'tests.test_goea_statsmodels', '', 'test_goea_statsmodels'], ['https://github.com/tanghaibao/goatools/tree/master/tests/test_goea_rpt_bonferroni.py', 'tests.test_goea_rpt_bonferroni', '', 'test_bonferroni']]"
goatools,https://github.com/tanghaibao/goatools/tree/master/goatools/anno/factory.py,,test_update_association,kws_ncbi = {k: kws[k] for k in Gene2GoReader.exp_kws.intersection(kws.keys())},"
kws_ncbi = dict()
for k in Gene2GoReader.exp_kws.intersection(kws.keys()):
    kws_ncbi[k] = kws[k]
",1,"[['https://github.com/tanghaibao/goatools/tree/master/tests/test_update_association_compare.py', 'tests.test_update_association_compare', '', 'test_update_association']]"
goatools,https://github.com/tanghaibao/goatools/tree/master/goatools/anno/factory.py,,test_update_association,kws_gaf = {k: kws[k] for k in GafReader.exp_kws.intersection(kws.keys())},"
kws_gaf = dict()
for k in GafReader.exp_kws.intersection(kws.keys()):
    kws_gaf[k] = kws[k]
",1,"[['https://github.com/tanghaibao/goatools/tree/master/tests/test_update_association_compare.py', 'tests.test_update_association_compare', '', 'test_update_association']]"
goatools,https://github.com/tanghaibao/goatools/tree/master/goatools/anno/factory.py,,test_update_association,kws_gpad = {k: kws[k] for k in GpadReader.exp_kws.intersection(kws.keys())},"
kws_gpad = dict()
for k in GpadReader.exp_kws.intersection(kws.keys()):
    kws_gpad[k] = kws[k]
",1,"[['https://github.com/tanghaibao/goatools/tree/master/tests/test_update_association_compare.py', 'tests.test_update_association_compare', '', 'test_update_association']]"
goatools,https://github.com/tanghaibao/goatools/tree/master/goatools/anno/factory.py,,test_update_association,kws_id2go = {k: kws[k] for k in IdToGosReader.exp_kws.intersection(kws.keys())},"
kws_id2go = dict()
for k in IdToGosReader.exp_kws.intersection(kws.keys()):
    kws_id2go[k] = kws[k]
",1,"[['https://github.com/tanghaibao/goatools/tree/master/tests/test_update_association_compare.py', 'tests.test_update_association_compare', '', 'test_update_association']]"
goatools,https://github.com/tanghaibao/goatools/tree/master/goatools/anno/update_association.py,,test_update_association,_go2obj_assc = {go: go2obj[go] for go in _goids_assoc_cur},"
_go2obj_assc = dict()
for go in _goids_assoc_cur:
    _go2obj_assc[go] = go2obj[go]
",1,"[['https://github.com/tanghaibao/goatools/tree/master/tests/test_update_association_compare.py', 'tests.test_update_association_compare', '', 'test_update_association']]"
goatools,https://github.com/tanghaibao/goatools/tree/master/goatools/goea/go_enrichment_ns.py,,test_goea_quiet,"ns2results = {ns: o.run_study(study_ids, **kws) for (ns, o) in sorted(self.ns2objgoea.items())}","
ns2results = dict()
for (ns, o) in sorted(self.ns2objgoea.items()):
    ns2results[ns] = o.run_study(study_ids, **kws)
",1,"[['https://github.com/tanghaibao/goatools/tree/master/tests/test_goea_quiet.py', 'tests.test_goea_quiet', '', 'test_goea_quiet']]"
goatools,https://github.com/tanghaibao/goatools/tree/master/goatools/godag/go_tasks.py,,test_get_parent,"return {e: es for (e, es) in id2parents.items() if es}","tmp_DictComp0 = dict()
for (e, es) in id2parents.items():
    if es:
        tmp_DictComp0[e] = es

return tmp_DictComp0
",1,"[['https://github.com/tanghaibao/goatools/tree/master/tests/test_get_parents.py', 'tests.test_get_parents', '', 'test_get_parent']]"
goatools,https://github.com/tanghaibao/goatools/tree/master/goatools/godag/go_tasks.py,,test_get_children,"return {e: es for (e, es) in id2children.items() if es}","tmp_DictComp0 = dict()
for (e, es) in id2children.items():
    if es:
        tmp_DictComp0[e] = es

return tmp_DictComp0
",1,"[['https://github.com/tanghaibao/goatools/tree/master/tests/test_get_children.py', 'tests.test_get_children', '', 'test_get_children']]"
oio-sds,https://github.com/open-io/oio-sds/tree/master/oio/container/client.py,ContainerClientTest,test_extract_chunk_qualities,"qualities = {k[len(CHUNK_SYSMETA_PREFIX):]: json.loads(v) for (k, v) in properties.items() if k.startswith(CHUNK_SYSMETA_PREFIX)}","
qualities = dict()
for (k, v) in properties.items():
    if k.startswith(CHUNK_SYSMETA_PREFIX):
        qualities[k[len(CHUNK_SYSMETA_PREFIX):]] = json.loads(v)
",1,"[['https://github.com/open-io/oio-sds/tree/master/tests/unit/api/test_container_client.py', 'tests.unit.api.test_container_client', 'ContainerClientTest', 'test_extract_chunk_qualities_raw'], ['https://github.com/open-io/oio-sds/tree/master/tests/unit/api/test_container_client.py', 'tests.unit.api.test_container_client', 'ContainerClientTest', 'test_extract_chunk_qualities']]"
oio-sds,https://github.com/open-io/oio-sds/tree/master/oio/container/client.py,ContainerClientTest,test_extract_chunk_qualities,properties = {x['key']: x['value'] for x in properties},"tmp_DictComp0 = dict()
for x in properties:
    tmp_DictComp0[x['key']] = x['value']

properties = tmp_DictComp0
",1,"[['https://github.com/open-io/oio-sds/tree/master/tests/unit/api/test_container_client.py', 'tests.unit.api.test_container_client', 'ContainerClientTest', 'test_extract_chunk_qualities_raw'], ['https://github.com/open-io/oio-sds/tree/master/tests/unit/api/test_container_client.py', 'tests.unit.api.test_container_client', 'ContainerClientTest', 'test_extract_chunk_qualities']]"
oio-sds,https://github.com/open-io/oio-sds/tree/master/oio/common/http_urllib3.py,TestUtils,test_pool_manager_parameters,"kw = {k: v for (k, v) in kwargs.items() if k in URLLIB3_POOLMANAGER_KWARGS[4:]}","
kw = dict()
for (k, v) in kwargs.items():
    if k in URLLIB3_POOLMANAGER_KWARGS[4:]:
        kw[k] = v
",1,"[['https://github.com/open-io/oio-sds/tree/master/tests/unit/api/test_utils.py', 'tests.unit.api.test_utils', 'TestUtils', 'test_pool_manager_parameters']]"
cubes,https://github.com/DataBrewery/cubes/tree/master/cubes/metadata/attributes.py,ExpressionUnitTestCase,test_sorted_attributes,remaining = {attr: all_dependencies[attr] for attr in seen if attr not in bases},"
remaining = dict()
for attr in seen:
    if attr not in bases:
        remaining[attr] = all_dependencies[attr]
",1,"[['https://github.com/DataBrewery/cubes/tree/master/tests/test_expressions.py', 'tests.test_expressions', 'ExpressionUnitTestCase', 'test_sorted_circular'], ['https://github.com/DataBrewery/cubes/tree/master/tests/test_expressions.py', 'tests.test_expressions', 'ExpressionUnitTestCase', 'test_sorted_unknown'], ['https://github.com/DataBrewery/cubes/tree/master/tests/test_expressions.py', 'tests.test_expressions', 'ExpressionUnitTestCase', 'test_sorted_attributes_base'], ['https://github.com/DataBrewery/cubes/tree/master/tests/test_expressions.py', 'tests.test_expressions', 'ExpressionUnitTestCase', 'test_sorted_attributes']]"
ariadne,https://github.com/mirumee/ariadne/tree/master/ariadne/format_error.py,,test_incomplete_traceback_is_handled_by_context_extractor,"return {key: repr(value) for (key, value) in tb_last.tb_frame.f_locals.items()}","tmp_DictComp0 = dict()
for (key, value) in tb_last.tb_frame.f_locals.items():
    tmp_DictComp0[key] = repr(value)

return tmp_DictComp0
",1,"[['https://github.com/mirumee/ariadne/tree/master/tests/test_error_formatting.py', 'tests.test_error_formatting', '', 'test_incomplete_traceback_is_handled_by_context_extractor']]"
ariadne,https://github.com/mirumee/ariadne/tree/master/ariadne/contrib/tracing/opentracing.py,,test_resolver_args_with_uploaded_files_from_wsgi_are_copied_for_tracing,"return {k: copy_args_for_tracing(v) for (k, v) in value.items()}","tmp_DictComp0 = dict()
for (k, v) in value.items():
    tmp_DictComp0[k] = copy_args_for_tracing(v)

return tmp_DictComp0
",1,"[['https://github.com/mirumee/ariadne/tree/master/tests/tracing/test_opentracing_sync.py', 'tests.tracing.test_opentracing_sync', '', 'test_resolver_args_with_uploaded_files_from_wsgi_are_copied_for_tracing']]"
mitmproxy,https://github.com/mitmproxy/mitmproxy/tree/master/mitmproxy/utils/debug.py,,test_dump_stacks,id2name = {th.ident: th.name for th in threading.enumerate()},"
id2name = dict()
for th in threading.enumerate():
    id2name[th.ident] = th.name
",1,"[['https://github.com/mitmproxy/mitmproxy/tree/master/test/mitmproxy/utils/test_debug.py', 'test.mitmproxy.utils.test_debug', '', 'test_dump_stacks']]"
apprise,https://github.com/caronc/apprise/tree/master/apprise/plugins/NotifyNextcloud.py,,test_plugin_nextcloud_edge_cases,"params = {'+{}'.format(k): v for (k, v) in self.headers.items()}","
params = dict()
for (k, v) in self.headers.items():
    params['+{}'.format(k)] = v
",1,"[['https://github.com/caronc/apprise/tree/master/test/test_plugin_nextcloud.py', 'test.test_plugin_nextcloud', '', 'test_plugin_nextcloud_edge_cases']]"
apprise,https://github.com/caronc/apprise/tree/master/apprise/plugins/NotifyEmail.py,,test_plugin_email_url_escaping,"results['headers'] = {NotifyBase.unquote(x): NotifyBase.unquote(y) for (x, y) in results['qsd+'].items()}","tmp_DictComp0 = dict()
for (x, y) in results['qsd+'].items():
    tmp_DictComp0[NotifyBase.unquote(x)] = NotifyBase.unquote(y)

results['headers'] = tmp_DictComp0
",1,"[['https://github.com/caronc/apprise/tree/master/test/test_plugin_email.py', 'test.test_plugin_email', '', 'test_plugin_email_url_escaping']]"
apprise,https://github.com/caronc/apprise/tree/master/apprise/config/ConfigBase.py,,test_apprise_config_template_parse,"matches = {k[1:]: str(v) for (k, v) in tokens.items() if k.startswith(prefix)}","
matches = dict()
for (k, v) in tokens.items():
    if k.startswith(prefix):
        matches[k[1:]] = str(v)
",1,"[['https://github.com/caronc/apprise/tree/master/test/test_apprise_config.py', 'test.test_apprise_config', '', 'test_apprise_config_template_parse']]"
apprise,https://github.com/caronc/apprise/tree/master/apprise/config/ConfigBase.py,,test_apprise_config_template_parse,"tokens = {k: v for (k, v) in tokens.items() if not k.startswith(prefix)}","tmp_DictComp0 = dict()
for (k, v) in tokens.items():
    if not k.startswith(prefix):
        tmp_DictComp0[k] = v

tokens = tmp_DictComp0
",1,"[['https://github.com/caronc/apprise/tree/master/test/test_apprise_config.py', 'test.test_apprise_config', '', 'test_apprise_config_template_parse']]"
apprise,https://github.com/caronc/apprise/tree/master/apprise/config/ConfigHTTP.py,,test_config_http,"params.update({'+{}'.format(k): v for (k, v) in self.headers.items()})","tmp_DictComp0 = dict()
for (k, v) in self.headers.items():
    tmp_DictComp0['+{}'.format(k)] = v

params.update(tmp_DictComp0)
",1,"[['https://github.com/caronc/apprise/tree/master/test/test_config_http.py', 'test.test_config_http', '', 'test_config_http']]"
apprise,https://github.com/caronc/apprise/tree/master/apprise/attachment/AttachHTTP.py,,test_attach_http,"params.update({'+{}'.format(k): v for (k, v) in self.headers.items()})","tmp_DictComp0 = dict()
for (k, v) in self.headers.items():
    tmp_DictComp0['+{}'.format(k)] = v

params.update(tmp_DictComp0)
",1,"[['https://github.com/caronc/apprise/tree/master/test/test_attach_http.py', 'test.test_attach_http', '', 'test_attach_http_query_string_dictionary'], ['https://github.com/caronc/apprise/tree/master/test/test_attach_http.py', 'test.test_attach_http', '', 'test_attach_http']]"
honcho,https://github.com/nickstenning/honcho/tree/master/honcho/command.py,,test_port_precedence,"from_os_env = _compact({k: os.environ.get(v) for (k, v) in ENV_ARGS.items()})","tmp_DictComp0 = dict()
for (k, v) in ENV_ARGS.items():
    tmp_DictComp0[k] = os.environ.get(v)

from_os_env = _compact(tmp_DictComp0)
",1,"[['https://github.com/nickstenning/honcho/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_procfile_precedence'], ['https://github.com/nickstenning/honcho/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_port_precedence']]"
honcho,https://github.com/nickstenning/honcho/tree/master/honcho/command.py,,test_port_precedence,"from_env = _compact({k: env.get(v) for (k, v) in ENV_ARGS.items()})","tmp_DictComp0 = dict()
for (k, v) in ENV_ARGS.items():
    tmp_DictComp0[k] = env.get(v)

from_env = _compact(tmp_DictComp0)
",1,"[['https://github.com/nickstenning/honcho/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_procfile_precedence'], ['https://github.com/nickstenning/honcho/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_port_precedence']]"
sacred,https://github.com/IDSIA/sacred/tree/master/sacred/observers/mongo.py,,test_force_bson_encodable_substitutes_illegal_value_with_strings,"return {force_valid_bson_key(k): force_bson_encodeable(v) for (k, v) in obj.items()}","tmp_DictComp0 = dict()
for (k, v) in obj.items():
    tmp_DictComp0[force_valid_bson_key(k)] = force_bson_encodeable(v)

return tmp_DictComp0
",1,"[['https://github.com/IDSIA/sacred/tree/master/tests/test_observers/test_mongo_observer.py', 'tests.test_observers.test_mongo_observer', '', 'test_force_bson_encodable_doesnt_change_valid_document'], ['https://github.com/IDSIA/sacred/tree/master/tests/test_observers/test_mongo_observer.py', 'tests.test_observers.test_mongo_observer', '', 'test_force_bson_encodable_substitutes_illegal_value_with_strings']]"
sacred,https://github.com/IDSIA/sacred/tree/master/sacred/observers/tinydb_hashfs/tinydb_hashfs.py,,test_fetch_files_function,source_files = {x[0]: x[2] for x in ent['experiment']['sources']},"
source_files = dict()
for x in ent['experiment']['sources']:
    source_files[x[0]] = x[2]
",1,"[['https://github.com/IDSIA/sacred/tree/master/tests/test_observers/test_tinydb_reader.py', 'tests.test_observers.test_tinydb_reader', '', 'test_fetch_files_function']]"
sacred,https://github.com/IDSIA/sacred/tree/master/sacred/observers/tinydb_hashfs/tinydb_hashfs.py,,test_fetch_files_function,resource_files = {x[0]: x[2] for x in ent['resources']},"
resource_files = dict()
for x in ent['resources']:
    resource_files[x[0]] = x[2]
",1,"[['https://github.com/IDSIA/sacred/tree/master/tests/test_observers/test_tinydb_reader.py', 'tests.test_observers.test_tinydb_reader', '', 'test_fetch_files_function']]"
sacred,https://github.com/IDSIA/sacred/tree/master/sacred/observers/tinydb_hashfs/tinydb_hashfs.py,,test_fetch_files_function,artifact_files = {x[0]: x[3] for x in ent['artifacts']},"
artifact_files = dict()
for x in ent['artifacts']:
    artifact_files[x[0]] = x[3]
",1,"[['https://github.com/IDSIA/sacred/tree/master/tests/test_observers/test_tinydb_reader.py', 'tests.test_observers.test_tinydb_reader', '', 'test_fetch_files_function']]"
sacred,https://github.com/IDSIA/sacred/tree/master/sacred/config/custom_containers.py,,test_nested_readonly_containers,"return ReadOnlyDict({k: make_read_only(v) for (k, v) in o.items()})","tmp_DictComp0 = dict()
for (k, v) in o.items():
    tmp_DictComp0[k] = make_read_only(v)

return ReadOnlyDict(tmp_DictComp0)
",1,"[['https://github.com/IDSIA/sacred/tree/master/tests/test_config/test_readonly_containers.py', 'tests.test_config.test_readonly_containers', '', 'test_deepcopy_on_nested_readonly_dict'], ['https://github.com/IDSIA/sacred/tree/master/tests/test_config/test_readonly_containers.py', 'tests.test_config.test_readonly_containers', '', 'test_copy_on_nested_readonly_list'], ['https://github.com/IDSIA/sacred/tree/master/tests/test_config/test_readonly_containers.py', 'tests.test_config.test_readonly_containers', '', 'test_deepcopy_on_nested_readonly_list_can_be_mutated'], ['https://github.com/IDSIA/sacred/tree/master/tests/test_config/test_readonly_containers.py', 'tests.test_config.test_readonly_containers', '', 'test_deepcopy_on_readonly_dict'], ['https://github.com/IDSIA/sacred/tree/master/tests/test_config/test_readonly_containers.py', 'tests.test_config.test_readonly_containers', '', 'test_copy_on_nested_readonly_dict_still_list'], ['https://github.com/IDSIA/sacred/tree/master/tests/test_config/test_readonly_containers.py', 'tests.test_config.test_readonly_containers', '', 'test_copy_on_nested_readonly_dict'], ['https://github.com/IDSIA/sacred/tree/master/tests/test_config/test_readonly_containers.py', 'tests.test_config.test_readonly_containers', '', 'test_deepcopy_on_readonly_list'], ['https://github.com/IDSIA/sacred/tree/master/tests/test_config/test_readonly_containers.py', 'tests.test_config.test_readonly_containers', '', 'test_readonly_list'], ['https://github.com/IDSIA/sacred/tree/master/tests/test_config/test_readonly_containers.py', 'tests.test_config.test_readonly_containers', '', 'test_nested_readonly_list'], ['https://github.com/IDSIA/sacred/tree/master/tests/test_config/test_readonly_containers.py', 'tests.test_config.test_readonly_containers', '', 'test_readonly_dict'], ['https://github.com/IDSIA/sacred/tree/master/tests/test_config/test_readonly_containers.py', 'tests.test_config.test_readonly_containers', '', 'test_deepcopy_on_nested_readonly_list'], ['https://github.com/IDSIA/sacred/tree/master/tests/test_config/test_readonly_containers.py', 'tests.test_config.test_readonly_containers', '', 'test_deepcopy_on_nested_readonly_dict_can_be_mutated'], ['https://github.com/IDSIA/sacred/tree/master/tests/test_config/test_readonly_containers.py', 'tests.test_config.test_readonly_containers', '', 'test_copy_on_nested_readonly_dict_still_raises'], ['https://github.com/IDSIA/sacred/tree/master/tests/test_config/test_readonly_containers.py', 'tests.test_config.test_readonly_containers', '', 'test_nested_readonly_dict'], ['https://github.com/IDSIA/sacred/tree/master/tests/test_config/test_readonly_containers.py', 'tests.test_config.test_readonly_containers', '', 'test_copy_on_readonly_list'], ['https://github.com/IDSIA/sacred/tree/master/tests/test_config/test_readonly_containers.py', 'tests.test_config.test_readonly_containers', '', 'test_copy_on_readonly_dict'], ['https://github.com/IDSIA/sacred/tree/master/tests/test_config/test_readonly_containers.py', 'tests.test_config.test_readonly_containers', '', 'test_nested_readonly_containers']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/otlLib/builder.py,BuilderTest,test_buildSinglePos_ValueFormat0,format1Mapping = {g: values[key] for g in glyphs},"
format1Mapping = dict()
for g in glyphs:
    format1Mapping[g] = values[key]
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/otlLib/builder_test.py', 'Tests.otlLib.builder_test', 'BuilderTest', 'test_buildSinglePos'], ['https://github.com/fonttools/fonttools/tree/master/Tests/otlLib/builder_test.py', 'Tests.otlLib.builder_test', 'BuilderTest', 'test_buildSinglePos_ValueFormat0']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/ttLib/tables/_n_a_m_e.py,NameTableTest,test_removeNames,"args = {argName: argValue for (argName, argValue) in (('nameID', nameID), ('platformID', platformID), ('platEncID', platEncID), ('langID', langID)) if argValue is not None}","
args = dict()
for (argName, argValue) in (('nameID', nameID), ('platformID', platformID), ('platEncID', platEncID), ('langID', langID)):
    if argValue is not None:
        args[argName] = argValue
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/_n_a_m_e_test.py', 'Tests.ttLib.tables._n_a_m_e_test', 'NameTableTest', 'test_removeNames']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/ttLib/tables/TupleVariation.py,TupleVariationTest,test_compileTupleVariationStore_roundTrip_cvar,compiledPoints = {pointSet: TupleVariation.compilePoints(pointSet) for pointSet in pointSetCount},"
compiledPoints = dict()
for pointSet in pointSetCount:
    compiledPoints[pointSet] = TupleVariation.compilePoints(pointSet)
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/TupleVariation_test.py', 'Tests.ttLib.tables.TupleVariation_test', 'TupleVariationTest', 'test_compileTupleVariationStore_roundTrip_gvar'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/TupleVariation_test.py', 'Tests.ttLib.tables.TupleVariation_test', 'TupleVariationTest', 'test_compileTupleVariationStore_noVariations'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/TupleVariation_test.py', 'Tests.ttLib.tables.TupleVariation_test', 'TupleVariationTest', 'test_compileTupleVariationStore_allVariationsRedundant'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/TupleVariation_test.py', 'Tests.ttLib.tables.TupleVariation_test', 'TupleVariationTest', 'test_compileTupleVariationStore_roundTrip_cvar']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/varLib/mutator.py,BuildTest,test_kerning_merging,"axes = {a.axisTag: (a.minValue, a.defaultValue, a.maxValue) for a in fvar.axes}","
axes = dict()
for a in fvar.axes:
    axes[a.axisTag] = (a.minValue, a.defaultValue, a.maxValue)
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/mutator_test.py', 'Tests.varLib.mutator_test', 'MutatorTest', 'test_varlib_mutator_CFF2'], ['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/varLib_test.py', 'Tests.varLib.varLib_test', 'BuildTest', 'test_kerning_merging']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/varLib/mutator.py,BuildTest,test_kerning_merging,"loc = {k: floatToFixedToFloat(v, 14) for (k, v) in loc.items()}","tmp_DictComp0 = dict()
for (k, v) in loc.items():
    tmp_DictComp0[k] = floatToFixedToFloat(v, 14)

loc = tmp_DictComp0
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/mutator_test.py', 'Tests.varLib.mutator_test', 'MutatorTest', 'test_varlib_mutator_CFF2'], ['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/varLib_test.py', 'Tests.varLib.varLib_test', 'BuildTest', 'test_kerning_merging']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/varLib/mutator.py,BuildTest,test_kerning_merging,"loc = {k: piecewiseLinearMap(v, maps[k]) for (k, v) in loc.items()}","tmp_DictComp0 = dict()
for (k, v) in loc.items():
    tmp_DictComp0[k] = piecewiseLinearMap(v, maps[k])

loc = tmp_DictComp0
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/mutator_test.py', 'Tests.varLib.mutator_test', 'MutatorTest', 'test_varlib_mutator_CFF2'], ['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/varLib_test.py', 'Tests.varLib.varLib_test', 'BuildTest', 'test_kerning_merging']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/varLib/interpolate_layout.py,InterpolateLayoutTest,test_varlib_interpolate_layout_GPOS_only_LookupType_2_class_pairs_diff2_val_ttf,"loc = {name: ds.axes[name].map_forward(v) for (name, v) in loc.items()}","tmp_DictComp0 = dict()
for (name, v) in loc.items():
    tmp_DictComp0[name] = ds.axes[name].map_forward(v)

loc = tmp_DictComp0
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/interpolate_layout_test.py', 'Tests.varLib.interpolate_layout_test', 'InterpolateLayoutTest', 'test_varlib_interpolate_layout_GPOS_only_LookupType_5_diff_val_ttf'], ['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/interpolate_layout_test.py', 'Tests.varLib.interpolate_layout_test', 'InterpolateLayoutTest', 'test_varlib_interpolate_layout_GPOS_only_LookupType_3_same_val_ttf'], ['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/interpolate_layout_test.py', 'Tests.varLib.interpolate_layout_test', 'InterpolateLayoutTest', 'test_varlib_interpolate_layout_GPOS_only_LookupType_2_spec_pairs_same_val_ttf'], ['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/interpolate_layout_test.py', 'Tests.varLib.interpolate_layout_test', 'InterpolateLayoutTest', 'test_varlib_interpolate_layout_GPOS_only_LookupType_1_diff2_val_ttf'], ['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/interpolate_layout_test.py', 'Tests.varLib.interpolate_layout_test', 'InterpolateLayoutTest', 'test_varlib_interpolate_layout_GPOS_only_LookupType_2_class_pairs_diff_val_ttf'], ['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/interpolate_layout_test.py', 'Tests.varLib.interpolate_layout_test', 'InterpolateLayoutTest', 'test_varlib_interpolate_layout_GPOS_only_LookupType_2_spec_pairs_diff_val_ttf'], ['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/interpolate_layout_test.py', 'Tests.varLib.interpolate_layout_test', 'InterpolateLayoutTest', 'test_varlib_interpolate_layout_no_GSUB_ttf'], ['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/interpolate_layout_test.py', 'Tests.varLib.interpolate_layout_test', 'InterpolateLayoutTest', 'test_varlib_interpolate_layout_GPOS_only_LookupType_1_diff_val_ttf'], ['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/interpolate_layout_test.py', 'Tests.varLib.interpolate_layout_test', 'InterpolateLayoutTest', 'test_varlib_interpolate_layout_GPOS_only_LookupType_3_diff_val_ttf'], ['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/interpolate_layout_test.py', 'Tests.varLib.interpolate_layout_test', 'InterpolateLayoutTest', 'test_varlib_interpolate_layout_GPOS_only_LookupType_2_class_pairs_same_val_ttf'], ['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/interpolate_layout_test.py', 'Tests.varLib.interpolate_layout_test', 'InterpolateLayoutTest', 'test_varlib_interpolate_layout_GPOS_only_LookupType_4_same_val_ttf'], ['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/interpolate_layout_test.py', 'Tests.varLib.interpolate_layout_test', 'InterpolateLayoutTest', 'test_varlib_interpolate_layout_GPOS_only_size_feat_same_val_ttf'], ['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/interpolate_layout_test.py', 'Tests.varLib.interpolate_layout_test', 'InterpolateLayoutTest', 'test_varlib_interpolate_layout_GPOS_only_LookupType_6_diff_val_ttf'], ['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/interpolate_layout_test.py', 'Tests.varLib.interpolate_layout_test', 'InterpolateLayoutTest', 'test_varlib_interpolate_layout_GPOS_only_LookupType_4_diff_val_ttf'], ['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/interpolate_layout_test.py', 'Tests.varLib.interpolate_layout_test', 'InterpolateLayoutTest', 'test_varlib_interpolate_layout_GPOS_only_LookupType_6_same_val_ttf'], ['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/interpolate_layout_test.py', 'Tests.varLib.interpolate_layout_test', 'InterpolateLayoutTest', 'test_varlib_interpolate_layout_GPOS_only_LookupType_1_same_val_ttf'], ['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/interpolate_layout_test.py', 'Tests.varLib.interpolate_layout_test', 'InterpolateLayoutTest', 'test_varlib_interpolate_layout_GSUB_only_ttf'], ['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/interpolate_layout_test.py', 'Tests.varLib.interpolate_layout_test', 'InterpolateLayoutTest', 'test_varlib_interpolate_layout_GPOS_only_LookupType_2_spec_pairs_diff2_val_ttf'], ['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/interpolate_layout_test.py', 'Tests.varLib.interpolate_layout_test', 'InterpolateLayoutTest', 'test_varlib_interpolate_layout_GPOS_only_LookupType_5_same_val_ttf'], ['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/interpolate_layout_test.py', 'Tests.varLib.interpolate_layout_test', 'InterpolateLayoutTest', 'test_varlib_interpolate_layout_GSUB_only_no_axes_ttf'], ['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/interpolate_layout_test.py', 'Tests.varLib.interpolate_layout_test', 'InterpolateLayoutTest', 'test_varlib_interpolate_layout_GPOS_only_LookupType_2_class_pairs_diff2_val_ttf']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/varLib/instancer/names.py,,test_updateNameTable_elided_axisValues,fvarDefaults = {a.axisTag: a.defaultValue for a in fvar.axes},"
fvarDefaults = dict()
for a in fvar.axes:
    fvarDefaults[a.axisTag] = a.defaultValue
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/instancer/names_test.py', 'Tests.varLib.instancer.names_test', '', 'test_updateNameTable_format4_axisValues'], ['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/instancer/names_test.py', 'Tests.varLib.instancer.names_test', '', 'test_updateNameTable_existing_subfamily_name_is_not_regular'], ['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/instancer/names_test.py', 'Tests.varLib.instancer.names_test', '', 'test_updatetNameTable_axis_order'], ['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/instancer/names_test.py', 'Tests.varLib.instancer.names_test', '', 'test_updateNameTable_missing_stat'], ['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/instancer/names_test.py', 'Tests.varLib.instancer.names_test', '', 'test_updateNameTable_elided_axisValues']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/colorLib/unbuilder.py,,test_unbuildColrV1_noLayers,return {rec.BaseGlyph: unbuilder.unbuildPaint(rec.Paint) for rec in baseGlyphList.BaseGlyphPaintRecord},"tmp_DictComp0 = dict()
for rec in baseGlyphList.BaseGlyphPaintRecord:
    tmp_DictComp0[rec.BaseGlyph] = unbuilder.unbuildPaint(rec.Paint)

return tmp_DictComp0
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/colorLib/unbuilder_test.py', 'Tests.colorLib.unbuilder_test', '', 'test_unbuildColrV1'], ['https://github.com/fonttools/fonttools/tree/master/Tests/colorLib/unbuilder_test.py', 'Tests.colorLib.unbuilder_test', '', 'test_unbuildColrV1_noLayers']]"
neat-python,https://github.com/CodeReclaimers/neat-python/tree/master/neat/distributed.py,,test_DistributedEvaluator_primary_restrictions,"id2genome = {genome_id: genome for (genome_id, genome) in genomes}","
id2genome = dict()
for (genome_id, genome) in genomes:
    id2genome[genome_id] = genome
",1,"[['https://github.com/CodeReclaimers/neat-python/tree/master/tests/test_distributed.py', 'tests.test_distributed', '', 'test_DistributedEvaluator_primary_restrictions']]"
cantools,https://github.com/cantools/cantools/tree/master/cantools/subparsers/plot.py,CanToolsPlotUnittests,test_parse_user_input_absolute_time_output_formats,"kw = {a: getattr(first_timestamp, a) for a in attrs}","
kw = dict()
for a in attrs:
    kw[a] = getattr(first_timestamp, a)
",1,"[['https://github.com/cantools/cantools/tree/master/tests/test_plot_unittests.py', 'tests.test_plot_unittests', 'CanToolsPlotUnittests', 'test_parse_user_input_absolute_time'], ['https://github.com/cantools/cantools/tree/master/tests/test_plot_unittests.py', 'tests.test_plot_unittests', 'CanToolsPlotUnittests', 'test_parse_user_input_absolute_time_invalid_input'], ['https://github.com/cantools/cantools/tree/master/tests/test_plot_unittests.py', 'tests.test_plot_unittests', 'CanToolsPlotUnittests', 'test_parse_user_input_absolute_time_output_formats']]"
pint,https://github.com/hgrecco/pint/tree/master/pint/util.py,TestInferBaseUnit,test_volts,"return UnitsContainer({k: v for (k, v) in d.items() if v != 0})","tmp_DictComp0 = dict()
for (k, v) in d.items():
    if v != 0:
        tmp_DictComp0[k] = v

return UnitsContainer(tmp_DictComp0)
",1,"[['https://github.com/hgrecco/pint/tree/master/pint/testsuite/test_infer_base_unit.py', 'pint.testsuite.test_infer_base_unit', 'TestInferBaseUnit', 'test_infer_base_unit'], ['https://github.com/hgrecco/pint/tree/master/pint/testsuite/test_infer_base_unit.py', 'pint.testsuite.test_infer_base_unit', 'TestInferBaseUnit', 'test_units_adding_to_zero'], ['https://github.com/hgrecco/pint/tree/master/pint/testsuite/test_infer_base_unit.py', 'pint.testsuite.test_infer_base_unit', 'TestInferBaseUnit', 'test_volts']]"
pint,https://github.com/hgrecco/pint/tree/master/pint/util.py,TestParseHelper,test_basic,"ret = ParserHelper(ret.scale, {key.replace('__obra__', '[').replace('__cbra__', ']'): value for (key, value) in ret.items()}, non_int_type=non_int_type)","def my_comprehension_func(ret):
    tmp_DictComp0 = dict()
    for (key, value) in ret.items():
        tmp_DictComp0[key.replace('__obra__', '[').replace('__cbra__', ']')] = value
    return tmp_DictComp0

ret = ParserHelper(ret.scale, my_comprehension_func(ret), non_int_type=non_int_type)
",1,"[['https://github.com/hgrecco/pint/tree/master/pint/testsuite/test_util.py', 'pint.testsuite.test_util', 'TestParseHelper', 'test_basic']]"
pint,https://github.com/hgrecco/pint/tree/master/pint/numpy_func.py,TestNumPyFuncUtils,test_convert_to_consistent_units_with_dimensionality_error,"return (tuple((convert_arg(arg, pre_calc_units=pre_calc_units) for arg in args)), {key: convert_arg(arg, pre_calc_units=pre_calc_units) for (key, arg) in kwargs.items()})","tmp_DictComp0 = dict()
for (key, arg) in kwargs.items():
    tmp_DictComp0[key] = convert_arg(arg, pre_calc_units=pre_calc_units)

return (tuple((convert_arg(arg, pre_calc_units=pre_calc_units) for arg in args)), tmp_DictComp0)
",1,"[['https://github.com/hgrecco/pint/tree/master/pint/testsuite/test_numpy_func.py', 'pint.testsuite.test_numpy_func', 'TestNumPyFuncUtils', 'test_convert_to_consistent_units_with_pre_calc_units'], ['https://github.com/hgrecco/pint/tree/master/pint/testsuite/test_numpy_func.py', 'pint.testsuite.test_numpy_func', 'TestNumPyFuncUtils', 'test_convert_to_consistent_units_with_dimensionless'], ['https://github.com/hgrecco/pint/tree/master/pint/testsuite/test_numpy_func.py', 'pint.testsuite.test_numpy_func', 'TestNumPyFuncUtils', 'test_convert_to_consistent_units_without_pre_calc_units'], ['https://github.com/hgrecco/pint/tree/master/pint/testsuite/test_numpy_func.py', 'pint.testsuite.test_numpy_func', 'TestNumPyFuncUtils', 'test_convert_to_consistent_units_with_dimensionality_error']]"
pint,https://github.com/hgrecco/pint/tree/master/pint/context.py,,test_err_dimension_redefinition,"defaults = {str(k).strip(): to_num(v) for (k, v) in defaults}","tmp_DictComp0 = dict()
for (k, v) in defaults:
    tmp_DictComp0[str(k).strip()] = to_num(v)

defaults = tmp_DictComp0
",1,"[['https://github.com/hgrecco/pint/tree/master/pint/testsuite/test_contexts.py', 'pint.testsuite.test_contexts', '', 'test_err_to_base_unit'], ['https://github.com/hgrecco/pint/tree/master/pint/testsuite/test_contexts.py', 'pint.testsuite.test_contexts', 'TestContexts', 'test_parse_auto_inverse'], ['https://github.com/hgrecco/pint/tree/master/pint/testsuite/test_contexts.py', 'pint.testsuite.test_contexts', 'TestContexts', 'test_parse_define'], ['https://github.com/hgrecco/pint/tree/master/pint/testsuite/test_contexts.py', 'pint.testsuite.test_contexts', 'TestContexts', 'test_parse_parameterized'], ['https://github.com/hgrecco/pint/tree/master/pint/testsuite/test_contexts.py', 'pint.testsuite.test_contexts', '', 'test_err_prefix_redefinition'], ['https://github.com/hgrecco/pint/tree/master/pint/testsuite/test_contexts.py', 'pint.testsuite.test_contexts', 'TestContexts', 'test_parse_simple'], ['https://github.com/hgrecco/pint/tree/master/pint/testsuite/test_issues.py', 'pint.testsuite.test_issues', 'TestIssues', 'test_issue1062_issue1097'], ['https://github.com/hgrecco/pint/tree/master/pint/testsuite/test_contexts.py', 'pint.testsuite.test_contexts', '', 'test_err_dimension_redefinition']]"
pyowm,https://github.com/csparpa/pyowm/tree/master/pyowm/weatherapi25/weather.py,TestWeather,test_init_when_wind_is_none,wind_dict = {k: self.wnd[k] for k in self.wnd if self.wnd[k] is not None},"
wind_dict = dict()
for k in self.wnd:
    if self.wnd[k] is not None:
        wind_dict[k] = self.wnd[k]
",1,"[['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_weather.py', 'tests.unit.weatherapi25.test_weather', 'TestWeather', 'test_init_when_wind_is_none']]"
pyowm,https://github.com/csparpa/pyowm/tree/master/pyowm/weatherapi25/weather.py,TestWeather,test_init_when_wind_is_none,wind_dict = {k: self.wnd[k] for k in self.wnd if self.wnd[k] is not None},"
wind_dict = dict()
for k in self.wnd:
    if self.wnd[k] is not None:
        wind_dict[k] = self.wnd[k]
",1,"[['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_weather.py', 'tests.unit.weatherapi25.test_weather', 'TestWeather', 'test_init_when_wind_is_none']]"
pyowm,https://github.com/csparpa/pyowm/tree/master/pyowm/weatherapi25/weather.py,TestWeather,test_init_when_wind_is_none,wind_dict = {k: self.wnd[k] for k in self.wnd if self.wnd[k] is not None},"
wind_dict = dict()
for k in self.wnd:
    if self.wnd[k] is not None:
        wind_dict[k] = self.wnd[k]
",1,"[['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_weather.py', 'tests.unit.weatherapi25.test_weather', 'TestWeather', 'test_init_when_wind_is_none']]"
pyowm,https://github.com/csparpa/pyowm/tree/master/pyowm/weatherapi25/weather.py,TestWeather,test_init_when_wind_is_none,wind_dict = {k: self.wnd[k] for k in self.wnd if self.wnd[k] is not None},"
wind_dict = dict()
for k in self.wnd:
    if self.wnd[k] is not None:
        wind_dict[k] = self.wnd[k]
",1,"[['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_weather.py', 'tests.unit.weatherapi25.test_weather', 'TestWeather', 'test_init_when_wind_is_none']]"
pyowm,https://github.com/csparpa/pyowm/tree/master/pyowm/utils/measurables.py,TestMeasurablesUtils,test_kelvin_dict_to,return {key: kelvin_to_celsius(d[key]) for key in d},"tmp_DictComp0 = dict()
for key in d:
    tmp_DictComp0[key] = kelvin_to_celsius(d[key])

return tmp_DictComp0
",1,"[['https://github.com/csparpa/pyowm/tree/master/tests/unit/utils/test_measurables.py', 'tests.unit.utils.test_measurables', 'TestMeasurablesUtils', 'test_kelvin_dict_to']]"
pyowm,https://github.com/csparpa/pyowm/tree/master/pyowm/utils/measurables.py,TestMeasurablesUtils,test_kelvin_dict_to,return {key: kelvin_to_fahrenheit(d[key]) for key in d},"tmp_DictComp0 = dict()
for key in d:
    tmp_DictComp0[key] = kelvin_to_fahrenheit(d[key])

return tmp_DictComp0
",1,"[['https://github.com/csparpa/pyowm/tree/master/tests/unit/utils/test_measurables.py', 'tests.unit.utils.test_measurables', 'TestMeasurablesUtils', 'test_kelvin_dict_to']]"
Minecraft-Overviewer,https://github.com/overviewer/Minecraft-Overviewer/tree/master/contrib/contributors.py,TestContributors,test_get_new_contributors_new_email,old_email_names = {c['email']: c['name'] for c in old_contributors},"
old_email_names = dict()
for c in old_contributors:
    old_email_names[c['email']] = c['name']
",1,"[['https://github.com/overviewer/Minecraft-Overviewer/tree/master/test/test_contributors.py', 'test.test_contributors', 'TestContributors', 'test_get_new_contributors_new_contributors_alphabetical_order'], ['https://github.com/overviewer/Minecraft-Overviewer/tree/master/test/test_contributors.py', 'test.test_contributors', 'TestContributors', 'test_get_new_contributors_new_alias'], ['https://github.com/overviewer/Minecraft-Overviewer/tree/master/test/test_contributors.py', 'test.test_contributors', 'TestContributors', 'test_get_new_contributors_new_email']]"
Minecraft-Overviewer,https://github.com/overviewer/Minecraft-Overviewer/tree/master/contrib/contributors.py,TestContributors,test_get_new_contributors_new_email,old_name_emails = {c['name']: c['email'] for c in old_contributors},"
old_name_emails = dict()
for c in old_contributors:
    old_name_emails[c['name']] = c['email']
",1,"[['https://github.com/overviewer/Minecraft-Overviewer/tree/master/test/test_contributors.py', 'test.test_contributors', 'TestContributors', 'test_get_new_contributors_new_contributors_alphabetical_order'], ['https://github.com/overviewer/Minecraft-Overviewer/tree/master/test/test_contributors.py', 'test.test_contributors', 'TestContributors', 'test_get_new_contributors_new_alias'], ['https://github.com/overviewer/Minecraft-Overviewer/tree/master/test/test_contributors.py', 'test.test_contributors', 'TestContributors', 'test_get_new_contributors_new_email']]"
flasgger,https://github.com/flasgger/flasgger/tree/master/flasgger/base.py,,test_get_apispecs_with_valid_endpoint,"callbacks = {str(key): value for (key, value) in callbacks.items()}","tmp_DictComp0 = dict()
for (key, value) in callbacks.items():
    tmp_DictComp0[str(key)] = value

callbacks = tmp_DictComp0
",1,"[['https://github.com/flasgger/flasgger/tree/master/tests/test_base.py', 'tests.test_base', '', 'test_get_apispecs_with_invalid_endpoint'], ['https://github.com/flasgger/flasgger/tree/master/tests/test_commands.py', 'tests.test_commands', '', 'test_custom_specs'], ['https://github.com/flasgger/flasgger/tree/master/tests/test_commands.py', 'tests.test_commands', '', 'test_default_specs'], ['https://github.com/flasgger/flasgger/tree/master/tests/test_base.py', 'tests.test_base', '', 'test_get_apispecs_with_valid_endpoint']]"
flasgger,https://github.com/flasgger/flasgger/tree/master/flasgger/base.py,,test_get_apispecs_with_valid_endpoint,"responses = {str(key): value for (key, value) in responses.items()}","tmp_DictComp0 = dict()
for (key, value) in responses.items():
    tmp_DictComp0[str(key)] = value

responses = tmp_DictComp0
",1,"[['https://github.com/flasgger/flasgger/tree/master/tests/test_base.py', 'tests.test_base', '', 'test_get_apispecs_with_invalid_endpoint'], ['https://github.com/flasgger/flasgger/tree/master/tests/test_commands.py', 'tests.test_commands', '', 'test_custom_specs'], ['https://github.com/flasgger/flasgger/tree/master/tests/test_commands.py', 'tests.test_commands', '', 'test_default_specs'], ['https://github.com/flasgger/flasgger/tree/master/tests/test_base.py', 'tests.test_base', '', 'test_get_apispecs_with_valid_endpoint']]"
mobile-vision,https://github.com/facebookresearch/mobile-vision/tree/master/mobile_cv/arch/utils/helper.py,TestUtilsHelper,test_filter_kwargs,filtered_dict = {filter_key: kwargs[filter_key] for filter_key in filter_keys if filter_key in kwargs},"
filtered_dict = dict()
for filter_key in filter_keys:
    if filter_key in kwargs:
        filtered_dict[filter_key] = kwargs[filter_key]
",1,"[['https://github.com/facebookresearch/mobile-vision/tree/master/mobile_cv/arch/tests/test_utils_helper.py', 'mobile_cv.arch.tests.test_utils_helper', 'TestUtilsHelper', 'test_filter_kwargs']]"
dacite,https://github.com/konradhalas/dacite/tree/master/dacite/types.py,,test_transform_value_with_generic_abstract_collection,"return collection_cls({transform_value(type_hooks, cast, key_cls, key): transform_value(type_hooks, cast, item_cls, item) for (key, item) in value.items()})","tmp_DictComp0 = dict()
for (key, item) in value.items():
    tmp_DictComp0[transform_value(type_hooks, cast, key_cls, key)] = transform_value(type_hooks, cast, item_cls, item)

return collection_cls(tmp_DictComp0)
",1,"[['https://github.com/konradhalas/dacite/tree/master/tests/test_types.py', 'tests.test_types', '', 'test_transform_value_with_cast_matching_type'], ['https://github.com/konradhalas/dacite/tree/master/tests/test_types.py', 'tests.test_types', '', 'test_transform_value_without_matching_type'], ['https://github.com/konradhalas/dacite/tree/master/tests/test_types.py', 'tests.test_types', '', 'test_transform_value_with_optional_and_exact_matching_type'], ['https://github.com/konradhalas/dacite/tree/master/tests/test_types.py', 'tests.test_types', '', 'test_transform_value_with_optional_and_none_value'], ['https://github.com/konradhalas/dacite/tree/master/tests/test_types.py', 'tests.test_types', '', 'test_transform_value_without_matching_generic_sequence'], ['https://github.com/konradhalas/dacite/tree/master/tests/test_types.py', 'tests.test_types', '', 'test_transform_value_with_nested_generic_sequence'], ['https://github.com/konradhalas/dacite/tree/master/tests/test_types.py', 'tests.test_types', '', 'test_transform_value_with_nested_generic_mapping'], ['https://github.com/konradhalas/dacite/tree/master/tests/test_types.py', 'tests.test_types', '', 'test_transform_value_with_matching_type'], ['https://github.com/konradhalas/dacite/tree/master/tests/test_types.py', 'tests.test_types', '', 'test_transform_value_with_generic_sequence_and_matching_sequence'], ['https://github.com/konradhalas/dacite/tree/master/tests/test_types.py', 'tests.test_types', '', 'test_transform_value_with_cast_matching_base_class'], ['https://github.com/konradhalas/dacite/tree/master/tests/test_types.py', 'tests.test_types', '', 'test_transform_value_with_optional_and_not_none_value'], ['https://github.com/konradhalas/dacite/tree/master/tests/test_types.py', 'tests.test_types', '', 'test_transform_value_with_generic_sequence_and_matching_both_item_and_sequence'], ['https://github.com/konradhalas/dacite/tree/master/tests/test_types.py', 'tests.test_types', '', 'test_transform_value_with_generic_mapping'], ['https://github.com/konradhalas/dacite/tree/master/tests/test_types.py', 'tests.test_types', '', 'test_transform_value_with_generic_sequence_and_matching_item'], ['https://github.com/konradhalas/dacite/tree/master/tests/test_types.py', 'tests.test_types', '', 'test_transform_value_with_new_type'], ['https://github.com/konradhalas/dacite/tree/master/tests/test_types.py', 'tests.test_types', '', 'test_transform_value_with_generic_abstract_collection']]"
DeepCTR,https://github.com/shenweichen/DeepCTR/tree/master/examples/run_dien.py,,test_DIEN_neg,x = {name: feature_dict[name] for name in get_feature_names(feature_columns)},"
x = dict()
for name in get_feature_names(feature_columns):
    x[name] = feature_dict[name]
",1,"[['https://github.com/shenweichen/DeepCTR/tree/master/tests/models/DIEN_test.py', 'tests.models.DIEN_test', '', 'test_DIEN_neg']]"
DeepCTR,https://github.com/shenweichen/DeepCTR/tree/master/examples/run_din.py,,test_DIEN_neg,x = {name: feature_dict[name] for name in get_feature_names(feature_columns)},"
x = dict()
for name in get_feature_names(feature_columns):
    x[name] = feature_dict[name]
",1,"[['https://github.com/shenweichen/DeepCTR/tree/master/tests/models/DIEN_test.py', 'tests.models.DIEN_test', '', 'test_DIEN_neg']]"
DeepCTR,https://github.com/shenweichen/DeepCTR/tree/master/examples/run_dsin.py,,test_DIEN_neg,x = {name: feature_dict[name] for name in get_feature_names(feature_columns)},"
x = dict()
for name in get_feature_names(feature_columns):
    x[name] = feature_dict[name]
",1,"[['https://github.com/shenweichen/DeepCTR/tree/master/tests/models/DIEN_test.py', 'tests.models.DIEN_test', '', 'test_DIEN_neg']]"
requests,https://github.com/psf/requests/tree/master/requests/hooks.py,,test_default_hooks,return {event: [] for event in HOOKS},"tmp_DictComp0 = dict()
for event in HOOKS:
    tmp_DictComp0[event] = []

return tmp_DictComp0
",1,"[['https://github.com/psf/requests/tree/master/tests/test_hooks.py', 'tests.test_hooks', '', 'test_default_hooks']]"
sqlalchemy-mixins,https://github.com/absent1706/sqlalchemy-mixins/tree/master/sqlalchemy_mixins/smartquery.py,TestFullSmartQuery,test_schema_with_strings,"not_loaded_part = {path: v for (path, v) in flat_schema.items() if path not in loaded_paths}","
not_loaded_part = dict()
for (path, v) in flat_schema.items():
    if path not in loaded_paths:
        not_loaded_part[path] = v
",1,"[['https://github.com/absent1706/sqlalchemy-mixins/tree/master/sqlalchemy_mixins/tests/test_smartquery.py', 'sqlalchemy_mixins.tests.test_smartquery', 'TestFullSmartQuery', 'test_schema_with_class_properties'], ['https://github.com/absent1706/sqlalchemy-mixins/tree/master/sqlalchemy_mixins/tests/test_smartquery.py', 'sqlalchemy_mixins.tests.test_smartquery', 'TestSmartQueryAutoEagerLoad', 'test_lazy_dynamic'], ['https://github.com/absent1706/sqlalchemy-mixins/tree/master/sqlalchemy_mixins/tests/test_smartquery.py', 'sqlalchemy_mixins.tests.test_smartquery', 'TestFullSmartQuery', 'test_schema_with_strings']]"
dtaidistance,https://github.com/wannesm/dtaidistance/tree/master/dtaidistance/util.py,,test_substitution_function,"idx = {i: symbol for (i, symbol) in enumerate(line)}","
idx = dict()
for (i, symbol) in enumerate(line):
    idx[i] = symbol
",1,"[['https://github.com/wannesm/dtaidistance/tree/master/tests/test_alignment.py', 'tests.test_alignment', '', 'test_sequences_custom'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_alignment.py', 'tests.test_alignment', '', 'test_sequences_blosum'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_alignment.py', 'tests.test_alignment', '', 'test_substitution_function']]"
dtaidistance,https://github.com/wannesm/dtaidistance/tree/master/dtaidistance/clustering/medoids.py,,test_clustering_centroid,"self.cluster_idx = {medoid: {inst for inst in instances} for (medoid, instances) in zip(medoids, clusters)}","
self.cluster_idx = dict()
for (medoid, instances) in zip(medoids, clusters):
    self.cluster_idx[medoid] = {inst for inst in instances}
",1,"[['https://github.com/wannesm/dtaidistance/tree/master/tests/test_clustering.py', 'tests.test_clustering', '', 'test_clustering_centroid']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/convert_matrix.py,,test_to_pandas_edgelist_with_nodelist,"edge_attr = {k: [d.get(k, nan) for (_, _, d) in edgelist] for k in all_attrs}","
edge_attr = dict()
for k in all_attrs:
    edge_attr[k] = [d.get(k, nan) for (_, _, d) in edgelist]
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/tests/test_convert_pandas.py', 'networkx.tests.test_convert_pandas', 'TestConvertPandas', 'test_edgekey_with_multigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_convert_pandas.py', 'networkx.tests.test_convert_pandas', '', 'test_to_pandas_edgelist_with_nodelist']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/convert_matrix.py,,test_ascent_method_asymmetric_2,"triples = ((u, v, {name: kind_to_python_type[dtype.kind](val) for ((_, dtype, name), val) in zip(fields, A[u, v])}) for (u, v) in edges)","def my_comprehension_func(u, v):
    tmp_DictComp0 = dict()
    for ((_, dtype, name), val) in zip(fields, A[u, v]):
        tmp_DictComp0[name] = kind_to_python_type[dtype.kind](val)
    return tmp_DictComp0

triples = ((u, v, my_comprehension_func(u, v)) for (u, v) in edges)
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/tests/test_convert_numpy.py', 'networkx.tests.test_convert_numpy', 'TestConvertNumpyArray', 'test_from_numpy_array_dtype'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_traveling_salesman.py', 'networkx.algorithms.approximation.tests.test_traveling_salesman', '', 'test_ascent_method_asymmetric'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/tests/test_branchings.py', 'networkx.algorithms.tree.tests.test_branchings', '', 'test_arborescence_iterator_min'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_traveling_salesman.py', 'networkx.algorithms.approximation.tests.test_traveling_salesman', '', 'test_held_karp_ascent_fractional_asymmetric'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_traveling_salesman.py', 'networkx.algorithms.approximation.tests.test_traveling_salesman', '', 'test_held_karp_ascent'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/centrality/tests/test_trophic.py', 'networkx.algorithms.centrality.tests.test_trophic', '', 'test_trophic_incoherence_parameter_cannibalism'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/centrality/tests/test_trophic.py', 'networkx.algorithms.centrality.tests.test_trophic', '', 'test_trophic_levels_singular_matrix'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_convert_numpy.py', 'networkx.tests.test_convert_numpy', 'TestConvertNumpyMatrix', 'test_from_numpy_matrix_type'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/tests/test_branchings.py', 'networkx.algorithms.tree.tests.test_branchings', '', 'test_arborescence_iterator_initial_partition'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/centrality/tests/test_trophic.py', 'networkx.algorithms.centrality.tests.test_trophic', '', 'test_trophic_levels_simple'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/centrality/tests/test_trophic.py', 'networkx.algorithms.centrality.tests.test_trophic', '', 'test_trophic_incoherence_parameter_no_cannibalism'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/centrality/tests/test_trophic.py', 'networkx.algorithms.centrality.tests.test_trophic', '', 'test_trophic_differences'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_traveling_salesman.py', 'networkx.algorithms.approximation.tests.test_traveling_salesman', '', 'test_asadpour_real_world_path'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/tests/test_branchings.py', 'networkx.algorithms.tree.tests.test_branchings', '', 'test_partition_spanning_arborescence'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_traveling_salesman.py', 'networkx.algorithms.approximation.tests.test_traveling_salesman', '', 'test_asadpour_real_world'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_convert_numpy.py', 'networkx.tests.test_convert_numpy', 'TestConvertNumpyArray', 'test_from_numpy_array_type'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_convert_numpy.py', 'networkx.tests.test_convert_numpy', 'TestConvertNumpyArray', 'test_symmetric'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/centrality/tests/test_trophic.py', 'networkx.algorithms.centrality.tests.test_trophic', '', 'test_trophic_levels_more_complex'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/tests/test_branchings.py', 'networkx.algorithms.tree.tests.test_branchings', '', 'test_edmonds1_minbranch'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/centrality/tests/test_trophic.py', 'networkx.algorithms.centrality.tests.test_trophic', '', 'test_trophic_levels_even_more_complex'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/tests/test_branchings.py', 'networkx.algorithms.tree.tests.test_branchings', '', 'test_arborescence_iterator_max'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_convert_numpy.py', 'networkx.tests.test_convert_numpy', 'TestConvertNumpyArray', 'test_from_numpy_array_parallel_edges'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_traveling_salesman.py', 'networkx.algorithms.approximation.tests.test_traveling_salesman', '', 'test_held_karp_ascent_asymmetric_3'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_traveling_salesman.py', 'networkx.algorithms.approximation.tests.test_traveling_salesman', '', 'test_ascent_fractional_solution'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_traveling_salesman.py', 'networkx.algorithms.approximation.tests.test_traveling_salesman', '', 'test_ascent_method_asymmetric_2']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/relabel.py,,test_isomorphic_edge_attr_subgraph_hash,m = {n: mapping(n) for n in G},"
m = dict()
for n in G:
    m[n] = mapping(n)
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_graph_hashing.py', 'networkx.algorithms.tests.test_graph_hashing', '', 'test_isomorphic_edge_attr'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_graph_hashing.py', 'networkx.algorithms.tests.test_graph_hashing', '', 'test_isomorphic_subgraph_hash'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/isomorphism/tests/test_ismags.py', 'networkx.algorithms.isomorphism.tests.test_ismags', 'TestSelfIsomorphism', 'test_edgecase_self_isomorphism'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/isomorphism/tests/test_isomorphvf2.py', 'networkx.algorithms.isomorphism.tests.test_isomorphvf2', '', 'test_selfloop'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_chains.py', 'networkx.algorithms.tests.test_chains', 'TestChainDecomposition', 'test_disconnected_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_relabel.py', 'networkx.tests.test_relabel', 'TestRelabel', 'test_relabel_selfloop'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/isomorphism/tests/test_isomorphvf2.py', 'networkx.algorithms.isomorphism.tests.test_isomorphvf2', '', 'test_selfloop_mono'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greedy_modularity_communities_relabeled'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_relabel.py', 'networkx.tests.test_relabel', 'TestRelabel', 'test_relabel_circular'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_clique.py', 'networkx.algorithms.tests.test_clique', 'TestCliques', 'test_make_clique_bipartite'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_relabel.py', 'networkx.tests.test_relabel', 'TestRelabel', 'test_relabel_nodes_multigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/isomorphism/tests/test_isomorphvf2.py', 'networkx.algorithms.isomorphism.tests.test_isomorphvf2', 'TestAtlas', 'test_graph_atlas'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_relabel.py', 'networkx.tests.test_relabel', 'TestRelabel', 'test_relabel_nodes_copy'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_relabel.py', 'networkx.tests.test_relabel', 'TestRelabel', 'test_relabel_nodes_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_graph_hashing.py', 'networkx.algorithms.tests.test_graph_hashing', '', 'test_isomorphic_node_attr'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_clique.py', 'networkx.algorithms.tests.test_clique', 'TestCliques', 'test_make_max_clique_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_relabel.py', 'networkx.tests.test_relabel', 'TestRelabel', 'test_relabel_copy_name'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_relabel.py', 'networkx.tests.test_relabel', 'TestRelabel', 'test_relabel_multidigraph_merge_inplace'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_relabel.py', 'networkx.tests.test_relabel', 'TestRelabel', 'test_relabel_nodes_digraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_graph_hashing.py', 'networkx.algorithms.tests.test_graph_hashing', '', 'test_isomorphic_edge_attr_and_node_attr'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_relabel.py', 'networkx.tests.test_relabel', 'TestRelabel', 'test_relabel_nodes_function'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/isomorphism/tests/test_isomorphvf2.py', 'networkx.algorithms.isomorphism.tests.test_isomorphvf2', '', 'test_multiedge'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_traveling_salesman.py', 'networkx.algorithms.approximation.tests.test_traveling_salesman', '', 'test_asadpour_real_world_path'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_relabel.py', 'networkx.tests.test_relabel', 'TestRelabel', 'test_relabel_multigraph_merge_inplace'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_traveling_salesman.py', 'networkx.algorithms.approximation.tests.test_traveling_salesman', '', 'test_asadpour_real_world'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_relabel.py', 'networkx.tests.test_relabel', 'TestRelabel', 'test_relabel_multigraph_nonnumeric_key'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_relabel.py', 'networkx.tests.test_relabel', 'TestRelabel', 'test_relabel_isolated_nodes_to_same'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_dominating_set.py', 'networkx.algorithms.approximation.tests.test_dominating_set', 'TestMinWeightDominatingSet', 'test_star_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_chains.py', 'networkx.algorithms.tests.test_chains', 'TestChainDecomposition', 'test_disconnected_graph_root_node'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_graph_hashing.py', 'networkx.algorithms.tests.test_graph_hashing', '', 'test_isomorphic_edge_attr_and_node_attr_subgraph_hash'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_kernighan_lin.py', 'networkx.algorithms.community.tests.test_kernighan_lin', '', 'test_multigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_relabel.py', 'networkx.tests.test_relabel', 'TestRelabel', 'test_relabel_nodes_orderedgraph'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_text.py', 'networkx.readwrite.tests.test_text', '', 'test_undirected_multi_tree_forest'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/minors/tests/test_contraction.py', 'networkx.algorithms.minors.tests.test_contraction', 'TestContraction', 'test_node_attributes'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_relabel.py', 'networkx.tests.test_relabel', 'TestRelabel', 'test_relabel_multidigraph_merge_copy'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_relabel.py', 'networkx.tests.test_relabel', 'TestRelabel', 'test_relabel_nodes_missing'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_relabel.py', 'networkx.tests.test_relabel', 'TestRelabel', 'test_relabel_multidigraph_inout_merge_nodes'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_graph_hashing.py', 'networkx.algorithms.tests.test_graph_hashing', '', 'test_isomorphic_node_attr_subgraph_hash'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_relabel.py', 'networkx.tests.test_relabel', 'TestRelabel', 'test_relabel_toposort'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_relabel.py', 'networkx.tests.test_relabel', 'TestRelabel', 'test_relabel_multidigraph_inout_copy'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_relabel.py', 'networkx.tests.test_relabel', 'TestRelabel', 'test_relabel_nodes_multidigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_relabel.py', 'networkx.tests.test_relabel', 'TestRelabel', 'test_relabel_multigraph_merge_copy'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_graph_hashing.py', 'networkx.algorithms.tests.test_graph_hashing', '', 'test_isomorphic'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_graph_hashing.py', 'networkx.algorithms.tests.test_graph_hashing', '', 'test_isomorphic_edge_attr_subgraph_hash']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/relabel.py,TestEdgeBoundary,test_complete_graph,"nx.set_node_attributes(H, {v: k for (k, v) in mapping.items()}, label_attribute)","tmp_DictComp0 = dict()
for (k, v) in mapping.items():
    tmp_DictComp0[v] = k

nx.set_node_attributes(H, tmp_DictComp0, label_attribute)
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_boundary.py', 'networkx.algorithms.tests.test_boundary', 'TestNodeBoundary', 'test_complete_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_boundary.py', 'networkx.algorithms.tests.test_boundary', 'TestNodeBoundary', 'test_path_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_edgelist.py', 'networkx.readwrite.tests.test_edgelist', 'TestEdgelist', 'test_edgelist_integers'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_boundary.py', 'networkx.algorithms.tests.test_boundary', 'TestEdgeBoundary', 'test_path_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_simple_paths.py', 'networkx.algorithms.tests.test_simple_paths', '', 'test_shortest_simple_paths'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_adjlist.py', 'networkx.readwrite.tests.test_adjlist', 'TestMultilineAdjlist', 'test_multiline_adjlist_integers'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_simple_paths.py', 'networkx.algorithms.tests.test_simple_paths', '', 'test_shortest_simple_paths_directed_with_weight_fucntion'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_edgelist.py', 'networkx.algorithms.bipartite.tests.test_edgelist', 'TestEdgelist', 'test_edgelist_integers'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_relabel.py', 'networkx.tests.test_relabel', 'TestRelabel', 'test_convert_node_labels_to_integers'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_adjlist.py', 'networkx.readwrite.tests.test_adjlist', 'TestAdjlist', 'test_adjlist_integers'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_relabel.py', 'networkx.tests.test_relabel', 'TestRelabel', 'test_convert_to_integers_raise'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_relabel.py', 'networkx.tests.test_relabel', 'TestRelabel', 'test_convert_to_integers2'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_boundary.py', 'networkx.algorithms.tests.test_boundary', 'TestEdgeBoundary', 'test_complete_graph']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/generators/lattice.py,TestKFactor,test_k_factor4,"pos = {(i, j): (x, y) for (i, j, x, y) in zip(ii, jj, xx, yy) if (i, j) in G}","
pos = dict()
for (i, j, x, y) in zip(ii, jj, xx, yy):
    if (i, j) in G:
        pos[i, j] = (x, y)
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_regular.py', 'networkx.algorithms.tests.test_regular', 'TestKFactor', 'test_k_factor4']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/generators/directed.py,TestRandomKOutGraph,test_no_self_loops,weights = Counter({v: alpha for v in G}),"tmp_DictComp0 = dict()
for v in G:
    tmp_DictComp0[v] = alpha

weights = Counter(tmp_DictComp0)
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_directed.py', 'networkx.generators.tests.test_directed', 'TestRandomKOutGraph', 'test_regularity'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_directed.py', 'networkx.generators.tests.test_directed', 'TestRandomKOutGraph', 'test_no_self_loops']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/generators/joint_degree_seq.py,,test_joint_degree_graph,"degree_count = {k: sum(l.values()) // k for (k, l) in joint_degrees.items() if k > 0}","
degree_count = dict()
for (k, l) in joint_degrees.items():
    if k > 0:
        degree_count[k] = sum(l.values()) // k
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_joint_degree_seq.py', 'networkx.generators.tests.test_joint_degree_seq', '', 'test_joint_degree_graph']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/asyn_fluid.py,,test_two_nodes,"communities = {n: i for (i, n) in enumerate(vertices[:k])}","
communities = dict()
for (i, n) in enumerate(vertices[:k]):
    communities[n] = i
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_asyn_fluid.py', 'networkx.algorithms.community.tests.test_asyn_fluid', '', 'test_single_node'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_asyn_fluid.py', 'networkx.algorithms.community.tests.test_asyn_fluid', '', 'test_five_clique_ring'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_asyn_fluid.py', 'networkx.algorithms.community.tests.test_asyn_fluid', '', 'test_two_clique_communities'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_asyn_fluid.py', 'networkx.algorithms.community.tests.test_asyn_fluid', '', 'test_two_nodes']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/label_propagation.py,TestAsynLpaCommunities,test_seed_argument,"labels = {n: i for (i, n) in enumerate(G)}","
labels = dict()
for (i, n) in enumerate(G):
    labels[n] = i
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_label_propagation.py', 'networkx.algorithms.community.tests.test_label_propagation', '', 'test_termination'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_label_propagation.py', 'networkx.algorithms.community.tests.test_label_propagation', 'TestAsynLpaCommunities', 'test_seed_argument']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/kernighan_lin.py,,test_max_iter_argument,"index = {v: i for (i, v) in enumerate(labels)}","
index = dict()
for (i, v) in enumerate(labels):
    index[v] = i
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_kernighan_lin.py', 'networkx.algorithms.community.tests.test_kernighan_lin', '', 'test_multigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_kernighan_lin.py', 'networkx.algorithms.community.tests.test_kernighan_lin', '', 'test_partition_argument'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_kernighan_lin.py', 'networkx.algorithms.community.tests.test_kernighan_lin', '', 'test_partition'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_kernighan_lin.py', 'networkx.algorithms.community.tests.test_kernighan_lin', '', 'test_too_many_blocks'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_kernighan_lin.py', 'networkx.algorithms.community.tests.test_kernighan_lin', '', 'test_seed_argument'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_kernighan_lin.py', 'networkx.algorithms.community.tests.test_kernighan_lin', '', 'test_non_disjoint_partition'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_kernighan_lin.py', 'networkx.algorithms.community.tests.test_kernighan_lin', '', 'test_partition_argument_non_integer_nodes'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_kernighan_lin.py', 'networkx.algorithms.community.tests.test_kernighan_lin', '', 'test_max_iter_argument']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/modularity_max.py,,test_greedy_modularity_communities_multigraph_weighted,"dq_heap = {u: MappedQueue({(u, v): -dq for (v, dq) in dq_dict[u].items()}) for u in G}","
dq_heap = dict()
for u in G:
    dq_heap[u] = MappedQueue({(u, v): -dq for (v, dq) in dq_dict[u].items()})
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_n_communities_parameter'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_modularity_communities_weighted'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greedy_modularity_communities_multigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_modularity_communities_floating_point'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greedy_modularity_communities_directed'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_resolution_parameter_impact'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greed_modularity_communities_multidigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greed_modularity_communities_multidigraph_weighted'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greedy_modularity_communities_relabeled'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_modularity_communities_directed_weighted'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greedy_modularity_communities_multigraph_weighted']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/modularity_max.py,,test_greedy_modularity_communities_multigraph_weighted,communities = {n: frozenset([n]) for n in G},"
communities = dict()
for n in G:
    communities[n] = frozenset([n])
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_n_communities_parameter'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_modularity_communities_weighted'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greedy_modularity_communities_multigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_modularity_communities_floating_point'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greedy_modularity_communities_directed'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_resolution_parameter_impact'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greed_modularity_communities_multidigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greed_modularity_communities_multidigraph_weighted'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greedy_modularity_communities_relabeled'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_modularity_communities_directed_weighted'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greedy_modularity_communities_multigraph_weighted']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/modularity_max.py,,test_greedy_modularity_communities_multigraph_weighted,"a = {node: deg_out * q0 for (node, deg_out) in G.out_degree(weight=weight)}","
a = dict()
for (node, deg_out) in G.out_degree(weight=weight):
    a[node] = deg_out * q0
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_n_communities_parameter'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_modularity_communities_weighted'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greedy_modularity_communities_multigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_modularity_communities_floating_point'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greedy_modularity_communities_directed'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_resolution_parameter_impact'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greed_modularity_communities_multidigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greed_modularity_communities_multidigraph_weighted'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greedy_modularity_communities_relabeled'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_modularity_communities_directed_weighted'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greedy_modularity_communities_multigraph_weighted']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/modularity_max.py,,test_greedy_modularity_communities_multigraph_weighted,"b = {node: deg_in * q0 for (node, deg_in) in G.in_degree(weight=weight)}","
b = dict()
for (node, deg_in) in G.in_degree(weight=weight):
    b[node] = deg_in * q0
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_n_communities_parameter'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_modularity_communities_weighted'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greedy_modularity_communities_multigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_modularity_communities_floating_point'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greedy_modularity_communities_directed'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_resolution_parameter_impact'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greed_modularity_communities_multidigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greed_modularity_communities_multidigraph_weighted'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greedy_modularity_communities_relabeled'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_modularity_communities_directed_weighted'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greedy_modularity_communities_multigraph_weighted']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/modularity_max.py,,test_greedy_modularity_communities_multigraph_weighted,"a = b = {node: deg * q0 * 0.5 for (node, deg) in G.degree(weight=weight)}","tmp_DictComp0 = dict()
for (node, deg) in G.degree(weight=weight):
    tmp_DictComp0[node] = deg * q0 * 0.5

a = b = tmp_DictComp0
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_n_communities_parameter'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_modularity_communities_weighted'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greedy_modularity_communities_multigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_modularity_communities_floating_point'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greedy_modularity_communities_directed'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_resolution_parameter_impact'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greed_modularity_communities_multidigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greed_modularity_communities_multidigraph_weighted'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greedy_modularity_communities_relabeled'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_modularity_communities_directed_weighted'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greedy_modularity_communities_multigraph_weighted']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/isomorphism/tree_isomorphism.py,,test_trivial,label = {v: 0 for v in dT},"
label = dict()
for v in dT:
    label[v] = 0
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/isomorphism/tests/test_tree_isomorphism.py', 'networkx.algorithms.isomorphism.tests.test_tree_isomorphism', '', 'test_hardcoded'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/isomorphism/tests/test_tree_isomorphism.py', 'networkx.algorithms.isomorphism.tests.test_tree_isomorphism', '', 'test_trivial']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/isomorphism/tree_isomorphism.py,,test_trivial,ordered_labels = {v: () for v in dT},"
ordered_labels = dict()
for v in dT:
    ordered_labels[v] = ()
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/isomorphism/tests/test_tree_isomorphism.py', 'networkx.algorithms.isomorphism.tests.test_tree_isomorphism', '', 'test_hardcoded'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/isomorphism/tests/test_tree_isomorphism.py', 'networkx.algorithms.isomorphism.tests.test_tree_isomorphism', '', 'test_trivial']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/isomorphism/tree_isomorphism.py,,test_trivial,ordered_children = {v: () for v in dT},"
ordered_children = dict()
for v in dT:
    ordered_children[v] = ()
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/isomorphism/tests/test_tree_isomorphism.py', 'networkx.algorithms.isomorphism.tests.test_tree_isomorphism', '', 'test_hardcoded'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/isomorphism/tests/test_tree_isomorphism.py', 'networkx.algorithms.isomorphism.tests.test_tree_isomorphism', '', 'test_trivial']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/connectivity.py,TestAllPairsNodeConnectivityApprox,test_complete,all_pairs = {n: {} for n in nbunch},"
all_pairs = dict()
for n in nbunch:
    all_pairs[n] = {}
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_connectivity.py', 'networkx.algorithms.approximation.tests.test_connectivity', 'TestAllPairsNodeConnectivityApprox', 'test_cycles'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_connectivity.py', 'networkx.algorithms.approximation.tests.test_connectivity', 'TestAllPairsNodeConnectivityApprox', 'test_all_pairs_connectivity_nbunch'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_connectivity.py', 'networkx.algorithms.approximation.tests.test_connectivity', 'TestAllPairsNodeConnectivityApprox', 'test_cutoff'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_connectivity.py', 'networkx.algorithms.approximation.tests.test_connectivity', 'TestAllPairsNodeConnectivityApprox', 'test_paths'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_connectivity.py', 'networkx.algorithms.approximation.tests.test_connectivity', 'TestAllPairsNodeConnectivityApprox', 'test_complete']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/dominating_set.py,TestMinWeightDominatingSet,test_star_graph,neighborhoods = {v: {v} | set(G[v]) for v in G},"
neighborhoods = dict()
for v in G:
    neighborhoods[v] = {v} | set(G[v])
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_dominating_set.py', 'networkx.algorithms.approximation.tests.test_dominating_set', 'TestMinWeightDominatingSet', 'test_min_weighted_dominating_set'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_dominating_set.py', 'networkx.algorithms.approximation.tests.test_dominating_set', 'TestMinWeightDominatingSet', 'test_star_graph']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/traveling_salesman.py,,test_asadpour_tsp,"lambda_dict = {(u, v): exp(gamma[u, v]) for (u, v) in z_support.edges()}","
lambda_dict = dict()
for (u, v) in z_support.edges():
    lambda_dict[u, v] = exp(gamma[u, v])
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_traveling_salesman.py', 'networkx.algorithms.approximation.tests.test_traveling_salesman', '', 'test_asadpour_real_world'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_traveling_salesman.py', 'networkx.algorithms.approximation.tests.test_traveling_salesman', '', 'test_asadpour_real_world_path'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_traveling_salesman.py', 'networkx.algorithms.approximation.tests.test_traveling_salesman', '', 'test_asadpour_tsp']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/traveling_salesman.py,,test_asadpour_tsp,node_demands = {n: t_star.out_degree(n) - t_star.in_degree(n) for n in t_star},"
node_demands = dict()
for n in t_star:
    node_demands[n] = t_star.out_degree(n) - t_star.in_degree(n)
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_traveling_salesman.py', 'networkx.algorithms.approximation.tests.test_traveling_salesman', '', 'test_asadpour_real_world'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_traveling_salesman.py', 'networkx.algorithms.approximation.tests.test_traveling_salesman', '', 'test_asadpour_real_world_path'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_traveling_salesman.py', 'networkx.algorithms.approximation.tests.test_traveling_salesman', '', 'test_asadpour_tsp']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/link_analysis/pagerank_alg.py,TestPageRank,test_empty,"x = {k: v / s for (k, v) in nstart.items()}","
x = dict()
for (k, v) in nstart.items():
    x[k] = v / s
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/link_analysis/tests/test_pagerank.py', 'networkx.algorithms.link_analysis.tests.test_pagerank', 'TestPageRank', 'test_empty']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/link_analysis/pagerank_alg.py,TestPageRank,test_empty,"p = {k: v / s for (k, v) in personalization.items()}","
p = dict()
for (k, v) in personalization.items():
    p[k] = v / s
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/link_analysis/tests/test_pagerank.py', 'networkx.algorithms.link_analysis.tests.test_pagerank', 'TestPageRank', 'test_empty']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/link_analysis/pagerank_alg.py,TestPageRank,test_empty,"dangling_weights = {k: v / s for (k, v) in dangling.items()}","
dangling_weights = dict()
for (k, v) in dangling.items():
    dangling_weights[k] = v / s
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/link_analysis/tests/test_pagerank.py', 'networkx.algorithms.link_analysis.tests.test_pagerank', 'TestPageRank', 'test_empty']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/coloring/equitable_coloring.py,TestColoring,test_cast_no_solo,"return {(node, color): sum((1 for v in L[node] if v in C[color])) for node in nodes for color in colors}","tmp_DictComp0 = dict()
for node in nodes:
    for color in colors:
        tmp_DictComp0[node, color] = sum((1 for v in L[node] if v in C[color]))

return tmp_DictComp0
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/coloring/tests/test_coloring.py', 'networkx.algorithms.coloring.tests.test_coloring', 'TestColoring', 'test_case_V_plus_not_in_A_cal'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/coloring/tests/test_coloring.py', 'networkx.algorithms.coloring.tests.test_coloring', 'TestColoring', 'test_cast_no_solo']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/connectivity/kcomponents.py,,test_set_consolidation_rosettacode,"nodes = {i: s for (i, s) in enumerate(sets)}","
nodes = dict()
for (i, s) in enumerate(sets):
    nodes[i] = s
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/connectivity/tests/test_kcomponents.py', 'networkx.algorithms.connectivity.tests.test_kcomponents', '', 'test_set_consolidation_rosettacode']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/matching.py,TestMatching,test_issue_2127,leftmatches = {v: None for v in left},"
leftmatches = dict()
for v in left:
    leftmatches[v] = None
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_matching.py', 'networkx.algorithms.bipartite.tests.test_matching', 'TestMatching', 'test_hopcroft_karp_matching_disconnected'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_matching.py', 'networkx.algorithms.bipartite.tests.test_matching', 'TestMatching', 'test_hopcroft_karp_matching_simple'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_matching.py', 'networkx.algorithms.bipartite.tests.test_matching', 'TestMatching', 'test_hopcroft_karp_matching'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_matching.py', 'networkx.algorithms.bipartite.tests.test_matching', 'TestMatching', 'test_issue_2127']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/matching.py,TestMatching,test_issue_2127,rightmatches = {v: None for v in right},"
rightmatches = dict()
for v in right:
    rightmatches[v] = None
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_matching.py', 'networkx.algorithms.bipartite.tests.test_matching', 'TestMatching', 'test_hopcroft_karp_matching_disconnected'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_matching.py', 'networkx.algorithms.bipartite.tests.test_matching', 'TestMatching', 'test_hopcroft_karp_matching_simple'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_matching.py', 'networkx.algorithms.bipartite.tests.test_matching', 'TestMatching', 'test_hopcroft_karp_matching'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_matching.py', 'networkx.algorithms.bipartite.tests.test_matching', 'TestMatching', 'test_issue_2127']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/matching.py,TestMatching,test_issue_2127,"leftmatches = {k: v for (k, v) in leftmatches.items() if v is not None}","tmp_DictComp0 = dict()
for (k, v) in leftmatches.items():
    if v is not None:
        tmp_DictComp0[k] = v

leftmatches = tmp_DictComp0
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_matching.py', 'networkx.algorithms.bipartite.tests.test_matching', 'TestMatching', 'test_hopcroft_karp_matching_disconnected'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_matching.py', 'networkx.algorithms.bipartite.tests.test_matching', 'TestMatching', 'test_hopcroft_karp_matching_simple'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_matching.py', 'networkx.algorithms.bipartite.tests.test_matching', 'TestMatching', 'test_hopcroft_karp_matching'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_matching.py', 'networkx.algorithms.bipartite.tests.test_matching', 'TestMatching', 'test_issue_2127']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/matching.py,TestMatching,test_issue_2127,"rightmatches = {k: v for (k, v) in rightmatches.items() if v is not None}","tmp_DictComp0 = dict()
for (k, v) in rightmatches.items():
    if v is not None:
        tmp_DictComp0[k] = v

rightmatches = tmp_DictComp0
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_matching.py', 'networkx.algorithms.bipartite.tests.test_matching', 'TestMatching', 'test_hopcroft_karp_matching_disconnected'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_matching.py', 'networkx.algorithms.bipartite.tests.test_matching', 'TestMatching', 'test_hopcroft_karp_matching_simple'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_matching.py', 'networkx.algorithms.bipartite.tests.test_matching', 'TestMatching', 'test_hopcroft_karp_matching'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_matching.py', 'networkx.algorithms.bipartite.tests.test_matching', 'TestMatching', 'test_issue_2127']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/centrality.py,TestBipartiteCentrality,test_degree_centrality,"centrality = {n: d * s for (n, d) in G.degree(top)}","
centrality = dict()
for (n, d) in G.degree(top):
    centrality[n] = d * s
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_centrality.py', 'networkx.algorithms.bipartite.tests.test_centrality', 'TestBipartiteCentrality', 'test_davis_degree_centrality'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_centrality.py', 'networkx.algorithms.bipartite.tests.test_centrality', 'TestBipartiteCentrality', 'test_degree_centrality']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/centrality.py,TestBipartiteCentrality,test_degree_centrality,"centrality.update({n: d * s for (n, d) in G.degree(bottom)})","tmp_DictComp0 = dict()
for (n, d) in G.degree(bottom):
    tmp_DictComp0[n] = d * s

centrality.update(tmp_DictComp0)
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_centrality.py', 'networkx.algorithms.bipartite.tests.test_centrality', 'TestBipartiteCentrality', 'test_davis_degree_centrality'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_centrality.py', 'networkx.algorithms.bipartite.tests.test_centrality', 'TestBipartiteCentrality', 'test_degree_centrality']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/redundancy.py,,test_not_enough_neighbors,"return {v: _node_redundancy(G, v) for v in nodes}","tmp_DictComp0 = dict()
for v in nodes:
    tmp_DictComp0[v] = _node_redundancy(G, v)

return tmp_DictComp0
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_redundancy.py', 'networkx.algorithms.bipartite.tests.test_redundancy', '', 'test_redundant_nodes'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_redundancy.py', 'networkx.algorithms.bipartite.tests.test_redundancy', '', 'test_no_redundant_nodes'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_redundancy.py', 'networkx.algorithms.bipartite.tests.test_redundancy', '', 'test_not_enough_neighbors']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/centrality/harmonic.py,TestClosenessCentrality,test_weighted_harmonic,centrality = {u: 0 for u in nbunch},"
centrality = dict()
for u in nbunch:
    centrality[u] = 0
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/centrality/tests/test_harmonic_centrality.py', 'networkx.algorithms.centrality.tests.test_harmonic_centrality', 'TestClosenessCentrality', 'test_p4_harmonic'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/centrality/tests/test_harmonic_centrality.py', 'networkx.algorithms.centrality.tests.test_harmonic_centrality', 'TestClosenessCentrality', 'test_cycle_c4_directed'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/centrality/tests/test_harmonic_centrality.py', 'networkx.algorithms.centrality.tests.test_harmonic_centrality', 'TestClosenessCentrality', 'test_empty'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/centrality/tests/test_harmonic_centrality.py', 'networkx.algorithms.centrality.tests.test_harmonic_centrality', 'TestClosenessCentrality', 'test_singleton'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/centrality/tests/test_harmonic_centrality.py', 'networkx.algorithms.centrality.tests.test_harmonic_centrality', 'TestClosenessCentrality', 'test_clique_complete'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/centrality/tests/test_harmonic_centrality.py', 'networkx.algorithms.centrality.tests.test_harmonic_centrality', 'TestClosenessCentrality', 'test_cycle_C5'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/centrality/tests/test_harmonic_centrality.py', 'networkx.algorithms.centrality.tests.test_harmonic_centrality', 'TestClosenessCentrality', 'test_bal_tree'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/centrality/tests/test_harmonic_centrality.py', 'networkx.algorithms.centrality.tests.test_harmonic_centrality', 'TestClosenessCentrality', 'test_p3_harmonic_subset'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/centrality/tests/test_harmonic_centrality.py', 'networkx.algorithms.centrality.tests.test_harmonic_centrality', 'TestClosenessCentrality', 'test_p4_harmonic_subset'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/centrality/tests/test_harmonic_centrality.py', 'networkx.algorithms.centrality.tests.test_harmonic_centrality', 'TestClosenessCentrality', 'test_p3_harmonic'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/centrality/tests/test_harmonic_centrality.py', 'networkx.algorithms.centrality.tests.test_harmonic_centrality', 'TestClosenessCentrality', 'test_cycle_C4'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/centrality/tests/test_harmonic_centrality.py', 'networkx.algorithms.centrality.tests.test_harmonic_centrality', 'TestClosenessCentrality', 'test_exampleGraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/centrality/tests/test_harmonic_centrality.py', 'networkx.algorithms.centrality.tests.test_harmonic_centrality', 'TestClosenessCentrality', 'test_weighted_harmonic']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/readwrite/json_graph/node_link.py,TestNodeLink,test_graph_with_tuple_nodes,"attrs.update({k: v for (k, v) in _attrs.items() if k not in attrs})","def my_comprehension_func(attrs):
    tmp_DictComp0 = dict()
    for (k, v) in _attrs.items():
        if k not in attrs:
            tmp_DictComp0[k] = v
    return tmp_DictComp0

attrs.update(my_comprehension_func(attrs))
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/readwrite/json_graph/tests/test_node_link.py', 'networkx.readwrite.json_graph.tests.test_node_link', 'TestNodeLink', 'test_digraph'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/json_graph/tests/test_node_link.py', 'networkx.readwrite.json_graph.tests.test_node_link', 'TestNodeLink', 'test_multigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/json_graph/tests/test_node_link.py', 'networkx.readwrite.json_graph.tests.test_node_link', 'TestNodeLink', 'test_custom_attrs'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/json_graph/tests/test_node_link.py', 'networkx.readwrite.json_graph.tests.test_node_link', 'TestNodeLink', 'test_string_ids'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/json_graph/tests/test_node_link.py', 'networkx.readwrite.json_graph.tests.test_node_link', 'TestNodeLink', 'test_exception'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/json_graph/tests/test_node_link.py', 'networkx.readwrite.json_graph.tests.test_node_link', 'TestNodeLink', 'test_graph_attributes'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/json_graph/tests/test_node_link.py', 'networkx.readwrite.json_graph.tests.test_node_link', 'TestNodeLink', 'test_unicode_keys'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/json_graph/tests/test_node_link.py', 'networkx.readwrite.json_graph.tests.test_node_link', 'TestNodeLink', 'test_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/json_graph/tests/test_node_link.py', 'networkx.readwrite.json_graph.tests.test_node_link', 'TestNodeLink', 'test_graph_with_tuple_nodes']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/readwrite/json_graph/tree.py,,test_attrs_deprecation,"nodedata = {str(k): v for (k, v) in data.items() if k != ident and k != children}","
nodedata = dict()
for (k, v) in data.items():
    if k != ident and k != children:
        nodedata[str(k)] = v
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/readwrite/json_graph/tests/test_tree.py', 'networkx.readwrite.json_graph.tests.test_tree', '', 'test_graph_attributes'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/json_graph/tests/test_tree.py', 'networkx.readwrite.json_graph.tests.test_tree', '', 'test_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/json_graph/tests/test_tree.py', 'networkx.readwrite.json_graph.tests.test_tree', '', 'test_attrs_deprecation']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/readwrite/json_graph/tree.py,,test_attrs_deprecation,"nodedata = {str(k): v for (k, v) in data.items() if k != ident and k != children}","
nodedata = dict()
for (k, v) in data.items():
    if k != ident and k != children:
        nodedata[str(k)] = v
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/readwrite/json_graph/tests/test_tree.py', 'networkx.readwrite.json_graph.tests.test_tree', '', 'test_graph_attributes'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/json_graph/tests/test_tree.py', 'networkx.readwrite.json_graph.tests.test_tree', '', 'test_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/json_graph/tests/test_tree.py', 'networkx.readwrite.json_graph.tests.test_tree', '', 'test_attrs_deprecation']]"
gmplot,https://github.com/gmplot/gmplot/tree/master/gmplot/google_map_plotter.py,GoogleMapPlotterTest,test_invalid_symbol,"point_options = {option: value[i] for (option, value) in options.items()}","
point_options = dict()
for (option, value) in options.items():
    point_options[option] = value[i]
",1,"[['https://github.com/gmplot/gmplot/tree/master/tests/test_gmplot.py', 'tests.test_gmplot', 'GoogleMapPlotterTest', 'test_scatter_length_mismatch'], ['https://github.com/gmplot/gmplot/tree/master/tests/test_gmplot.py', 'tests.test_gmplot', 'GoogleMapPlotterTest', 'test_get'], ['https://github.com/gmplot/gmplot/tree/master/tests/test_gmplot.py', 'tests.test_gmplot', 'GoogleMapPlotterTest', 'test_invalid_symbol']]"
lbry-sdk,https://github.com/lbryio/lbry-sdk/tree/master/lbry/dht/serialization/datagram.py,TestDatagram,test_mixed_str_or_int_keys,"converted = {str(k).encode() if not isinstance(k, bytes) else k: v for (k, v) in primitive.items()}","
converted = dict()
for (k, v) in primitive.items():
    converted[str(k).encode() if not isinstance(k, bytes) else k] = v
",1,"[['https://github.com/lbryio/lbry-sdk/tree/master/tests/unit/dht/serialization/test_datagram.py', 'tests.unit.dht.serialization.test_datagram', 'TestDatagram', 'test_mixed_str_or_int_keys']]"
lbry-sdk,https://github.com/lbryio/lbry-sdk/tree/master/lbry/dht/serialization/datagram.py,TestDatagram,test_mixed_str_or_int_keys,"decoded = {k: converted[str(i).encode()] for (i, k) in enumerate(datagram_class.required_fields) if str(i).encode() in converted}","
decoded = dict()
for (i, k) in enumerate(datagram_class.required_fields):
    if str(i).encode() in converted:
        decoded[k] = converted[str(i).encode()]
",1,"[['https://github.com/lbryio/lbry-sdk/tree/master/tests/unit/dht/serialization/test_datagram.py', 'tests.unit.dht.serialization.test_datagram', 'TestDatagram', 'test_mixed_str_or_int_keys']]"
pinject,https://github.com/google/pinject/tree/master/pinject/arg_binding_keys.py,CreateKwargsTest,test_returns_provided_value_for_arg,return {arg_binding_key._arg_name: provider_fn(arg_binding_key) for arg_binding_key in arg_binding_keys},"tmp_DictComp0 = dict()
for arg_binding_key in arg_binding_keys:
    tmp_DictComp0[arg_binding_key._arg_name] = provider_fn(arg_binding_key)

return tmp_DictComp0
",1,"[['https://github.com/google/pinject/tree/master/tests/arg_binding_keys_test.py', 'tests.arg_binding_keys_test', 'CreateKwargsTest', 'test_returns_nothing_for_no_input'], ['https://github.com/google/pinject/tree/master/tests/arg_binding_keys_test.py', 'tests.arg_binding_keys_test', 'CreateKwargsTest', 'test_returns_provided_value_for_arg']]"
pinject,https://github.com/google/pinject/tree/master/pinject/object_graph.py,PareToPresentArgsTest,test_removes_only_args_not_present,"return {arg: value for (arg, value) in support.items(kwargs) if arg in arg_names}","tmp_DictComp0 = dict()
for (arg, value) in support.items(kwargs):
    if arg in arg_names:
        tmp_DictComp0[arg] = value

return tmp_DictComp0
",1,"[['https://github.com/google/pinject/tree/master/tests/object_graph_test.py', 'tests.object_graph_test', 'PareToPresentArgsTest', 'test_removes_only_args_not_present']]"
powerline,https://github.com/powerline/powerline/tree/master/powerline/segments/i3wm.py,TestI3WM,test_workspaces,ws_containers = {w_con.name: w_con for w_con in conn.get_tree().workspaces()},"
ws_containers = dict()
for w_con in conn.get_tree().workspaces():
    ws_containers[w_con.name] = w_con
",1,"[['https://github.com/powerline/powerline/tree/master/tests/test_python/test_segments.py', 'tests.test_python.test_segments', 'TestI3WM', 'test_workspaces']]"
gallery-dl,https://github.com/mikf/gallery-dl/tree/master/gallery_dl/util.py,TestOther,test_filter_dict,"return {k: v for (k, v) in a.items() if k[0] != '_'}","tmp_DictComp0 = dict()
for (k, v) in a.items():
    if k[0] != '_':
        tmp_DictComp0[k] = v

return tmp_DictComp0
",1,"[['https://github.com/mikf/gallery-dl/tree/master/test/test_util.py', 'test.test_util', 'TestOther', 'test_filter_dict']]"
gspread,https://github.com/burnash/gspread/tree/master/gspread/utils.py,UtilsTest,test_a1_to_grid_range_simple,"grid_range = {key: value for (key, value) in grid_range.items() if value != inf}","tmp_DictComp0 = dict()
for (key, value) in grid_range.items():
    if value != inf:
        tmp_DictComp0[key] = value

grid_range = tmp_DictComp0
",1,"[['https://github.com/burnash/gspread/tree/master/tests/utils_test.py', 'tests.utils_test', 'UtilsTest', 'test_a1_to_grid_range_unbounded'], ['https://github.com/burnash/gspread/tree/master/tests/utils_test.py', 'tests.utils_test', 'UtilsTest', 'test_a1_to_grid_range_improper_range'], ['https://github.com/burnash/gspread/tree/master/tests/utils_test.py', 'tests.utils_test', 'UtilsTest', 'test_a1_to_grid_range_other_directions'], ['https://github.com/burnash/gspread/tree/master/tests/utils_test.py', 'tests.utils_test', 'UtilsTest', 'test_a1_to_grid_range_simple']]"
icalendar,https://github.com/collective/icalendar/tree/master/src/icalendar/caselessdict.py,TestCaselessdict,test_caselessdict_canonsort_keys,"canonical_map = {k: i for (i, k) in enumerate(canonical_order or [])}","
canonical_map = dict()
for (i, k) in enumerate(canonical_order or []):
    canonical_map[k] = i
",1,"[['https://github.com/collective/icalendar/tree/master/src/icalendar/tests/test_unit_caselessdict.py', 'src.icalendar.tests.test_unit_caselessdict', 'TestCaselessdict', 'test_caselessdict_canonsort_keys']]"
altair,https://github.com/altair-viz/altair/tree/master/altair/utils/core.py,,test_infer_encoding_types_with_condition,channel_to_name = {c: c._encoding_name for c in channel_objs},"
channel_to_name = dict()
for c in channel_objs:
    channel_to_name[c] = c._encoding_name
",1,"[['https://github.com/altair-viz/altair/tree/master/altair/utils/tests/test_core.py', 'altair.utils.tests.test_core', '', 'test_infer_encoding_types'], ['https://github.com/altair-viz/altair/tree/master/altair/utils/tests/test_core.py', 'altair.utils.tests.test_core', '', 'test_infer_encoding_types_with_condition']]"
altair,https://github.com/altair-viz/altair/tree/master/altair/utils/core.py,,test_infer_encoding_types_with_condition,"return {encoding: _wrap_in_channel_class(obj, encoding) for (encoding, obj) in kwargs.items()}","tmp_DictComp0 = dict()
for (encoding, obj) in kwargs.items():
    tmp_DictComp0[encoding] = _wrap_in_channel_class(obj, encoding)

return tmp_DictComp0
",1,"[['https://github.com/altair-viz/altair/tree/master/altair/utils/tests/test_core.py', 'altair.utils.tests.test_core', '', 'test_infer_encoding_types'], ['https://github.com/altair-viz/altair/tree/master/altair/utils/tests/test_core.py', 'altair.utils.tests.test_core', '', 'test_infer_encoding_types_with_condition']]"
Hypernets,https://github.com/DataCanvasIO/Hypernets/tree/master/hypernets/utils/param_tuning.py,Test_ParamTuning,test_trigger_by_trials,params = {p.alias.split('.')[-1]: p.value for p in ps},"
params = dict()
for p in ps:
    params[p.alias.split('.')[-1]] = p.value
",1,"[['https://github.com/DataCanvasIO/Hypernets/tree/master/hypernets/tests/utils/tuning_test.py', 'hypernets.tests.utils.tuning_test', 'Test_ParamTuning', 'test_search_params'], ['https://github.com/DataCanvasIO/Hypernets/tree/master/hypernets/tests/utils/tuning_test.py', 'hypernets.tests.utils.tuning_test', 'Test_ParamTuning', 'test_trigger_by_reward'], ['https://github.com/DataCanvasIO/Hypernets/tree/master/hypernets/tests/utils/tuning_test.py', 'hypernets.tests.utils.tuning_test', 'Test_ParamTuning', 'test_trigger_by_trials']]"
maigret,https://github.com/soxoj/maigret/tree/master/maigret/sites.py,,test_ranked_sites_dict,return {site.name: site for site in sorted_list},"tmp_DictComp0 = dict()
for site in sorted_list:
    tmp_DictComp0[site.name] = site

return tmp_DictComp0
",1,"[['https://github.com/soxoj/maigret/tree/master/tests/test_sites.py', 'tests.test_sites', '', 'test_ranked_sites_dict_id_type'], ['https://github.com/soxoj/maigret/tree/master/tests/test_sites.py', 'tests.test_sites', '', 'test_ranked_sites_dict_disabled'], ['https://github.com/soxoj/maigret/tree/master/tests/test_sites.py', 'tests.test_sites', '', 'test_ranked_sites_dict_names'], ['https://github.com/soxoj/maigret/tree/master/tests/test_sites.py', 'tests.test_sites', '', 'test_ranked_sites_dict']]"
bpython,https://github.com/bpython/bpython/tree/master/bpython/simpleeval.py,TestSimpleEval,test_operators_on_suspicious_types,"return {_convert(k): _convert(v) for (k, v) in zip(node.keys, node.values)}","tmp_DictComp0 = dict()
for (k, v) in zip(node.keys, node.values):
    tmp_DictComp0[_convert(k)] = _convert(v)

return tmp_DictComp0
",1,"[['https://github.com/bpython/bpython/tree/master/bpython/test/test_simpleeval.py', 'bpython.test.test_simpleeval', 'TestSimpleEval', 'test_indexing'], ['https://github.com/bpython/bpython/tree/master/bpython/test/test_simpleeval.py', 'bpython.test.test_simpleeval', 'TestSimpleEval', 'test_name_lookup_indexing'], ['https://github.com/bpython/bpython/tree/master/bpython/test/test_simpleeval.py', 'bpython.test.test_simpleeval', 'TestSimpleEval', 'test_function_calls_raise'], ['https://github.com/bpython/bpython/tree/master/bpython/test/test_simpleeval.py', 'bpython.test.test_simpleeval', 'TestSimpleEval', 'test_attribute_access'], ['https://github.com/bpython/bpython/tree/master/bpython/test/test_simpleeval.py', 'bpython.test.test_simpleeval', 'TestSimpleEval', 'test_operators_on_numbers'], ['https://github.com/bpython/bpython/tree/master/bpython/test/test_simpleeval.py', 'bpython.test.test_simpleeval', 'TestSimpleEval', 'test_nonexistant_names_raise'], ['https://github.com/bpython/bpython/tree/master/bpython/test/test_simpleeval.py', 'bpython.test.test_simpleeval', 'TestSimpleEval', 'test_name_lookup'], ['https://github.com/bpython/bpython/tree/master/bpython/test/test_simpleeval.py', 'bpython.test.test_simpleeval', 'TestSimpleEval', 'test_lookup_on_suspicious_types'], ['https://github.com/bpython/bpython/tree/master/bpython/test/test_simpleeval.py', 'bpython.test.test_simpleeval', 'TestSimpleEval', 'test_operators_on_suspicious_types']]"
dfply,https://github.com/kieferk/dfply/tree/master/dfply/reshape.py,,test_rename,"return df.rename(columns={v: k for (k, v) in kwargs.items()})","tmp_DictComp0 = dict()
for (k, v) in kwargs.items():
    tmp_DictComp0[v] = k

return df.rename(columns=tmp_DictComp0)
",1,"[['https://github.com/kieferk/dfply/tree/master/test/test_reshape.py', 'test.test_reshape', '', 'test_rename']]"
dfply,https://github.com/kieferk/dfply/tree/master/dfply/summarize.py,,test_nth,"return pd.DataFrame({k: [v] for (k, v) in kwargs.items()})","tmp_DictComp0 = dict()
for (k, v) in kwargs.items():
    tmp_DictComp0[k] = [v]

return pd.DataFrame(tmp_DictComp0)
",1,"[['https://github.com/kieferk/dfply/tree/master/test/test_summary_functions.py', 'test.test_summary_functions', '', 'test_last'], ['https://github.com/kieferk/dfply/tree/master/test/test_summary_functions.py', 'test.test_summary_functions', '', 'test_n'], ['https://github.com/kieferk/dfply/tree/master/test/test_summary_functions.py', 'test.test_summary_functions', '', 'test_var'], ['https://github.com/kieferk/dfply/tree/master/test/test_summarize.py', 'test.test_summarize', '', 'test_summarize'], ['https://github.com/kieferk/dfply/tree/master/test/test_summary_functions.py', 'test.test_summary_functions', '', 'test_colmin'], ['https://github.com/kieferk/dfply/tree/master/test/test_summary_functions.py', 'test.test_summary_functions', '', 'test_IQR'], ['https://github.com/kieferk/dfply/tree/master/test/test_vector.py', 'test.test_vector', '', 'test_desc'], ['https://github.com/kieferk/dfply/tree/master/test/test_summary_functions.py', 'test.test_summary_functions', '', 'test_first'], ['https://github.com/kieferk/dfply/tree/master/test/test_summary_functions.py', 'test.test_summary_functions', '', 'test_colmax'], ['https://github.com/kieferk/dfply/tree/master/test/test_summary_functions.py', 'test.test_summary_functions', '', 'test_mean'], ['https://github.com/kieferk/dfply/tree/master/test/test_summary_functions.py', 'test.test_summary_functions', '', 'test_sd'], ['https://github.com/kieferk/dfply/tree/master/test/test_summary_functions.py', 'test.test_summary_functions', '', 'test_n_distinct'], ['https://github.com/kieferk/dfply/tree/master/test/test_summary_functions.py', 'test.test_summary_functions', '', 'test_median'], ['https://github.com/kieferk/dfply/tree/master/test/test_summary_functions.py', 'test.test_summary_functions', '', 'test_nth']]"
tavern,https://github.com/taverntesting/tavern/tree/master/tavern/core.py,TestIncludeStages,test_included_stage,all_stages = {s['id']: s for s in available_stages + included_stages},"
all_stages = dict()
for s in available_stages + included_stages:
    all_stages[s['id']] = s
",1,"[['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_core.py', 'tests.unit.test_core', 'TestTavernMetaFormat', 'test_format_env_keys'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_core.py', 'tests.unit.test_core', 'TestRetry', 'test_run_once'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_core.py', 'tests.unit.test_core', 'TestFormatMQTTVarsJson', 'test_format_request_var_dict'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_core.py', 'tests.unit.test_core', 'TestIncludeStages', 'test_both_stages'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_core.py', 'tests.unit.test_core', 'TestTavernMetaFormat', 'test_format_env_keys_missing_failure'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_core.py', 'tests.unit.test_core', 'TestRetry', 'test_repeats_twice_and_succeeds'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_core.py', 'tests.unit.test_core', 'TestIncludeStages', 'test_neither'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_core.py', 'tests.unit.test_core', 'TestDelay', 'test_sleep_after'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_core.py', 'tests.unit.test_core', 'TestFormatMQTTVarsPlain', 'test_format_request_var_value'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_core.py', 'tests.unit.test_core', 'TestRunStages', 'test_invalid_headers'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_core.py', 'tests.unit.test_core', 'TestRunStages', 'test_invalid_code'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_core.py', 'tests.unit.test_core', 'TestRetry', 'test_repeats_twice_and_fails'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_core.py', 'tests.unit.test_core', 'TestDelay', 'test_sleep_before'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_core.py', 'tests.unit.test_core', 'TestRunStages', 'test_invalid_body'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_core.py', 'tests.unit.test_core', 'TestIncludeStages', 'test_global_stage'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_core.py', 'tests.unit.test_core', 'TestRunStages', 'test_success'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_core.py', 'tests.unit.test_core', 'TestIncludeStages', 'test_included_stage']]"
tavern,https://github.com/taverntesting/tavern/tree/master/tavern/_plugins/rest/request.py,TestRequestArgs,test_file_and_json_fails,"rspec['headers'] = {i: j for (i, j) in headers.items() if i.lower() != 'content-type'}","
rspec['headers'] = dict()
for (i, j) in headers.items():
    if i.lower() != 'content-type':
        rspec['headers'][i] = j
",1,"[['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_request.py', 'tests.unit.test_request', 'TestRequestArgs', 'test_default_method'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_request.py', 'tests.unit.test_request', 'TestRequestArgs', 'test_no_override_method'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_request.py', 'tests.unit.test_request', 'TestRequestArgs', 'test_no_set_content_type'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_request.py', 'tests.unit.test_request', 'TestRequestArgs', 'test_array_substitution'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_request.py', 'tests.unit.test_request', 'TestRequestArgs', 'test_cannot_send_data_and_json'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_request.py', 'tests.unit.test_request', 'TestRequestArgs', 'test_no_override_content_type_case_insensitive'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_request.py', 'tests.unit.test_request', 'TestRequestArgs', 'test_file_and_data_succeeds'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_request.py', 'tests.unit.test_request', 'TestFileBody', 'test_file_body'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_request.py', 'tests.unit.test_request', 'TestRequestArgs', 'test_no_override_content_type'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_request.py', 'tests.unit.test_request', 'TestRequestArgs', 'test_nested_params_encoded'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_request.py', 'tests.unit.test_request', 'TestRequestArgs', 'test_file_and_json_fails']]"
beancount,https://github.com/beancount/beancount/tree/master/beancount/utils/misc_utils.py,TestMiscUtils,test_map_namedtuple_attributes,"return object_._replace(**{attribute: mapper(getattr(object_, attribute)) for attribute in attributes})","def my_comprehension_func(object_):
    tmp_DictComp0 = dict()
    for attribute in attributes:
        tmp_DictComp0[attribute] = mapper(getattr(object_, attribute))
    return tmp_DictComp0

return object_._replace(**my_comprehension_func(object_))
",1,"[['https://github.com/beancount/beancount/tree/master/beancount/utils/misc_utils_test.py', 'beancount.utils.misc_utils_test', 'TestMiscUtils', 'test_map_namedtuple_attributes']]"
xonsh,https://github.com/xonsh/xonsh/tree/master/xonsh/tools.py,,test_swap_values,"old = {k: d.get(k, default) for k in updates}","
old = dict()
for k in updates:
    old[k] = d.get(k, default)
",1,"[['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_swap_values']]"
xonsh,https://github.com/xonsh/xonsh/tree/master/xonsh/environ.py,,test_make_args_env,"env = {'ARG' + str(i): arg for (i, arg) in enumerate(args)}","
env = dict()
for (i, arg) in enumerate(args):
    env['ARG' + str(i)] = arg
",1,"[['https://github.com/xonsh/xonsh/tree/master/tests/test_environ.py', 'tests.test_environ', '', 'test_make_args_env']]"
xonsh,https://github.com/xonsh/xonsh/tree/master/xonsh/xontribs.py,,test_withall,"ctx = {k: getattr(m, k) for k in pubnames}","
ctx = dict()
for k in pubnames:
    ctx[k] = getattr(m, k)
",1,"[['https://github.com/xonsh/xonsh/tree/master/tests/test_xontribs.py', 'tests.test_xontribs', '', 'test_noall'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_xontribs.py', 'tests.test_xontribs', '', 'test_withall']]"
xonsh,https://github.com/xonsh/xonsh/tree/master/xonsh/xontribs.py,,test_withall,"ctx = {k: getattr(m, k) for k in dir(m) if not k.startswith('_')}","
ctx = dict()
for k in dir(m):
    if not k.startswith('_'):
        ctx[k] = getattr(m, k)
",1,"[['https://github.com/xonsh/xonsh/tree/master/tests/test_xontribs.py', 'tests.test_xontribs', '', 'test_noall'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_xontribs.py', 'tests.test_xontribs', '', 'test_withall']]"
xonsh,https://github.com/xonsh/xonsh/tree/master/xontrib/mplhooks.py,,test_mpl_preserve_width,"subplotpars = {k: getattr(fig.subplotpars, k) for k in ['wspace', 'hspace', 'bottom', 'top', 'left', 'right']}","
subplotpars = dict()
for k in ['wspace', 'hspace', 'bottom', 'top', 'left', 'right']:
    subplotpars[k] = getattr(fig.subplotpars, k)
",1,"[['https://github.com/xonsh/xonsh/tree/master/tests/test_mpl.py', 'tests.test_mpl', '', 'test_mpl_preserve_image_tight'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_mpl.py', 'tests.test_mpl', '', 'test_mpl_preserve_standard'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_mpl.py', 'tests.test_mpl', '', 'test_mpl_preserve_dpi'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_mpl.py', 'tests.test_mpl', '', 'test_mpl_preserve_font_size'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_mpl.py', 'tests.test_mpl', '', 'test_mpl_preserve_face_color'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_mpl.py', 'tests.test_mpl', '', 'test_mpl_preserve_height'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_mpl.py', 'tests.test_mpl', '', 'test_mpl_preserve_width']]"
