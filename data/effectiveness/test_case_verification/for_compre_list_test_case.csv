repo_name,file_html,cl,me,old_code,new_code,flag_pass,test_html_list
gunicorn,https://github.com/benoitc/gunicorn/tree/master/gunicorn/util.py,,test_import_app_py_ext,args = [ast.literal_eval(arg) for arg in expression.args],"
args = []
for arg in expression.args:
    args.append(ast.literal_eval(arg))
",1,"[['https://github.com/benoitc/gunicorn/tree/master/tests/test_util.py', 'tests.test_util', '', 'test_import_app_py_ext']]"
gunicorn,https://github.com/benoitc/gunicorn/tree/master/gunicorn/sock.py,,test_create_sockets_unix_strings,"fdaddr = [bind for bind in addr if isinstance(bind, int)]","
fdaddr = []
for bind in addr:
    if isinstance(bind, int):
        fdaddr.append(bind)
",1,"[['https://github.com/benoitc/gunicorn/tree/master/tests/test_sock.py', 'tests.test_sock', '', 'test_create_sockets_unix_bytes'], ['https://github.com/benoitc/gunicorn/tree/master/tests/test_sock.py', 'tests.test_sock', '', 'test_create_sockets_unix_strings']]"
gunicorn,https://github.com/benoitc/gunicorn/tree/master/gunicorn/sock.py,,test_create_sockets_unix_strings,"laddr = [bind for bind in addr if not isinstance(bind, int)]","
laddr = []
for bind in addr:
    if not isinstance(bind, int):
        laddr.append(bind)
",1,"[['https://github.com/benoitc/gunicorn/tree/master/tests/test_sock.py', 'tests.test_sock', '', 'test_create_sockets_unix_bytes'], ['https://github.com/benoitc/gunicorn/tree/master/tests/test_sock.py', 'tests.test_sock', '', 'test_create_sockets_unix_strings']]"
gunicorn,https://github.com/benoitc/gunicorn/tree/master/gunicorn/http/wsgi.py,,test_http_header_encoding,"tosend.extend(['%s: %s\r\n' % (k, v) for (k, v) in self.headers])","tmp_ListComp0 = []
for (k, v) in self.headers:
    tmp_ListComp0.append('%s: %s\r\n' % (k, v))

tosend.extend(tmp_ListComp0)
",1,"[['https://github.com/benoitc/gunicorn/tree/master/tests/test_http.py', 'tests.test_http', '', 'test_http_header_encoding']]"
WeRoBot,https://github.com/offu/WeRoBot/tree/master/werobot/utils.py,,test_pay_sign_dict,"_params = [(k.lower(), v) for (k, v) in kwargs.items() if k.lower() != 'appid']","
_params = []
for (k, v) in kwargs.items():
    if k.lower() != 'appid':
        _params.append((k.lower(), v))
",1,"[['https://github.com/offu/WeRoBot/tree/master/tests/test_utils.py', 'tests.test_utils', '', 'test_pay_sign_dict']]"
WeRoBot,https://github.com/offu/WeRoBot/tree/master/werobot/utils.py,,test_pay_sign_dict,"sign = '&'.join(['%s=%s' % (str(p[0]), str(p[1])) for p in _params]).encode('utf-8')","tmp_ListComp0 = []
for p in _params:
    tmp_ListComp0.append('%s=%s' % (str(p[0]), str(p[1])))

sign = '&'.join(tmp_ListComp0).encode('utf-8')
",1,"[['https://github.com/offu/WeRoBot/tree/master/tests/test_utils.py', 'tests.test_utils', '', 'test_pay_sign_dict']]"
feature_engine,https://github.com/feature-engine/feature_engine/tree/master/feature_engine/dataframe_checks.py,,test_is_dataframe,col_names = [str(i) for i in range(X.shape[1])],"
col_names = []
for i in range(X.shape[1]):
    col_names.append(str(i))
",1,"[['https://github.com/feature-engine/feature_engine/tree/master/tests/test_dataframe_checks.py', 'tests.test_dataframe_checks', '', 'test_is_dataframe']]"
feature_engine,https://github.com/feature-engine/feature_engine/tree/master/feature_engine/encoding/one_hot.py,,test_raises_error_if_df_contains_na,self.variables_binary_ = [var for var in self.variables_ if X[var].nunique() == 2],"tmp_ListComp0 = []
for var in self.variables_:
    if X[var].nunique() == 2:
        tmp_ListComp0.append(var)

self.variables_binary_ = tmp_ListComp0
",1,"[['https://github.com/feature-engine/feature_engine/tree/master/tests/test_encoding/test_onehot_encoder.py', 'tests.test_encoding.test_onehot_encoder', '', 'test_raises_error_if_df_contains_na']]"
feature_engine,https://github.com/feature-engine/feature_engine/tree/master/feature_engine/encoding/one_hot.py,,test_raises_error_if_df_contains_na,self.encoder_dict_[var] = [x for x in X[var].value_counts().sort_values(ascending=False).head(self.top_categories).index],"tmp_ListComp0 = []
for x in X[var].value_counts().sort_values(ascending=False).head(self.top_categories).index:
    tmp_ListComp0.append(x)

self.encoder_dict_[var] = tmp_ListComp0
",1,"[['https://github.com/feature-engine/feature_engine/tree/master/tests/test_encoding/test_onehot_encoder.py', 'tests.test_encoding.test_onehot_encoder', '', 'test_raises_error_if_df_contains_na']]"
feature_engine,https://github.com/feature-engine/feature_engine/tree/master/feature_engine/encoding/one_hot.py,,test_raises_error_if_df_contains_na,category_ls = [x for x in X[var].unique()],"
category_ls = []
for x in X[var].unique():
    category_ls.append(x)
",1,"[['https://github.com/feature-engine/feature_engine/tree/master/tests/test_encoding/test_onehot_encoder.py', 'tests.test_encoding.test_onehot_encoder', '', 'test_raises_error_if_df_contains_na']]"
feature_engine,https://github.com/feature-engine/feature_engine/tree/master/feature_engine/encoding/one_hot.py,,test_raises_error_if_df_contains_na,self.encoder_dict_[var] = [x for x in X[var].unique()],"tmp_ListComp0 = []
for x in X[var].unique():
    tmp_ListComp0.append(x)

self.encoder_dict_[var] = tmp_ListComp0
",1,"[['https://github.com/feature-engine/feature_engine/tree/master/tests/test_encoding/test_onehot_encoder.py', 'tests.test_encoding.test_onehot_encoder', '', 'test_raises_error_if_df_contains_na']]"
feature_engine,https://github.com/feature-engine/feature_engine/tree/master/feature_engine/wrappers/wrappers.py,,test_selectFromModel_selected_variables,remaining_variables = [var for var in X.columns if var not in self.variables_],"
remaining_variables = []
for var in X.columns:
    if var not in self.variables_:
        remaining_variables.append(var)
",1,"[['https://github.com/feature-engine/feature_engine/tree/master/tests/test_wrappers/test_sklearn_wrapper.py', 'tests.test_wrappers.test_sklearn_wrapper', '', 'test_selectFromModel_all_variables'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_wrappers/test_sklearn_wrapper.py', 'tests.test_wrappers.test_sklearn_wrapper', '', 'test_selectKBest_all_variables'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_wrappers/test_sklearn_wrapper.py', 'tests.test_wrappers.test_sklearn_wrapper', '', 'test_selectFromModel_selected_variables']]"
feature_engine,https://github.com/feature-engine/feature_engine/tree/master/feature_engine/creation/mathematical_combination.py,,test_error_when_null_values_in_variable,vars_ls = [str(var) for var in self.variables_to_combine],"
vars_ls = []
for var in self.variables_to_combine:
    vars_ls.append(str(var))
",1,"[['https://github.com/feature-engine/feature_engine/tree/master/tests/test_creation/test_mathematical_combination.py', 'tests.test_creation.test_mathematical_combination', '', 'test_error_when_null_values_in_variable']]"
feature_engine,https://github.com/feature-engine/feature_engine/tree/master/feature_engine/selection/drop_correlated_features.py,,test_error_if_fit_input_not_dataframe,_features_to_compare = [f for f in _correlated_matrix.columns if f not in _examined_features],"
_features_to_compare = []
for f in _correlated_matrix.columns:
    if f not in _examined_features:
        _features_to_compare.append(f)
",1,"[['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_drop_correlated_features.py', 'tests.test_selection.test_drop_correlated_features', '', 'test_error_if_fit_input_not_dataframe']]"
feature_engine,https://github.com/feature-engine/feature_engine/tree/master/feature_engine/selection/target_mean_selection.py,,test_error_if_fit_input_not_dataframe,self.features_to_drop_ = [f for f in self.variables_ if self.feature_performance_[f] < threshold],"tmp_ListComp0 = []
for f in self.variables_:
    if self.feature_performance_[f] < threshold:
        tmp_ListComp0.append(f)

self.features_to_drop_ = tmp_ListComp0
",1,"[['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_target_mean_selection.py', 'tests.test_selection.test_target_mean_selection', '', 'test_df_cat_and_num_variables_roc_auc'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_target_mean_selection.py', 'tests.test_selection.test_target_mean_selection', '', 'test_df_cat_and_num_variables_r2'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_target_mean_selection.py', 'tests.test_selection.test_target_mean_selection', '', 'test_categorical_variables_roc_auc'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_target_mean_selection.py', 'tests.test_selection.test_target_mean_selection', '', 'test_error_if_y_not_passed'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_target_mean_selection.py', 'tests.test_selection.test_target_mean_selection', '', 'test_numerical_variables_roc_auc'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_target_mean_selection.py', 'tests.test_selection.test_target_mean_selection', '', 'test_error_if_input_not_df'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_target_mean_selection.py', 'tests.test_selection.test_target_mean_selection', '', 'test_error_if_fit_input_not_dataframe']]"
feature_engine,https://github.com/feature-engine/feature_engine/tree/master/feature_engine/selection/drop_duplicate_features.py,,test_fit_attributes,_features_to_compare = [f for f in self.variables_ if f not in _examined_features.union(self.features_to_drop_)],"
_features_to_compare = []
for f in self.variables_:
    if f not in _examined_features.union(self.features_to_drop_):
        _features_to_compare.append(f)
",1,"[['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_drop_duplicate_features.py', 'tests.test_selection.test_drop_duplicate_features', '', 'test_variables_assigned_correctly'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_drop_duplicate_features.py', 'tests.test_selection.test_drop_duplicate_features', '', 'test_error_if_fit_input_not_dataframe'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_drop_duplicate_features.py', 'tests.test_selection.test_drop_duplicate_features', '', 'test_fit_attributes']]"
feature_engine,https://github.com/feature-engine/feature_engine/tree/master/feature_engine/selection/drop_constant_features.py,,test_missing_values_param,self.features_to_drop_ = [feature for feature in self.variables_ if X[feature].nunique() == 1],"tmp_ListComp0 = []
for feature in self.variables_:
    if X[feature].nunique() == 1:
        tmp_ListComp0.append(feature)

self.features_to_drop_ = tmp_ListComp0
",1,"[['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_drop_constant_features.py', 'tests.test_selection.test_drop_constant_features', '', 'test_error_if_fit_input_not_df'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_drop_constant_features.py', 'tests.test_selection.test_drop_constant_features', '', 'test_error_if_input_all_constant_features'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_drop_constant_features.py', 'tests.test_selection.test_drop_constant_features', '', 'test_missing_values_param']]"
feature_engine,https://github.com/feature-engine/feature_engine/tree/master/feature_engine/selection/smart_correlation_selection.py,,test_error_if_fit_input_not_dataframe,_selected_features = [f for f in X.columns if f not in set().union(*self.correlated_feature_sets_)],"
_selected_features = []
for f in X.columns:
    if f not in set().union(*self.correlated_feature_sets_):
        _selected_features.append(f)
",1,"[['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_smart_correlation_selection.py', 'tests.test_selection.test_smart_correlation_selection', '', 'test_error_if_fit_input_not_dataframe']]"
feature_engine,https://github.com/feature-engine/feature_engine/tree/master/feature_engine/selection/smart_correlation_selection.py,,test_error_if_fit_input_not_dataframe,self.features_to_drop_ = [f for f in self.variables_ if f not in _selected_features],"tmp_ListComp0 = []
for f in self.variables_:
    if f not in _selected_features:
        tmp_ListComp0.append(f)

self.features_to_drop_ = tmp_ListComp0
",1,"[['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_smart_correlation_selection.py', 'tests.test_selection.test_smart_correlation_selection', '', 'test_error_if_fit_input_not_dataframe']]"
feature_engine,https://github.com/feature-engine/feature_engine/tree/master/feature_engine/selection/smart_correlation_selection.py,,test_error_if_fit_input_not_dataframe,_features_to_compare = [f for f in _correlated_matrix.columns if f not in _examined_features],"
_features_to_compare = []
for f in _correlated_matrix.columns:
    if f not in _examined_features:
        _features_to_compare.append(f)
",1,"[['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_smart_correlation_selection.py', 'tests.test_selection.test_smart_correlation_selection', '', 'test_error_if_fit_input_not_dataframe']]"
feature_engine,https://github.com/feature-engine/feature_engine/tree/master/feature_engine/imputation/random_sample.py,,test_error_if_random_state_is_string,self.variables_ = [var for var in X.columns],"
self.variables_ = []
for var in X.columns:
    self.variables_.append(var)
",1,"[['https://github.com/feature-engine/feature_engine/tree/master/tests/test_imputation/test_random_sample_imputer.py', 'tests.test_imputation.test_random_sample_imputer', '', 'test_error_if_random_state_is_string']]"
feature_engine,https://github.com/feature-engine/feature_engine/tree/master/feature_engine/outliers/artbitrary.py,,test_fit_and_transform_raise_error_if_df_contains_na,self.variables_ = [x for x in self.max_capping_dict.keys()],"tmp_ListComp0 = []
for x in self.max_capping_dict.keys():
    tmp_ListComp0.append(x)

self.variables_ = tmp_ListComp0
",1,"[['https://github.com/feature-engine/feature_engine/tree/master/tests/test_outliers/test_arbitrary_capper.py', 'tests.test_outliers.test_arbitrary_capper', '', 'test_fit_and_transform_raise_error_if_df_contains_na']]"
feature_engine,https://github.com/feature-engine/feature_engine/tree/master/feature_engine/outliers/artbitrary.py,,test_fit_and_transform_raise_error_if_df_contains_na,self.variables_ = [x for x in self.min_capping_dict.keys()],"tmp_ListComp0 = []
for x in self.min_capping_dict.keys():
    tmp_ListComp0.append(x)

self.variables_ = tmp_ListComp0
",1,"[['https://github.com/feature-engine/feature_engine/tree/master/tests/test_outliers/test_arbitrary_capper.py', 'tests.test_outliers.test_arbitrary_capper', '', 'test_fit_and_transform_raise_error_if_df_contains_na']]"
feature_engine,https://github.com/feature-engine/feature_engine/tree/master/feature_engine/outliers/artbitrary.py,,test_fit_and_transform_raise_error_if_df_contains_na,self.variables_ = [x for x in tmp.keys()],"
self.variables_ = []
for x in tmp.keys():
    self.variables_.append(x)
",1,"[['https://github.com/feature-engine/feature_engine/tree/master/tests/test_outliers/test_arbitrary_capper.py', 'tests.test_outliers.test_arbitrary_capper', '', 'test_fit_and_transform_raise_error_if_df_contains_na']]"
nox,https://github.com/theacodes/nox/tree/master/nox/tasks.py,,test_create_report_noop,"json.dump({'result': int(all(results)), 'sessions': [result.serialize() for result in results]}, report_file, indent=2)","def my_comprehension_func(results):
    tmp_ListComp0 = []
    for result in results:
        tmp_ListComp0.append(result.serialize())
    return tmp_ListComp0

json.dump({'result': int(all(results)), 'sessions': my_comprehension_func(results)}, report_file, indent=2)
",1,"[['https://github.com/theacodes/nox/tree/master/tests/test_tasks.py', 'tests.test_tasks', '', 'test_create_report'], ['https://github.com/theacodes/nox/tree/master/tests/test_tasks.py', 'tests.test_tasks', '', 'test_create_report_noop']]"
nox,https://github.com/theacodes/nox/tree/master/nox/_options.py,TestOptionSet,test_session_completer_invalid_sessions,"return [session.friendly_name for (session, _) in filtered_manifest.list_all_sessions()]","tmp_ListComp0 = []
for (session, _) in filtered_manifest.list_all_sessions():
    tmp_ListComp0.append(session.friendly_name)

return tmp_ListComp0
",1,"[['https://github.com/theacodes/nox/tree/master/tests/test__option_set.py', 'tests.test__option_set', 'TestOptionSet', 'test_session_completer'], ['https://github.com/theacodes/nox/tree/master/tests/test__option_set.py', 'tests.test__option_set', 'TestOptionSet', 'test_session_completer_invalid_sessions']]"
nox,https://github.com/theacodes/nox/tree/master/nox/_parametrize.py,,test_parametrize_decorator_multiple_args_as_string,"arg_names = list(filter(None, [arg.strip() for arg in arg_names.split(',')]))","tmp_ListComp0 = []
for arg in arg_names.split(','):
    tmp_ListComp0.append(arg.strip())

arg_names = list(filter(None, tmp_ListComp0))
",1,"[['https://github.com/theacodes/nox/tree/master/tests/test__parametrize.py', 'tests.test__parametrize', '', 'test_parametrize_decorator_one_with_args'], ['https://github.com/theacodes/nox/tree/master/tests/test__parametrize.py', 'tests.test__parametrize', '', 'test_parametrize_decorator_one'], ['https://github.com/theacodes/nox/tree/master/tests/test__parametrize.py', 'tests.test__parametrize', '', 'test_parametrize_decorator_multiple_and_stack'], ['https://github.com/theacodes/nox/tree/master/tests/test__parametrize.py', 'tests.test__parametrize', '', 'test_parametrize_decorator_one_param'], ['https://github.com/theacodes/nox/tree/master/tests/test__parametrize.py', 'tests.test__parametrize', '', 'test_parametrize_decorator_mixed_params'], ['https://github.com/theacodes/nox/tree/master/tests/test__parametrize.py', 'tests.test__parametrize', '', 'test_parametrize_decorator_multiple_args_as_list'], ['https://github.com/theacodes/nox/tree/master/tests/test__parametrize.py', 'tests.test__parametrize', '', 'test_parametrize_decorator_param'], ['https://github.com/theacodes/nox/tree/master/tests/test__parametrize.py', 'tests.test__parametrize', '', 'test_parametrize_decorator_stack'], ['https://github.com/theacodes/nox/tree/master/tests/test__parametrize.py', 'tests.test__parametrize', '', 'test_parametrize_decorator_id_list'], ['https://github.com/theacodes/nox/tree/master/tests/test__parametrize.py', 'tests.test__parametrize', '', 'test_parametrize_decorator_multiple_args_as_string']]"
nox,https://github.com/theacodes/nox/tree/master/nox/_decorators.py,,test_generate_calls_ids,"return [cls(func, param_spec) for param_spec in param_specs]","tmp_ListComp0 = []
for param_spec in param_specs:
    tmp_ListComp0.append(cls(func, param_spec))

return tmp_ListComp0
",1,"[['https://github.com/theacodes/nox/tree/master/tests/test__parametrize.py', 'tests.test__parametrize', '', 'test_generate_calls_multiple_args'], ['https://github.com/theacodes/nox/tree/master/tests/test__parametrize.py', 'tests.test__parametrize', '', 'test_generate_calls_python_compatibility'], ['https://github.com/theacodes/nox/tree/master/tests/test__parametrize.py', 'tests.test__parametrize', '', 'test_generate_calls_simple'], ['https://github.com/theacodes/nox/tree/master/tests/test__parametrize.py', 'tests.test__parametrize', '', 'test_generate_calls_session_python'], ['https://github.com/theacodes/nox/tree/master/tests/test__parametrize.py', 'tests.test__parametrize', '', 'test_generate_calls_ids']]"
udocker,https://github.com/indigo-dc/udocker/tree/master/udocker/msg.py,MsgTestCase,test_03_out,sys.stdout.write(' '.join([str(x) for x in args]) + '\n'),"tmp_ListComp0 = []
for x in args:
    tmp_ListComp0.append(str(x))

sys.stdout.write(' '.join(tmp_ListComp0) + '\n')
",1,"[['https://github.com/indigo-dc/udocker/tree/master/tests/unit/test_msg.py', 'tests.unit.test_msg', 'MsgTestCase', 'test_03_out']]"
business-rules,https://github.com/venmo/business-rules/tree/master/business_rules/actions.py,ActionsClassTests,test_base_has_no_actions,"return [{'name': m[0], 'label': m[1].label, 'params': m[1].params} for m in methods if getattr(m[1], 'is_rule_action', False)]","tmp_ListComp0 = []
for m in methods:
    if getattr(m[1], 'is_rule_action', False):
        tmp_ListComp0.append({'name': m[0], 'label': m[1].label, 'params': m[1].params})

return tmp_ListComp0
",1,"[['https://github.com/venmo/business-rules/tree/master/tests/test_actions_class.py', 'tests.test_actions_class', 'ActionsClassTests', 'test_base_has_no_actions']]"
business-rules,https://github.com/venmo/business-rules/tree/master/business_rules/actions.py,ActionsClassTests,test_get_all_actions,"params_ = [dict(label=fn_name_to_pretty_label(name), name=name, fieldType=field_type) for (name, field_type) in params.items()]","
params_ = []
for (name, field_type) in params.items():
    params_.append(dict(label=fn_name_to_pretty_label(name), name=name, fieldType=field_type))
",1,"[['https://github.com/venmo/business-rules/tree/master/tests/test_actions_class.py', 'tests.test_actions_class', 'ActionsClassTests', 'test_rule_action_with_no_params_or_label'], ['https://github.com/venmo/business-rules/tree/master/tests/test_actions_class.py', 'tests.test_actions_class', 'ActionsClassTests', 'test_rule_action_doesnt_allow_unknown_field_types'], ['https://github.com/venmo/business-rules/tree/master/tests/test_actions_class.py', 'tests.test_actions_class', 'ActionsClassTests', 'test_rule_action_doesnt_allow_unknown_parameter_name'], ['https://github.com/venmo/business-rules/tree/master/tests/test_actions_class.py', 'tests.test_actions_class', 'ActionsClassTests', 'test_get_all_actions']]"
business-rules,https://github.com/venmo/business-rules/tree/master/business_rules/operators.py,OperatorsClassTests,test_base_has_no_operators,"return [{'name': m[0], 'label': m[1].label, 'input_type': m[1].input_type} for m in methods if getattr(m[1], 'is_operator', False)]","tmp_ListComp0 = []
for m in methods:
    if getattr(m[1], 'is_operator', False):
        tmp_ListComp0.append({'name': m[0], 'label': m[1].label, 'input_type': m[1].input_type})

return tmp_ListComp0
",1,"[['https://github.com/venmo/business-rules/tree/master/tests/test_operators_class.py', 'tests.test_operators_class', 'OperatorsClassTests', 'test_base_has_no_operators']]"
business-rules,https://github.com/venmo/business-rules/tree/master/business_rules/operators.py,OperatorsClassTests,test_get_all_operators,args = [self._assert_valid_value_and_cast(arg) for arg in args],"tmp_ListComp0 = []
for arg in args:
    tmp_ListComp0.append(self._assert_valid_value_and_cast(arg))

args = tmp_ListComp0
",1,"[['https://github.com/venmo/business-rules/tree/master/tests/test_operators_class.py', 'tests.test_operators_class', 'OperatorsClassTests', 'test_operator_decorator_casts_argument'], ['https://github.com/venmo/business-rules/tree/master/tests/test_operators_class.py', 'tests.test_operators_class', 'OperatorsClassTests', 'test_get_all_operators']]"
business-rules,https://github.com/venmo/business-rules/tree/master/business_rules/utils.py,RuleVariableTests,test_pretty_label,return ' '.join([w.title() for w in name.split('_')]),"tmp_ListComp0 = []
for w in name.split('_'):
    tmp_ListComp0.append(w.title())

return ' '.join(tmp_ListComp0)
",1,"[['https://github.com/venmo/business-rules/tree/master/tests/test_variables.py', 'tests.test_variables', 'RuleVariableTests', 'test_pretty_label']]"
business-rules,https://github.com/venmo/business-rules/tree/master/business_rules/variables.py,VariablesClassTests,test_base_has_no_variables,"return [{'name': m[0], 'label': m[1].label, 'field_type': m[1].field_type.name, 'options': m[1].options} for m in methods if getattr(m[1], 'is_rule_variable', False)]","tmp_ListComp0 = []
for m in methods:
    if getattr(m[1], 'is_rule_variable', False):
        tmp_ListComp0.append({'name': m[0], 'label': m[1].label, 'field_type': m[1].field_type.name, 'options': m[1].options})

return tmp_ListComp0
",1,"[['https://github.com/venmo/business-rules/tree/master/tests/test_variables_class.py', 'tests.test_variables_class', 'VariablesClassTests', 'test_base_has_no_variables']]"
satellite,https://github.com/Blockstream/satellite/tree/master/blocksatcli/config.py,TestConfigDir,test_chan_conf,pids = '+'.join([str(x) for x in defs.pids]),"tmp_ListComp0 = []
for x in defs.pids:
    tmp_ListComp0.append(str(x))

pids = '+'.join(tmp_ListComp0)
",1,"[['https://github.com/Blockstream/satellite/tree/master/blocksatcli/test_config.py', 'blocksatcli.test_config', 'TestConfigDir', 'test_chan_conf']]"
satellite,https://github.com/Blockstream/satellite/tree/master/blocksatcli/satip.py,TestApi,test_discover,"sat_ip_devices = [{'host': d.host, 'base_url': d.base_url} for d in devices if d.friendly_name == 'SELFSAT-IP']","
sat_ip_devices = []
for d in devices:
    if d.friendly_name == 'SELFSAT-IP':
        sat_ip_devices.append({'host': d.host, 'base_url': d.base_url})
",1,"[['https://github.com/Blockstream/satellite/tree/master/blocksatcli/test_satip.py', 'blocksatcli.test_satip', 'TestApi', 'test_discover']]"
satellite,https://github.com/Blockstream/satellite/tree/master/blocksatcli/tsp.py,TestTsp,test_non_prompting_opts,"cmd.extend(['-P', 'mpe', '--pid', '-'.join([str(pid) for pid in defs.pids]), '--udp-forward', '--local-address', args.local_address])","tmp_ListComp0 = []
for pid in defs.pids:
    tmp_ListComp0.append(str(pid))

cmd.extend(['-P', 'mpe', '--pid', '-'.join(tmp_ListComp0), '--udp-forward', '--local-address', args.local_address])
",1,"[['https://github.com/Blockstream/satellite/tree/master/blocksatcli/test_tsp.py', 'blocksatcli.test_tsp', 'TestTsp', 'test_file_save_prompt'], ['https://github.com/Blockstream/satellite/tree/master/blocksatcli/test_tsp.py', 'blocksatcli.test_tsp', 'TestTsp', 'test_non_prompting_opts']]"
satellite,https://github.com/Blockstream/satellite/tree/master/blocksatcli/api/pkt.py,TestOrder,test_handler,return [x[1] for x in sorted(self.frag_map[seq_num]['frags'].items())],"tmp_ListComp0 = []
for x in sorted(self.frag_map[seq_num]['frags'].items()):
    tmp_ListComp0.append(x[1])

return tmp_ListComp0
",1,"[['https://github.com/Blockstream/satellite/tree/master/blocksatcli/api/test_pkt.py', 'blocksatcli.api.test_pkt', 'TestOrder', 'test_packet_gap_handling'], ['https://github.com/Blockstream/satellite/tree/master/blocksatcli/api/test_fec.py', 'blocksatcli.api.test_fec', 'TestFec', 'test_blocksat_pkt_alignment'], ['https://github.com/Blockstream/satellite/tree/master/blocksatcli/api/test_pkt.py', 'blocksatcli.api.test_pkt', 'TestOrder', 'test_ota_msg_len'], ['https://github.com/Blockstream/satellite/tree/master/blocksatcli/api/test_pkt.py', 'blocksatcli.api.test_pkt', 'TestOrder', 'test_unordered_packet_handling'], ['https://github.com/Blockstream/satellite/tree/master/blocksatcli/api/test_pkt.py', 'blocksatcli.api.test_pkt', 'TestOrder', 'test_repeated_fragment'], ['https://github.com/Blockstream/satellite/tree/master/blocksatcli/api/test_pkt.py', 'blocksatcli.api.test_pkt', 'TestOrder', 'test_handler']]"
folium,https://github.com/python-visualization/folium/tree/master/folium/utilities.py,,test_popup_show,out = ''.join([line.strip() for line in rendered.splitlines() if line.strip()]),"tmp_ListComp0 = []
for line in rendered.splitlines():
    if line.strip():
        tmp_ListComp0.append(line.strip())

out = ''.join(tmp_ListComp0)
",1,"[['https://github.com/python-visualization/folium/tree/master/tests/test_map.py', 'tests.test_map', '', 'test_custom_pane_show'], ['https://github.com/python-visualization/folium/tree/master/tests/test_vector_layers.py', 'tests.test_vector_layers', '', 'test_circle'], ['https://github.com/python-visualization/folium/tree/master/tests/plugins/test_semicircle.py', 'tests.plugins.test_semicircle', '', 'test_semicircle'], ['https://github.com/python-visualization/folium/tree/master/tests/test_vector_layers.py', 'tests.test_vector_layers', '', 'test_polygon_marker'], ['https://github.com/python-visualization/folium/tree/master/tests/test_vector_layers.py', 'tests.test_vector_layers', '', 'test_circle_marker'], ['https://github.com/python-visualization/folium/tree/master/tests/test_map.py', 'tests.test_map', '', 'test_popup_sticky'], ['https://github.com/python-visualization/folium/tree/master/tests/test_vector_layers.py', 'tests.test_vector_layers', '', 'test_rectangle'], ['https://github.com/python-visualization/folium/tree/master/tests/test_vector_layers.py', 'tests.test_vector_layers', '', 'test_mulyipolyline'], ['https://github.com/python-visualization/folium/tree/master/tests/test_raster_layers.py', 'tests.test_raster_layers', '', 'test_image_overlay'], ['https://github.com/python-visualization/folium/tree/master/tests/test_vector_layers.py', 'tests.test_vector_layers', '', 'test_polyline'], ['https://github.com/python-visualization/folium/tree/master/tests/test_map.py', 'tests.test_map', '', 'test_popup_show']]"
ScoutSuite,https://github.com/nccgroup/ScoutSuite/tree/master/ScoutSuite/core/console.py,TestScoutCore,test_prompt_value,"user_choices = [item.strip() for item in choice.split(',')]","
user_choices = []
for item in choice.split(','):
    user_choices.append(item.strip())
",1,"[['https://github.com/nccgroup/ScoutSuite/tree/master/tests/test_utils_console.py', 'tests.test_utils_console', 'TestOpinelUtilsConsoleClass', 'test_prompt_4_value'], ['https://github.com/nccgroup/ScoutSuite/tree/master/tests/test_core.py', 'tests.test_core', 'TestScoutCore', 'test_prompt_value']]"
category_encoders,https://github.com/scikit-learn-contrib/category_encoders/tree/master/category_encoders/target_encoder.py,TestTargetEncoder,test_target_encoder_fit_HaveConstructorSetSmoothingAndMinSamplesLeaf_ExpectUsedInFit,self.drop_cols = [x for x in generated_cols if X_temp[x].var() <= 0.0001],"
self.drop_cols = []
for x in generated_cols:
    if X_temp[x].var() <= 0.0001:
        self.drop_cols.append(x)
",1,"[['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_target_encoder.py', 'tests.test_target_encoder', 'TestTargetEncoder', 'test_HandleMissingIsValueAndNanInTest_ExpectMean'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_target_encoder.py', 'tests.test_target_encoder', 'TestTargetEncoder', 'test_target_encoder'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_target_encoder.py', 'tests.test_target_encoder', 'TestTargetEncoder', 'test_HandleUnknownValue_HaveUnknownInTest_ExpectMean'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_target_encoder.py', 'tests.test_target_encoder', 'TestTargetEncoder', 'test_target_encoder_fit_HaveConstructorSetSmoothingAndMinSamplesLeaf_ExpectUsedInFit']]"
category_encoders,https://github.com/scikit-learn-contrib/category_encoders/tree/master/category_encoders/target_encoder.py,TestTargetEncoder,test_target_encoder_fit_HaveConstructorSetSmoothingAndMinSamplesLeaf_ExpectUsedInFit,[self.feature_names.remove(x) for x in self.drop_cols],"tmp_ListComp0 = []
for x in self.drop_cols:
    tmp_ListComp0.append(self.feature_names.remove(x))

tmp_ListComp0
",1,"[['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_target_encoder.py', 'tests.test_target_encoder', 'TestTargetEncoder', 'test_HandleMissingIsValueAndNanInTest_ExpectMean'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_target_encoder.py', 'tests.test_target_encoder', 'TestTargetEncoder', 'test_target_encoder'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_target_encoder.py', 'tests.test_target_encoder', 'TestTargetEncoder', 'test_HandleUnknownValue_HaveUnknownInTest_ExpectMean'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_target_encoder.py', 'tests.test_target_encoder', 'TestTargetEncoder', 'test_target_encoder_fit_HaveConstructorSetSmoothingAndMinSamplesLeaf_ExpectUsedInFit']]"
category_encoders,https://github.com/scikit-learn-contrib/category_encoders/tree/master/category_encoders/count.py,TestCountEncoder,test_count_normalize_dict,self.drop_cols = [x for x in generated_cols if X_temp[x].var() <= 0.0001],"
self.drop_cols = []
for x in generated_cols:
    if X_temp[x].var() <= 0.0001:
        self.drop_cols.append(x)
",1,"[['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_count.py', 'tests.test_count', 'TestCountEncoder', 'test_count_defaults'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_count.py', 'tests.test_count', 'TestCountEncoder', 'test_count_combine_min_nan_groups_bool'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_count.py', 'tests.test_count', 'TestCountEncoder', 'test_count_combine_min_nan_groups_dict'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_count.py', 'tests.test_count', 'TestCountEncoder', 'test_count_handle_missing_string'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_count.py', 'tests.test_count', 'TestCountEncoder', 'test_count_min_group_size_dict'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_count.py', 'tests.test_count', 'TestCountEncoder', 'test_count_normalize_bool'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_count.py', 'tests.test_count', 'TestCountEncoder', 'test_count_min_group_size_int'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_count.py', 'tests.test_count', 'TestCountEncoder', 'test_count_handle_unknown_dict'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_count.py', 'tests.test_count', 'TestCountEncoder', 'test_count_handle_missing_dict'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_count.py', 'tests.test_count', 'TestCountEncoder', 'test_count_min_group_name_string'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_count.py', 'tests.test_count', 'TestCountEncoder', 'test_count_handle_unknown_string'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_count.py', 'tests.test_count', 'TestCountEncoder', 'test_count_min_group_name_dict'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_count.py', 'tests.test_count', 'TestCountEncoder', 'test_count_normalize_dict']]"
category_encoders,https://github.com/scikit-learn-contrib/category_encoders/tree/master/category_encoders/count.py,TestCountEncoder,test_count_normalize_dict,[self.feature_names.remove(x) for x in self.drop_cols],"tmp_ListComp0 = []
for x in self.drop_cols:
    tmp_ListComp0.append(self.feature_names.remove(x))

tmp_ListComp0
",1,"[['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_count.py', 'tests.test_count', 'TestCountEncoder', 'test_count_defaults'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_count.py', 'tests.test_count', 'TestCountEncoder', 'test_count_combine_min_nan_groups_bool'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_count.py', 'tests.test_count', 'TestCountEncoder', 'test_count_combine_min_nan_groups_dict'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_count.py', 'tests.test_count', 'TestCountEncoder', 'test_count_handle_missing_string'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_count.py', 'tests.test_count', 'TestCountEncoder', 'test_count_min_group_size_dict'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_count.py', 'tests.test_count', 'TestCountEncoder', 'test_count_normalize_bool'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_count.py', 'tests.test_count', 'TestCountEncoder', 'test_count_min_group_size_int'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_count.py', 'tests.test_count', 'TestCountEncoder', 'test_count_handle_unknown_dict'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_count.py', 'tests.test_count', 'TestCountEncoder', 'test_count_handle_missing_dict'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_count.py', 'tests.test_count', 'TestCountEncoder', 'test_count_min_group_name_string'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_count.py', 'tests.test_count', 'TestCountEncoder', 'test_count_handle_unknown_string'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_count.py', 'tests.test_count', 'TestCountEncoder', 'test_count_min_group_name_dict'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_count.py', 'tests.test_count', 'TestCountEncoder', 'test_count_normalize_dict']]"
category_encoders,https://github.com/scikit-learn-contrib/category_encoders/tree/master/category_encoders/ordinal.py,TestOrdinalEncoder,test_inverse_transform_HaveHandleMissingValueAndHandleUnknownReturnNan_ExpectBestInverse,self.drop_cols = [x for x in generated_cols if X_temp[x].var() <= 0.0001],"
self.drop_cols = []
for x in generated_cols:
    if X_temp[x].var() <= 0.0001:
        self.drop_cols.append(x)
",1,"[['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_encoders.py', 'tests.test_encoders', 'TestEncoders', 'test_numbers_as_strings_with_numpy_output'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_ordinal.py', 'tests.test_ordinal', 'TestOrdinalEncoder', 'test_handle_unknown_have_new_value_expect_negative_1'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_ordinal.py', 'tests.test_ordinal', 'TestOrdinalEncoder', 'test_ordinal'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_ordinal.py', 'tests.test_ordinal', 'TestOrdinalEncoder', 'test_inverse_transform_BothFieldsAreReturnNanWithNan_ExpectValueError'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_ordinal.py', 'tests.test_ordinal', 'TestOrdinalEncoder', 'test_handle_unknown_have_new_value_expect_negative_1_categorical'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_ordinal.py', 'tests.test_ordinal', 'TestOrdinalEncoder', 'test_handle_missing_have_nan_transform_time_expect_negative_2'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_ordinal.py', 'tests.test_ordinal', 'TestOrdinalEncoder', 'test_inverse_transform_HaveMissingAndNoUnknown_ExpectInversed'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_ordinal.py', 'tests.test_ordinal', 'TestOrdinalEncoder', 'test_inverse_transform_HaveUnknown_ExpectWarning'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_ordinal.py', 'tests.test_ordinal', 'TestOrdinalEncoder', 'test_inverse_transform_HaveHandleMissingValueAndHandleUnknownReturnNan_ExpectBestInverse']]"
category_encoders,https://github.com/scikit-learn-contrib/category_encoders/tree/master/category_encoders/ordinal.py,TestOrdinalEncoder,test_inverse_transform_HaveHandleMissingValueAndHandleUnknownReturnNan_ExpectBestInverse,[self.feature_names.remove(x) for x in self.drop_cols],"tmp_ListComp0 = []
for x in self.drop_cols:
    tmp_ListComp0.append(self.feature_names.remove(x))

tmp_ListComp0
",1,"[['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_encoders.py', 'tests.test_encoders', 'TestEncoders', 'test_numbers_as_strings_with_numpy_output'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_ordinal.py', 'tests.test_ordinal', 'TestOrdinalEncoder', 'test_handle_unknown_have_new_value_expect_negative_1'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_ordinal.py', 'tests.test_ordinal', 'TestOrdinalEncoder', 'test_ordinal'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_ordinal.py', 'tests.test_ordinal', 'TestOrdinalEncoder', 'test_inverse_transform_BothFieldsAreReturnNanWithNan_ExpectValueError'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_ordinal.py', 'tests.test_ordinal', 'TestOrdinalEncoder', 'test_handle_unknown_have_new_value_expect_negative_1_categorical'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_ordinal.py', 'tests.test_ordinal', 'TestOrdinalEncoder', 'test_handle_missing_have_nan_transform_time_expect_negative_2'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_ordinal.py', 'tests.test_ordinal', 'TestOrdinalEncoder', 'test_inverse_transform_HaveMissingAndNoUnknown_ExpectInversed'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_ordinal.py', 'tests.test_ordinal', 'TestOrdinalEncoder', 'test_inverse_transform_HaveUnknown_ExpectWarning'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_ordinal.py', 'tests.test_ordinal', 'TestOrdinalEncoder', 'test_inverse_transform_HaveHandleMissingValueAndHandleUnknownReturnNan_ExpectBestInverse']]"
category_encoders,https://github.com/scikit-learn-contrib/category_encoders/tree/master/category_encoders/polynomial.py,TestPolynomialEncoder,test_polynomial_encoder_2StringCols_ExpectCorrectOrder,self.drop_cols = [x for x in generated_cols if X_temp[x].var() <= 0.0001],"
self.drop_cols = []
for x in generated_cols:
    if X_temp[x].var() <= 0.0001:
        self.drop_cols.append(x)
",1,"[['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_polynomial.py', 'tests.test_polynomial', 'TestPolynomialEncoder', 'test_HandleMissingIndicator_NanNoNanInTrain_ExpectAsNanColumn'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_polynomial.py', 'tests.test_polynomial', 'TestPolynomialEncoder', 'test_polynomial_encoder_preserve_dimension_4'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_polynomial.py', 'tests.test_polynomial', 'TestPolynomialEncoder', 'test_polynomial_encoder_preserve_dimension_2'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_polynomial.py', 'tests.test_polynomial', 'TestPolynomialEncoder', 'test_HandleUnknown_HaveNoUnknownInTrain_ExpectIndicatorInTest'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_polynomial.py', 'tests.test_polynomial', 'TestPolynomialEncoder', 'test_polynomial_encoder_preserve_dimension_1'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_polynomial.py', 'tests.test_polynomial', 'TestPolynomialEncoder', 'test_polynomial_encoder_preserve_dimension_3'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_polynomial.py', 'tests.test_polynomial', 'TestPolynomialEncoder', 'test_polynomial_encoder_2cols'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_polynomial.py', 'tests.test_polynomial', 'TestPolynomialEncoder', 'test_polynomial_encoder_2StringCols_ExpectCorrectOrder']]"
category_encoders,https://github.com/scikit-learn-contrib/category_encoders/tree/master/category_encoders/polynomial.py,TestPolynomialEncoder,test_polynomial_encoder_2StringCols_ExpectCorrectOrder,[self.feature_names.remove(x) for x in self.drop_cols],"tmp_ListComp0 = []
for x in self.drop_cols:
    tmp_ListComp0.append(self.feature_names.remove(x))

tmp_ListComp0
",1,"[['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_polynomial.py', 'tests.test_polynomial', 'TestPolynomialEncoder', 'test_HandleMissingIndicator_NanNoNanInTrain_ExpectAsNanColumn'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_polynomial.py', 'tests.test_polynomial', 'TestPolynomialEncoder', 'test_polynomial_encoder_preserve_dimension_4'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_polynomial.py', 'tests.test_polynomial', 'TestPolynomialEncoder', 'test_polynomial_encoder_preserve_dimension_2'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_polynomial.py', 'tests.test_polynomial', 'TestPolynomialEncoder', 'test_HandleUnknown_HaveNoUnknownInTrain_ExpectIndicatorInTest'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_polynomial.py', 'tests.test_polynomial', 'TestPolynomialEncoder', 'test_polynomial_encoder_preserve_dimension_1'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_polynomial.py', 'tests.test_polynomial', 'TestPolynomialEncoder', 'test_polynomial_encoder_preserve_dimension_3'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_polynomial.py', 'tests.test_polynomial', 'TestPolynomialEncoder', 'test_polynomial_encoder_2cols'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_polynomial.py', 'tests.test_polynomial', 'TestPolynomialEncoder', 'test_polynomial_encoder_2StringCols_ExpectCorrectOrder']]"
category_encoders,https://github.com/scikit-learn-contrib/category_encoders/tree/master/category_encoders/basen.py,TestBaseNEncoder,test_HandleMissingIndicator_NanNoNanInTrain_ExpectAsNanColumn,self.drop_cols = [x for x in generated_cols if X_temp[x].var() <= 0.0001],"
self.drop_cols = []
for x in generated_cols:
    if X_temp[x].var() <= 0.0001:
        self.drop_cols.append(x)
",1,"[['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_basen.py', 'tests.test_basen', 'TestBaseNEncoder', 'test_inverse_transform_HaveMissingAndNoUnknown_ExpectInversed'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_basen.py', 'tests.test_basen', 'TestBaseNEncoder', 'test_num_cols'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_basen.py', 'tests.test_basen', 'TestBaseNEncoder', 'test_inverse_transform_HaveHandleMissingValueAndHandleUnknownReturnNan_ExpectBestInverse'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_basen.py', 'tests.test_basen', 'TestBaseNEncoder', 'test_HandleUnknown_HaveUnknown_ExpectIndicatorInTest'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_basen.py', 'tests.test_basen', 'TestBaseNEncoder', 'test_inverse_transform_BothFieldsAreReturnNanWithNan_ExpectValueError'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_basen.py', 'tests.test_basen', 'TestBaseNEncoder', 'test_HandleMissingIndicator_NanNoNanInTrain_ExpectAsNanColumn']]"
category_encoders,https://github.com/scikit-learn-contrib/category_encoders/tree/master/category_encoders/basen.py,TestBaseNEncoder,test_HandleMissingIndicator_NanNoNanInTrain_ExpectAsNanColumn,[self.feature_names.remove(x) for x in self.drop_cols],"tmp_ListComp0 = []
for x in self.drop_cols:
    tmp_ListComp0.append(self.feature_names.remove(x))

tmp_ListComp0
",1,"[['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_basen.py', 'tests.test_basen', 'TestBaseNEncoder', 'test_inverse_transform_HaveMissingAndNoUnknown_ExpectInversed'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_basen.py', 'tests.test_basen', 'TestBaseNEncoder', 'test_num_cols'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_basen.py', 'tests.test_basen', 'TestBaseNEncoder', 'test_inverse_transform_HaveHandleMissingValueAndHandleUnknownReturnNan_ExpectBestInverse'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_basen.py', 'tests.test_basen', 'TestBaseNEncoder', 'test_HandleUnknown_HaveUnknown_ExpectIndicatorInTest'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_basen.py', 'tests.test_basen', 'TestBaseNEncoder', 'test_inverse_transform_BothFieldsAreReturnNanWithNan_ExpectValueError'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_basen.py', 'tests.test_basen', 'TestBaseNEncoder', 'test_HandleMissingIndicator_NanNoNanInTrain_ExpectAsNanColumn']]"
category_encoders,https://github.com/scikit-learn-contrib/category_encoders/tree/master/category_encoders/utils.py,TestUtils,test_convert_input_vector,flatten = lambda y: [item for sublist in y for item in sublist],"def my_comprehension_func(y):
    tmp_ListComp0 = []
    for sublist in y:
        for item in sublist:
            tmp_ListComp0.append(item)
    return tmp_ListComp0

flatten = lambda y: my_comprehension_func(y)
",1,"[['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_utils.py', 'tests.test_utils', 'TestUtils', 'test_convert_input_vector']]"
category_encoders,https://github.com/scikit-learn-contrib/category_encoders/tree/master/category_encoders/hashing.py,TestHashingEncoder,test_must_not_reset_index,self.drop_cols = [x for x in generated_cols if X_temp[x].var() <= 0.0001],"
self.drop_cols = []
for x in generated_cols:
    if X_temp[x].var() <= 0.0001:
        self.drop_cols.append(x)
",1,"[['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_hashing.py', 'tests.test_hashing', 'TestHashingEncoder', 'test_transform_works_with_single_row_df'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_hashing.py', 'tests.test_hashing', 'TestHashingEncoder', 'test_must_not_reset_index']]"
category_encoders,https://github.com/scikit-learn-contrib/category_encoders/tree/master/category_encoders/hashing.py,TestHashingEncoder,test_must_not_reset_index,[self.feature_names.remove(x) for x in self.drop_cols],"tmp_ListComp0 = []
for x in self.drop_cols:
    tmp_ListComp0.append(self.feature_names.remove(x))

tmp_ListComp0
",1,"[['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_hashing.py', 'tests.test_hashing', 'TestHashingEncoder', 'test_transform_works_with_single_row_df'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_hashing.py', 'tests.test_hashing', 'TestHashingEncoder', 'test_must_not_reset_index']]"
category_encoders,https://github.com/scikit-learn-contrib/category_encoders/tree/master/category_encoders/quantile_encoder.py,TestQuantileEncoder,test_new_category,self.drop_cols = [x for x in generated_cols if X_temp[x].var() <= 0.0001],"
self.drop_cols = []
for x in generated_cols:
    if X_temp[x].var() <= 0.0001:
        self.drop_cols.append(x)
",1,"[['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_quantile_encoder.py', 'tests.test_quantile_encoder', 'TestQuantileEncoder', 'test_new_category']]"
category_encoders,https://github.com/scikit-learn-contrib/category_encoders/tree/master/category_encoders/quantile_encoder.py,TestQuantileEncoder,test_new_category,[self.feature_names.remove(x) for x in self.drop_cols],"tmp_ListComp0 = []
for x in self.drop_cols:
    tmp_ListComp0.append(self.feature_names.remove(x))

tmp_ListComp0
",1,"[['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_quantile_encoder.py', 'tests.test_quantile_encoder', 'TestQuantileEncoder', 'test_new_category']]"
category_encoders,https://github.com/scikit-learn-contrib/category_encoders/tree/master/category_encoders/helmert.py,TestHelmertEncoder,test_HandleUnknown_HaveNoUnknownInTrain_ExpectIndicatorInTest,self.drop_cols = [x for x in generated_cols if X_temp[x].var() <= 0.0001],"
self.drop_cols = []
for x in generated_cols:
    if X_temp[x].var() <= 0.0001:
        self.drop_cols.append(x)
",1,"[['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_helmert.py', 'tests.test_helmert', 'TestHelmertEncoder', 'test_helmert_preserve_dimension_1'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_helmert.py', 'tests.test_helmert', 'TestHelmertEncoder', 'test_helmert_2cols'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_helmert.py', 'tests.test_helmert', 'TestHelmertEncoder', 'test_helmert_preserve_dimension_3'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_helmert.py', 'tests.test_helmert', 'TestHelmertEncoder', 'test_HandleMissingIndicator_NanNoNanInTrain_ExpectAsNanColumn'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_helmert.py', 'tests.test_helmert', 'TestHelmertEncoder', 'test_helmert_preserve_dimension_4'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_helmert.py', 'tests.test_helmert', 'TestHelmertEncoder', 'test_helmert_preserve_dimension_2'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_helmert.py', 'tests.test_helmert', 'TestHelmertEncoder', 'test_helmert_2StringCols_ExpectCorrectOrder'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_helmert.py', 'tests.test_helmert', 'TestHelmertEncoder', 'test_HandleUnknown_HaveNoUnknownInTrain_ExpectIndicatorInTest']]"
category_encoders,https://github.com/scikit-learn-contrib/category_encoders/tree/master/category_encoders/helmert.py,TestHelmertEncoder,test_HandleUnknown_HaveNoUnknownInTrain_ExpectIndicatorInTest,[self.feature_names.remove(x) for x in self.drop_cols],"tmp_ListComp0 = []
for x in self.drop_cols:
    tmp_ListComp0.append(self.feature_names.remove(x))

tmp_ListComp0
",1,"[['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_helmert.py', 'tests.test_helmert', 'TestHelmertEncoder', 'test_helmert_preserve_dimension_1'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_helmert.py', 'tests.test_helmert', 'TestHelmertEncoder', 'test_helmert_2cols'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_helmert.py', 'tests.test_helmert', 'TestHelmertEncoder', 'test_helmert_preserve_dimension_3'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_helmert.py', 'tests.test_helmert', 'TestHelmertEncoder', 'test_HandleMissingIndicator_NanNoNanInTrain_ExpectAsNanColumn'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_helmert.py', 'tests.test_helmert', 'TestHelmertEncoder', 'test_helmert_preserve_dimension_4'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_helmert.py', 'tests.test_helmert', 'TestHelmertEncoder', 'test_helmert_preserve_dimension_2'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_helmert.py', 'tests.test_helmert', 'TestHelmertEncoder', 'test_helmert_2StringCols_ExpectCorrectOrder'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_helmert.py', 'tests.test_helmert', 'TestHelmertEncoder', 'test_HandleUnknown_HaveNoUnknownInTrain_ExpectIndicatorInTest']]"
category_encoders,https://github.com/scikit-learn-contrib/category_encoders/tree/master/category_encoders/woe.py,TestWeightOfEvidenceEncoder,test_woe,self.drop_cols = [x for x in generated_cols if X_temp[x].var() <= 0.0001],"
self.drop_cols = []
for x in generated_cols:
    if X_temp[x].var() <= 0.0001:
        self.drop_cols.append(x)
",1,"[['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_woe.py', 'tests.test_woe', 'TestWeightOfEvidenceEncoder', 'test_HandleUnknownValue_HaveUnknown_ExpectEncodedWithZero'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_woe.py', 'tests.test_woe', 'TestWeightOfEvidenceEncoder', 'test_HandleMissingValue_HaveMissingInTest_ExpectEncodedWithZero'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_woe.py', 'tests.test_woe', 'TestWeightOfEvidenceEncoder', 'test_woe']]"
category_encoders,https://github.com/scikit-learn-contrib/category_encoders/tree/master/category_encoders/woe.py,TestWeightOfEvidenceEncoder,test_woe,[self.feature_names.remove(x) for x in self.drop_cols],"tmp_ListComp0 = []
for x in self.drop_cols:
    tmp_ListComp0.append(self.feature_names.remove(x))

tmp_ListComp0
",1,"[['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_woe.py', 'tests.test_woe', 'TestWeightOfEvidenceEncoder', 'test_HandleUnknownValue_HaveUnknown_ExpectEncodedWithZero'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_woe.py', 'tests.test_woe', 'TestWeightOfEvidenceEncoder', 'test_HandleMissingValue_HaveMissingInTest_ExpectEncodedWithZero'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_woe.py', 'tests.test_woe', 'TestWeightOfEvidenceEncoder', 'test_woe']]"
category_encoders,https://github.com/scikit-learn-contrib/category_encoders/tree/master/category_encoders/sum_coding.py,TestSumEncoder,test_sum_encoder_2cols,self.drop_cols = [x for x in generated_cols if X_temp[x].var() <= 0.0001],"
self.drop_cols = []
for x in generated_cols:
    if X_temp[x].var() <= 0.0001:
        self.drop_cols.append(x)
",1,"[['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_sum_coding.py', 'tests.test_sum_coding', 'TestSumEncoder', 'test_sum_encoder_preserve_dimension_2'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_sum_coding.py', 'tests.test_sum_coding', 'TestSumEncoder', 'test_sum_encoder_preserve_dimension_3'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_sum_coding.py', 'tests.test_sum_coding', 'TestSumEncoder', 'test_HandleUnknown_HaveNoUnknownInTrain_ExpectIndicatorInTest'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_sum_coding.py', 'tests.test_sum_coding', 'TestSumEncoder', 'test_HandleMissingIndicator_NanNoNanInTrain_ExpectAsNanColumn'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_sum_coding.py', 'tests.test_sum_coding', 'TestSumEncoder', 'test_sum_encoder_preserve_dimension_1'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_sum_coding.py', 'tests.test_sum_coding', 'TestSumEncoder', 'test_sum_encoder_2StringCols_ExpectCorrectOrder'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_sum_coding.py', 'tests.test_sum_coding', 'TestSumEncoder', 'test_sum_encoder_preserve_dimension_4'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_sum_coding.py', 'tests.test_sum_coding', 'TestSumEncoder', 'test_sum_encoder_2cols']]"
category_encoders,https://github.com/scikit-learn-contrib/category_encoders/tree/master/category_encoders/sum_coding.py,TestSumEncoder,test_sum_encoder_2cols,[self.feature_names.remove(x) for x in self.drop_cols],"tmp_ListComp0 = []
for x in self.drop_cols:
    tmp_ListComp0.append(self.feature_names.remove(x))

tmp_ListComp0
",1,"[['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_sum_coding.py', 'tests.test_sum_coding', 'TestSumEncoder', 'test_sum_encoder_preserve_dimension_2'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_sum_coding.py', 'tests.test_sum_coding', 'TestSumEncoder', 'test_sum_encoder_preserve_dimension_3'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_sum_coding.py', 'tests.test_sum_coding', 'TestSumEncoder', 'test_HandleUnknown_HaveNoUnknownInTrain_ExpectIndicatorInTest'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_sum_coding.py', 'tests.test_sum_coding', 'TestSumEncoder', 'test_HandleMissingIndicator_NanNoNanInTrain_ExpectAsNanColumn'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_sum_coding.py', 'tests.test_sum_coding', 'TestSumEncoder', 'test_sum_encoder_preserve_dimension_1'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_sum_coding.py', 'tests.test_sum_coding', 'TestSumEncoder', 'test_sum_encoder_2StringCols_ExpectCorrectOrder'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_sum_coding.py', 'tests.test_sum_coding', 'TestSumEncoder', 'test_sum_encoder_preserve_dimension_4'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_sum_coding.py', 'tests.test_sum_coding', 'TestSumEncoder', 'test_sum_encoder_2cols']]"
category_encoders,https://github.com/scikit-learn-contrib/category_encoders/tree/master/category_encoders/m_estimate.py,TestMEstimateEncoder,test_reference_m0,self.drop_cols = [x for x in generated_cols if X_temp[x].var() <= 0.0001],"
self.drop_cols = []
for x in generated_cols:
    if X_temp[x].var() <= 0.0001:
        self.drop_cols.append(x)
",1,"[['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_m_estimate.py', 'tests.test_m_estimate', 'TestMEstimateEncoder', 'test_reference_m1'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_m_estimate.py', 'tests.test_m_estimate', 'TestMEstimateEncoder', 'test_reference_m0']]"
category_encoders,https://github.com/scikit-learn-contrib/category_encoders/tree/master/category_encoders/m_estimate.py,TestMEstimateEncoder,test_reference_m0,[self.feature_names.remove(x) for x in self.drop_cols],"tmp_ListComp0 = []
for x in self.drop_cols:
    tmp_ListComp0.append(self.feature_names.remove(x))

tmp_ListComp0
",1,"[['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_m_estimate.py', 'tests.test_m_estimate', 'TestMEstimateEncoder', 'test_reference_m1'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_m_estimate.py', 'tests.test_m_estimate', 'TestMEstimateEncoder', 'test_reference_m0']]"
category_encoders,https://github.com/scikit-learn-contrib/category_encoders/tree/master/category_encoders/one_hot.py,TestOneHotEncoderTestCase,test_fit_transform_HaveHandleUnknownIndicatorAndMissingValue_ExpectValueSet,self.drop_cols = [x for x in generated_cols if X_temp[x].var() <= 0.0001],"
self.drop_cols = []
for x in generated_cols:
    if X_temp[x].var() <= 0.0001:
        self.drop_cols.append(x)
",1,"[['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_one_hot.py', 'tests.test_one_hot', 'TestOneHotEncoderTestCase', 'test_one_hot'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_one_hot.py', 'tests.test_one_hot', 'TestOneHotEncoderTestCase', 'test_inverse_transform_HaveHandleMissingValueAndHandleUnknownReturnNan_ExpectBestInverse'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_one_hot.py', 'tests.test_one_hot', 'TestOneHotEncoderTestCase', 'test_inverse_transform_HaveMissingAndNoUnknown_ExpectInversed'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_one_hot.py', 'tests.test_one_hot', 'TestOneHotEncoderTestCase', 'test_fit_transform_HaveHandleUnknownValueAndUnseenValues_ExpectAllZeroes'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_one_hot.py', 'tests.test_one_hot', 'TestOneHotEncoderTestCase', 'test_fit_transform_HaveHandleUnknownIndicatorAndNoMissingValue_ExpectExtraColumn'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_one_hot.py', 'tests.test_one_hot', 'TestOneHotEncoderTestCase', 'test_fit_transform_HaveHandleUnknownValueAndSeenValues_ExpectMappingUsed'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_one_hot.py', 'tests.test_one_hot', 'TestOneHotEncoderTestCase', 'test_inverse_transform_BothFieldsAreReturnNanWithNan_ExpectValueError'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_one_hot.py', 'tests.test_one_hot', 'TestOneHotEncoderTestCase', 'test_HandleUnknown_HaveNoUnknownInTrain_ExpectIndicatorInTest'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_one_hot.py', 'tests.test_one_hot', 'TestOneHotEncoderTestCase', 'test_fit_transform_HaveHandleUnknownIndicatorAndMissingValue_ExpectValueSet']]"
category_encoders,https://github.com/scikit-learn-contrib/category_encoders/tree/master/category_encoders/one_hot.py,TestOneHotEncoderTestCase,test_fit_transform_HaveHandleUnknownIndicatorAndMissingValue_ExpectValueSet,[self.feature_names.remove(x) for x in self.drop_cols],"tmp_ListComp0 = []
for x in self.drop_cols:
    tmp_ListComp0.append(self.feature_names.remove(x))

tmp_ListComp0
",1,"[['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_one_hot.py', 'tests.test_one_hot', 'TestOneHotEncoderTestCase', 'test_one_hot'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_one_hot.py', 'tests.test_one_hot', 'TestOneHotEncoderTestCase', 'test_inverse_transform_HaveHandleMissingValueAndHandleUnknownReturnNan_ExpectBestInverse'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_one_hot.py', 'tests.test_one_hot', 'TestOneHotEncoderTestCase', 'test_inverse_transform_HaveMissingAndNoUnknown_ExpectInversed'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_one_hot.py', 'tests.test_one_hot', 'TestOneHotEncoderTestCase', 'test_fit_transform_HaveHandleUnknownValueAndUnseenValues_ExpectAllZeroes'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_one_hot.py', 'tests.test_one_hot', 'TestOneHotEncoderTestCase', 'test_fit_transform_HaveHandleUnknownIndicatorAndNoMissingValue_ExpectExtraColumn'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_one_hot.py', 'tests.test_one_hot', 'TestOneHotEncoderTestCase', 'test_fit_transform_HaveHandleUnknownValueAndSeenValues_ExpectMappingUsed'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_one_hot.py', 'tests.test_one_hot', 'TestOneHotEncoderTestCase', 'test_inverse_transform_BothFieldsAreReturnNanWithNan_ExpectValueError'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_one_hot.py', 'tests.test_one_hot', 'TestOneHotEncoderTestCase', 'test_HandleUnknown_HaveNoUnknownInTrain_ExpectIndicatorInTest'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_one_hot.py', 'tests.test_one_hot', 'TestOneHotEncoderTestCase', 'test_fit_transform_HaveHandleUnknownIndicatorAndMissingValue_ExpectValueSet']]"
category_encoders,https://github.com/scikit-learn-contrib/category_encoders/tree/master/category_encoders/backward_difference.py,TestBackwardsEncoder,test_backwards_difference_encoder_preserve_dimension_4,self.drop_cols = [x for x in generated_cols if X_temp[x].var() <= 0.0001],"
self.drop_cols = []
for x in generated_cols:
    if X_temp[x].var() <= 0.0001:
        self.drop_cols.append(x)
",1,"[['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_backward_difference.py', 'tests.test_backward_difference', 'TestBackwardsEncoder', 'test_HandleUnknown_HaveNoUnknownInTrain_ExpectIndicatorInTest'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_backward_difference.py', 'tests.test_backward_difference', 'TestBackwardsEncoder', 'test_backwards_difference_encoder_2StringCols_ExpectCorrectOrder'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_backward_difference.py', 'tests.test_backward_difference', 'TestBackwardsEncoder', 'test_backwards_difference_encoder_2cols'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_backward_difference.py', 'tests.test_backward_difference', 'TestBackwardsEncoder', 'test_backwards_difference_encoder_preserve_dimension_1'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_backward_difference.py', 'tests.test_backward_difference', 'TestBackwardsEncoder', 'test_backwards_difference_encoder_preserve_dimension_2'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_backward_difference.py', 'tests.test_backward_difference', 'TestBackwardsEncoder', 'test_HandleMissingIndicator_NanNoNanInTrain_ExpectAsNanColumn'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_backward_difference.py', 'tests.test_backward_difference', 'TestBackwardsEncoder', 'test_backwards_difference_encoder_preserve_dimension_3'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_backward_difference.py', 'tests.test_backward_difference', 'TestBackwardsEncoder', 'test_backwards_difference_encoder_preserve_dimension_4']]"
category_encoders,https://github.com/scikit-learn-contrib/category_encoders/tree/master/category_encoders/backward_difference.py,TestBackwardsEncoder,test_backwards_difference_encoder_preserve_dimension_4,[self.feature_names.remove(x) for x in self.drop_cols],"tmp_ListComp0 = []
for x in self.drop_cols:
    tmp_ListComp0.append(self.feature_names.remove(x))

tmp_ListComp0
",1,"[['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_backward_difference.py', 'tests.test_backward_difference', 'TestBackwardsEncoder', 'test_HandleUnknown_HaveNoUnknownInTrain_ExpectIndicatorInTest'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_backward_difference.py', 'tests.test_backward_difference', 'TestBackwardsEncoder', 'test_backwards_difference_encoder_2StringCols_ExpectCorrectOrder'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_backward_difference.py', 'tests.test_backward_difference', 'TestBackwardsEncoder', 'test_backwards_difference_encoder_2cols'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_backward_difference.py', 'tests.test_backward_difference', 'TestBackwardsEncoder', 'test_backwards_difference_encoder_preserve_dimension_1'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_backward_difference.py', 'tests.test_backward_difference', 'TestBackwardsEncoder', 'test_backwards_difference_encoder_preserve_dimension_2'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_backward_difference.py', 'tests.test_backward_difference', 'TestBackwardsEncoder', 'test_HandleMissingIndicator_NanNoNanInTrain_ExpectAsNanColumn'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_backward_difference.py', 'tests.test_backward_difference', 'TestBackwardsEncoder', 'test_backwards_difference_encoder_preserve_dimension_3'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_backward_difference.py', 'tests.test_backward_difference', 'TestBackwardsEncoder', 'test_backwards_difference_encoder_preserve_dimension_4']]"
category_encoders,https://github.com/scikit-learn-contrib/category_encoders/tree/master/category_encoders/leave_one_out.py,TestLeaveOneOutEncoder,test_HandleMissingIsValueAndNanInTestAndNoTestTarget_ExpectMean,self.drop_cols = [x for x in generated_cols if X_temp[x].var() <= 0.0001],"
self.drop_cols = []
for x in generated_cols:
    if X_temp[x].var() <= 0.0001:
        self.drop_cols.append(x)
",1,"[['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_leave_one_out.py', 'tests.test_leave_one_out', 'TestLeaveOneOutEncoder', 'test_leave_one_out_unique'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_leave_one_out.py', 'tests.test_leave_one_out', 'TestLeaveOneOutEncoder', 'test_leave_one_out'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_leave_one_out.py', 'tests.test_leave_one_out', 'TestLeaveOneOutEncoder', 'test_HandleMissingIsValueAndNanInTest_ExpectMean'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_leave_one_out.py', 'tests.test_leave_one_out', 'TestLeaveOneOutEncoder', 'test_leave_one_out_fit_callTwiceOnDifferentData_ExpectRefit'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_leave_one_out.py', 'tests.test_leave_one_out', 'TestLeaveOneOutEncoder', 'test_HandleUnknownValue_HaveUnknownInTest_ExpectMean'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_leave_one_out.py', 'tests.test_leave_one_out', 'TestLeaveOneOutEncoder', 'test_HandleMissingIsValueAndNanInTestAndNoTestTarget_ExpectMean']]"
category_encoders,https://github.com/scikit-learn-contrib/category_encoders/tree/master/category_encoders/leave_one_out.py,TestLeaveOneOutEncoder,test_HandleMissingIsValueAndNanInTestAndNoTestTarget_ExpectMean,[self.feature_names.remove(x) for x in self.drop_cols],"tmp_ListComp0 = []
for x in self.drop_cols:
    tmp_ListComp0.append(self.feature_names.remove(x))

tmp_ListComp0
",1,"[['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_leave_one_out.py', 'tests.test_leave_one_out', 'TestLeaveOneOutEncoder', 'test_leave_one_out_unique'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_leave_one_out.py', 'tests.test_leave_one_out', 'TestLeaveOneOutEncoder', 'test_leave_one_out'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_leave_one_out.py', 'tests.test_leave_one_out', 'TestLeaveOneOutEncoder', 'test_HandleMissingIsValueAndNanInTest_ExpectMean'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_leave_one_out.py', 'tests.test_leave_one_out', 'TestLeaveOneOutEncoder', 'test_leave_one_out_fit_callTwiceOnDifferentData_ExpectRefit'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_leave_one_out.py', 'tests.test_leave_one_out', 'TestLeaveOneOutEncoder', 'test_HandleUnknownValue_HaveUnknownInTest_ExpectMean'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_leave_one_out.py', 'tests.test_leave_one_out', 'TestLeaveOneOutEncoder', 'test_HandleMissingIsValueAndNanInTestAndNoTestTarget_ExpectMean']]"
category_encoders,https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/helpers.py,TestEncoders,test_inverse_transform,"ds = [[random.random(), random.choice([float('nan'), float('inf'), float('-inf'), -0, 0, 1, -1, math.pi]), row, str(row), random.choice(['A', 'B']) if extras else 'A', random.choice(['A', 'B_b', 'C_c_c']), random.choice(['A', 'B', 'C', np.NaN]) if has_missing else random.choice(['A', 'B', 'C']), random.choice(['A', 'B', 'C', 'D']) if extras else random.choice(['A', 'B', 'C']), random.choice([12, 43, -32]), random.choice(['A', 'B', 'C']), random.choice(['A', 'B', 'C', np.nan]), random.choice([1, 2, 3])] for row in range(n_rows)]","
ds = []
for row in range(n_rows):
    ds.append([random.random(), random.choice([float('nan'), float('inf'), float('-inf'), -0, 0, 1, -1, math.pi]), row, str(row), random.choice(['A', 'B']) if extras else 'A', random.choice(['A', 'B_b', 'C_c_c']), random.choice(['A', 'B', 'C', np.NaN]) if has_missing else random.choice(['A', 'B', 'C']), random.choice(['A', 'B', 'C', 'D']) if extras else random.choice(['A', 'B', 'C']), random.choice([12, 43, -32]), random.choice(['A', 'B', 'C']), random.choice(['A', 'B', 'C', np.nan]), random.choice([1, 2, 3])])
",1,"[['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_one_hot.py', 'tests.test_one_hot', 'TestOneHotEncoderTestCase', 'test_one_hot'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_encoders.py', 'tests.test_encoders', 'TestEncoders', 'test_handle_unknown_error'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_encoders.py', 'tests.test_encoders', 'TestEncoders', 'test_error_handling'], ['https://github.com/scikit-learn-contrib/category_encoders/tree/master/tests/test_encoders.py', 'tests.test_encoders', 'TestEncoders', 'test_inverse_transform']]"
betago,https://github.com/maxpumperla/betago/tree/master/betago/dataloader/goboard.py,GoBoardTest,test_from_string,rows = [line.strip() for line in board_string.strip().split('\n')],"
rows = []
for line in board_string.strip().split('\n'):
    rows.append(line.strip())
",1,"[['https://github.com/maxpumperla/betago/tree/master/tests/model_test.py', 'tests.model_test', 'ModelTestCase', 'test_all_empty_points'], ['https://github.com/maxpumperla/betago/tree/master/tests/scoring_test.py', 'tests.scoring_test', 'ScoringTestCase', 'test_identify_territory'], ['https://github.com/maxpumperla/betago/tree/master/tests/model_test.py', 'tests.model_test', 'ModelTestCase', 'test_get_first_valid_move'], ['https://github.com/maxpumperla/betago/tree/master/tests/dataloader/goboard_test.py', 'tests.dataloader.goboard_test', 'GoBoardTest', 'test_from_string']]"
betago,https://github.com/maxpumperla/betago/tree/master/betago/gosgf/sgf_properties.py,SgfPropertiesTestCase,test_serialise_point_list,"result = [serialise_point(point, context) for point in points]","
result = []
for point in points:
    result.append(serialise_point(point, context))
",1,"[['https://github.com/maxpumperla/betago/tree/master/tests/gosgf/sgf_properties_test.py', 'tests.gosgf.sgf_properties_test', 'SgfPropertiesTestCase', 'test_serialise_point_list']]"
borgmatic,https://github.com/borgmatic-collective/borgmatic/tree/master/borgmatic/config/generate.py,,test_schema_to_sample_configuration_with_unsupported_schema_raises,"config = yaml.comments.CommentedMap([(field_name, _schema_to_sample_configuration(sub_schema, level + 1)) for (field_name, sub_schema) in schema['properties'].items()])","tmp_ListComp0 = []
for (field_name, sub_schema) in schema['properties'].items():
    tmp_ListComp0.append((field_name, _schema_to_sample_configuration(sub_schema, level + 1)))

config = yaml.comments.CommentedMap(tmp_ListComp0)
",1,"[['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/config/test_generate.py', 'tests.unit.config.test_generate', '', 'test_schema_to_sample_configuration_generates_config_sequence_of_maps_with_examples'], ['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/config/test_generate.py', 'tests.unit.config.test_generate', '', 'test_schema_to_sample_configuration_generates_config_sequence_of_strings_with_example'], ['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/config/test_generate.py', 'tests.unit.config.test_generate', '', 'test_schema_to_sample_configuration_generates_config_map_with_examples'], ['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/config/test_generate.py', 'tests.unit.config.test_generate', '', 'test_schema_to_sample_configuration_with_unsupported_schema_raises']]"
borgmatic,https://github.com/borgmatic-collective/borgmatic/tree/master/borgmatic/config/generate.py,,test_merge_source_configuration_into_destination_inserts_map_fields,"destination_config[field_name] = yaml.comments.CommentedSeq([merge_source_configuration_into_destination(destination_value[index] if index < len(destination_value) else None, source_item) for (index, source_item) in enumerate(source_value)])","tmp_ListComp0 = []
for (index, source_item) in enumerate(source_value):
    tmp_ListComp0.append(merge_source_configuration_into_destination(destination_value[index] if index < len(destination_value) else None, source_item))

destination_config[field_name] = yaml.comments.CommentedSeq(tmp_ListComp0)
",1,"[['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/config/test_generate.py', 'tests.unit.config.test_generate', '', 'test_merge_source_configuration_into_destination_inserts_nested_map_fields'], ['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/config/test_generate.py', 'tests.unit.config.test_generate', '', 'test_merge_source_configuration_into_destination_without_source_does_nothing'], ['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/config/test_generate.py', 'tests.unit.config.test_generate', '', 'test_merge_source_configuration_into_destination_inserts_sequence_of_maps'], ['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/config/test_generate.py', 'tests.unit.config.test_generate', '', 'test_merge_source_configuration_into_destination_inserts_sequence_fields'], ['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/config/test_generate.py', 'tests.unit.config.test_generate', '', 'test_merge_source_configuration_into_destination_inserts_map_fields']]"
borgmatic,https://github.com/borgmatic-collective/borgmatic/tree/master/borgmatic/config/convert.py,,test_convert_section_generates_integer_value_for_integer_type_in_schema,"destination_section_config = yaml.comments.CommentedMap([(option_name, int(option_value) if section_schema['properties'].get(option_name, {}).get('type') == 'integer' else option_value) for (option_name, option_value) in source_section_config.items()])","tmp_ListComp0 = []
for (option_name, option_value) in source_section_config.items():
    tmp_ListComp0.append((option_name, int(option_value) if section_schema['properties'].get(option_name, {}).get('type') == 'integer' else option_value))

destination_section_config = yaml.comments.CommentedMap(tmp_ListComp0)
",1,"[['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/config/test_convert.py', 'tests.unit.config.test_convert', '', 'test_convert_section_generates_integer_value_for_integer_type_in_schema']]"
borgmatic,https://github.com/borgmatic-collective/borgmatic/tree/master/borgmatic/config/convert.py,,test_convert_legacy_parsed_config_transforms_source_config_to_mapping,"destination_config = yaml.comments.CommentedMap([(section_name, _convert_section(section_config, schema['properties'][section_name])) for (section_name, section_config) in source_config._asdict().items()])","tmp_ListComp0 = []
for (section_name, section_config) in source_config._asdict().items():
    tmp_ListComp0.append((section_name, _convert_section(section_config, schema['properties'][section_name])))

destination_config = yaml.comments.CommentedMap(tmp_ListComp0)
",1,"[['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/config/test_convert.py', 'tests.unit.config.test_convert', '', 'test_convert_legacy_parsed_config_splits_space_separated_values'], ['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/config/test_convert.py', 'tests.unit.config.test_convert', '', 'test_convert_legacy_parsed_config_transforms_source_config_to_mapping']]"
borgmatic,https://github.com/borgmatic-collective/borgmatic/tree/master/borgmatic/hooks/command.py,,test_execute_hook_with_multiple_commands_invokes_each_command,"commands = [interpolate_context(command, context) for command in commands]","tmp_ListComp0 = []
for command in commands:
    tmp_ListComp0.append(interpolate_context(command, context))

commands = tmp_ListComp0
",1,"[['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/hooks/test_command.py', 'tests.unit.hooks.test_command', '', 'test_execute_hook_with_dry_run_skips_commands'], ['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/hooks/test_command.py', 'tests.unit.hooks.test_command', '', 'test_execute_hook_with_umask_sets_that_umask'], ['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/hooks/test_command.py', 'tests.unit.hooks.test_command', '', 'test_execute_hook_on_error_logs_as_error'], ['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/hooks/test_command.py', 'tests.unit.hooks.test_command', '', 'test_execute_hook_with_empty_commands_does_not_raise'], ['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/hooks/test_command.py', 'tests.unit.hooks.test_command', '', 'test_execute_hook_invokes_each_command'], ['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/hooks/test_command.py', 'tests.unit.hooks.test_command', '', 'test_execute_hook_with_multiple_commands_invokes_each_command']]"
borgmatic,https://github.com/borgmatic-collective/borgmatic/tree/master/borgmatic/hooks/dump.py,,test_convert_glob_patterns_to_borg_patterns_removes_leading_slash,return ['sh:{}'.format(pattern.lstrip(os.path.sep)) for pattern in patterns],"tmp_ListComp0 = []
for pattern in patterns:
    tmp_ListComp0.append('sh:{}'.format(pattern.lstrip(os.path.sep)))

return tmp_ListComp0
",1,"[['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/hooks/test_dump.py', 'tests.unit.hooks.test_dump', '', 'test_convert_glob_patterns_to_borg_patterns_removes_leading_slash']]"
borgmatic,https://github.com/borgmatic-collective/borgmatic/tree/master/borgmatic/borg/check.py,,test_parse_checks_with_blank_value_returns_defaults,"checks = [check.lower() for check in only_checks or consistency_config.get('checks', []) or []]","
checks = []
for check in only_checks or consistency_config.get('checks', []) or []:
    checks.append(check.lower())
",1,"[['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/borg/test_check.py', 'tests.unit.borg.test_check', '', 'test_parse_checks_with_none_value_returns_defaults'], ['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/borg/test_check.py', 'tests.unit.borg.test_check', '', 'test_parse_checks_with_disabled_returns_no_checks'], ['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/borg/test_check.py', 'tests.unit.borg.test_check', '', 'test_parse_checks_with_override_data_check_also_injects_archives'], ['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/borg/test_check.py', 'tests.unit.borg.test_check', '', 'test_parse_checks_with_data_check_also_injects_archives'], ['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/borg/test_check.py', 'tests.unit.borg.test_check', '', 'test_parse_checks_returns_them_as_tuple'], ['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/borg/test_check.py', 'tests.unit.borg.test_check', '', 'test_parse_checks_with_missing_value_returns_defaults'], ['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/borg/test_check.py', 'tests.unit.borg.test_check', '', 'test_parse_checks_with_data_check_passes_through_archives'], ['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/borg/test_check.py', 'tests.unit.borg.test_check', '', 'test_parse_checks_prefers_override_checks_to_configured_checks'], ['https://github.com/borgmatic-collective/borgmatic/tree/master/tests/unit/borg/test_check.py', 'tests.unit.borg.test_check', '', 'test_parse_checks_with_blank_value_returns_defaults']]"
doit,https://github.com/pydoit/doit/tree/master/doit/loader.py,TestTaskGeneratorParams,test_method,parser = TaskParse([CmdOption(opt) for opt in creator_params]),"tmp_ListComp0 = []
for opt in creator_params:
    tmp_ListComp0.append(CmdOption(opt))

parser = TaskParse(tmp_ListComp0)
",1,"[['https://github.com/pydoit/doit/tree/master/tests/test_loader.py', 'tests.test_loader', 'TestTaskGeneratorParams', 'test_dup_param'], ['https://github.com/pydoit/doit/tree/master/tests/test_loader.py', 'tests.test_loader', 'TestTaskGeneratorParams', 'test_default'], ['https://github.com/pydoit/doit/tree/master/tests/test_loader.py', 'tests.test_loader', 'TestTaskGeneratorParams', 'test_args'], ['https://github.com/pydoit/doit/tree/master/tests/test_loader.py', 'tests.test_loader', 'TestTaskGeneratorParams', 'test_config'], ['https://github.com/pydoit/doit/tree/master/tests/test_loader.py', 'tests.test_loader', 'TestTaskGeneratorParams', 'test_delayed'], ['https://github.com/pydoit/doit/tree/master/tests/test_loader.py', 'tests.test_loader', 'TestTaskGeneratorParams', 'test_method']]"
doit,https://github.com/pydoit/doit/tree/master/doit/control.py,TestTaskControlCmdOptions,test_filter_delayed_subtask,delayed_matched_names = [t.name for t in delayed_matched],"
delayed_matched_names = []
for t in delayed_matched:
    delayed_matched_names.append(t.name)
",1,"[['https://github.com/pydoit/doit/tree/master/tests/test_control.py', 'tests.test_control', 'TestTaskControlCmdOptions', 'test_filter_delayed_multi_select'], ['https://github.com/pydoit/doit/tree/master/tests/test_control.py', 'tests.test_control', 'TestTaskDispatcher_add_task', 'test_delayed_creation_target_regex'], ['https://github.com/pydoit/doit/tree/master/tests/test_control.py', 'tests.test_control', 'TestTaskControlCmdOptions', 'test_filter_delayed_regex_auto'], ['https://github.com/pydoit/doit/tree/master/tests/test_control.py', 'tests.test_control', 'TestTaskDispatcher_add_task', 'test_regex_group_already_created'], ['https://github.com/pydoit/doit/tree/master/tests/test_control.py', 'tests.test_control', 'TestTaskControlCmdOptions', 'test_filter_delayed_regex_multiple_match'], ['https://github.com/pydoit/doit/tree/master/tests/test_control.py', 'tests.test_control', 'TestTaskDispatcher_add_task', 'test_regex_not_found'], ['https://github.com/pydoit/doit/tree/master/tests/test_control.py', 'tests.test_control', 'TestTaskControlCmdOptions', 'test_filter_delayed_regex_single'], ['https://github.com/pydoit/doit/tree/master/tests/test_control.py', 'tests.test_control', 'TestTaskControlCmdOptions', 'test_filter_delayed_subtask']]"
doit,https://github.com/pydoit/doit/tree/master/doit/reporter.py,TestJsonReporter,test_normal,task_result_list = [tr.to_dict() for tr in self.t_results.values()],"
task_result_list = []
for tr in self.t_results.values():
    task_result_list.append(tr.to_dict())
",1,"[['https://github.com/pydoit/doit/tree/master/tests/test_reporter.py', 'tests.test_reporter', 'TestConsoleReporter', 'test_complete_run_verbosity0'], ['https://github.com/pydoit/doit/tree/master/tests/test_reporter.py', 'tests.test_reporter', 'TestJsonReporter', 'test_ignore_stdout'], ['https://github.com/pydoit/doit/tree/master/tests/test_reporter.py', 'tests.test_reporter', 'TestJsonReporter', 'test_cleanup_error'], ['https://github.com/pydoit/doit/tree/master/tests/test_reporter.py', 'tests.test_reporter', 'TestConsoleReporter', 'test_complete_run_verbosity2_redisplay'], ['https://github.com/pydoit/doit/tree/master/tests/test_reporter.py', 'tests.test_reporter', 'TestConsoleReporter', 'test_complete_run_verbosity0_not_executed'], ['https://github.com/pydoit/doit/tree/master/tests/test_reporter.py', 'tests.test_reporter', 'TestConsoleReporter', 'test_complete_run_verbosity1'], ['https://github.com/pydoit/doit/tree/master/tests/test_reporter.py', 'tests.test_reporter', 'TestConsoleReporter', 'test_addFailure'], ['https://github.com/pydoit/doit/tree/master/tests/test_reporter.py', 'tests.test_reporter', 'TestJsonReporter', 'test_runtime_error'], ['https://github.com/pydoit/doit/tree/master/tests/test_reporter.py', 'tests.test_reporter', 'TestConsoleReporter', 'test_complete_run_verbosity2'], ['https://github.com/pydoit/doit/tree/master/tests/test_reporter.py', 'tests.test_reporter', 'TestConsoleReporter', 'test_runtime_error'], ['https://github.com/pydoit/doit/tree/master/tests/test_reporter.py', 'tests.test_reporter', 'TestJsonReporter', 'test_normal']]"
doit,https://github.com/pydoit/doit/tree/master/doit/cmdparse.py,TestCmdOption_str2val,test_bool,"parts = [p.strip() for p in str_val.split(',')]","
parts = []
for p in str_val.split(','):
    parts.append(p.strip())
",1,"[['https://github.com/pydoit/doit/tree/master/tests/test_cmdparse.py', 'tests.test_cmdparse', 'TestCmdOption_str2val', 'test_str'], ['https://github.com/pydoit/doit/tree/master/tests/test_cmdparse.py', 'tests.test_cmdparse', 'TestCmdOption_str2val', 'test_int'], ['https://github.com/pydoit/doit/tree/master/tests/test_cmdparse.py', 'tests.test_cmdparse', 'TestCmdOption_str2val', 'test_non_string_values_are_not_converted'], ['https://github.com/pydoit/doit/tree/master/tests/test_cmdparse.py', 'tests.test_cmdparse', 'TestCmdOption_str2val', 'test_list'], ['https://github.com/pydoit/doit/tree/master/tests/test_cmdparse.py', 'tests.test_cmdparse', 'TestCmdOption_str2val', 'test_bool']]"
doit,https://github.com/pydoit/doit/tree/master/doit/cmdparse.py,TestCmdOption_str2val,test_bool,val = [p for p in parts if p],"
val = []
for p in parts:
    if p:
        val.append(p)
",1,"[['https://github.com/pydoit/doit/tree/master/tests/test_cmdparse.py', 'tests.test_cmdparse', 'TestCmdOption_str2val', 'test_str'], ['https://github.com/pydoit/doit/tree/master/tests/test_cmdparse.py', 'tests.test_cmdparse', 'TestCmdOption_str2val', 'test_int'], ['https://github.com/pydoit/doit/tree/master/tests/test_cmdparse.py', 'tests.test_cmdparse', 'TestCmdOption_str2val', 'test_non_string_values_are_not_converted'], ['https://github.com/pydoit/doit/tree/master/tests/test_cmdparse.py', 'tests.test_cmdparse', 'TestCmdOption_str2val', 'test_list'], ['https://github.com/pydoit/doit/tree/master/tests/test_cmdparse.py', 'tests.test_cmdparse', 'TestCmdOption_str2val', 'test_bool']]"
doit,https://github.com/pydoit/doit/tree/master/doit/doit_cmd.py,TestConfig,test_no_ini_config_file,loader_opt_parser = CmdParse([CmdOption(opt) for opt in task_loader.cmd_options]),"tmp_ListComp0 = []
for opt in task_loader.cmd_options:
    tmp_ListComp0.append(CmdOption(opt))

loader_opt_parser = CmdParse(tmp_ListComp0)
",1,"[['https://github.com/pydoit/doit/tree/master/tests/test_doit_cmd.py', 'tests.test_doit_cmd', 'TestConfig', 'test_execute_command_plugin'], ['https://github.com/pydoit/doit/tree/master/tests/test_cmd_help.py', 'tests.test_cmd_help', 'TestHelp', 'test_help_plugin_name'], ['https://github.com/pydoit/doit/tree/master/tests/test_doit_cmd.py', 'tests.test_doit_cmd', 'TestConfig', 'test_no_ini_config_file']]"
doit,https://github.com/pydoit/doit/tree/master/doit/runner.py,TestMRunner_execute_task,test_hold,result['out'] = [action.out for action in task.actions],"
result['out'] = []
for action in task.actions:
    result['out'].append(action.out)
",1,"[['https://github.com/pydoit/doit/tree/master/tests/test_runner.py', 'tests.test_runner', 'TestMRunner_execute_task', 'test_full_task_fail'], ['https://github.com/pydoit/doit/tree/master/tests/test_runner.py', 'tests.test_runner', 'TestMRunner_execute_task', 'test_full_task'], ['https://github.com/pydoit/doit/tree/master/tests/test_runner.py', 'tests.test_runner', 'TestMRunner_execute_task', 'test_hold']]"
doit,https://github.com/pydoit/doit/tree/master/doit/runner.py,TestMRunner_execute_task,test_hold,result['err'] = [action.err for action in task.actions],"
result['err'] = []
for action in task.actions:
    result['err'].append(action.err)
",1,"[['https://github.com/pydoit/doit/tree/master/tests/test_runner.py', 'tests.test_runner', 'TestMRunner_execute_task', 'test_full_task_fail'], ['https://github.com/pydoit/doit/tree/master/tests/test_runner.py', 'tests.test_runner', 'TestMRunner_execute_task', 'test_full_task'], ['https://github.com/pydoit/doit/tree/master/tests/test_runner.py', 'tests.test_runner', 'TestMRunner_execute_task', 'test_hold']]"
doit,https://github.com/pydoit/doit/tree/master/doit/task.py,TestTaskInit,test_options_from_cfg_override,taskcmd = TaskParse([CmdOption(opt) for opt in list(self.params) + self.creator_params]),"tmp_ListComp0 = []
for opt in list(self.params) + self.creator_params:
    tmp_ListComp0.append(CmdOption(opt))

taskcmd = TaskParse(tmp_ListComp0)
",1,"[['https://github.com/pydoit/doit/tree/master/tests/test_task.py', 'tests.test_task', 'TestTaskInit', 'test_options_from_cfg'], ['https://github.com/pydoit/doit/tree/master/tests/test_task.py', 'tests.test_task', 'TestTaskInit', 'test_options_from_cfg_override']]"
python-slack-sdk,https://github.com/slackapi/python-slack-sdk/tree/master/slack_sdk/web/internal_utils.py,TestInternalUtils,test_build_unexpected_body_error_message,"body_for_logging = ''.join([line.strip() for line in body.replace('\r', '\n').split('\n')])","tmp_ListComp0 = []
for line in body.replace('\r', '\n').split('\n'):
    tmp_ListComp0.append(line.strip())

body_for_logging = ''.join(tmp_ListComp0)
",1,"[['https://github.com/slackapi/python-slack-sdk/tree/master/tests/slack_sdk/web/test_internal_utils.py', 'tests.slack_sdk.web.test_internal_utils', 'TestInternalUtils', 'test_build_unexpected_body_error_message']]"
python-slack-sdk,https://github.com/slackapi/python-slack-sdk/tree/master/slack_sdk/scim/v1/internal_utils.py,TEstInternals,test_snake_cased,"return _convert_dict_keys(original, {}, lambda s: re.sub('^_', '', ''.join(['_' + c.lower() if c.isupper() else c for c in s])))","def my_comprehension_func(s):
    tmp_ListComp0 = []
    for c in s:
        if c.isupper():
            tmp_ListComp0.append('_' + c.lower())
        else:
            tmp_ListComp0.append(c)
    return tmp_ListComp0

return _convert_dict_keys(original, {}, lambda s: re.sub('^_', '', ''.join(my_comprehension_func(s))))
",1,"[['https://github.com/slackapi/python-slack-sdk/tree/master/tests/slack_sdk/scim/test_internals.py', 'tests.slack_sdk.scim.test_internals', 'TEstInternals', 'test_snake_cased']]"
cesium,https://github.com/cesium-ml/cesium/tree/master/cesium/time_series.py,,test_time_series_npz,data[key] = [data[key + str(i)] for i in range(n_channels)],"tmp_ListComp0 = []
for i in range(n_channels):
    tmp_ListComp0.append(data[key + str(i)])

data[key] = tmp_ListComp0
",1,"[['https://github.com/cesium-ml/cesium/tree/master/cesium/tests/test_time_series.py', 'cesium.tests.test_time_series', '', 'test_time_series_npz']]"
cppclean,https://github.com/myint/cppclean/tree/master/cpp/tokenize.py,ASTBuilderIntegrationTest,test_operators,"i = min([x for x in (i1, i2, i3, i4, end) if x != -1])","tmp_ListComp0 = []
for x in (i1, i2, i3, i4, end):
    if x != -1:
        tmp_ListComp0.append(x)

i = min(tmp_ListComp0)
",1,"[['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_class_handles_struct_rebind'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToTypeTest', 'test_template_with_function_arg_two_args'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToTypeTest', 'test_template_with_multiple_template_args_reference'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_two_arguments_second_empty'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToParametersTest', 'test_multiple_args'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_variable_declaration_with_define'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_one_argument'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterDeclarationToPartsTest', 'test_simple_modifiers'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_method_with_template_class_with3args_works'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_class_operators'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToParametersTest', 'test_array_with_class'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToTypeTest', 'test_templated_type'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_template_function'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_operator_delete_bracket'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_two_arguments'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToParametersTest', 'test_complex_default_value'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToTypeTest', 'test_template_with_function_arg_one_arg'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterCreateReturnTypeTest', 'test_array'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_include_path_overrides'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToTypeTest', 'test_template_with_multiple_template_args_end'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterCreateReturnTypeTest', 'test_const_pointer'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_function_parses_operator_bracket'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToTypeTest', 'test_template_with_multiple_args'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToParametersTest', 'test_templated_default_value'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToTypeTest', 'test_template_with_multiple_template_args_mid'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToTypeTest', 'test_simple'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_function_return'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToParametersTest', 'test_simple_with_initializers'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToTypeTest', 'test_array_with_size'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToParametersTest', 'test_array_pointer_reference'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_operator_new_bracket'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_constructor'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_method_with_template_class_with2args_works'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToTypeTest', 'test_array'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterDeclarationToPartsTest', 'test_simple'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterCreateReturnTypeTest', 'test_simple'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToParametersTest', 'test_nested_template'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToTypeTest', 'test_template_with_multiple_template_args_pointer'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterDeclarationToPartsTest', 'test_simple_template'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToTypeTest', 'test_template_with_function_arg_and_nested_template'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterCreateReturnTypeTest', 'test_const_class_pointer'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_two_arguments_first_empty'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_inline_function'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_destructor'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterDeclarationToPartsTest', 'test_simple_array'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterCreateReturnTypeTest', 'test_template'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToTypeTest', 'test_template_with_multiple_template_args_start'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToTypeTest', 'test_template'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToParametersTest', 'test_really_simple'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToTypeTest', 'test_template_with_function_arg_zero_arg'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToParametersTest', 'test_array'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_method_with_template_class_works'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToParametersTest', 'test_simple_template_begin'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_class_colon_separated_class_name_and_inline_dtor'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_operators']]"
cppclean,https://github.com/myint/cppclean/tree/master/cpp/tokenize.py,ASTBuilderIntegrationTest,test_operators,"s = min([x for x in (s1, s2, s3, end) if x != -1])","tmp_ListComp0 = []
for x in (s1, s2, s3, end):
    if x != -1:
        tmp_ListComp0.append(x)

s = min(tmp_ListComp0)
",1,"[['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_class_handles_struct_rebind'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToTypeTest', 'test_template_with_function_arg_two_args'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToTypeTest', 'test_template_with_multiple_template_args_reference'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_two_arguments_second_empty'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToParametersTest', 'test_multiple_args'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_variable_declaration_with_define'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_one_argument'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterDeclarationToPartsTest', 'test_simple_modifiers'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_method_with_template_class_with3args_works'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_class_operators'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToParametersTest', 'test_array_with_class'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToTypeTest', 'test_templated_type'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_template_function'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_operator_delete_bracket'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_two_arguments'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToParametersTest', 'test_complex_default_value'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToTypeTest', 'test_template_with_function_arg_one_arg'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterCreateReturnTypeTest', 'test_array'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_include_path_overrides'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToTypeTest', 'test_template_with_multiple_template_args_end'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterCreateReturnTypeTest', 'test_const_pointer'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_function_parses_operator_bracket'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToTypeTest', 'test_template_with_multiple_args'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToParametersTest', 'test_templated_default_value'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToTypeTest', 'test_template_with_multiple_template_args_mid'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToTypeTest', 'test_simple'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_function_return'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToParametersTest', 'test_simple_with_initializers'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToTypeTest', 'test_array_with_size'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToParametersTest', 'test_array_pointer_reference'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_operator_new_bracket'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_constructor'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_method_with_template_class_with2args_works'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToTypeTest', 'test_array'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterDeclarationToPartsTest', 'test_simple'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterCreateReturnTypeTest', 'test_simple'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToParametersTest', 'test_nested_template'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToTypeTest', 'test_template_with_multiple_template_args_pointer'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterDeclarationToPartsTest', 'test_simple_template'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToTypeTest', 'test_template_with_function_arg_and_nested_template'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterCreateReturnTypeTest', 'test_const_class_pointer'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_two_arguments_first_empty'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_inline_function'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_destructor'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterDeclarationToPartsTest', 'test_simple_array'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterCreateReturnTypeTest', 'test_template'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToTypeTest', 'test_template_with_multiple_template_args_start'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToTypeTest', 'test_template'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToParametersTest', 'test_really_simple'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToTypeTest', 'test_template_with_function_arg_zero_arg'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToParametersTest', 'test_array'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_method_with_template_class_works'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'TypeConverterToParametersTest', 'test_simple_template_begin'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_class_colon_separated_class_name_and_inline_dtor'], ['https://github.com/myint/cppclean/tree/master//test_ast.py', 'test_ast', 'ASTBuilderIntegrationTest', 'test_operators']]"
kafka-python,https://github.com/dpkp/kafka-python/tree/master/kafka/protocol/message.py,,test_decode_message,"(crc, magic, attributes) = [field.decode(data) for field in base_fields]","tmp_ListComp0 = []
for field in base_fields:
    tmp_ListComp0.append(field.decode(data))

(crc, magic, attributes) = tmp_ListComp0
",1,"[['https://github.com/dpkp/kafka-python/tree/master/test/test_protocol.py', 'test.test_protocol', '', 'test_decode_message_validate_crc'], ['https://github.com/dpkp/kafka-python/tree/master/test/test_protocol.py', 'test.test_protocol', '', 'test_decode_message']]"
kafka-python,https://github.com/dpkp/kafka-python/tree/master/kafka/protocol/message.py,,test_decode_message,fields = [field.decode(data) for field in remaining],"
fields = []
for field in remaining:
    fields.append(field.decode(data))
",1,"[['https://github.com/dpkp/kafka-python/tree/master/test/test_protocol.py', 'test.test_protocol', '', 'test_decode_message_validate_crc'], ['https://github.com/dpkp/kafka-python/tree/master/test/test_protocol.py', 'test.test_protocol', '', 'test_decode_message']]"
aws-cli,https://github.com/aws/aws-cli/tree/master/awscli/customizations/flatten.py,TestFlattenCommands,test_flatten_modify_args,"LOG.debug('Flattening {0} argument {1} into {2}'.format(command.name, name, ', '.join([v['name'] for (k, v) in argument['flatten'].items()])))","tmp_ListComp0 = []
for (k, v) in argument['flatten'].items():
    tmp_ListComp0.append(v['name'])

LOG.debug('Flattening {0} argument {1} into {2}'.format(command.name, name, ', '.join(tmp_ListComp0)))
",1,"[['https://github.com/aws/aws-cli/tree/master/tests/unit/customizations/test_flatten.py', 'tests.unit.customizations.test_flatten', 'TestFlattenCommands', 'test_flatten_modify_args']]"
aws-cli,https://github.com/aws/aws-cli/tree/master/awscli/customizations/paginate.py,TestHelpDocumentationModifications,test_does_not_inject_when_no_pagination,"queries = ', '.join(['``%s``' % s for s in queries])","tmp_ListComp0 = []
for s in queries:
    tmp_ListComp0.append('``%s``' % s)

queries = ', '.join(tmp_ListComp0)
",1,"[['https://github.com/aws/aws-cli/tree/master/tests/unit/customizations/test_paginate.py', 'tests.unit.customizations.test_paginate', 'TestHelpDocumentationModifications', 'test_injects_pagination_help_text'], ['https://github.com/aws/aws-cli/tree/master/tests/unit/customizations/test_paginate.py', 'tests.unit.customizations.test_paginate', 'TestHelpDocumentationModifications', 'test_shows_result_keys_when_array'], ['https://github.com/aws/aws-cli/tree/master/tests/unit/customizations/test_paginate.py', 'tests.unit.customizations.test_paginate', 'TestHelpDocumentationModifications', 'test_does_not_show_result_key_if_not_present'], ['https://github.com/aws/aws-cli/tree/master/tests/unit/customizations/test_paginate.py', 'tests.unit.customizations.test_paginate', 'TestHelpDocumentationModifications', 'test_does_not_inject_when_no_pagination']]"
aws-cli,https://github.com/aws/aws-cli/tree/master/awscli/customizations/eks/kubeconfig.py,TestKubeconfig,test_has_cluster_with_no_clusters,return name in [cluster['name'] for cluster in self.content['clusters']],"tmp_ListComp0 = []
for cluster in self.content['clusters']:
    tmp_ListComp0.append(cluster['name'])

return name in tmp_ListComp0
",1,"[['https://github.com/aws/aws-cli/tree/master/tests/unit/customizations/eks/test_kubeconfig.py', 'tests.unit.customizations.eks.test_kubeconfig', 'TestKubeconfig', 'test_has_cluster'], ['https://github.com/aws/aws-cli/tree/master/tests/unit/customizations/eks/test_kubeconfig.py', 'tests.unit.customizations.eks.test_kubeconfig', 'TestKubeconfig', 'test_has_cluster_with_no_clusters']]"
client_python,https://github.com/prometheus/client_python/tree/master/prometheus_client/exposition.py,TestGenerateText,test_counter_total,"labelstr = '{{{0}}}'.format(','.join(['{}=""{}""'.format(k, v.replace('\\', '\\\\').replace('\n', '\\n').replace('""', '\\""')) for (k, v) in sorted(line.labels.items())]))","tmp_ListComp0 = []
for (k, v) in sorted(line.labels.items()):
    tmp_ListComp0.append('{}=""{}""'.format(k, v.replace('\\', '\\\\').replace('\n', '\\n').replace('""', '\\""')))

labelstr = '{{{0}}}'.format(','.join(tmp_ListComp0))
",1,"[['https://github.com/prometheus/client_python/tree/master/tests/test_exposition.py', 'tests.test_exposition', 'TestGenerateText', 'test_counter_name_unit_append'], ['https://github.com/prometheus/client_python/tree/master/tests/test_exposition.py', 'tests.test_exposition', 'TestGenerateText', 'test_info'], ['https://github.com/prometheus/client_python/tree/master/tests/test_parser.py', 'tests.test_parser', 'TestParse', 'test_roundtrip'], ['https://github.com/prometheus/client_python/tree/master/tests/test_exposition.py', 'tests.test_exposition', 'TestGenerateText', 'test_counter'], ['https://github.com/prometheus/client_python/tree/master/tests/test_exposition.py', 'tests.test_exposition', 'TestGenerateText', 'test_timestamp'], ['https://github.com/prometheus/client_python/tree/master/tests/test_exposition.py', 'tests.test_exposition', 'TestGenerateText', 'test_histogram'], ['https://github.com/prometheus/client_python/tree/master/tests/test_exposition.py', 'tests.test_exposition', 'TestGenerateText', 'test_nonnumber'], ['https://github.com/prometheus/client_python/tree/master/tests/test_exposition.py', 'tests.test_exposition', 'TestGenerateText', 'test_escaping'], ['https://github.com/prometheus/client_python/tree/master/tests/test_exposition.py', 'tests.test_exposition', 'TestGenerateText', 'test_unicode'], ['https://github.com/prometheus/client_python/tree/master/tests/test_exposition.py', 'tests.test_exposition', 'TestGenerateText', 'test_summary'], ['https://github.com/prometheus/client_python/tree/master/tests/test_exposition.py', 'tests.test_exposition', 'TestGenerateText', 'test_enum'], ['https://github.com/prometheus/client_python/tree/master/tests/test_exposition.py', 'tests.test_exposition', 'TestGenerateText', 'test_gauge'], ['https://github.com/prometheus/client_python/tree/master/tests/test_exposition.py', 'tests.test_exposition', 'TestGenerateText', 'test_gaugehistogram'], ['https://github.com/prometheus/client_python/tree/master/tests/test_exposition.py', 'tests.test_exposition', 'TestGenerateText', 'test_counter_total']]"
client_python,https://github.com/prometheus/client_python/tree/master/prometheus_client/openmetrics/exposition.py,TestGenerateText,test_histogram_non_bucket_exemplar,"labelstr = '{{{0}}}'.format(','.join(['{}=""{}""'.format(k, v.replace('\\', '\\\\').replace('\n', '\\n').replace('""', '\\""')) for (k, v) in sorted(s.labels.items())]))","tmp_ListComp0 = []
for (k, v) in sorted(s.labels.items()):
    tmp_ListComp0.append('{}=""{}""'.format(k, v.replace('\\', '\\\\').replace('\n', '\\n').replace('""', '\\""')))

labelstr = '{{{0}}}'.format(','.join(tmp_ListComp0))
",1,"[['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_exposition.py', 'tests.openmetrics.test_exposition', 'TestGenerateText', 'test_info'], ['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_exposition.py', 'tests.openmetrics.test_exposition', 'TestGenerateText', 'test_unicode'], ['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_exposition.py', 'tests.openmetrics.test_exposition', 'TestGenerateText', 'test_gaugehistogram_negative_buckets'], ['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_exposition.py', 'tests.openmetrics.test_exposition', 'TestGenerateText', 'test_untyped_exemplar'], ['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_exposition.py', 'tests.openmetrics.test_exposition', 'TestGenerateText', 'test_counter'], ['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_exposition.py', 'tests.openmetrics.test_exposition', 'TestGenerateText', 'test_counter_unit'], ['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_exposition.py', 'tests.openmetrics.test_exposition', 'TestGenerateText', 'test_counter_non_total_exemplar'], ['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_exposition.py', 'tests.openmetrics.test_exposition', 'TestGenerateText', 'test_histogram_negative_buckets'], ['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_exposition.py', 'tests.openmetrics.test_exposition', 'TestGenerateText', 'test_escaping'], ['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_exposition.py', 'tests.openmetrics.test_exposition', 'TestGenerateText', 'test_gauge'], ['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_parser.py', 'tests.openmetrics.test_parser', 'TestParse', 'test_roundtrip'], ['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_exposition.py', 'tests.openmetrics.test_exposition', 'TestGenerateText', 'test_histogram_exemplar'], ['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_exposition.py', 'tests.openmetrics.test_exposition', 'TestGenerateText', 'test_gaugehistogram'], ['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_exposition.py', 'tests.openmetrics.test_exposition', 'TestGenerateText', 'test_nonnumber'], ['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_exposition.py', 'tests.openmetrics.test_exposition', 'TestGenerateText', 'test_counter_total'], ['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_exposition.py', 'tests.openmetrics.test_exposition', 'TestGenerateText', 'test_summary'], ['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_exposition.py', 'tests.openmetrics.test_exposition', 'TestGenerateText', 'test_counter_exemplar'], ['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_exposition.py', 'tests.openmetrics.test_exposition', 'TestGenerateText', 'test_enum'], ['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_exposition.py', 'tests.openmetrics.test_exposition', 'TestGenerateText', 'test_timestamp'], ['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_exposition.py', 'tests.openmetrics.test_exposition', 'TestGenerateText', 'test_histogram'], ['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_exposition.py', 'tests.openmetrics.test_exposition', 'TestGenerateText', 'test_histogram_non_bucket_exemplar']]"
client_python,https://github.com/prometheus/client_python/tree/master/prometheus_client/openmetrics/exposition.py,TestGenerateText,test_histogram_non_bucket_exemplar,"labels = '{{{0}}}'.format(','.join(['{}=""{}""'.format(k, v.replace('\\', '\\\\').replace('\n', '\\n').replace('""', '\\""')) for (k, v) in sorted(s.exemplar.labels.items())]))","tmp_ListComp0 = []
for (k, v) in sorted(s.exemplar.labels.items()):
    tmp_ListComp0.append('{}=""{}""'.format(k, v.replace('\\', '\\\\').replace('\n', '\\n').replace('""', '\\""')))

labels = '{{{0}}}'.format(','.join(tmp_ListComp0))
",1,"[['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_exposition.py', 'tests.openmetrics.test_exposition', 'TestGenerateText', 'test_info'], ['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_exposition.py', 'tests.openmetrics.test_exposition', 'TestGenerateText', 'test_unicode'], ['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_exposition.py', 'tests.openmetrics.test_exposition', 'TestGenerateText', 'test_gaugehistogram_negative_buckets'], ['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_exposition.py', 'tests.openmetrics.test_exposition', 'TestGenerateText', 'test_untyped_exemplar'], ['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_exposition.py', 'tests.openmetrics.test_exposition', 'TestGenerateText', 'test_counter'], ['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_exposition.py', 'tests.openmetrics.test_exposition', 'TestGenerateText', 'test_counter_unit'], ['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_exposition.py', 'tests.openmetrics.test_exposition', 'TestGenerateText', 'test_counter_non_total_exemplar'], ['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_exposition.py', 'tests.openmetrics.test_exposition', 'TestGenerateText', 'test_histogram_negative_buckets'], ['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_exposition.py', 'tests.openmetrics.test_exposition', 'TestGenerateText', 'test_escaping'], ['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_exposition.py', 'tests.openmetrics.test_exposition', 'TestGenerateText', 'test_gauge'], ['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_parser.py', 'tests.openmetrics.test_parser', 'TestParse', 'test_roundtrip'], ['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_exposition.py', 'tests.openmetrics.test_exposition', 'TestGenerateText', 'test_histogram_exemplar'], ['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_exposition.py', 'tests.openmetrics.test_exposition', 'TestGenerateText', 'test_gaugehistogram'], ['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_exposition.py', 'tests.openmetrics.test_exposition', 'TestGenerateText', 'test_nonnumber'], ['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_exposition.py', 'tests.openmetrics.test_exposition', 'TestGenerateText', 'test_counter_total'], ['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_exposition.py', 'tests.openmetrics.test_exposition', 'TestGenerateText', 'test_summary'], ['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_exposition.py', 'tests.openmetrics.test_exposition', 'TestGenerateText', 'test_counter_exemplar'], ['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_exposition.py', 'tests.openmetrics.test_exposition', 'TestGenerateText', 'test_enum'], ['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_exposition.py', 'tests.openmetrics.test_exposition', 'TestGenerateText', 'test_timestamp'], ['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_exposition.py', 'tests.openmetrics.test_exposition', 'TestGenerateText', 'test_histogram'], ['https://github.com/prometheus/client_python/tree/master/tests/openmetrics/test_exposition.py', 'tests.openmetrics.test_exposition', 'TestGenerateText', 'test_histogram_non_bucket_exemplar']]"
svtplay-dl,https://github.com/spaam/svtplay-dl/tree/master/lib/svtplay_dl/utils/stream.py,streamTestFormat,test_language_prio2,prioritized = [s for s in streams if s.format in priolist],"
prioritized = []
for s in streams:
    if s.format in priolist:
        prioritized.append(s)
",1,"[['https://github.com/spaam/svtplay-dl/tree/master/lib/svtplay_dl/tests/test_stream.py', 'lib.svtplay_dl.tests.test_stream', 'streamTestFormat', 'test_language_prio'], ['https://github.com/spaam/svtplay-dl/tree/master/lib/svtplay_dl/tests/test_stream.py', 'lib.svtplay_dl.tests.test_stream', 'streamTestFormat', 'test_language_prio3'], ['https://github.com/spaam/svtplay-dl/tree/master/lib/svtplay_dl/tests/test_stream.py', 'lib.svtplay_dl.tests.test_stream', 'streamTestFormat', 'test_language_prio2']]"
cli,https://github.com/terraform-compliance/cli/tree/master/terraform_compliance/common/readable_plan.py,TestReadablePlan,test_readable_plan_convert_terraform_files,"plan_lines = [line for line in open(values, 'r', encoding='utf-8')]","
plan_lines = []
for line in open(values, 'r', encoding='utf-8'):
    plan_lines.append(line)
",1,"[['https://github.com/terraform-compliance/cli/tree/master/tests/terraform_compliance/common/test_readable_plan.py', 'tests.terraform_compliance.common.test_readable_plan', 'TestReadablePlan', 'test_readable_plan_is_not_a_file'], ['https://github.com/terraform-compliance/cli/tree/master/tests/terraform_compliance/common/test_readable_plan.py', 'tests.terraform_compliance.common.test_readable_plan', 'TestReadablePlan', 'test_readable_plan_filetype_guess_is_none'], ['https://github.com/terraform-compliance/cli/tree/master/tests/terraform_compliance/common/test_readable_plan.py', 'tests.terraform_compliance.common.test_readable_plan', 'TestReadablePlan', 'test_readable_plan_file_is_not_json'], ['https://github.com/terraform-compliance/cli/tree/master/tests/terraform_compliance/common/test_readable_plan.py', 'tests.terraform_compliance.common.test_readable_plan', 'TestReadablePlan', 'test_readable_plan_convert_terraform_files']]"
uvicorn,https://github.com/encode/uvicorn/tree/master/uvicorn/config.py,,test_concrete_http_class,"encoded_headers = [(key.lower().encode('latin1'), value.encode('latin1')) for (key, value) in self.headers]","
encoded_headers = []
for (key, value) in self.headers:
    encoded_headers.append((key.lower().encode('latin1'), value.encode('latin1')))
",1,"[['https://github.com/encode/uvicorn/tree/master/tests/test_config.py', 'tests.test_config', '', 'test_ws_max_size'], ['https://github.com/encode/uvicorn/tree/master/tests/test_config.py', 'tests.test_config', '', 'test_log_config_json'], ['https://github.com/encode/uvicorn/tree/master/tests/test_config.py', 'tests.test_config', '', 'test_app_unimportable_module'], ['https://github.com/encode/uvicorn/tree/master/tests/test_config.py', 'tests.test_config', '', 'test_app_unimportable_other'], ['https://github.com/encode/uvicorn/tree/master/tests/test_config.py', 'tests.test_config', '', 'test_log_config_file'], ['https://github.com/encode/uvicorn/tree/master/tests/test_config.py', 'tests.test_config', '', 'test_wsgi_app'], ['https://github.com/encode/uvicorn/tree/master/tests/test_config.py', 'tests.test_config', '', 'test_app_factory'], ['https://github.com/encode/uvicorn/tree/master/tests/test_config.py', 'tests.test_config', '', 'test_proxy_headers'], ['https://github.com/encode/uvicorn/tree/master/tests/test_config.py', 'tests.test_config', '', 'test_ssl_config'], ['https://github.com/encode/uvicorn/tree/master/tests/test_config.py', 'tests.test_config', '', 'test_socket_bind'], ['https://github.com/encode/uvicorn/tree/master/tests/test_config.py', 'tests.test_config', '', 'test_debug_app'], ['https://github.com/encode/uvicorn/tree/master/tests/test_config.py', 'tests.test_config', '', 'test_ssl_config_combined'], ['https://github.com/encode/uvicorn/tree/master/tests/test_config.py', 'tests.test_config', '', 'test_concrete_http_class']]"
funcy,https://github.com/Suor/funcy/tree/master/funcy/funcs.py,,test_juxt,"return lambda *a, **kw: [f(*a, **kw) for f in extended_fs]","def my_comprehension_func(a, kw):
    tmp_ListComp0 = []
    for f in extended_fs:
        tmp_ListComp0.append(f(*a, **kw))
    return tmp_ListComp0

return lambda *a, **kw: my_comprehension_func(a, kw)
",1,"[['https://github.com/Suor/funcy/tree/master/tests/test_funcs.py', 'tests.test_funcs', '', 'test_juxt']]"
micropython-lib,https://github.com/micropython/micropython-lib/tree/master/python-stdlib/urllib.parse/urllib/parse.py,UrlParseTestCase,test_qsl,pairs = [s2 for s1 in qs.split('&') for s2 in s1.split(';')],"
pairs = []
for s1 in qs.split('&'):
    for s2 in s1.split(';'):
        pairs.append(s2)
",1,"[['https://github.com/micropython/micropython-lib/tree/master/python-stdlib/urllib.parse/test_urlparse.py', 'python-stdlib.urllib.parse.test_urlparse', 'UrlParseTestCase', 'test_qsl']]"
arxiv.py,https://github.com/lukasschwab/arxiv.py/tree/master/arxiv/arxiv.py,TestClient,test_nonexistent_id_in_list,"return Result(entry_id=entry.id, updated=Result._to_datetime(entry.updated_parsed), published=Result._to_datetime(entry.published_parsed), title=re.sub('\\s+', ' ', title), authors=[Result.Author._from_feed_author(a) for a in entry.authors], summary=entry.summary, comment=entry.get('arxiv_comment'), journal_ref=entry.get('arxiv_journal_ref'), doi=entry.get('arxiv_doi'), primary_category=entry.arxiv_primary_category.get('term'), categories=[tag.get('term') for tag in entry.tags], links=[Result.Link._from_feed_link(link) for link in entry.links], _raw=entry)","def my_comprehension_func(entry, Result):
    tmp_ListComp0 = []
    for a in entry.authors:
        tmp_ListComp0.append(Result.Author._from_feed_author(a))
    return tmp_ListComp0

return Result(entry_id=entry.id, updated=Result._to_datetime(entry.updated_parsed), published=Result._to_datetime(entry.published_parsed), title=re.sub('\\s+', ' ', title), authors=my_comprehension_func(entry, Result), summary=entry.summary, comment=entry.get('arxiv_comment'), journal_ref=entry.get('arxiv_journal_ref'), doi=entry.get('arxiv_doi'), primary_category=entry.arxiv_primary_category.get('term'), categories=[tag.get('term') for tag in entry.tags], links=[Result.Link._from_feed_link(link) for link in entry.links], _raw=entry)
",1,"[['https://github.com/lukasschwab/arxiv.py/tree/master/tests/test_result.py', 'tests.test_result', 'TestResult', 'test_from_feed_entry'], ['https://github.com/lukasschwab/arxiv.py/tree/master/tests/test_client.py', 'tests.test_client', 'TestClient', 'test_nonexistent_id_in_list']]"
blockade,https://github.com/worstcase/blockade/tree/master/blockade/audit.py,AuditTest,test_basic_audit,normalized_target.append([str(i) for i in list(l)]),"tmp_ListComp0 = []
for i in list(l):
    tmp_ListComp0.append(str(i))

normalized_target.append(tmp_ListComp0)
",1,"[['https://github.com/worstcase/blockade/tree/master/blockade/tests/test_audit.py', 'blockade.tests.test_audit', 'AuditTest', 'test_basic_audit']]"
blockade,https://github.com/worstcase/blockade/tree/master/blockade/config.py,ConfigTests,test_parse_1,existing = [c for c in parsed_containers.values() if c.container_name == cname],"
existing = []
for c in parsed_containers.values():
    if c.container_name == cname:
        existing.append(c)
",1,"[['https://github.com/worstcase/blockade/tree/master/blockade/tests/test_config.py', 'blockade.tests.test_config', 'ConfigTests', 'test_parse_with_cap_add'], ['https://github.com/worstcase/blockade/tree/master/blockade/tests/test_config.py', 'blockade.tests.test_config', 'ConfigTests', 'test_parse_with_start_delay_2'], ['https://github.com/worstcase/blockade/tree/master/blockade/tests/test_config.py', 'blockade.tests.test_config', 'ConfigTests', 'test_parse_with_env_1'], ['https://github.com/worstcase/blockade/tree/master/blockade/tests/test_config.py', 'blockade.tests.test_config', 'ConfigTests', 'test_parse_fail_1'], ['https://github.com/worstcase/blockade/tree/master/blockade/tests/test_config.py', 'blockade.tests.test_config', 'ConfigTests', 'test_parse_with_numeric_port'], ['https://github.com/worstcase/blockade/tree/master/blockade/tests/test_config.py', 'blockade.tests.test_config', 'ConfigTests', 'test_parse_with_volumes_3'], ['https://github.com/worstcase/blockade/tree/master/blockade/tests/test_config.py', 'blockade.tests.test_config', 'ConfigTests', 'test_parse_with_volumes_2'], ['https://github.com/worstcase/blockade/tree/master/blockade/tests/test_config.py', 'blockade.tests.test_config', 'ConfigTests', 'test_parse_fail_2'], ['https://github.com/worstcase/blockade/tree/master/blockade/tests/test_config.py', 'blockade.tests.test_config', 'ConfigTests', 'test_parse_2'], ['https://github.com/worstcase/blockade/tree/master/blockade/tests/test_config.py', 'blockade.tests.test_config', 'ConfigTests', 'test_parse_with_volumes_1'], ['https://github.com/worstcase/blockade/tree/master/blockade/tests/test_config.py', 'blockade.tests.test_config', 'ConfigTests', 'test_parse_with_name'], ['https://github.com/worstcase/blockade/tree/master/blockade/tests/test_config.py', 'blockade.tests.test_config', 'ConfigTests', 'test_parse_with_count_1'], ['https://github.com/worstcase/blockade/tree/master/blockade/tests/test_config.py', 'blockade.tests.test_config', 'ConfigTests', 'test_parse_with_publish_1'], ['https://github.com/worstcase/blockade/tree/master/blockade/tests/test_config.py', 'blockade.tests.test_config', 'ConfigTests', 'test_parse_with_start_delay_fail_nonnumeric'], ['https://github.com/worstcase/blockade/tree/master/blockade/tests/test_config.py', 'blockade.tests.test_config', 'ConfigTests', 'test_parse_with_multiple_cap_add'], ['https://github.com/worstcase/blockade/tree/master/blockade/tests/test_config.py', 'blockade.tests.test_config', 'ConfigTests', 'test_parse_with_start_delay_fail_negative'], ['https://github.com/worstcase/blockade/tree/master/blockade/tests/test_config.py', 'blockade.tests.test_config', 'ConfigTests', 'test_parse_with_start_delay_1'], ['https://github.com/worstcase/blockade/tree/master/blockade/tests/test_config.py', 'blockade.tests.test_config', 'ConfigTests', 'test_parse_with_volumes_4'], ['https://github.com/worstcase/blockade/tree/master/blockade/tests/test_config.py', 'blockade.tests.test_config', 'ConfigTests', 'test_parse_1']]"
blockade,https://github.com/worstcase/blockade/tree/master/blockade/config.py,ConfigTests,test_link_ordering_3,return [containers[name] for name in sorted_names],"tmp_ListComp0 = []
for name in sorted_names:
    tmp_ListComp0.append(containers[name])

return tmp_ListComp0
",1,"[['https://github.com/worstcase/blockade/tree/master/blockade/tests/test_config.py', 'blockade.tests.test_config', 'ConfigTests', 'test_link_ordering_4'], ['https://github.com/worstcase/blockade/tree/master/blockade/tests/test_config.py', 'blockade.tests.test_config', 'ConfigTests', 'test_link_ordering_2'], ['https://github.com/worstcase/blockade/tree/master/blockade/tests/test_config.py', 'blockade.tests.test_config', 'ConfigTests', 'test_link_ordering_1'], ['https://github.com/worstcase/blockade/tree/master/blockade/tests/test_config.py', 'blockade.tests.test_config', 'ConfigTests', 'test_link_ordering_unknown_2'], ['https://github.com/worstcase/blockade/tree/master/blockade/tests/test_config.py', 'blockade.tests.test_config', 'ConfigTests', 'test_link_ordering_circular_2'], ['https://github.com/worstcase/blockade/tree/master/blockade/tests/test_config.py', 'blockade.tests.test_config', 'ConfigTests', 'test_link_ordering_circular_1'], ['https://github.com/worstcase/blockade/tree/master/blockade/tests/test_config.py', 'blockade.tests.test_config', 'ConfigTests', 'test_link_ordering_unknown_1'], ['https://github.com/worstcase/blockade/tree/master/blockade/tests/test_config.py', 'blockade.tests.test_config', 'ConfigTests', 'test_link_ordering_3']]"
blockade,https://github.com/worstcase/blockade/tree/master/blockade/core.py,BlockadeCoreTests,test_expand_partitions,partitions = [frozenset(p) for p in partitions],"tmp_ListComp0 = []
for p in partitions:
    tmp_ListComp0.append(frozenset(p))

partitions = tmp_ListComp0
",1,"[['https://github.com/worstcase/blockade/tree/master/blockade/tests/test_core.py', 'blockade.tests.test_core', 'BlockadeCoreTests', 'test_expand_partitions']]"
python-versioneer,https://github.com/python-versioneer/python-versioneer/tree/master/src/git/from_vcs.py,ParseGitDescribe,test_pieces,branches = [branch[2:] for branch in branches],"tmp_ListComp0 = []
for branch in branches:
    tmp_ListComp0.append(branch[2:])

branches = tmp_ListComp0
",1,"[['https://github.com/python-versioneer/python-versioneer/tree/master/test/git/test_git.py', 'test.git.test_git', 'ParseGitDescribe', 'test_pieces']]"
bottle,https://github.com/bottlepy/bottle/tree/master//bottle.py,TestConfDict,test_gc_overlays,self._overlays[:] = [ref for ref in self._overlays if ref() is not None],"tmp_ListComp0 = []
for ref in self._overlays:
    if ref() is not None:
        tmp_ListComp0.append(ref)

self._overlays[:] = tmp_ListComp0
",1,"[['https://github.com/bottlepy/bottle/tree/master/test/test_config.py', 'test.test_config', 'TestConfDict', 'test_overlay'], ['https://github.com/bottlepy/bottle/tree/master/test/test_config.py', 'test.test_config', 'TestConfDict', 'test_gc_overlays']]"
bottle,https://github.com/bottlepy/bottle/tree/master//bottle.py,TestSendFile,test_range_parser,"ranges = [r.split('-', 1) for r in header[6:].split(',') if '-' in r]","
ranges = []
for r in header[6:].split(','):
    if '-' in r:
        ranges.append(r.split('-', 1))
",1,"[['https://github.com/bottlepy/bottle/tree/master/test/test_sendfile.py', 'test.test_sendfile', 'TestSendFile', 'test_range_parser']]"
pyexcel,https://github.com/pyexcel/pyexcel/tree/master/pyexcel/sheet.py,,test_named_sheet_access,"ret = [[value[0]] + value[1] for value in zip(self.rownames, ret)]","tmp_ListComp0 = []
for value in zip(self.rownames, ret):
    tmp_ListComp0.append([value[0]] + value[1])

ret = tmp_ListComp0
",1,"[['https://github.com/pyexcel/pyexcel/tree/master/tests/test_sheets.py', 'tests.test_sheets', 'TestSheetRegion', 'test_cut_and_paste_region'], ['https://github.com/pyexcel/pyexcel/tree/master/tests/test_sheet_attributes.py', 'tests.test_sheet_attributes', '', 'test_random_access'], ['https://github.com/pyexcel/pyexcel/tree/master/tests/test_sheet_attributes.py', 'tests.test_sheet_attributes', '', 'test_data_frame_access'], ['https://github.com/pyexcel/pyexcel/tree/master/tests/test_sheet_attributes.py', 'tests.test_sheet_attributes', '', 'test_named_sheet_access_to_unknown_area'], ['https://github.com/pyexcel/pyexcel/tree/master/tests/test_sheets.py', 'tests.test_sheets', 'TestSheetRegion', 'test_cut_region'], ['https://github.com/pyexcel/pyexcel/tree/master/tests/test_sheets.py', 'tests.test_sheets', 'TestSheetRegion', 'test_cut_and_paste_region_within_limits_at_edge'], ['https://github.com/pyexcel/pyexcel/tree/master/tests/test_sheet_attributes.py', 'tests.test_sheet_attributes', '', 'test_random_access_to_unknown_area'], ['https://github.com/pyexcel/pyexcel/tree/master/tests/test_sheet_attributes.py', 'tests.test_sheet_attributes', '', 'test_named_sheet_access']]"
pyexcel,https://github.com/pyexcel/pyexcel/tree/master/pyexcel/source.py,,test_source_class_method,"statuses = [_has_field(field, keywords) for field in cls.fields]","
statuses = []
for field in cls.fields:
    statuses.append(_has_field(field, keywords))
",1,"[['https://github.com/pyexcel/pyexcel/tree/master/tests/test_sources.py', 'tests.test_sources', '', 'test_source_class_method']]"
pyexcel,https://github.com/pyexcel/pyexcel/tree/master/pyexcel/source.py,,test_source_class_method,results = [status for status in statuses if status is False],"
results = []
for status in statuses:
    if status is False:
        results.append(status)
",1,"[['https://github.com/pyexcel/pyexcel/tree/master/tests/test_sources.py', 'tests.test_sources', '', 'test_source_class_method']]"
pyexcel,https://github.com/pyexcel/pyexcel/tree/master/pyexcel/internal/common.py,,test_get_book_headers_in_array,colnames_array = [next(sheet.payload) for sheet in book],"
colnames_array = []
for sheet in book:
    colnames_array.append(next(sheet.payload))
",1,"[['https://github.com/pyexcel/pyexcel/tree/master/tests/test_book_stream.py', 'tests.test_book_stream', '', 'test_get_book_headers_in_array']]"
pyexcel,https://github.com/pyexcel/pyexcel/tree/master/pyexcel/internal/common.py,,test_get_book_headers_in_array,colnames_array = [sheet.colnames for sheet in book],"
colnames_array = []
for sheet in book:
    colnames_array.append(sheet.colnames)
",1,"[['https://github.com/pyexcel/pyexcel/tree/master/tests/test_book_stream.py', 'tests.test_book_stream', '', 'test_get_book_headers_in_array']]"
pygorithm,https://github.com/OmkarPathak/pygorithm/tree/master/pygorithm/math/matrix_operations.py,TestMatrixOperations,test_matrix_addition,added_matrix = [[0 for i in range(len(self.matrix_one))] for j in range(len(self.matrix_two))],"
added_matrix = []
for j in range(len(self.matrix_two)):
    added_matrix1 = []
    for i in range(len(self.matrix_one)):
        added_matrix1.append(0)
    added_matrix.append(added_matrix1)
",1,"[['https://github.com/OmkarPathak/pygorithm/tree/master/tests/test_math.py', 'tests.test_math', 'TestMatrixOperations', 'test_matrix_addition']]"
pygorithm,https://github.com/OmkarPathak/pygorithm/tree/master/pygorithm/math/sieve_of_eratosthenes.py,TestSieveOfEratosthenes,test_sieve_of_eratosthenes,"primes = [element for element in range(2, n + 1) if primes[element]]","tmp_ListComp0 = []
for element in range(2, n + 1):
    if primes[element]:
        tmp_ListComp0.append(element)

primes = tmp_ListComp0
",1,"[['https://github.com/OmkarPathak/pygorithm/tree/master/tests/test_math.py', 'tests.test_math', 'TestSieveOfEratosthenes', 'test_sieve_of_eratosthenes']]"
pygorithm,https://github.com/OmkarPathak/pygorithm/tree/master/pygorithm/data_structures/graph.py,TestKruskal,test_minimum_spanning_tree,self._forest = [[v] for v in self.vertexes],"tmp_ListComp0 = []
for v in self.vertexes:
    tmp_ListComp0.append([v])

self._forest = tmp_ListComp0
",1,"[['https://github.com/OmkarPathak/pygorithm/tree/master/tests/test_data_structure.py', 'tests.test_data_structure', 'TestKruskal', 'test_minimum_spanning_tree_2'], ['https://github.com/OmkarPathak/pygorithm/tree/master/tests/test_data_structure.py', 'tests.test_data_structure', 'TestKruskal', 'test_minimum_spanning_tree']]"
pygorithm,https://github.com/OmkarPathak/pygorithm/tree/master/pygorithm/binary/base2.py,TestBase2,test_base2_to_base10,_list = [int(i) for i in str(n)],"
_list = []
for i in str(n):
    _list.append(int(i))
",1,"[['https://github.com/OmkarPathak/pygorithm/tree/master/tests/test_binary.py', 'tests.test_binary', 'TestBase2', 'test_base2_to_base10']]"
pygorithm,https://github.com/OmkarPathak/pygorithm/tree/master/pygorithm/binary/base10.py,TestBase10,test_base10_to_base2,return int(''.join([str(i) for i in _list[::-1]])),"tmp_ListComp0 = []
for i in _list[::-1]:
    tmp_ListComp0.append(str(i))

return int(''.join(tmp_ListComp0))
",1,"[['https://github.com/OmkarPathak/pygorithm/tree/master/tests/test_binary.py', 'tests.test_binary', 'TestBase10', 'test_base10_to_base2']]"
pygorithm,https://github.com/OmkarPathak/pygorithm/tree/master/pygorithm/dynamic_programming/min_cost_path.py,TestMinCostPath,test_min_cost_path,s = [[0 for i in range(l)] for j in range(l)],"
s = []
for j in range(l):
    s1 = []
    for i in range(l):
        s1.append(0)
    s.append(s1)
",1,"[['https://github.com/OmkarPathak/pygorithm/tree/master/tests/test_dynamic_programming.py', 'tests.test_dynamic_programming', 'TestMinCostPath', 'test_min_cost_path']]"
pygorithm,https://github.com/OmkarPathak/pygorithm/tree/master/pygorithm/dynamic_programming/binary_knapsack.py,TestBinaryKnapsack,test_binary_knapsack,knap_sack = [[0 for _ in range(w + 1)] for _ in range(n + 1)],"
knap_sack = []
for _ in range(n + 1):
    knap_sack1 = []
    for _ in range(w + 1):
        knap_sack1.append(0)
    knap_sack.append(knap_sack1)
",1,"[['https://github.com/OmkarPathak/pygorithm/tree/master/tests/test_dynamic_programming.py', 'tests.test_dynamic_programming', 'TestBinaryKnapsack', 'test_binary_knapsack']]"
stravalib,https://github.com/hozn/stravalib/tree/master/stravalib/attributes.py,ChoicesAttributeTest,test_marshal_data,orig = [i for i in self.choices if self.choices[i] == v],"
orig = []
for i in self.choices:
    if self.choices[i] == v:
        orig.append(i)
",1,"[['https://github.com/hozn/stravalib/tree/master/stravalib/tests/unit/test_attributes.py', 'stravalib.tests.unit.test_attributes', 'ChoicesAttributeTest', 'test_marshal_data']]"
stravalib,https://github.com/hozn/stravalib/tree/master/stravalib/util/limiter.py,LimiterTest,test_get_rates_from_response_headers_missing_rates,"usage_rates = [int(v) for v in headers['X-RateLimit-Usage'].split(',')]","
usage_rates = []
for v in headers['X-RateLimit-Usage'].split(','):
    usage_rates.append(int(v))
",1,"[['https://github.com/hozn/stravalib/tree/master/stravalib/tests/unit/test_limiter.py', 'stravalib.tests.unit.test_limiter', 'LimiterTest', 'test_get_rates_from_response_headers'], ['https://github.com/hozn/stravalib/tree/master/stravalib/tests/unit/test_limiter.py', 'stravalib.tests.unit.test_limiter', 'LimiterTest', 'test_get_rates_from_response_headers_missing_rates']]"
stravalib,https://github.com/hozn/stravalib/tree/master/stravalib/util/limiter.py,LimiterTest,test_get_rates_from_response_headers_missing_rates,"limit_rates = [int(v) for v in headers['X-RateLimit-Limit'].split(',')]","
limit_rates = []
for v in headers['X-RateLimit-Limit'].split(','):
    limit_rates.append(int(v))
",1,"[['https://github.com/hozn/stravalib/tree/master/stravalib/tests/unit/test_limiter.py', 'stravalib.tests.unit.test_limiter', 'LimiterTest', 'test_get_rates_from_response_headers'], ['https://github.com/hozn/stravalib/tree/master/stravalib/tests/unit/test_limiter.py', 'stravalib.tests.unit.test_limiter', 'LimiterTest', 'test_get_rates_from_response_headers_missing_rates']]"
jc,https://github.com/kellyjonbrazil/jc/tree/master/jc/parsers/w.py,MyTests,test_w_osx_10_14_6,headers = [h for h in ' '.join(header_text.strip().split()).split() if h],"
headers = []
for h in ' '.join(header_text.strip().split()).split():
    if h:
        headers.append(h)
",1,"[['https://github.com/kellyjonbrazil/jc/tree/master/tests/test_w.py', 'tests.test_w', 'MyTests', 'test_w_nixos'], ['https://github.com/kellyjonbrazil/jc/tree/master/tests/test_w.py', 'tests.test_w', 'MyTests', 'test_w_ubuntu_18_4'], ['https://github.com/kellyjonbrazil/jc/tree/master/tests/test_w.py', 'tests.test_w', 'MyTests', 'test_w_nodata'], ['https://github.com/kellyjonbrazil/jc/tree/master/tests/test_w.py', 'tests.test_w', 'MyTests', 'test_w_centos_7_7'], ['https://github.com/kellyjonbrazil/jc/tree/master/tests/test_w.py', 'tests.test_w', 'MyTests', 'test_w_osx_10_11_6'], ['https://github.com/kellyjonbrazil/jc/tree/master/tests/test_w.py', 'tests.test_w', 'MyTests', 'test_w_osx_10_14_6']]"
jc,https://github.com/kellyjonbrazil/jc/tree/master/jc/parsers/iptables.py,MyTests,test_iptables_filter_line_numbers_centos_7_7,headers = [h for h in ' '.join(line.lower().strip().split()).split() if h],"
headers = []
for h in ' '.join(line.lower().strip().split()).split():
    if h:
        headers.append(h)
",1,"[['https://github.com/kellyjonbrazil/jc/tree/master/tests/test_iptables.py', 'tests.test_iptables', 'MyTests', 'test_iptables_filter_ubuntu_18_4'], ['https://github.com/kellyjonbrazil/jc/tree/master/tests/test_iptables.py', 'tests.test_iptables', 'MyTests', 'test_iptables_filter_centos_7_7'], ['https://github.com/kellyjonbrazil/jc/tree/master/tests/test_iptables.py', 'tests.test_iptables', 'MyTests', 'test_iptables_nat_ubuntu_18_4'], ['https://github.com/kellyjonbrazil/jc/tree/master/tests/test_iptables.py', 'tests.test_iptables', 'MyTests', 'test_iptables_nodata'], ['https://github.com/kellyjonbrazil/jc/tree/master/tests/test_iptables.py', 'tests.test_iptables', 'MyTests', 'test_iptables_filter_line_numbers_ubuntu_18_4'], ['https://github.com/kellyjonbrazil/jc/tree/master/tests/test_iptables.py', 'tests.test_iptables', 'MyTests', 'test_iptables_filter_nv_ubuntu_18_4'], ['https://github.com/kellyjonbrazil/jc/tree/master/tests/test_iptables.py', 'tests.test_iptables', 'MyTests', 'test_iptables_raw_centos_7_7'], ['https://github.com/kellyjonbrazil/jc/tree/master/tests/test_iptables.py', 'tests.test_iptables', 'MyTests', 'test_iptables_filter_nv_centos_7_7'], ['https://github.com/kellyjonbrazil/jc/tree/master/tests/test_iptables.py', 'tests.test_iptables', 'MyTests', 'test_iptables_mangle_ubuntu_18_4'], ['https://github.com/kellyjonbrazil/jc/tree/master/tests/test_iptables.py', 'tests.test_iptables', 'MyTests', 'test_iptables_nat_centos_7_7'], ['https://github.com/kellyjonbrazil/jc/tree/master/tests/test_iptables.py', 'tests.test_iptables', 'MyTests', 'test_iptables_mangle_centos_7_7'], ['https://github.com/kellyjonbrazil/jc/tree/master/tests/test_iptables.py', 'tests.test_iptables', 'MyTests', 'test_iptables_raw_ubuntu_18_4'], ['https://github.com/kellyjonbrazil/jc/tree/master/tests/test_iptables.py', 'tests.test_iptables', 'MyTests', 'test_iptables_filter_line_numbers_centos_7_7']]"
jc,https://github.com/kellyjonbrazil/jc/tree/master/jc/parsers/systeminfo.py,MyTests,test_windows_systeminfo,lines = [line for line in data.splitlines(keepends=True) if line.strip() != ''],"
lines = []
for line in data.splitlines(keepends=True):
    if line.strip() != '':
        lines.append(line)
",1,"[['https://github.com/kellyjonbrazil/jc/tree/master/tests/test_systeminfo.py', 'tests.test_systeminfo', 'MyTests', 'test_windows_systeminfo']]"
CobaltStrikeParser,https://github.com/Sentinel-One/CobaltStrikeParser/tree/master//parse_beacon_config.py,TestBeaconParsing,test_non_pe_x86,data_sections = [s for s in pe.sections if s.Name.find(b'.data') != -1],"
data_sections = []
for s in pe.sections:
    if s.Name.find(b'.data') != -1:
        data_sections.append(s)
",1,"[['https://github.com/Sentinel-One/CobaltStrikeParser/tree/master//test_parse_beacon_config.py', 'test_parse_beacon_config', 'TestBeaconParsing', 'test_encrypted_x86_64'], ['https://github.com/Sentinel-One/CobaltStrikeParser/tree/master//test_parse_beacon_config.py', 'test_parse_beacon_config', 'TestBeaconParsing', 'test_encrypted_x86'], ['https://github.com/Sentinel-One/CobaltStrikeParser/tree/master//test_parse_beacon_config.py', 'test_parse_beacon_config', 'TestBeaconParsing', 'test_non_pe_x86']]"
LibCST,https://github.com/Instagram/LibCST/tree/master/libcst/helpers/module.py,ModuleTest,test_insert_header_comments,inserted_lines = [libcst.EmptyLine(comment=libcst.Comment(value=comment)) for comment in comments],"
inserted_lines = []
for comment in comments:
    inserted_lines.append(libcst.EmptyLine(comment=libcst.Comment(value=comment)))
",1,"[['https://github.com/Instagram/LibCST/tree/master/libcst/helpers/tests/test_module.py', 'libcst.helpers.tests.test_module', 'ModuleTest', 'test_insert_header_comments']]"
LibCST,https://github.com/Instagram/LibCST/tree/master/libcst/codemod/_cli.py,ToolE2ETest,test_leaky_codemod,"args = [{'transformer': transform, 'filename': filename, 'config': config} for filename in files]","
args = []
for filename in files:
    args.append({'transformer': transform, 'filename': filename, 'config': config})
",1,"[['https://github.com/Instagram/LibCST/tree/master/libcst/tests/test_e2e.py', 'libcst.tests.test_e2e', 'ToolE2ETest', 'test_leaky_codemod']]"
symspellpy,https://github.com/mammothb/symspellpy/tree/master/symspellpy/helpers.py,TestHelpers,test_case_transfer_matching,"return ''.join([y.upper() if x.isupper() else y.lower() for (x, y) in zip(cased_text, uncased_text)])","tmp_ListComp0 = []
for (x, y) in zip(cased_text, uncased_text):
    if x.isupper():
        tmp_ListComp0.append(y.upper())
    else:
        tmp_ListComp0.append(y.lower())

return ''.join(tmp_ListComp0)
",1,"[['https://github.com/mammothb/symspellpy/tree/master/tests/test_helpers.py', 'tests.test_helpers', 'TestHelpers', 'test_case_transfer_matching_diff_lengths'], ['https://github.com/mammothb/symspellpy/tree/master/tests/test_helpers.py', 'tests.test_helpers', 'TestHelpers', 'test_case_transfer_matching']]"
yt-dlp,https://github.com/yt-dlp/yt-dlp/tree/master/yt_dlp/utils.py,TestUtil,test_xpath_with_ns,components = [c.split(':') for c in path.split('/')],"
components = []
for c in path.split('/'):
    components.append(c.split(':'))
",1,"[['https://github.com/yt-dlp/yt-dlp/tree/master/test/test_utils.py', 'test.test_utils', 'TestUtil', 'test_xpath_with_ns']]"
pydicom,https://github.com/pydicom/pydicom/tree/master/pydicom/filereader.py,TestDataElement,test_empty_sequence_is_handled_as_array,specific_tags = [Tag(t) for t in specific_tags],"tmp_ListComp0 = []
for t in specific_tags:
    tmp_ListComp0.append(Tag(t))

specific_tags = tmp_ListComp0
",1,"[['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteToStandard', 'test_write_dataset_with_explicit_vr'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteFile', 'test_write_empty_sequence'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteNonStandard', 'test_ds_unchanged'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteToStandard', 'test_ds_changed'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteToStandard', 'test_commandset_no_written'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteFile', 'test_write_no_ts'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteToStandard', 'test_transfer_syntax_added'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestCorrectAmbiguousVR', 'test_ambiguous_element_in_sequence_explicit_using_index'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteToStandard', 'test_convert_implicit_to_explicit_vr_using_destination'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteToStandard', 'test_prefix'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteNonStandard', 'test_preamble_filemeta_dataset'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteNonStandard', 'test_preamble_commandset'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteNonStandard', 'test_read_write_identical'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestCorrectAmbiguousVR', 'test_ambiguous_element_in_sequence_implicit_using_index'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteNonStandard', 'test_preamble_default'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteFile', 'test_write_deflated_retains_elements'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteNonStandard', 'test_preamble_custom'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteToStandard', 'test_write_no_file_meta'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_dataelem.py', 'pydicom.tests.test_dataelem', 'TestDataElement', 'test_reading_ds_with_known_tags_with_UN_VR'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteNonStandard', 'test_preamble_commandset_filemeta'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestCorrectAmbiguousVR', 'test_ambiguous_element_in_sequence_explicit_using_attribute'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteNonStandard', 'test_commandset_filemeta'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_dataelem.py', 'pydicom.tests.test_dataelem', 'TestRawDataElement', 'test_read_known_private_tag_implicit'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteNonStandard', 'test_no_preamble'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteNonStandard', 'test_preamble_commandset_dataset'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_dataelem.py', 'pydicom.tests.test_dataelem', 'TestRawDataElement', 'test_read_known_private_tag_explicit'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteFileMetaInfoNonStandard', 'test_transfer_syntax_not_added'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteToStandard', 'test_preamble_default'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteNonStandard', 'test_preamble_commandset_filemeta_dataset'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestCorrectAmbiguousVR', 'test_ambiguous_element_in_sequence_implicit_using_attribute'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteNonStandard', 'test_dataset'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteToStandard', 'test_write_dataset'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteNonStandard', 'test_commandset'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteToStandard', 'test_transfer_syntax_not_added'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteToStandard', 'test_convert_rgb_from_implicit_to_explicit_vr'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteFile', 'test_pathlib_path_filename'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteToStandard', 'test_raw_elements_preserved_implicit_vr'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteToStandard', 'test_convert_big_to_little_endian'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteToStandard', 'test_private_tag_vr_from_implicit_data'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteToStandard', 'test_convert_explicit_to_implicit_vr'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteToStandard', 'test_no_preamble'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteToStandard', 'test_standard'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteToStandard', 'test_changed_character_set'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteToStandard', 'test_convert_little_to_big_endian'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_dataelem.py', 'pydicom.tests.test_dataelem', 'TestDataElement', 'test_empty_binary_values'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteFile', 'test_write_ffff_ffff'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteToStandard', 'test_transfer_syntax_raises'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteNonStandard', 'test_commandset_filemeta_dataset'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteToStandard', 'test_preamble_custom'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestScratchWriteDateTime', 'test_multivalue_DA'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteToStandard', 'test_bad_filename'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteFile', 'test_write_removes_grouplength'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteToStandard', 'test_prefix_none'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteNonStandard', 'test_preamble_dataset'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteUndefinedLengthPixelData', 'test_writing_to_gzip'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteToStandard', 'test_bad_preamble'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteToStandard', 'test_none_preamble'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteToStandard', 'test_convert_implicit_to_explicit_vr'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteNonStandard', 'test_commandset_dataset'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteNonStandard', 'test_file_meta_unchanged'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteNonStandard', 'test_filemeta_dataset'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteFile', 'test_write_deflated_deflates_post_file_meta'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_dataelem.py', 'pydicom.tests.test_dataelem', 'TestRawDataElement', 'test_read_known_private_tag_explicit_no_lookup'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteToStandard', 'test_raw_elements_preserved_explicit_vr'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteFile', 'test_write_double_filemeta'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteToStandard', 'test_raise_no_file_meta'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_dataelem.py', 'pydicom.tests.test_dataelem', 'TestDataElement', 'test_empty_sequence_is_handled_as_array']]"
pydicom,https://github.com/pydicom/pydicom/tree/master/pydicom/filewriter.py,TestWritePN,test_no_encoding,enc = b'\\'.join([elem.encode(encodings) for elem in val]),"tmp_ListComp0 = []
for elem in val:
    tmp_ListComp0.append(elem.encode(encodings))

enc = b'\\'.join(tmp_ListComp0)
",1,"[['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWritePN', 'test_single_byte_multi_charset_groups'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWritePN', 'test_single_byte_multi_charset_values'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWritePN', 'test_no_encoding']]"
pydicom,https://github.com/pydicom/pydicom/tree/master/pydicom/values.py,TestWriteText,test_single_value_with_delimiters,"as_strings = [convert_single_string(value, encodings) for value in values]","
as_strings = []
for value in values:
    as_strings.append(convert_single_string(value, encodings))
",1,"[['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteText', 'test_encode_mixed_charsets_text'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteText', 'test_single_byte_multi_charset_text'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteText', 'test_single_byte_multi_charset_text_multivalue'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteText', 'test_single_value_with_delimiters']]"
pydicom,https://github.com/pydicom/pydicom/tree/master/pydicom/data/data_manager.py,TestWriteFile,test_write_empty_sequence,matches = [m for m in data_path.rglob(name)],"
matches = []
for m in data_path.rglob(name):
    matches.append(m)
",1,"[['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_dataelem.py', 'pydicom.tests.test_dataelem', 'TestDataElement', 'test_reading_ds_with_known_tags_with_UN_VR'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_filewriter.py', 'pydicom.tests.test_filewriter', 'TestWriteFile', 'test_write_empty_sequence']]"
schematics,https://github.com/schematics/schematics/tree/master/schematics/exceptions.py,,test_autopopulate_message_on_none,return [cls._to_primitive(e) for e in obj],"tmp_ListComp0 = []
for e in obj:
    tmp_ListComp0.append(cls._to_primitive(e))

return tmp_ListComp0
",1,"[['https://github.com/schematics/schematics/tree/master/tests/test_exceptions.py', 'tests.test_exceptions', '', 'test_autopopulate_message_on_none']]"
pyperf,https://github.com/psf/pyperf/tree/master/pyperf/_bench.py,BenchmarkTests,test_get_total_duration,durations = [run._get_duration() for run in self._runs],"
durations = []
for run in self._runs:
    durations.append(run._get_duration())
",1,"[['https://github.com/psf/pyperf/tree/master/pyperf/tests/test_bench.py', 'pyperf.tests.test_bench', 'BenchmarkTests', 'test_get_total_duration']]"
pyperf,https://github.com/psf/pyperf/tree/master/pyperf/_bench.py,TestBenchmarkSuite,test_get_metadata,benchs_metadata = [bench._get_common_metadata() for bench in self._benchmarks],"
benchs_metadata = []
for bench in self._benchmarks:
    benchs_metadata.append(bench._get_common_metadata())
",1,"[['https://github.com/psf/pyperf/tree/master/pyperf/tests/test_bench.py', 'pyperf.tests.test_bench', 'TestBenchmarkSuite', 'test_get_metadata']]"
pyperf,https://github.com/psf/pyperf/tree/master/pyperf/_utils.py,MiscTests,test_parse_run_list,return [run - 1 for run in runs],"tmp_ListComp0 = []
for run in runs:
    tmp_ListComp0.append(run - 1)

return tmp_ListComp0
",1,"[['https://github.com/psf/pyperf/tree/master/pyperf/tests/test_misc.py', 'pyperf.tests.test_misc', 'MiscTests', 'test_parse_run_list']]"
papermill,https://github.com/nteract/papermill/tree/master/papermill/utils.py,,test_tagged_cell,return any([tag in cell.metadata.tags for cell in nb.cells]),"tmp_ListComp0 = []
for cell in nb.cells:
    tmp_ListComp0.append(tag in cell.metadata.tags)

return any(tmp_ListComp0)
",1,"[['https://github.com/nteract/papermill/tree/master/papermill/tests/test_utils.py', 'papermill.tests.test_utils', '', 'test_no_tagged_cell'], ['https://github.com/nteract/papermill/tree/master/papermill/tests/test_utils.py', 'papermill.tests.test_utils', '', 'test_tagged_cell']]"
papermill,https://github.com/nteract/papermill/tree/master/papermill/utils.py,,test_merge_kwargs,"args = format('; '.join(['{}={}'.format(key, value) for (key, value) in callee_args.items()]))","tmp_ListComp0 = []
for (key, value) in callee_args.items():
    tmp_ListComp0.append('{}={}'.format(key, value))

args = format('; '.join(tmp_ListComp0))
",1,"[['https://github.com/nteract/papermill/tree/master/papermill/tests/test_utils.py', 'papermill.tests.test_utils', '', 'test_merge_kwargs']]"
qfc,https://github.com/pindexis/qfc/tree/master/qfc/core.py,,test_weight,"elm_words = [_f for _f in re.split('[\\W_]+', elm) if _f]","
elm_words = []
for _f in re.split('[\\W_]+', elm):
    if _f:
        elm_words.append(_f)
",1,"[['https://github.com/pindexis/qfc/tree/master/tests/test_match.py', 'tests.test_match', '', 'test_weight']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_AnalyzedDocument,test_analyzed_document_serialization,args['notices'] = [Notice.from_dict(x) for x in _dict.get('notices')],"
args['notices'] = []
for x in _dict.get('notices'):
    args['notices'].append(Notice.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_AnalyzedDocument', 'test_analyzed_document_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_CollectionDetails,test_collection_details_serialization,args['enrichments'] = [CollectionEnrichment.from_dict(x) for x in _dict.get('enrichments')],"
args['enrichments'] = []
for x in _dict.get('enrichments'):
    args['enrichments'].append(CollectionEnrichment.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_CollectionDetails', 'test_collection_details_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_ComponentSettingsResponse,test_component_settings_response_serialization,args['aggregations'] = [ComponentSettingsAggregation.from_dict(x) for x in _dict.get('aggregations')],"
args['aggregations'] = []
for x in _dict.get('aggregations'):
    args['aggregations'].append(ComponentSettingsAggregation.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_ComponentSettingsResponse', 'test_component_settings_response_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_Enrichments,test_enrichments_serialization,args['enrichments'] = [Enrichment.from_dict(x) for x in _dict.get('enrichments')],"
args['enrichments'] = []
for x in _dict.get('enrichments'):
    args['enrichments'].append(Enrichment.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_Enrichments', 'test_enrichments_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_ListCollectionsResponse,test_list_collections_response_serialization,args['collections'] = [Collection.from_dict(x) for x in _dict.get('collections')],"
args['collections'] = []
for x in _dict.get('collections'):
    args['collections'].append(Collection.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_ListCollectionsResponse', 'test_list_collections_response_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_ListCollectionsResponse', 'test_list_collections_response_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_ListFieldsResponse,test_list_fields_response_serialization,args['fields'] = [Field.from_dict(x) for x in _dict.get('fields')],"
args['fields'] = []
for x in _dict.get('fields'):
    args['fields'].append(Field.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_ListFieldsResponse', 'test_list_fields_response_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_ListProjectsResponse,test_list_projects_response_serialization,args['projects'] = [ProjectListDetails.from_dict(x) for x in _dict.get('projects')],"
args['projects'] = []
for x in _dict.get('projects'):
    args['projects'].append(ProjectListDetails.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_ListProjectsResponse', 'test_list_projects_response_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_QueryGroupByAggregationResult,test_query_group_by_aggregation_result_serialization,args['aggregations'] = [QueryAggregation.from_dict(x) for x in _dict.get('aggregations')],"
args['aggregations'] = []
for x in _dict.get('aggregations'):
    args['aggregations'].append(QueryAggregation.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_QueryGroupByAggregationResult', 'test_query_group_by_aggregation_result_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_QueryHistogramAggregationResult,test_query_histogram_aggregation_result_serialization,args['aggregations'] = [QueryAggregation.from_dict(x) for x in _dict.get('aggregations')],"
args['aggregations'] = []
for x in _dict.get('aggregations'):
    args['aggregations'].append(QueryAggregation.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_QueryHistogramAggregationResult', 'test_query_histogram_aggregation_result_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_QueryNoticesResponse,test_query_notices_response_serialization,args['notices'] = [Notice.from_dict(x) for x in _dict.get('notices')],"
args['notices'] = []
for x in _dict.get('notices'):
    args['notices'].append(Notice.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_QueryNoticesResponse', 'test_query_notices_response_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_QueryNoticesResponse', 'test_query_notices_response_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_QueryResponse,test_query_response_serialization,args['results'] = [QueryResult.from_dict(x) for x in _dict.get('results')],"
args['results'] = []
for x in _dict.get('results'):
    args['results'].append(QueryResult.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_QueryResponse', 'test_query_response_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_QueryResponse', 'test_query_response_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_QueryResponse,test_query_response_serialization,args['aggregations'] = [QueryAggregation.from_dict(x) for x in _dict.get('aggregations')],"
args['aggregations'] = []
for x in _dict.get('aggregations'):
    args['aggregations'].append(QueryAggregation.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_QueryResponse', 'test_query_response_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_QueryResponse', 'test_query_response_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_QueryResponse,test_query_response_serialization,args['suggested_refinements'] = [QuerySuggestedRefinement.from_dict(x) for x in _dict.get('suggested_refinements')],"
args['suggested_refinements'] = []
for x in _dict.get('suggested_refinements'):
    args['suggested_refinements'].append(QuerySuggestedRefinement.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_QueryResponse', 'test_query_response_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_QueryResponse', 'test_query_response_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_QueryResponse,test_query_response_serialization,args['table_results'] = [QueryTableResult.from_dict(x) for x in _dict.get('table_results')],"
args['table_results'] = []
for x in _dict.get('table_results'):
    args['table_results'].append(QueryTableResult.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_QueryResponse', 'test_query_response_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_QueryResponse', 'test_query_response_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_QueryResponse,test_query_response_serialization,args['passages'] = [QueryResponsePassage.from_dict(x) for x in _dict.get('passages')],"
args['passages'] = []
for x in _dict.get('passages'):
    args['passages'].append(QueryResponsePassage.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_QueryResponse', 'test_query_response_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_QueryResponse', 'test_query_response_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_QueryResponsePassage,test_query_response_passage_serialization,args['answers'] = [ResultPassageAnswer.from_dict(x) for x in _dict.get('answers')],"
args['answers'] = []
for x in _dict.get('answers'):
    args['answers'].append(ResultPassageAnswer.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_QueryResponsePassage', 'test_query_response_passage_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_QueryResult,test_query_result_serialization,args['document_passages'] = [QueryResultPassage.from_dict(x) for x in _dict.get('document_passages')],"
args['document_passages'] = []
for x in _dict.get('document_passages'):
    args['document_passages'].append(QueryResultPassage.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_QueryResult', 'test_query_result_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_QueryResult', 'test_query_result_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_QueryResultPassage,test_query_result_passage_serialization,args['answers'] = [ResultPassageAnswer.from_dict(x) for x in _dict.get('answers')],"
args['answers'] = []
for x in _dict.get('answers'):
    args['answers'].append(ResultPassageAnswer.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_QueryResultPassage', 'test_query_result_passage_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_QueryTermAggregationResult,test_query_term_aggregation_result_serialization,args['aggregations'] = [QueryAggregation.from_dict(x) for x in _dict.get('aggregations')],"
args['aggregations'] = []
for x in _dict.get('aggregations'):
    args['aggregations'].append(QueryAggregation.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_QueryTermAggregationResult', 'test_query_term_aggregation_result_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_QueryTimesliceAggregationResult,test_query_timeslice_aggregation_result_serialization,args['aggregations'] = [QueryAggregation.from_dict(x) for x in _dict.get('aggregations')],"
args['aggregations'] = []
for x in _dict.get('aggregations'):
    args['aggregations'].append(QueryAggregation.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_QueryTimesliceAggregationResult', 'test_query_timeslice_aggregation_result_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_TableBodyCells,test_table_body_cells_serialization,args['row_header_ids'] = [TableRowHeaderIds.from_dict(x) for x in _dict.get('row_header_ids')],"
args['row_header_ids'] = []
for x in _dict.get('row_header_ids'):
    args['row_header_ids'].append(TableRowHeaderIds.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_TableBodyCells', 'test_table_body_cells_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_TableBodyCells,test_table_body_cells_serialization,args['row_header_texts'] = [TableRowHeaderTexts.from_dict(x) for x in _dict.get('row_header_texts')],"
args['row_header_texts'] = []
for x in _dict.get('row_header_texts'):
    args['row_header_texts'].append(TableRowHeaderTexts.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_TableBodyCells', 'test_table_body_cells_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_TableBodyCells,test_table_body_cells_serialization,args['row_header_texts_normalized'] = [TableRowHeaderTextsNormalized.from_dict(x) for x in _dict.get('row_header_texts_normalized')],"
args['row_header_texts_normalized'] = []
for x in _dict.get('row_header_texts_normalized'):
    args['row_header_texts_normalized'].append(TableRowHeaderTextsNormalized.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_TableBodyCells', 'test_table_body_cells_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_TableBodyCells,test_table_body_cells_serialization,args['column_header_ids'] = [TableColumnHeaderIds.from_dict(x) for x in _dict.get('column_header_ids')],"
args['column_header_ids'] = []
for x in _dict.get('column_header_ids'):
    args['column_header_ids'].append(TableColumnHeaderIds.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_TableBodyCells', 'test_table_body_cells_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_TableBodyCells,test_table_body_cells_serialization,args['column_header_texts'] = [TableColumnHeaderTexts.from_dict(x) for x in _dict.get('column_header_texts')],"
args['column_header_texts'] = []
for x in _dict.get('column_header_texts'):
    args['column_header_texts'].append(TableColumnHeaderTexts.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_TableBodyCells', 'test_table_body_cells_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_TableBodyCells,test_table_body_cells_serialization,args['column_header_texts_normalized'] = [TableColumnHeaderTextsNormalized.from_dict(x) for x in _dict.get('column_header_texts_normalized')],"
args['column_header_texts_normalized'] = []
for x in _dict.get('column_header_texts_normalized'):
    args['column_header_texts_normalized'].append(TableColumnHeaderTextsNormalized.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_TableBodyCells', 'test_table_body_cells_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_TableBodyCells,test_table_body_cells_serialization,args['attributes'] = [DocumentAttribute.from_dict(x) for x in _dict.get('attributes')],"
args['attributes'] = []
for x in _dict.get('attributes'):
    args['attributes'].append(DocumentAttribute.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_TableBodyCells', 'test_table_body_cells_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_TableKeyValuePairs,test_table_key_value_pairs_serialization,args['value'] = [TableCellValues.from_dict(x) for x in _dict.get('value')],"
args['value'] = []
for x in _dict.get('value'):
    args['value'].append(TableCellValues.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_TableKeyValuePairs', 'test_table_key_value_pairs_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_TableResultTable,test_table_result_table_serialization,args['table_headers'] = [TableHeaders.from_dict(x) for x in _dict.get('table_headers')],"
args['table_headers'] = []
for x in _dict.get('table_headers'):
    args['table_headers'].append(TableHeaders.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_TableResultTable', 'test_table_result_table_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_TableResultTable,test_table_result_table_serialization,args['row_headers'] = [TableRowHeaders.from_dict(x) for x in _dict.get('row_headers')],"
args['row_headers'] = []
for x in _dict.get('row_headers'):
    args['row_headers'].append(TableRowHeaders.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_TableResultTable', 'test_table_result_table_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_TableResultTable,test_table_result_table_serialization,args['column_headers'] = [TableColumnHeaders.from_dict(x) for x in _dict.get('column_headers')],"
args['column_headers'] = []
for x in _dict.get('column_headers'):
    args['column_headers'].append(TableColumnHeaders.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_TableResultTable', 'test_table_result_table_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_TableResultTable,test_table_result_table_serialization,args['key_value_pairs'] = [TableKeyValuePairs.from_dict(x) for x in _dict.get('key_value_pairs')],"
args['key_value_pairs'] = []
for x in _dict.get('key_value_pairs'):
    args['key_value_pairs'].append(TableKeyValuePairs.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_TableResultTable', 'test_table_result_table_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_TableResultTable,test_table_result_table_serialization,args['body_cells'] = [TableBodyCells.from_dict(x) for x in _dict.get('body_cells')],"
args['body_cells'] = []
for x in _dict.get('body_cells'):
    args['body_cells'].append(TableBodyCells.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_TableResultTable', 'test_table_result_table_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_TableResultTable,test_table_result_table_serialization,args['contexts'] = [TableTextLocation.from_dict(x) for x in _dict.get('contexts')],"
args['contexts'] = []
for x in _dict.get('contexts'):
    args['contexts'].append(TableTextLocation.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_TableResultTable', 'test_table_result_table_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_TrainingQuery,test_training_query_serialization,args['examples'] = [TrainingExample.from_dict(x) for x in _dict.get('examples')],"
args['examples'] = []
for x in _dict.get('examples'):
    args['examples'].append(TrainingExample.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_TrainingQuery', 'test_training_query_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_TrainingQuery', 'test_training_query_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_TrainingQuerySet,test_training_query_set_serialization,args['queries'] = [TrainingQuery.from_dict(x) for x in _dict.get('queries')],"
args['queries'] = []
for x in _dict.get('queries'):
    args['queries'].append(TrainingQuery.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_TrainingQuerySet', 'test_training_query_set_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_QueryFilterAggregation,test_query_filter_aggregation_serialization,args['aggregations'] = [QueryAggregation.from_dict(x) for x in _dict.get('aggregations')],"
args['aggregations'] = []
for x in _dict.get('aggregations'):
    args['aggregations'].append(QueryAggregation.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_QueryFilterAggregation', 'test_query_filter_aggregation_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_QueryGroupByAggregation,test_query_group_by_aggregation_serialization,args['results'] = [QueryGroupByAggregationResult.from_dict(x) for x in _dict.get('results')],"
args['results'] = []
for x in _dict.get('results'):
    args['results'].append(QueryGroupByAggregationResult.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_QueryGroupByAggregation', 'test_query_group_by_aggregation_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_QueryHistogramAggregation,test_query_histogram_aggregation_serialization,args['results'] = [QueryHistogramAggregationResult.from_dict(x) for x in _dict.get('results')],"
args['results'] = []
for x in _dict.get('results'):
    args['results'].append(QueryHistogramAggregationResult.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_QueryHistogramAggregation', 'test_query_histogram_aggregation_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_QueryNestedAggregation,test_query_nested_aggregation_serialization,args['aggregations'] = [QueryAggregation.from_dict(x) for x in _dict.get('aggregations')],"
args['aggregations'] = []
for x in _dict.get('aggregations'):
    args['aggregations'].append(QueryAggregation.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_QueryNestedAggregation', 'test_query_nested_aggregation_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_QueryTermAggregation,test_query_term_aggregation_serialization,args['results'] = [QueryTermAggregationResult.from_dict(x) for x in _dict.get('results')],"
args['results'] = []
for x in _dict.get('results'):
    args['results'].append(QueryTermAggregationResult.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_QueryTermAggregation', 'test_query_term_aggregation_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v2.py,TestModel_QueryTimesliceAggregation,test_query_timeslice_aggregation_serialization,args['results'] = [QueryTimesliceAggregationResult.from_dict(x) for x in _dict.get('results')],"
args['results'] = []
for x in _dict.get('results'):
    args['results'].append(QueryTimesliceAggregationResult.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_QueryTimesliceAggregation', 'test_query_timeslice_aggregation_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_BulkClassifyOutput,test_bulk_classify_output_serialization,args['entities'] = [RuntimeEntity.from_dict(x) for x in _dict.get('entities')],"
args['entities'] = []
for x in _dict.get('entities'):
    args['entities'].append(RuntimeEntity.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_BulkClassifyOutput', 'test_bulk_classify_output_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_BulkClassifyOutput', 'test_bulk_classify_output_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_BulkClassifyOutput,test_bulk_classify_output_serialization,args['intents'] = [RuntimeIntent.from_dict(x) for x in _dict.get('intents')],"
args['intents'] = []
for x in _dict.get('intents'):
    args['intents'].append(RuntimeIntent.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_BulkClassifyOutput', 'test_bulk_classify_output_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_BulkClassifyOutput', 'test_bulk_classify_output_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_BulkClassifyResponse,test_bulk_classify_response_serialization,args['output'] = [BulkClassifyOutput.from_dict(x) for x in _dict.get('output')],"
args['output'] = []
for x in _dict.get('output'):
    args['output'].append(BulkClassifyOutput.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_BulkClassifyResponse', 'test_bulk_classify_response_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_BulkClassifyResponse', 'test_bulk_classify_response_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_CounterexampleCollection,test_counterexample_collection_serialization,args['counterexamples'] = [Counterexample.from_dict(x) for x in _dict.get('counterexamples')],"
args['counterexamples'] = []
for x in _dict.get('counterexamples'):
    args['counterexamples'].append(Counterexample.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_CounterexampleCollection', 'test_counterexample_collection_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_CreateEntity,test_create_entity_serialization,args['values'] = [CreateValue.from_dict(x) for x in _dict.get('values')],"
args['values'] = []
for x in _dict.get('values'):
    args['values'].append(CreateValue.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_CreateEntity', 'test_create_entity_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_CreateIntent,test_create_intent_serialization,args['examples'] = [Example.from_dict(x) for x in _dict.get('examples')],"
args['examples'] = []
for x in _dict.get('examples'):
    args['examples'].append(Example.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_CreateIntent', 'test_create_intent_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_DialogNode,test_dialog_node_serialization,args['actions'] = [DialogNodeAction.from_dict(x) for x in _dict.get('actions')],"
args['actions'] = []
for x in _dict.get('actions'):
    args['actions'].append(DialogNodeAction.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_DialogNode', 'test_dialog_node_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_DialogNodeCollection,test_dialog_node_collection_serialization,args['dialog_nodes'] = [DialogNode.from_dict(x) for x in _dict.get('dialog_nodes')],"
args['dialog_nodes'] = []
for x in _dict.get('dialog_nodes'):
    args['dialog_nodes'].append(DialogNode.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_DialogNodeCollection', 'test_dialog_node_collection_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_DialogNodeOutput,test_dialog_node_output_serialization,args['generic'] = [DialogNodeOutputGeneric.from_dict(x) for x in _dict.get('generic')],"
args['generic'] = []
for x in _dict.get('generic'):
    args['generic'].append(DialogNodeOutputGeneric.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_DialogNodeOutput', 'test_dialog_node_output_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_DialogNodeOutputOptionsElementValue,test_dialog_node_output_options_element_value_serialization,args['intents'] = [RuntimeIntent.from_dict(x) for x in _dict.get('intents')],"
args['intents'] = []
for x in _dict.get('intents'):
    args['intents'].append(RuntimeIntent.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_DialogNodeOutputOptionsElementValue', 'test_dialog_node_output_options_element_value_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_DialogNodeOutputOptionsElementValue', 'test_dialog_node_output_options_element_value_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_DialogNodeOutputOptionsElementValue,test_dialog_node_output_options_element_value_serialization,args['entities'] = [RuntimeEntity.from_dict(x) for x in _dict.get('entities')],"
args['entities'] = []
for x in _dict.get('entities'):
    args['entities'].append(RuntimeEntity.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_DialogNodeOutputOptionsElementValue', 'test_dialog_node_output_options_element_value_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_DialogNodeOutputOptionsElementValue', 'test_dialog_node_output_options_element_value_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_DialogSuggestionValue,test_dialog_suggestion_value_serialization,args['intents'] = [RuntimeIntent.from_dict(x) for x in _dict.get('intents')],"
args['intents'] = []
for x in _dict.get('intents'):
    args['intents'].append(RuntimeIntent.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_DialogSuggestionValue', 'test_dialog_suggestion_value_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_DialogSuggestionValue', 'test_dialog_suggestion_value_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_DialogSuggestionValue,test_dialog_suggestion_value_serialization,args['entities'] = [RuntimeEntity.from_dict(x) for x in _dict.get('entities')],"
args['entities'] = []
for x in _dict.get('entities'):
    args['entities'].append(RuntimeEntity.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_DialogSuggestionValue', 'test_dialog_suggestion_value_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_DialogSuggestionValue', 'test_dialog_suggestion_value_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_Entity,test_entity_serialization,args['values'] = [Value.from_dict(x) for x in _dict.get('values')],"
args['values'] = []
for x in _dict.get('values'):
    args['values'].append(Value.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_Entity', 'test_entity_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_EntityCollection,test_entity_collection_serialization,args['entities'] = [Entity.from_dict(x) for x in _dict.get('entities')],"
args['entities'] = []
for x in _dict.get('entities'):
    args['entities'].append(Entity.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_EntityCollection', 'test_entity_collection_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_EntityMentionCollection,test_entity_mention_collection_serialization,args['examples'] = [EntityMention.from_dict(x) for x in _dict.get('examples')],"
args['examples'] = []
for x in _dict.get('examples'):
    args['examples'].append(EntityMention.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_EntityMentionCollection', 'test_entity_mention_collection_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_Example,test_example_serialization,args['mentions'] = [Mention.from_dict(x) for x in _dict.get('mentions')],"
args['mentions'] = []
for x in _dict.get('mentions'):
    args['mentions'].append(Mention.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_Example', 'test_example_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_ExampleCollection,test_example_collection_serialization,args['examples'] = [Example.from_dict(x) for x in _dict.get('examples')],"
args['examples'] = []
for x in _dict.get('examples'):
    args['examples'].append(Example.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_ExampleCollection', 'test_example_collection_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_Intent,test_intent_serialization,args['examples'] = [Example.from_dict(x) for x in _dict.get('examples')],"
args['examples'] = []
for x in _dict.get('examples'):
    args['examples'].append(Example.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_Intent', 'test_intent_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_IntentCollection,test_intent_collection_serialization,args['intents'] = [Intent.from_dict(x) for x in _dict.get('intents')],"
args['intents'] = []
for x in _dict.get('intents'):
    args['intents'].append(Intent.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_IntentCollection', 'test_intent_collection_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_LogCollection,test_log_collection_serialization,args['logs'] = [Log.from_dict(x) for x in _dict.get('logs')],"
args['logs'] = []
for x in _dict.get('logs'):
    args['logs'].append(Log.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_LogCollection', 'test_log_collection_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_LogCollection', 'test_log_collection_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_MessageRequest,test_message_request_serialization,args['intents'] = [RuntimeIntent.from_dict(x) for x in _dict.get('intents')],"
args['intents'] = []
for x in _dict.get('intents'):
    args['intents'].append(RuntimeIntent.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_MessageRequest', 'test_message_request_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_MessageRequest', 'test_message_request_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_MessageRequest,test_message_request_serialization,args['entities'] = [RuntimeEntity.from_dict(x) for x in _dict.get('entities')],"
args['entities'] = []
for x in _dict.get('entities'):
    args['entities'].append(RuntimeEntity.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_MessageRequest', 'test_message_request_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_MessageRequest', 'test_message_request_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_MessageRequest,test_message_request_serialization,args['actions'] = [DialogNodeAction.from_dict(x) for x in _dict.get('actions')],"
args['actions'] = []
for x in _dict.get('actions'):
    args['actions'].append(DialogNodeAction.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_MessageRequest', 'test_message_request_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_MessageRequest', 'test_message_request_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_MessageResponse,test_message_response_serialization,args['intents'] = [RuntimeIntent.from_dict(x) for x in _dict.get('intents')],"
args['intents'] = []
for x in _dict.get('intents'):
    args['intents'].append(RuntimeIntent.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_MessageResponse', 'test_message_response_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_MessageResponse', 'test_message_response_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_MessageResponse,test_message_response_serialization,args['entities'] = [RuntimeEntity.from_dict(x) for x in _dict.get('entities')],"
args['entities'] = []
for x in _dict.get('entities'):
    args['entities'].append(RuntimeEntity.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_MessageResponse', 'test_message_response_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_MessageResponse', 'test_message_response_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_MessageResponse,test_message_response_serialization,args['actions'] = [DialogNodeAction.from_dict(x) for x in _dict.get('actions')],"
args['actions'] = []
for x in _dict.get('actions'):
    args['actions'].append(DialogNodeAction.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_MessageResponse', 'test_message_response_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_MessageResponse', 'test_message_response_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_OutputData,test_output_data_serialization,args['nodes_visited_details'] = [DialogNodeVisitedDetails.from_dict(x) for x in _dict.get('nodes_visited_details')],"
args['nodes_visited_details'] = []
for x in _dict.get('nodes_visited_details'):
    args['nodes_visited_details'].append(DialogNodeVisitedDetails.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_OutputData', 'test_output_data_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_OutputData,test_output_data_serialization,args['log_messages'] = [LogMessage.from_dict(x) for x in _dict.get('log_messages')],"
args['log_messages'] = []
for x in _dict.get('log_messages'):
    args['log_messages'].append(LogMessage.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_OutputData', 'test_output_data_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_OutputData,test_output_data_serialization,args['generic'] = [RuntimeResponseGeneric.from_dict(x) for x in _dict.get('generic')],"
args['generic'] = []
for x in _dict.get('generic'):
    args['generic'].append(RuntimeResponseGeneric.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_OutputData', 'test_output_data_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_RuntimeEntity,test_runtime_entity_serialization,args['groups'] = [CaptureGroup.from_dict(x) for x in _dict.get('groups')],"
args['groups'] = []
for x in _dict.get('groups'):
    args['groups'].append(CaptureGroup.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_RuntimeEntity', 'test_runtime_entity_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_RuntimeEntity', 'test_runtime_entity_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_RuntimeEntity,test_runtime_entity_serialization,args['alternatives'] = [RuntimeEntityAlternative.from_dict(x) for x in _dict.get('alternatives')],"
args['alternatives'] = []
for x in _dict.get('alternatives'):
    args['alternatives'].append(RuntimeEntityAlternative.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_RuntimeEntity', 'test_runtime_entity_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_RuntimeEntity', 'test_runtime_entity_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_SynonymCollection,test_synonym_collection_serialization,args['synonyms'] = [Synonym.from_dict(x) for x in _dict.get('synonyms')],"
args['synonyms'] = []
for x in _dict.get('synonyms'):
    args['synonyms'].append(Synonym.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_SynonymCollection', 'test_synonym_collection_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_ValueCollection,test_value_collection_serialization,args['values'] = [Value.from_dict(x) for x in _dict.get('values')],"
args['values'] = []
for x in _dict.get('values'):
    args['values'].append(Value.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_ValueCollection', 'test_value_collection_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_Webhook,test_webhook_serialization,args['headers_'] = [WebhookHeader.from_dict(x) for x in _dict.get('headers')],"
args['headers_'] = []
for x in _dict.get('headers'):
    args['headers_'].append(WebhookHeader.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_Webhook', 'test_webhook_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_Workspace,test_workspace_serialization,args['dialog_nodes'] = [DialogNode.from_dict(x) for x in _dict.get('dialog_nodes')],"
args['dialog_nodes'] = []
for x in _dict.get('dialog_nodes'):
    args['dialog_nodes'].append(DialogNode.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_Workspace', 'test_workspace_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_Workspace,test_workspace_serialization,args['counterexamples'] = [Counterexample.from_dict(x) for x in _dict.get('counterexamples')],"
args['counterexamples'] = []
for x in _dict.get('counterexamples'):
    args['counterexamples'].append(Counterexample.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_Workspace', 'test_workspace_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_Workspace,test_workspace_serialization,args['webhooks'] = [Webhook.from_dict(x) for x in _dict.get('webhooks')],"
args['webhooks'] = []
for x in _dict.get('webhooks'):
    args['webhooks'].append(Webhook.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_Workspace', 'test_workspace_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_Workspace,test_workspace_serialization,args['intents'] = [Intent.from_dict(x) for x in _dict.get('intents')],"
args['intents'] = []
for x in _dict.get('intents'):
    args['intents'].append(Intent.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_Workspace', 'test_workspace_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_Workspace,test_workspace_serialization,args['entities'] = [Entity.from_dict(x) for x in _dict.get('entities')],"
args['entities'] = []
for x in _dict.get('entities'):
    args['entities'].append(Entity.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_Workspace', 'test_workspace_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_WorkspaceCollection,test_workspace_collection_serialization,args['workspaces'] = [Workspace.from_dict(x) for x in _dict.get('workspaces')],"
args['workspaces'] = []
for x in _dict.get('workspaces'):
    args['workspaces'].append(Workspace.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_WorkspaceCollection', 'test_workspace_collection_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_DialogNodeOutputGenericDialogNodeOutputResponseTypeChannelTransfer,test_dialog_node_output_generic_dialog_node_output_response_type_channel_transfer_serialization,args['channels'] = [ResponseGenericChannel.from_dict(x) for x in _dict.get('channels')],"
args['channels'] = []
for x in _dict.get('channels'):
    args['channels'].append(ResponseGenericChannel.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_DialogNodeOutputGenericDialogNodeOutputResponseTypeChannelTransfer', 'test_dialog_node_output_generic_dialog_node_output_response_type_channel_transfer_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_DialogNodeOutputGenericDialogNodeOutputResponseTypeConnectToAgent,test_dialog_node_output_generic_dialog_node_output_response_type_connect_to_agent_serialization,args['channels'] = [ResponseGenericChannel.from_dict(x) for x in _dict.get('channels')],"
args['channels'] = []
for x in _dict.get('channels'):
    args['channels'].append(ResponseGenericChannel.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_DialogNodeOutputGenericDialogNodeOutputResponseTypeConnectToAgent', 'test_dialog_node_output_generic_dialog_node_output_response_type_connect_to_agent_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_DialogNodeOutputGenericDialogNodeOutputResponseTypeImage,test_dialog_node_output_generic_dialog_node_output_response_type_image_serialization,args['channels'] = [ResponseGenericChannel.from_dict(x) for x in _dict.get('channels')],"
args['channels'] = []
for x in _dict.get('channels'):
    args['channels'].append(ResponseGenericChannel.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_DialogNodeOutputGenericDialogNodeOutputResponseTypeImage', 'test_dialog_node_output_generic_dialog_node_output_response_type_image_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_DialogNodeOutputGenericDialogNodeOutputResponseTypeOption,test_dialog_node_output_generic_dialog_node_output_response_type_option_serialization,args['options'] = [DialogNodeOutputOptionsElement.from_dict(x) for x in _dict.get('options')],"
args['options'] = []
for x in _dict.get('options'):
    args['options'].append(DialogNodeOutputOptionsElement.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_DialogNodeOutputGenericDialogNodeOutputResponseTypeOption', 'test_dialog_node_output_generic_dialog_node_output_response_type_option_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_DialogNodeOutputGenericDialogNodeOutputResponseTypeOption,test_dialog_node_output_generic_dialog_node_output_response_type_option_serialization,args['channels'] = [ResponseGenericChannel.from_dict(x) for x in _dict.get('channels')],"
args['channels'] = []
for x in _dict.get('channels'):
    args['channels'].append(ResponseGenericChannel.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_DialogNodeOutputGenericDialogNodeOutputResponseTypeOption', 'test_dialog_node_output_generic_dialog_node_output_response_type_option_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_DialogNodeOutputGenericDialogNodeOutputResponseTypePause,test_dialog_node_output_generic_dialog_node_output_response_type_pause_serialization,args['channels'] = [ResponseGenericChannel.from_dict(x) for x in _dict.get('channels')],"
args['channels'] = []
for x in _dict.get('channels'):
    args['channels'].append(ResponseGenericChannel.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_DialogNodeOutputGenericDialogNodeOutputResponseTypePause', 'test_dialog_node_output_generic_dialog_node_output_response_type_pause_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_DialogNodeOutputGenericDialogNodeOutputResponseTypeSearchSkill,test_dialog_node_output_generic_dialog_node_output_response_type_search_skill_serialization,args['channels'] = [ResponseGenericChannel.from_dict(x) for x in _dict.get('channels')],"
args['channels'] = []
for x in _dict.get('channels'):
    args['channels'].append(ResponseGenericChannel.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_DialogNodeOutputGenericDialogNodeOutputResponseTypeSearchSkill', 'test_dialog_node_output_generic_dialog_node_output_response_type_search_skill_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_DialogNodeOutputGenericDialogNodeOutputResponseTypeText,test_dialog_node_output_generic_dialog_node_output_response_type_text_serialization,args['values'] = [DialogNodeOutputTextValuesElement.from_dict(x) for x in _dict.get('values')],"
args['values'] = []
for x in _dict.get('values'):
    args['values'].append(DialogNodeOutputTextValuesElement.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_DialogNodeOutputGenericDialogNodeOutputResponseTypeText', 'test_dialog_node_output_generic_dialog_node_output_response_type_text_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_DialogNodeOutputGenericDialogNodeOutputResponseTypeText,test_dialog_node_output_generic_dialog_node_output_response_type_text_serialization,args['channels'] = [ResponseGenericChannel.from_dict(x) for x in _dict.get('channels')],"
args['channels'] = []
for x in _dict.get('channels'):
    args['channels'].append(ResponseGenericChannel.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_DialogNodeOutputGenericDialogNodeOutputResponseTypeText', 'test_dialog_node_output_generic_dialog_node_output_response_type_text_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_DialogNodeOutputGenericDialogNodeOutputResponseTypeUserDefined,test_dialog_node_output_generic_dialog_node_output_response_type_user_defined_serialization,args['channels'] = [ResponseGenericChannel.from_dict(x) for x in _dict.get('channels')],"
args['channels'] = []
for x in _dict.get('channels'):
    args['channels'].append(ResponseGenericChannel.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_DialogNodeOutputGenericDialogNodeOutputResponseTypeUserDefined', 'test_dialog_node_output_generic_dialog_node_output_response_type_user_defined_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_RuntimeResponseGenericRuntimeResponseTypeChannelTransfer,test_runtime_response_generic_runtime_response_type_channel_transfer_serialization,args['channels'] = [ResponseGenericChannel.from_dict(x) for x in _dict.get('channels')],"
args['channels'] = []
for x in _dict.get('channels'):
    args['channels'].append(ResponseGenericChannel.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_RuntimeResponseGenericRuntimeResponseTypeChannelTransfer', 'test_runtime_response_generic_runtime_response_type_channel_transfer_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_RuntimeResponseGenericRuntimeResponseTypeChannelTransfer', 'test_runtime_response_generic_runtime_response_type_channel_transfer_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_RuntimeResponseGenericRuntimeResponseTypeConnectToAgent,test_runtime_response_generic_runtime_response_type_connect_to_agent_serialization,args['channels'] = [ResponseGenericChannel.from_dict(x) for x in _dict.get('channels')],"
args['channels'] = []
for x in _dict.get('channels'):
    args['channels'].append(ResponseGenericChannel.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_RuntimeResponseGenericRuntimeResponseTypeConnectToAgent', 'test_runtime_response_generic_runtime_response_type_connect_to_agent_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_RuntimeResponseGenericRuntimeResponseTypeConnectToAgent', 'test_runtime_response_generic_runtime_response_type_connect_to_agent_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_RuntimeResponseGenericRuntimeResponseTypeImage,test_runtime_response_generic_runtime_response_type_image_serialization,args['channels'] = [ResponseGenericChannel.from_dict(x) for x in _dict.get('channels')],"
args['channels'] = []
for x in _dict.get('channels'):
    args['channels'].append(ResponseGenericChannel.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_RuntimeResponseGenericRuntimeResponseTypeImage', 'test_runtime_response_generic_runtime_response_type_image_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_RuntimeResponseGenericRuntimeResponseTypeImage', 'test_runtime_response_generic_runtime_response_type_image_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_RuntimeResponseGenericRuntimeResponseTypeOption,test_runtime_response_generic_runtime_response_type_option_serialization,args['options'] = [DialogNodeOutputOptionsElement.from_dict(x) for x in _dict.get('options')],"
args['options'] = []
for x in _dict.get('options'):
    args['options'].append(DialogNodeOutputOptionsElement.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_RuntimeResponseGenericRuntimeResponseTypeOption', 'test_runtime_response_generic_runtime_response_type_option_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_RuntimeResponseGenericRuntimeResponseTypeOption', 'test_runtime_response_generic_runtime_response_type_option_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_RuntimeResponseGenericRuntimeResponseTypeOption,test_runtime_response_generic_runtime_response_type_option_serialization,args['channels'] = [ResponseGenericChannel.from_dict(x) for x in _dict.get('channels')],"
args['channels'] = []
for x in _dict.get('channels'):
    args['channels'].append(ResponseGenericChannel.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_RuntimeResponseGenericRuntimeResponseTypeOption', 'test_runtime_response_generic_runtime_response_type_option_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_RuntimeResponseGenericRuntimeResponseTypeOption', 'test_runtime_response_generic_runtime_response_type_option_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_RuntimeResponseGenericRuntimeResponseTypePause,test_runtime_response_generic_runtime_response_type_pause_serialization,args['channels'] = [ResponseGenericChannel.from_dict(x) for x in _dict.get('channels')],"
args['channels'] = []
for x in _dict.get('channels'):
    args['channels'].append(ResponseGenericChannel.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_RuntimeResponseGenericRuntimeResponseTypePause', 'test_runtime_response_generic_runtime_response_type_pause_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_RuntimeResponseGenericRuntimeResponseTypePause', 'test_runtime_response_generic_runtime_response_type_pause_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_RuntimeResponseGenericRuntimeResponseTypeSuggestion,test_runtime_response_generic_runtime_response_type_suggestion_serialization,args['suggestions'] = [DialogSuggestion.from_dict(x) for x in _dict.get('suggestions')],"
args['suggestions'] = []
for x in _dict.get('suggestions'):
    args['suggestions'].append(DialogSuggestion.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_RuntimeResponseGenericRuntimeResponseTypeSuggestion', 'test_runtime_response_generic_runtime_response_type_suggestion_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_RuntimeResponseGenericRuntimeResponseTypeSuggestion', 'test_runtime_response_generic_runtime_response_type_suggestion_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_RuntimeResponseGenericRuntimeResponseTypeSuggestion,test_runtime_response_generic_runtime_response_type_suggestion_serialization,args['channels'] = [ResponseGenericChannel.from_dict(x) for x in _dict.get('channels')],"
args['channels'] = []
for x in _dict.get('channels'):
    args['channels'].append(ResponseGenericChannel.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_RuntimeResponseGenericRuntimeResponseTypeSuggestion', 'test_runtime_response_generic_runtime_response_type_suggestion_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_RuntimeResponseGenericRuntimeResponseTypeSuggestion', 'test_runtime_response_generic_runtime_response_type_suggestion_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_RuntimeResponseGenericRuntimeResponseTypeText,test_runtime_response_generic_runtime_response_type_text_serialization,args['channels'] = [ResponseGenericChannel.from_dict(x) for x in _dict.get('channels')],"
args['channels'] = []
for x in _dict.get('channels'):
    args['channels'].append(ResponseGenericChannel.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_RuntimeResponseGenericRuntimeResponseTypeText', 'test_runtime_response_generic_runtime_response_type_text_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_RuntimeResponseGenericRuntimeResponseTypeText', 'test_runtime_response_generic_runtime_response_type_text_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v1.py,TestModel_RuntimeResponseGenericRuntimeResponseTypeUserDefined,test_runtime_response_generic_runtime_response_type_user_defined_serialization,args['channels'] = [ResponseGenericChannel.from_dict(x) for x in _dict.get('channels')],"
args['channels'] = []
for x in _dict.get('channels'):
    args['channels'].append(ResponseGenericChannel.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_RuntimeResponseGenericRuntimeResponseTypeUserDefined', 'test_runtime_response_generic_runtime_response_type_user_defined_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_RuntimeResponseGenericRuntimeResponseTypeUserDefined', 'test_runtime_response_generic_runtime_response_type_user_defined_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/natural_language_understanding_v1.py,TestModel_AnalysisResults,test_analysis_results_serialization,args['concepts'] = [ConceptsResult.from_dict(x) for x in _dict.get('concepts')],"
args['concepts'] = []
for x in _dict.get('concepts'):
    args['concepts'].append(ConceptsResult.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_natural_language_understanding_v1.py', 'test.unit.test_natural_language_understanding_v1', 'TestModel_AnalysisResults', 'test_analysis_results_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/natural_language_understanding_v1.py,TestModel_AnalysisResults,test_analysis_results_serialization,args['entities'] = [EntitiesResult.from_dict(x) for x in _dict.get('entities')],"
args['entities'] = []
for x in _dict.get('entities'):
    args['entities'].append(EntitiesResult.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_natural_language_understanding_v1.py', 'test.unit.test_natural_language_understanding_v1', 'TestModel_AnalysisResults', 'test_analysis_results_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/natural_language_understanding_v1.py,TestModel_AnalysisResults,test_analysis_results_serialization,args['keywords'] = [KeywordsResult.from_dict(x) for x in _dict.get('keywords')],"
args['keywords'] = []
for x in _dict.get('keywords'):
    args['keywords'].append(KeywordsResult.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_natural_language_understanding_v1.py', 'test.unit.test_natural_language_understanding_v1', 'TestModel_AnalysisResults', 'test_analysis_results_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/natural_language_understanding_v1.py,TestModel_AnalysisResults,test_analysis_results_serialization,args['categories'] = [CategoriesResult.from_dict(x) for x in _dict.get('categories')],"
args['categories'] = []
for x in _dict.get('categories'):
    args['categories'].append(CategoriesResult.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_natural_language_understanding_v1.py', 'test.unit.test_natural_language_understanding_v1', 'TestModel_AnalysisResults', 'test_analysis_results_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/natural_language_understanding_v1.py,TestModel_AnalysisResults,test_analysis_results_serialization,args['classifications'] = [ClassificationsResult.from_dict(x) for x in _dict.get('classifications')],"
args['classifications'] = []
for x in _dict.get('classifications'):
    args['classifications'].append(ClassificationsResult.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_natural_language_understanding_v1.py', 'test.unit.test_natural_language_understanding_v1', 'TestModel_AnalysisResults', 'test_analysis_results_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/natural_language_understanding_v1.py,TestModel_AnalysisResults,test_analysis_results_serialization,args['relations'] = [RelationsResult.from_dict(x) for x in _dict.get('relations')],"
args['relations'] = []
for x in _dict.get('relations'):
    args['relations'].append(RelationsResult.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_natural_language_understanding_v1.py', 'test.unit.test_natural_language_understanding_v1', 'TestModel_AnalysisResults', 'test_analysis_results_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/natural_language_understanding_v1.py,TestModel_AnalysisResults,test_analysis_results_serialization,args['semantic_roles'] = [SemanticRolesResult.from_dict(x) for x in _dict.get('semantic_roles')],"
args['semantic_roles'] = []
for x in _dict.get('semantic_roles'):
    args['semantic_roles'].append(SemanticRolesResult.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_natural_language_understanding_v1.py', 'test.unit.test_natural_language_understanding_v1', 'TestModel_AnalysisResults', 'test_analysis_results_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/natural_language_understanding_v1.py,TestModel_CategoriesModel,test_categories_model_serialization,args['notices'] = [Notice.from_dict(x) for x in _dict.get('notices')],"
args['notices'] = []
for x in _dict.get('notices'):
    args['notices'].append(Notice.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_natural_language_understanding_v1.py', 'test.unit.test_natural_language_understanding_v1', 'TestModel_CategoriesModel', 'test_categories_model_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/natural_language_understanding_v1.py,TestModel_CategoriesModelList,test_categories_model_list_serialization,args['models'] = [CategoriesModel.from_dict(x) for x in _dict.get('models')],"
args['models'] = []
for x in _dict.get('models'):
    args['models'].append(CategoriesModel.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_natural_language_understanding_v1.py', 'test.unit.test_natural_language_understanding_v1', 'TestModel_CategoriesModelList', 'test_categories_model_list_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/natural_language_understanding_v1.py,TestModel_CategoriesResultExplanation,test_categories_result_explanation_serialization,args['relevant_text'] = [CategoriesRelevantText.from_dict(x) for x in _dict.get('relevant_text')],"
args['relevant_text'] = []
for x in _dict.get('relevant_text'):
    args['relevant_text'].append(CategoriesRelevantText.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_natural_language_understanding_v1.py', 'test.unit.test_natural_language_understanding_v1', 'TestModel_CategoriesResultExplanation', 'test_categories_result_explanation_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/natural_language_understanding_v1.py,TestModel_ClassificationsModel,test_classifications_model_serialization,args['notices'] = [Notice.from_dict(x) for x in _dict.get('notices')],"
args['notices'] = []
for x in _dict.get('notices'):
    args['notices'].append(Notice.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_natural_language_understanding_v1.py', 'test.unit.test_natural_language_understanding_v1', 'TestModel_ClassificationsModel', 'test_classifications_model_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/natural_language_understanding_v1.py,TestModel_ClassificationsModelList,test_classifications_model_list_serialization,args['models'] = [ClassificationsModel.from_dict(x) for x in _dict.get('models')],"
args['models'] = []
for x in _dict.get('models'):
    args['models'].append(ClassificationsModel.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_natural_language_understanding_v1.py', 'test.unit.test_natural_language_understanding_v1', 'TestModel_ClassificationsModelList', 'test_classifications_model_list_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/natural_language_understanding_v1.py,TestModel_EmotionResult,test_emotion_result_serialization,args['targets'] = [TargetedEmotionResults.from_dict(x) for x in _dict.get('targets')],"
args['targets'] = []
for x in _dict.get('targets'):
    args['targets'].append(TargetedEmotionResults.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_natural_language_understanding_v1.py', 'test.unit.test_natural_language_understanding_v1', 'TestModel_EmotionResult', 'test_emotion_result_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/natural_language_understanding_v1.py,TestModel_EntitiesResult,test_entities_result_serialization,args['mentions'] = [EntityMention.from_dict(x) for x in _dict.get('mentions')],"
args['mentions'] = []
for x in _dict.get('mentions'):
    args['mentions'].append(EntityMention.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_natural_language_understanding_v1.py', 'test.unit.test_natural_language_understanding_v1', 'TestModel_EntitiesResult', 'test_entities_result_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/natural_language_understanding_v1.py,TestModel_FeaturesResultsMetadata,test_features_results_metadata_serialization,args['authors'] = [Author.from_dict(x) for x in _dict.get('authors')],"
args['authors'] = []
for x in _dict.get('authors'):
    args['authors'].append(Author.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_natural_language_understanding_v1.py', 'test.unit.test_natural_language_understanding_v1', 'TestModel_FeaturesResultsMetadata', 'test_features_results_metadata_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/natural_language_understanding_v1.py,TestModel_FeaturesResultsMetadata,test_features_results_metadata_serialization,args['feeds'] = [Feed.from_dict(x) for x in _dict.get('feeds')],"
args['feeds'] = []
for x in _dict.get('feeds'):
    args['feeds'].append(Feed.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_natural_language_understanding_v1.py', 'test.unit.test_natural_language_understanding_v1', 'TestModel_FeaturesResultsMetadata', 'test_features_results_metadata_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/natural_language_understanding_v1.py,TestModel_ListModelsResults,test_list_models_results_serialization,args['models'] = [Model.from_dict(x) for x in _dict.get('models')],"
args['models'] = []
for x in _dict.get('models'):
    args['models'].append(Model.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_natural_language_understanding_v1.py', 'test.unit.test_natural_language_understanding_v1', 'TestModel_ListModelsResults', 'test_list_models_results_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/natural_language_understanding_v1.py,TestModel_ListSentimentModelsResponse,test_list_sentiment_models_response_serialization,args['models'] = [SentimentModel.from_dict(x) for x in _dict.get('models')],"
args['models'] = []
for x in _dict.get('models'):
    args['models'].append(SentimentModel.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_natural_language_understanding_v1.py', 'test.unit.test_natural_language_understanding_v1', 'TestModel_ListSentimentModelsResponse', 'test_list_sentiment_models_response_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/natural_language_understanding_v1.py,TestModel_RelationArgument,test_relation_argument_serialization,args['entities'] = [RelationEntity.from_dict(x) for x in _dict.get('entities')],"
args['entities'] = []
for x in _dict.get('entities'):
    args['entities'].append(RelationEntity.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_natural_language_understanding_v1.py', 'test.unit.test_natural_language_understanding_v1', 'TestModel_RelationArgument', 'test_relation_argument_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/natural_language_understanding_v1.py,TestModel_RelationsResult,test_relations_result_serialization,args['arguments'] = [RelationArgument.from_dict(x) for x in _dict.get('arguments')],"
args['arguments'] = []
for x in _dict.get('arguments'):
    args['arguments'].append(RelationArgument.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_natural_language_understanding_v1.py', 'test.unit.test_natural_language_understanding_v1', 'TestModel_RelationsResult', 'test_relations_result_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/natural_language_understanding_v1.py,TestModel_SemanticRolesResultObject,test_semantic_roles_result_object_serialization,args['keywords'] = [SemanticRolesKeyword.from_dict(x) for x in _dict.get('keywords')],"
args['keywords'] = []
for x in _dict.get('keywords'):
    args['keywords'].append(SemanticRolesKeyword.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_natural_language_understanding_v1.py', 'test.unit.test_natural_language_understanding_v1', 'TestModel_SemanticRolesResultObject', 'test_semantic_roles_result_object_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/natural_language_understanding_v1.py,TestModel_SemanticRolesResultSubject,test_semantic_roles_result_subject_serialization,args['entities'] = [SemanticRolesEntity.from_dict(x) for x in _dict.get('entities')],"
args['entities'] = []
for x in _dict.get('entities'):
    args['entities'].append(SemanticRolesEntity.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_natural_language_understanding_v1.py', 'test.unit.test_natural_language_understanding_v1', 'TestModel_SemanticRolesResultSubject', 'test_semantic_roles_result_subject_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/natural_language_understanding_v1.py,TestModel_SemanticRolesResultSubject,test_semantic_roles_result_subject_serialization,args['keywords'] = [SemanticRolesKeyword.from_dict(x) for x in _dict.get('keywords')],"
args['keywords'] = []
for x in _dict.get('keywords'):
    args['keywords'].append(SemanticRolesKeyword.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_natural_language_understanding_v1.py', 'test.unit.test_natural_language_understanding_v1', 'TestModel_SemanticRolesResultSubject', 'test_semantic_roles_result_subject_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/natural_language_understanding_v1.py,TestModel_SentimentModel,test_sentiment_model_serialization,args['notices'] = [Notice.from_dict(x) for x in _dict.get('notices')],"
args['notices'] = []
for x in _dict.get('notices'):
    args['notices'].append(Notice.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_natural_language_understanding_v1.py', 'test.unit.test_natural_language_understanding_v1', 'TestModel_SentimentModel', 'test_sentiment_model_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/natural_language_understanding_v1.py,TestModel_SentimentResult,test_sentiment_result_serialization,args['targets'] = [TargetedSentimentResults.from_dict(x) for x in _dict.get('targets')],"
args['targets'] = []
for x in _dict.get('targets'):
    args['targets'].append(TargetedSentimentResults.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_natural_language_understanding_v1.py', 'test.unit.test_natural_language_understanding_v1', 'TestModel_SentimentResult', 'test_sentiment_result_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/natural_language_understanding_v1.py,TestModel_SyntaxResult,test_syntax_result_serialization,args['tokens'] = [TokenResult.from_dict(x) for x in _dict.get('tokens')],"
args['tokens'] = []
for x in _dict.get('tokens'):
    args['tokens'].append(TokenResult.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_natural_language_understanding_v1.py', 'test.unit.test_natural_language_understanding_v1', 'TestModel_SyntaxResult', 'test_syntax_result_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/natural_language_understanding_v1.py,TestModel_SyntaxResult,test_syntax_result_serialization,args['sentences'] = [SentenceResult.from_dict(x) for x in _dict.get('sentences')],"
args['sentences'] = []
for x in _dict.get('sentences'):
    args['sentences'].append(SentenceResult.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_natural_language_understanding_v1.py', 'test.unit.test_natural_language_understanding_v1', 'TestModel_SyntaxResult', 'test_syntax_result_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/speech_to_text_v1.py,TestModel_AcousticModels,test_acoustic_models_serialization,args['customizations'] = [AcousticModel.from_dict(x) for x in _dict.get('customizations')],"
args['customizations'] = []
for x in _dict.get('customizations'):
    args['customizations'].append(AcousticModel.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_speech_to_text_v1.py', 'test.unit.test_speech_to_text_v1', 'TestModel_AcousticModels', 'test_acoustic_models_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/speech_to_text_v1.py,TestModel_AudioListing,test_audio_listing_serialization,args['audio'] = [AudioResource.from_dict(x) for x in _dict.get('audio')],"
args['audio'] = []
for x in _dict.get('audio'):
    args['audio'].append(AudioResource.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_speech_to_text_v1.py', 'test.unit.test_speech_to_text_v1', 'TestModel_AudioListing', 'test_audio_listing_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/speech_to_text_v1.py,TestModel_AudioMetricsDetails,test_audio_metrics_details_serialization,args['direct_current_offset'] = [AudioMetricsHistogramBin.from_dict(x) for x in _dict.get('direct_current_offset')],"
args['direct_current_offset'] = []
for x in _dict.get('direct_current_offset'):
    args['direct_current_offset'].append(AudioMetricsHistogramBin.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_speech_to_text_v1.py', 'test.unit.test_speech_to_text_v1', 'TestModel_AudioMetricsDetails', 'test_audio_metrics_details_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/speech_to_text_v1.py,TestModel_AudioMetricsDetails,test_audio_metrics_details_serialization,args['clipping_rate'] = [AudioMetricsHistogramBin.from_dict(x) for x in _dict.get('clipping_rate')],"
args['clipping_rate'] = []
for x in _dict.get('clipping_rate'):
    args['clipping_rate'].append(AudioMetricsHistogramBin.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_speech_to_text_v1.py', 'test.unit.test_speech_to_text_v1', 'TestModel_AudioMetricsDetails', 'test_audio_metrics_details_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/speech_to_text_v1.py,TestModel_AudioMetricsDetails,test_audio_metrics_details_serialization,args['speech_level'] = [AudioMetricsHistogramBin.from_dict(x) for x in _dict.get('speech_level')],"
args['speech_level'] = []
for x in _dict.get('speech_level'):
    args['speech_level'].append(AudioMetricsHistogramBin.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_speech_to_text_v1.py', 'test.unit.test_speech_to_text_v1', 'TestModel_AudioMetricsDetails', 'test_audio_metrics_details_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/speech_to_text_v1.py,TestModel_AudioMetricsDetails,test_audio_metrics_details_serialization,args['non_speech_level'] = [AudioMetricsHistogramBin.from_dict(x) for x in _dict.get('non_speech_level')],"
args['non_speech_level'] = []
for x in _dict.get('non_speech_level'):
    args['non_speech_level'].append(AudioMetricsHistogramBin.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_speech_to_text_v1.py', 'test.unit.test_speech_to_text_v1', 'TestModel_AudioMetricsDetails', 'test_audio_metrics_details_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/speech_to_text_v1.py,TestModel_AudioResources,test_audio_resources_serialization,args['audio'] = [AudioResource.from_dict(x) for x in _dict.get('audio')],"
args['audio'] = []
for x in _dict.get('audio'):
    args['audio'].append(AudioResource.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_speech_to_text_v1.py', 'test.unit.test_speech_to_text_v1', 'TestModel_AudioResources', 'test_audio_resources_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/speech_to_text_v1.py,TestModel_Corpora,test_corpora_serialization,args['corpora'] = [Corpus.from_dict(x) for x in _dict.get('corpora')],"
args['corpora'] = []
for x in _dict.get('corpora'):
    args['corpora'].append(Corpus.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_speech_to_text_v1.py', 'test.unit.test_speech_to_text_v1', 'TestModel_Corpora', 'test_corpora_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/speech_to_text_v1.py,TestModel_Grammars,test_grammars_serialization,args['grammars'] = [Grammar.from_dict(x) for x in _dict.get('grammars')],"
args['grammars'] = []
for x in _dict.get('grammars'):
    args['grammars'].append(Grammar.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_speech_to_text_v1.py', 'test.unit.test_speech_to_text_v1', 'TestModel_Grammars', 'test_grammars_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/speech_to_text_v1.py,TestModel_LanguageModels,test_language_models_serialization,args['customizations'] = [LanguageModel.from_dict(x) for x in _dict.get('customizations')],"
args['customizations'] = []
for x in _dict.get('customizations'):
    args['customizations'].append(LanguageModel.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_speech_to_text_v1.py', 'test.unit.test_speech_to_text_v1', 'TestModel_LanguageModels', 'test_language_models_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/speech_to_text_v1.py,TestModel_RecognitionJob,test_recognition_job_serialization,args['results'] = [SpeechRecognitionResults.from_dict(x) for x in _dict.get('results')],"
args['results'] = []
for x in _dict.get('results'):
    args['results'].append(SpeechRecognitionResults.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_speech_to_text_v1.py', 'test.unit.test_speech_to_text_v1', 'TestModel_RecognitionJob', 'test_recognition_job_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/speech_to_text_v1.py,TestModel_RecognitionJobs,test_recognition_jobs_serialization,args['recognitions'] = [RecognitionJob.from_dict(x) for x in _dict.get('recognitions')],"
args['recognitions'] = []
for x in _dict.get('recognitions'):
    args['recognitions'].append(RecognitionJob.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_speech_to_text_v1.py', 'test.unit.test_speech_to_text_v1', 'TestModel_RecognitionJobs', 'test_recognition_jobs_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/speech_to_text_v1.py,TestModel_SpeechModels,test_speech_models_serialization,args['models'] = [SpeechModel.from_dict(x) for x in _dict.get('models')],"
args['models'] = []
for x in _dict.get('models'):
    args['models'].append(SpeechModel.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_speech_to_text_v1.py', 'test.unit.test_speech_to_text_v1', 'TestModel_SpeechModels', 'test_speech_models_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/speech_to_text_v1.py,TestModel_SpeechRecognitionResult,test_speech_recognition_result_serialization,args['alternatives'] = [SpeechRecognitionAlternative.from_dict(x) for x in _dict.get('alternatives')],"
args['alternatives'] = []
for x in _dict.get('alternatives'):
    args['alternatives'].append(SpeechRecognitionAlternative.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_speech_to_text_v1.py', 'test.unit.test_speech_to_text_v1', 'TestModel_SpeechRecognitionResult', 'test_speech_recognition_result_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/speech_to_text_v1.py,TestModel_SpeechRecognitionResult,test_speech_recognition_result_serialization,args['word_alternatives'] = [WordAlternativeResults.from_dict(x) for x in _dict.get('word_alternatives')],"
args['word_alternatives'] = []
for x in _dict.get('word_alternatives'):
    args['word_alternatives'].append(WordAlternativeResults.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_speech_to_text_v1.py', 'test.unit.test_speech_to_text_v1', 'TestModel_SpeechRecognitionResult', 'test_speech_recognition_result_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/speech_to_text_v1.py,TestModel_SpeechRecognitionResults,test_speech_recognition_results_serialization,args['results'] = [SpeechRecognitionResult.from_dict(x) for x in _dict.get('results')],"
args['results'] = []
for x in _dict.get('results'):
    args['results'].append(SpeechRecognitionResult.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_speech_to_text_v1.py', 'test.unit.test_speech_to_text_v1', 'TestModel_SpeechRecognitionResults', 'test_speech_recognition_results_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/speech_to_text_v1.py,TestModel_SpeechRecognitionResults,test_speech_recognition_results_serialization,args['speaker_labels'] = [SpeakerLabelsResult.from_dict(x) for x in _dict.get('speaker_labels')],"
args['speaker_labels'] = []
for x in _dict.get('speaker_labels'):
    args['speaker_labels'].append(SpeakerLabelsResult.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_speech_to_text_v1.py', 'test.unit.test_speech_to_text_v1', 'TestModel_SpeechRecognitionResults', 'test_speech_recognition_results_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/speech_to_text_v1.py,TestModel_TrainingResponse,test_training_response_serialization,args['warnings'] = [TrainingWarning.from_dict(x) for x in _dict.get('warnings')],"
args['warnings'] = []
for x in _dict.get('warnings'):
    args['warnings'].append(TrainingWarning.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_speech_to_text_v1.py', 'test.unit.test_speech_to_text_v1', 'TestModel_TrainingResponse', 'test_training_response_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/speech_to_text_v1.py,TestModel_Word,test_word_serialization,args['error'] = [WordError.from_dict(x) for x in _dict.get('error')],"
args['error'] = []
for x in _dict.get('error'):
    args['error'].append(WordError.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_text_to_speech_v1.py', 'test.unit.test_text_to_speech_v1', 'TestModel_Word', 'test_word_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_speech_to_text_v1.py', 'test.unit.test_speech_to_text_v1', 'TestModel_Word', 'test_word_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/speech_to_text_v1.py,TestModel_WordAlternativeResults,test_word_alternative_results_serialization,args['alternatives'] = [WordAlternativeResult.from_dict(x) for x in _dict.get('alternatives')],"
args['alternatives'] = []
for x in _dict.get('alternatives'):
    args['alternatives'].append(WordAlternativeResult.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_speech_to_text_v1.py', 'test.unit.test_speech_to_text_v1', 'TestModel_WordAlternativeResults', 'test_word_alternative_results_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/speech_to_text_v1.py,TestModel_Words,test_words_serialization,args['words'] = [Word.from_dict(x) for x in _dict.get('words')],"
args['words'] = []
for x in _dict.get('words'):
    args['words'].append(Word.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_speech_to_text_v1.py', 'test.unit.test_speech_to_text_v1', 'TestModel_Words', 'test_words_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_text_to_speech_v1.py', 'test.unit.test_text_to_speech_v1', 'TestModel_Words', 'test_words_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_AggregationResult,test_aggregation_result_serialization,args['aggregations'] = [QueryAggregation.from_dict(x) for x in _dict.get('aggregations')],"
args['aggregations'] = []
for x in _dict.get('aggregations'):
    args['aggregations'].append(QueryAggregation.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_AggregationResult', 'test_aggregation_result_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_Configuration,test_configuration_serialization,args['enrichments'] = [Enrichment.from_dict(x) for x in _dict.get('enrichments')],"
args['enrichments'] = []
for x in _dict.get('enrichments'):
    args['enrichments'].append(Enrichment.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_Configuration', 'test_configuration_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_Configuration,test_configuration_serialization,args['normalizations'] = [NormalizationOperation.from_dict(x) for x in _dict.get('normalizations')],"
args['normalizations'] = []
for x in _dict.get('normalizations'):
    args['normalizations'].append(NormalizationOperation.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_Configuration', 'test_configuration_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_Conversions,test_conversions_serialization,args['json_normalizations'] = [NormalizationOperation.from_dict(x) for x in _dict.get('json_normalizations')],"
args['json_normalizations'] = []
for x in _dict.get('json_normalizations'):
    args['json_normalizations'].append(NormalizationOperation.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_Conversions', 'test_conversions_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_CredentialsList,test_credentials_list_serialization,args['credentials'] = [Credentials.from_dict(x) for x in _dict.get('credentials')],"
args['credentials'] = []
for x in _dict.get('credentials'):
    args['credentials'].append(Credentials.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_CredentialsList', 'test_credentials_list_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_DeleteConfigurationResponse,test_delete_configuration_response_serialization,args['notices'] = [Notice.from_dict(x) for x in _dict.get('notices')],"
args['notices'] = []
for x in _dict.get('notices'):
    args['notices'].append(Notice.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_DeleteConfigurationResponse', 'test_delete_configuration_response_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_DocumentAccepted,test_document_accepted_serialization,args['notices'] = [Notice.from_dict(x) for x in _dict.get('notices')],"
args['notices'] = []
for x in _dict.get('notices'):
    args['notices'].append(Notice.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_DocumentAccepted', 'test_document_accepted_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_DocumentAccepted', 'test_document_accepted_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_DocumentStatus,test_document_status_serialization,args['notices'] = [Notice.from_dict(x) for x in _dict.get('notices')],"
args['notices'] = []
for x in _dict.get('notices'):
    args['notices'].append(Notice.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_DocumentStatus', 'test_document_status_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_Expansions,test_expansions_serialization,args['expansions'] = [Expansion.from_dict(x) for x in _dict.get('expansions')],"
args['expansions'] = []
for x in _dict.get('expansions'):
    args['expansions'].append(Expansion.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_Expansions', 'test_expansions_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_GatewayList,test_gateway_list_serialization,args['gateways'] = [Gateway.from_dict(x) for x in _dict.get('gateways')],"
args['gateways'] = []
for x in _dict.get('gateways'):
    args['gateways'].append(Gateway.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_GatewayList', 'test_gateway_list_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_ListCollectionFieldsResponse,test_list_collection_fields_response_serialization,args['fields'] = [Field.from_dict(x) for x in _dict.get('fields')],"
args['fields'] = []
for x in _dict.get('fields'):
    args['fields'].append(Field.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_ListCollectionFieldsResponse', 'test_list_collection_fields_response_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_ListCollectionsResponse,test_list_collections_response_serialization,args['collections'] = [Collection.from_dict(x) for x in _dict.get('collections')],"
args['collections'] = []
for x in _dict.get('collections'):
    args['collections'].append(Collection.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_ListCollectionsResponse', 'test_list_collections_response_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_ListCollectionsResponse', 'test_list_collections_response_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_ListConfigurationsResponse,test_list_configurations_response_serialization,args['configurations'] = [Configuration.from_dict(x) for x in _dict.get('configurations')],"
args['configurations'] = []
for x in _dict.get('configurations'):
    args['configurations'].append(Configuration.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_ListConfigurationsResponse', 'test_list_configurations_response_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_ListEnvironmentsResponse,test_list_environments_response_serialization,args['environments'] = [Environment.from_dict(x) for x in _dict.get('environments')],"
args['environments'] = []
for x in _dict.get('environments'):
    args['environments'].append(Environment.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_ListEnvironmentsResponse', 'test_list_environments_response_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_LogQueryResponse,test_log_query_response_serialization,args['results'] = [LogQueryResponseResult.from_dict(x) for x in _dict.get('results')],"
args['results'] = []
for x in _dict.get('results'):
    args['results'].append(LogQueryResponseResult.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_LogQueryResponse', 'test_log_query_response_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_LogQueryResponseResultDocuments,test_log_query_response_result_documents_serialization,args['results'] = [LogQueryResponseResultDocumentsResult.from_dict(x) for x in _dict.get('results')],"
args['results'] = []
for x in _dict.get('results'):
    args['results'].append(LogQueryResponseResultDocumentsResult.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_LogQueryResponseResultDocuments', 'test_log_query_response_result_documents_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_MetricAggregation,test_metric_aggregation_serialization,args['results'] = [MetricAggregationResult.from_dict(x) for x in _dict.get('results')],"
args['results'] = []
for x in _dict.get('results'):
    args['results'].append(MetricAggregationResult.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_MetricAggregation', 'test_metric_aggregation_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_MetricResponse,test_metric_response_serialization,args['aggregations'] = [MetricAggregation.from_dict(x) for x in _dict.get('aggregations')],"
args['aggregations'] = []
for x in _dict.get('aggregations'):
    args['aggregations'].append(MetricAggregation.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_MetricResponse', 'test_metric_response_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_MetricTokenAggregation,test_metric_token_aggregation_serialization,args['results'] = [MetricTokenAggregationResult.from_dict(x) for x in _dict.get('results')],"
args['results'] = []
for x in _dict.get('results'):
    args['results'].append(MetricTokenAggregationResult.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_MetricTokenAggregation', 'test_metric_token_aggregation_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_MetricTokenResponse,test_metric_token_response_serialization,args['aggregations'] = [MetricTokenAggregation.from_dict(x) for x in _dict.get('aggregations')],"
args['aggregations'] = []
for x in _dict.get('aggregations'):
    args['aggregations'].append(MetricTokenAggregation.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_MetricTokenResponse', 'test_metric_token_response_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_PdfHeadingDetection,test_pdf_heading_detection_serialization,args['fonts'] = [FontSetting.from_dict(x) for x in _dict.get('fonts')],"
args['fonts'] = []
for x in _dict.get('fonts'):
    args['fonts'].append(FontSetting.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_PdfHeadingDetection', 'test_pdf_heading_detection_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_QueryAggregation,test_query_aggregation_serialization,args['results'] = [AggregationResult.from_dict(x) for x in _dict.get('results')],"
args['results'] = []
for x in _dict.get('results'):
    args['results'].append(AggregationResult.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_QueryAggregation', 'test_query_aggregation_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_QueryAggregation', 'test_query_aggregation_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_QueryAggregation,test_query_aggregation_serialization,args['aggregations'] = [QueryAggregation.from_dict(x) for x in _dict.get('aggregations')],"
args['aggregations'] = []
for x in _dict.get('aggregations'):
    args['aggregations'].append(QueryAggregation.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_QueryAggregation', 'test_query_aggregation_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_QueryAggregation', 'test_query_aggregation_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_QueryNoticesResponse,test_query_notices_response_serialization,args['results'] = [QueryNoticesResult.from_dict(x) for x in _dict.get('results')],"
args['results'] = []
for x in _dict.get('results'):
    args['results'].append(QueryNoticesResult.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_QueryNoticesResponse', 'test_query_notices_response_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_QueryNoticesResponse', 'test_query_notices_response_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_QueryNoticesResponse,test_query_notices_response_serialization,args['aggregations'] = [QueryAggregation.from_dict(x) for x in _dict.get('aggregations')],"
args['aggregations'] = []
for x in _dict.get('aggregations'):
    args['aggregations'].append(QueryAggregation.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_QueryNoticesResponse', 'test_query_notices_response_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_QueryNoticesResponse', 'test_query_notices_response_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_QueryNoticesResponse,test_query_notices_response_serialization,args['passages'] = [QueryPassages.from_dict(x) for x in _dict.get('passages')],"
args['passages'] = []
for x in _dict.get('passages'):
    args['passages'].append(QueryPassages.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_QueryNoticesResponse', 'test_query_notices_response_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_QueryNoticesResponse', 'test_query_notices_response_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_QueryNoticesResult,test_query_notices_result_serialization,args['notices'] = [Notice.from_dict(x) for x in _dict.get('notices')],"
args['notices'] = []
for x in _dict.get('notices'):
    args['notices'].append(Notice.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_QueryNoticesResult', 'test_query_notices_result_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_QueryResponse,test_query_response_serialization,args['results'] = [QueryResult.from_dict(x) for x in _dict.get('results')],"
args['results'] = []
for x in _dict.get('results'):
    args['results'].append(QueryResult.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_QueryResponse', 'test_query_response_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_QueryResponse', 'test_query_response_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_QueryResponse,test_query_response_serialization,args['aggregations'] = [QueryAggregation.from_dict(x) for x in _dict.get('aggregations')],"
args['aggregations'] = []
for x in _dict.get('aggregations'):
    args['aggregations'].append(QueryAggregation.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_QueryResponse', 'test_query_response_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_QueryResponse', 'test_query_response_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_QueryResponse,test_query_response_serialization,args['passages'] = [QueryPassages.from_dict(x) for x in _dict.get('passages')],"
args['passages'] = []
for x in _dict.get('passages'):
    args['passages'].append(QueryPassages.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_QueryResponse', 'test_query_response_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_QueryResponse', 'test_query_response_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_SourceOptions,test_source_options_serialization,args['folders'] = [SourceOptionsFolder.from_dict(x) for x in _dict.get('folders')],"
args['folders'] = []
for x in _dict.get('folders'):
    args['folders'].append(SourceOptionsFolder.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_SourceOptions', 'test_source_options_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_SourceOptions,test_source_options_serialization,args['objects'] = [SourceOptionsObject.from_dict(x) for x in _dict.get('objects')],"
args['objects'] = []
for x in _dict.get('objects'):
    args['objects'].append(SourceOptionsObject.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_SourceOptions', 'test_source_options_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_SourceOptions,test_source_options_serialization,args['site_collections'] = [SourceOptionsSiteColl.from_dict(x) for x in _dict.get('site_collections')],"
args['site_collections'] = []
for x in _dict.get('site_collections'):
    args['site_collections'].append(SourceOptionsSiteColl.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_SourceOptions', 'test_source_options_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_SourceOptions,test_source_options_serialization,args['urls'] = [SourceOptionsWebCrawl.from_dict(x) for x in _dict.get('urls')],"
args['urls'] = []
for x in _dict.get('urls'):
    args['urls'].append(SourceOptionsWebCrawl.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_SourceOptions', 'test_source_options_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_SourceOptions,test_source_options_serialization,args['buckets'] = [SourceOptionsBuckets.from_dict(x) for x in _dict.get('buckets')],"
args['buckets'] = []
for x in _dict.get('buckets'):
    args['buckets'].append(SourceOptionsBuckets.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_SourceOptions', 'test_source_options_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_TopHitsResults,test_top_hits_results_serialization,args['hits'] = [QueryResult.from_dict(x) for x in _dict.get('hits')],"
args['hits'] = []
for x in _dict.get('hits'):
    args['hits'].append(QueryResult.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_TopHitsResults', 'test_top_hits_results_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_TrainingDataSet,test_training_data_set_serialization,args['queries'] = [TrainingQuery.from_dict(x) for x in _dict.get('queries')],"
args['queries'] = []
for x in _dict.get('queries'):
    args['queries'].append(TrainingQuery.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_TrainingDataSet', 'test_training_data_set_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_TrainingExampleList,test_training_example_list_serialization,args['examples'] = [TrainingExample.from_dict(x) for x in _dict.get('examples')],"
args['examples'] = []
for x in _dict.get('examples'):
    args['examples'].append(TrainingExample.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_TrainingExampleList', 'test_training_example_list_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_TrainingQuery,test_training_query_serialization,args['examples'] = [TrainingExample.from_dict(x) for x in _dict.get('examples')],"
args['examples'] = []
for x in _dict.get('examples'):
    args['examples'].append(TrainingExample.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_TrainingQuery', 'test_training_query_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v2.py', 'test.unit.test_discovery_v2', 'TestModel_TrainingQuery', 'test_training_query_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_WordHeadingDetection,test_word_heading_detection_serialization,args['fonts'] = [FontSetting.from_dict(x) for x in _dict.get('fonts')],"
args['fonts'] = []
for x in _dict.get('fonts'):
    args['fonts'].append(FontSetting.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_WordHeadingDetection', 'test_word_heading_detection_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_WordHeadingDetection,test_word_heading_detection_serialization,args['styles'] = [WordStyle.from_dict(x) for x in _dict.get('styles')],"
args['styles'] = []
for x in _dict.get('styles'):
    args['styles'].append(WordStyle.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_WordHeadingDetection', 'test_word_heading_detection_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_Calculation,test_calculation_serialization,args['results'] = [AggregationResult.from_dict(x) for x in _dict.get('results')],"
args['results'] = []
for x in _dict.get('results'):
    args['results'].append(AggregationResult.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_Calculation', 'test_calculation_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_Calculation,test_calculation_serialization,args['aggregations'] = [QueryAggregation.from_dict(x) for x in _dict.get('aggregations')],"
args['aggregations'] = []
for x in _dict.get('aggregations'):
    args['aggregations'].append(QueryAggregation.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_Calculation', 'test_calculation_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_Filter,test_filter_serialization,args['results'] = [AggregationResult.from_dict(x) for x in _dict.get('results')],"
args['results'] = []
for x in _dict.get('results'):
    args['results'].append(AggregationResult.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_Filter', 'test_filter_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_Filter,test_filter_serialization,args['aggregations'] = [QueryAggregation.from_dict(x) for x in _dict.get('aggregations')],"
args['aggregations'] = []
for x in _dict.get('aggregations'):
    args['aggregations'].append(QueryAggregation.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_Filter', 'test_filter_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_Histogram,test_histogram_serialization,args['results'] = [AggregationResult.from_dict(x) for x in _dict.get('results')],"
args['results'] = []
for x in _dict.get('results'):
    args['results'].append(AggregationResult.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_Histogram', 'test_histogram_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_Histogram,test_histogram_serialization,args['aggregations'] = [QueryAggregation.from_dict(x) for x in _dict.get('aggregations')],"
args['aggregations'] = []
for x in _dict.get('aggregations'):
    args['aggregations'].append(QueryAggregation.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_Histogram', 'test_histogram_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_Nested,test_nested_serialization,args['results'] = [AggregationResult.from_dict(x) for x in _dict.get('results')],"
args['results'] = []
for x in _dict.get('results'):
    args['results'].append(AggregationResult.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_Nested', 'test_nested_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_Nested,test_nested_serialization,args['aggregations'] = [QueryAggregation.from_dict(x) for x in _dict.get('aggregations')],"
args['aggregations'] = []
for x in _dict.get('aggregations'):
    args['aggregations'].append(QueryAggregation.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_Nested', 'test_nested_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_Term,test_term_serialization,args['results'] = [AggregationResult.from_dict(x) for x in _dict.get('results')],"
args['results'] = []
for x in _dict.get('results'):
    args['results'].append(AggregationResult.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_Term', 'test_term_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_Term,test_term_serialization,args['aggregations'] = [QueryAggregation.from_dict(x) for x in _dict.get('aggregations')],"
args['aggregations'] = []
for x in _dict.get('aggregations'):
    args['aggregations'].append(QueryAggregation.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_Term', 'test_term_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_Timeslice,test_timeslice_serialization,args['results'] = [AggregationResult.from_dict(x) for x in _dict.get('results')],"
args['results'] = []
for x in _dict.get('results'):
    args['results'].append(AggregationResult.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_Timeslice', 'test_timeslice_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_Timeslice,test_timeslice_serialization,args['aggregations'] = [QueryAggregation.from_dict(x) for x in _dict.get('aggregations')],"
args['aggregations'] = []
for x in _dict.get('aggregations'):
    args['aggregations'].append(QueryAggregation.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_Timeslice', 'test_timeslice_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_TopHits,test_top_hits_serialization,args['results'] = [AggregationResult.from_dict(x) for x in _dict.get('results')],"
args['results'] = []
for x in _dict.get('results'):
    args['results'].append(AggregationResult.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_TopHits', 'test_top_hits_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/discovery_v1.py,TestModel_TopHits,test_top_hits_serialization,args['aggregations'] = [QueryAggregation.from_dict(x) for x in _dict.get('aggregations')],"
args['aggregations'] = []
for x in _dict.get('aggregations'):
    args['aggregations'].append(QueryAggregation.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_discovery_v1.py', 'test.unit.test_discovery_v1', 'TestModel_TopHits', 'test_top_hits_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/text_to_speech_v1.py,TestModel_CustomModel,test_custom_model_serialization,args['words'] = [Word.from_dict(x) for x in _dict.get('words')],"
args['words'] = []
for x in _dict.get('words'):
    args['words'].append(Word.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_text_to_speech_v1.py', 'test.unit.test_text_to_speech_v1', 'TestModel_CustomModel', 'test_custom_model_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/text_to_speech_v1.py,TestModel_CustomModel,test_custom_model_serialization,args['prompts'] = [Prompt.from_dict(x) for x in _dict.get('prompts')],"
args['prompts'] = []
for x in _dict.get('prompts'):
    args['prompts'].append(Prompt.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_text_to_speech_v1.py', 'test.unit.test_text_to_speech_v1', 'TestModel_CustomModel', 'test_custom_model_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/text_to_speech_v1.py,TestModel_CustomModels,test_custom_models_serialization,args['customizations'] = [CustomModel.from_dict(x) for x in _dict.get('customizations')],"
args['customizations'] = []
for x in _dict.get('customizations'):
    args['customizations'].append(CustomModel.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_text_to_speech_v1.py', 'test.unit.test_text_to_speech_v1', 'TestModel_CustomModels', 'test_custom_models_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/text_to_speech_v1.py,TestModel_Prompts,test_prompts_serialization,args['prompts'] = [Prompt.from_dict(x) for x in _dict.get('prompts')],"
args['prompts'] = []
for x in _dict.get('prompts'):
    args['prompts'].append(Prompt.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_text_to_speech_v1.py', 'test.unit.test_text_to_speech_v1', 'TestModel_Prompts', 'test_prompts_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/text_to_speech_v1.py,TestModel_SpeakerCustomModel,test_speaker_custom_model_serialization,args['prompts'] = [SpeakerPrompt.from_dict(x) for x in _dict.get('prompts')],"
args['prompts'] = []
for x in _dict.get('prompts'):
    args['prompts'].append(SpeakerPrompt.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_text_to_speech_v1.py', 'test.unit.test_text_to_speech_v1', 'TestModel_SpeakerCustomModel', 'test_speaker_custom_model_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/text_to_speech_v1.py,TestModel_SpeakerCustomModels,test_speaker_custom_models_serialization,args['customizations'] = [SpeakerCustomModel.from_dict(x) for x in _dict.get('customizations')],"
args['customizations'] = []
for x in _dict.get('customizations'):
    args['customizations'].append(SpeakerCustomModel.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_text_to_speech_v1.py', 'test.unit.test_text_to_speech_v1', 'TestModel_SpeakerCustomModels', 'test_speaker_custom_models_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/text_to_speech_v1.py,TestModel_Speakers,test_speakers_serialization,args['speakers'] = [Speaker.from_dict(x) for x in _dict.get('speakers')],"
args['speakers'] = []
for x in _dict.get('speakers'):
    args['speakers'].append(Speaker.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_text_to_speech_v1.py', 'test.unit.test_text_to_speech_v1', 'TestModel_Speakers', 'test_speakers_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/text_to_speech_v1.py,TestModel_Voices,test_voices_serialization,args['voices'] = [Voice.from_dict(x) for x in _dict.get('voices')],"
args['voices'] = []
for x in _dict.get('voices'):
    args['voices'].append(Voice.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_text_to_speech_v1.py', 'test.unit.test_text_to_speech_v1', 'TestModel_Voices', 'test_voices_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/text_to_speech_v1.py,TestModel_Words,test_words_serialization,args['words'] = [Word.from_dict(x) for x in _dict.get('words')],"
args['words'] = []
for x in _dict.get('words'):
    args['words'].append(Word.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_speech_to_text_v1.py', 'test.unit.test_speech_to_text_v1', 'TestModel_Words', 'test_words_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_text_to_speech_v1.py', 'test.unit.test_text_to_speech_v1', 'TestModel_Words', 'test_words_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/visual_recognition_v4.py,TestModel_AnalyzeResponse,test_analyze_response_serialization,args['images'] = [Image.from_dict(x) for x in _dict.get('images')],"
args['images'] = []
for x in _dict.get('images'):
    args['images'].append(Image.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_visual_recognition_v4.py', 'test.unit.test_visual_recognition_v4', 'TestModel_AnalyzeResponse', 'test_analyze_response_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/visual_recognition_v4.py,TestModel_AnalyzeResponse,test_analyze_response_serialization,args['warnings'] = [Warning.from_dict(x) for x in _dict.get('warnings')],"
args['warnings'] = []
for x in _dict.get('warnings'):
    args['warnings'].append(Warning.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_visual_recognition_v4.py', 'test.unit.test_visual_recognition_v4', 'TestModel_AnalyzeResponse', 'test_analyze_response_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/visual_recognition_v4.py,TestModel_CollectionObjects,test_collection_objects_serialization,args['objects'] = [ObjectDetail.from_dict(x) for x in _dict.get('objects')],"
args['objects'] = []
for x in _dict.get('objects'):
    args['objects'].append(ObjectDetail.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_visual_recognition_v4.py', 'test.unit.test_visual_recognition_v4', 'TestModel_CollectionObjects', 'test_collection_objects_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/visual_recognition_v4.py,TestModel_CollectionsList,test_collections_list_serialization,args['collections'] = [Collection.from_dict(x) for x in _dict.get('collections')],"
args['collections'] = []
for x in _dict.get('collections'):
    args['collections'].append(Collection.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_visual_recognition_v4.py', 'test.unit.test_visual_recognition_v4', 'TestModel_CollectionsList', 'test_collections_list_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/visual_recognition_v4.py,TestModel_DetectedObjects,test_detected_objects_serialization,args['collections'] = [CollectionObjects.from_dict(x) for x in _dict.get('collections')],"
args['collections'] = []
for x in _dict.get('collections'):
    args['collections'].append(CollectionObjects.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_visual_recognition_v4.py', 'test.unit.test_visual_recognition_v4', 'TestModel_DetectedObjects', 'test_detected_objects_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/visual_recognition_v4.py,TestModel_Image,test_image_serialization,args['errors'] = [Error.from_dict(x) for x in _dict.get('errors')],"
args['errors'] = []
for x in _dict.get('errors'):
    args['errors'].append(Error.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_visual_recognition_v4.py', 'test.unit.test_visual_recognition_v4', 'TestModel_Image', 'test_image_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/visual_recognition_v4.py,TestModel_ImageDetails,test_image_details_serialization,args['errors'] = [Error.from_dict(x) for x in _dict.get('errors')],"
args['errors'] = []
for x in _dict.get('errors'):
    args['errors'].append(Error.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_visual_recognition_v4.py', 'test.unit.test_visual_recognition_v4', 'TestModel_ImageDetails', 'test_image_details_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/visual_recognition_v4.py,TestModel_ImageDetailsList,test_image_details_list_serialization,args['images'] = [ImageDetails.from_dict(x) for x in _dict.get('images')],"
args['images'] = []
for x in _dict.get('images'):
    args['images'].append(ImageDetails.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_visual_recognition_v4.py', 'test.unit.test_visual_recognition_v4', 'TestModel_ImageDetailsList', 'test_image_details_list_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/visual_recognition_v4.py,TestModel_ImageDetailsList,test_image_details_list_serialization,args['warnings'] = [Warning.from_dict(x) for x in _dict.get('warnings')],"
args['warnings'] = []
for x in _dict.get('warnings'):
    args['warnings'].append(Warning.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_visual_recognition_v4.py', 'test.unit.test_visual_recognition_v4', 'TestModel_ImageDetailsList', 'test_image_details_list_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/visual_recognition_v4.py,TestModel_ImageSummaryList,test_image_summary_list_serialization,args['images'] = [ImageSummary.from_dict(x) for x in _dict.get('images')],"
args['images'] = []
for x in _dict.get('images'):
    args['images'].append(ImageSummary.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_visual_recognition_v4.py', 'test.unit.test_visual_recognition_v4', 'TestModel_ImageSummaryList', 'test_image_summary_list_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/visual_recognition_v4.py,TestModel_ObjectMetadataList,test_object_metadata_list_serialization,args['objects'] = [ObjectMetadata.from_dict(x) for x in _dict.get('objects')],"
args['objects'] = []
for x in _dict.get('objects'):
    args['objects'].append(ObjectMetadata.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_visual_recognition_v4.py', 'test.unit.test_visual_recognition_v4', 'TestModel_ObjectMetadataList', 'test_object_metadata_list_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/visual_recognition_v4.py,TestModel_TrainingDataObjects,test_training_data_objects_serialization,args['objects'] = [TrainingDataObject.from_dict(x) for x in _dict.get('objects')],"
args['objects'] = []
for x in _dict.get('objects'):
    args['objects'].append(TrainingDataObject.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_visual_recognition_v4.py', 'test.unit.test_visual_recognition_v4', 'TestModel_TrainingDataObjects', 'test_training_data_objects_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/visual_recognition_v4.py,TestModel_TrainingEvents,test_training_events_serialization,args['events'] = [TrainingEvent.from_dict(x) for x in _dict.get('events')],"
args['events'] = []
for x in _dict.get('events'):
    args['events'].append(TrainingEvent.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_visual_recognition_v4.py', 'test.unit.test_visual_recognition_v4', 'TestModel_TrainingEvents', 'test_training_events_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/visual_recognition_v3.py,TestModel_ClassifiedImage,test_classified_image_serialization,args['classifiers'] = [ClassifierResult.from_dict(x) for x in _dict.get('classifiers')],"
args['classifiers'] = []
for x in _dict.get('classifiers'):
    args['classifiers'].append(ClassifierResult.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_visual_recognition_v3.py', 'test.unit.test_visual_recognition_v3', 'TestModel_ClassifiedImage', 'test_classified_image_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/visual_recognition_v3.py,TestModel_ClassifiedImages,test_classified_images_serialization,args['images'] = [ClassifiedImage.from_dict(x) for x in _dict.get('images')],"
args['images'] = []
for x in _dict.get('images'):
    args['images'].append(ClassifiedImage.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_visual_recognition_v3.py', 'test.unit.test_visual_recognition_v3', 'TestModel_ClassifiedImages', 'test_classified_images_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/visual_recognition_v3.py,TestModel_ClassifiedImages,test_classified_images_serialization,args['warnings'] = [WarningInfo.from_dict(x) for x in _dict.get('warnings')],"
args['warnings'] = []
for x in _dict.get('warnings'):
    args['warnings'].append(WarningInfo.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_visual_recognition_v3.py', 'test.unit.test_visual_recognition_v3', 'TestModel_ClassifiedImages', 'test_classified_images_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/visual_recognition_v3.py,TestModel_Classifier,test_classifier_serialization,args['classes'] = [Class.from_dict(x) for x in _dict.get('classes')],"
args['classes'] = []
for x in _dict.get('classes'):
    args['classes'].append(Class.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_visual_recognition_v3.py', 'test.unit.test_visual_recognition_v3', 'TestModel_Classifier', 'test_classifier_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_natural_language_classifier_v1.py', 'test.unit.test_natural_language_classifier_v1', 'TestModel_Classifier', 'test_classifier_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/visual_recognition_v3.py,TestModel_ClassifierResult,test_classifier_result_serialization,args['classes'] = [ClassResult.from_dict(x) for x in _dict.get('classes')],"
args['classes'] = []
for x in _dict.get('classes'):
    args['classes'].append(ClassResult.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_visual_recognition_v3.py', 'test.unit.test_visual_recognition_v3', 'TestModel_ClassifierResult', 'test_classifier_result_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/visual_recognition_v3.py,TestModel_Classifiers,test_classifiers_serialization,args['classifiers'] = [Classifier.from_dict(x) for x in _dict.get('classifiers')],"
args['classifiers'] = []
for x in _dict.get('classifiers'):
    args['classifiers'].append(Classifier.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_visual_recognition_v3.py', 'test.unit.test_visual_recognition_v3', 'TestModel_Classifiers', 'test_classifiers_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/personality_insights_v3.py,TestModel_ConsumptionPreferencesCategory,test_consumption_preferences_category_serialization,args['consumption_preferences'] = [ConsumptionPreferences.from_dict(x) for x in _dict.get('consumption_preferences')],"
args['consumption_preferences'] = []
for x in _dict.get('consumption_preferences'):
    args['consumption_preferences'].append(ConsumptionPreferences.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_personality_insights_v3.py', 'test.unit.test_personality_insights_v3', 'TestModel_ConsumptionPreferencesCategory', 'test_consumption_preferences_category_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/personality_insights_v3.py,TestModel_Content,test_content_serialization,args['content_items'] = [ContentItem.from_dict(x) for x in _dict.get('contentItems')],"
args['content_items'] = []
for x in _dict.get('contentItems'):
    args['content_items'].append(ContentItem.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_personality_insights_v3.py', 'test.unit.test_personality_insights_v3', 'TestModel_Content', 'test_content_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/personality_insights_v3.py,TestModel_Profile,test_profile_serialization,args['personality'] = [Trait.from_dict(x) for x in _dict.get('personality')],"
args['personality'] = []
for x in _dict.get('personality'):
    args['personality'].append(Trait.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_personality_insights_v3.py', 'test.unit.test_personality_insights_v3', 'TestModel_Profile', 'test_profile_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/personality_insights_v3.py,TestModel_Profile,test_profile_serialization,args['needs'] = [Trait.from_dict(x) for x in _dict.get('needs')],"
args['needs'] = []
for x in _dict.get('needs'):
    args['needs'].append(Trait.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_personality_insights_v3.py', 'test.unit.test_personality_insights_v3', 'TestModel_Profile', 'test_profile_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/personality_insights_v3.py,TestModel_Profile,test_profile_serialization,args['values'] = [Trait.from_dict(x) for x in _dict.get('values')],"
args['values'] = []
for x in _dict.get('values'):
    args['values'].append(Trait.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_personality_insights_v3.py', 'test.unit.test_personality_insights_v3', 'TestModel_Profile', 'test_profile_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/personality_insights_v3.py,TestModel_Profile,test_profile_serialization,args['behavior'] = [Behavior.from_dict(x) for x in _dict.get('behavior')],"
args['behavior'] = []
for x in _dict.get('behavior'):
    args['behavior'].append(Behavior.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_personality_insights_v3.py', 'test.unit.test_personality_insights_v3', 'TestModel_Profile', 'test_profile_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/personality_insights_v3.py,TestModel_Profile,test_profile_serialization,args['consumption_preferences'] = [ConsumptionPreferencesCategory.from_dict(x) for x in _dict.get('consumption_preferences')],"
args['consumption_preferences'] = []
for x in _dict.get('consumption_preferences'):
    args['consumption_preferences'].append(ConsumptionPreferencesCategory.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_personality_insights_v3.py', 'test.unit.test_personality_insights_v3', 'TestModel_Profile', 'test_profile_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/personality_insights_v3.py,TestModel_Profile,test_profile_serialization,args['warnings'] = [Warning.from_dict(x) for x in _dict.get('warnings')],"
args['warnings'] = []
for x in _dict.get('warnings'):
    args['warnings'].append(Warning.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_personality_insights_v3.py', 'test.unit.test_personality_insights_v3', 'TestModel_Profile', 'test_profile_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/personality_insights_v3.py,TestModel_Trait,test_trait_serialization,args['children'] = [Trait.from_dict(x) for x in _dict.get('children')],"
args['children'] = []
for x in _dict.get('children'):
    args['children'].append(Trait.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_personality_insights_v3.py', 'test.unit.test_personality_insights_v3', 'TestModel_Trait', 'test_trait_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_AlignedElement,test_aligned_element_serialization,args['element_pair'] = [ElementPair.from_dict(x) for x in _dict.get('element_pair')],"
args['element_pair'] = []
for x in _dict.get('element_pair'):
    args['element_pair'].append(ElementPair.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_AlignedElement', 'test_aligned_element_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_Batches,test_batches_serialization,args['batches'] = [BatchStatus.from_dict(x) for x in _dict.get('batches')],"
args['batches'] = []
for x in _dict.get('batches'):
    args['batches'].append(BatchStatus.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_Batches', 'test_batches_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_BodyCells,test_body_cells_serialization,args['attributes'] = [Attribute.from_dict(x) for x in _dict.get('attributes')],"
args['attributes'] = []
for x in _dict.get('attributes'):
    args['attributes'].append(Attribute.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_BodyCells', 'test_body_cells_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_ClassifyReturn,test_classify_return_serialization,args['elements'] = [Element.from_dict(x) for x in _dict.get('elements')],"
args['elements'] = []
for x in _dict.get('elements'):
    args['elements'].append(Element.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_ClassifyReturn', 'test_classify_return_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_ClassifyReturn,test_classify_return_serialization,args['effective_dates'] = [EffectiveDates.from_dict(x) for x in _dict.get('effective_dates')],"
args['effective_dates'] = []
for x in _dict.get('effective_dates'):
    args['effective_dates'].append(EffectiveDates.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_ClassifyReturn', 'test_classify_return_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_ClassifyReturn,test_classify_return_serialization,args['contract_amounts'] = [ContractAmts.from_dict(x) for x in _dict.get('contract_amounts')],"
args['contract_amounts'] = []
for x in _dict.get('contract_amounts'):
    args['contract_amounts'].append(ContractAmts.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_ClassifyReturn', 'test_classify_return_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_ClassifyReturn,test_classify_return_serialization,args['termination_dates'] = [TerminationDates.from_dict(x) for x in _dict.get('termination_dates')],"
args['termination_dates'] = []
for x in _dict.get('termination_dates'):
    args['termination_dates'].append(TerminationDates.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_ClassifyReturn', 'test_classify_return_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_ClassifyReturn,test_classify_return_serialization,args['contract_types'] = [ContractTypes.from_dict(x) for x in _dict.get('contract_types')],"
args['contract_types'] = []
for x in _dict.get('contract_types'):
    args['contract_types'].append(ContractTypes.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_ClassifyReturn', 'test_classify_return_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_ClassifyReturn,test_classify_return_serialization,args['contract_terms'] = [ContractTerms.from_dict(x) for x in _dict.get('contract_terms')],"
args['contract_terms'] = []
for x in _dict.get('contract_terms'):
    args['contract_terms'].append(ContractTerms.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_ClassifyReturn', 'test_classify_return_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_ClassifyReturn,test_classify_return_serialization,args['payment_terms'] = [PaymentTerms.from_dict(x) for x in _dict.get('payment_terms')],"
args['payment_terms'] = []
for x in _dict.get('payment_terms'):
    args['payment_terms'].append(PaymentTerms.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_ClassifyReturn', 'test_classify_return_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_ClassifyReturn,test_classify_return_serialization,args['contract_currencies'] = [ContractCurrencies.from_dict(x) for x in _dict.get('contract_currencies')],"
args['contract_currencies'] = []
for x in _dict.get('contract_currencies'):
    args['contract_currencies'].append(ContractCurrencies.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_ClassifyReturn', 'test_classify_return_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_ClassifyReturn,test_classify_return_serialization,args['tables'] = [Tables.from_dict(x) for x in _dict.get('tables')],"
args['tables'] = []
for x in _dict.get('tables'):
    args['tables'].append(Tables.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_ClassifyReturn', 'test_classify_return_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_ClassifyReturn,test_classify_return_serialization,args['parties'] = [Parties.from_dict(x) for x in _dict.get('parties')],"
args['parties'] = []
for x in _dict.get('parties'):
    args['parties'].append(Parties.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_ClassifyReturn', 'test_classify_return_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_CompareReturn,test_compare_return_serialization,args['documents'] = [Document.from_dict(x) for x in _dict.get('documents')],"
args['documents'] = []
for x in _dict.get('documents'):
    args['documents'].append(Document.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_CompareReturn', 'test_compare_return_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_CompareReturn,test_compare_return_serialization,args['aligned_elements'] = [AlignedElement.from_dict(x) for x in _dict.get('aligned_elements')],"
args['aligned_elements'] = []
for x in _dict.get('aligned_elements'):
    args['aligned_elements'].append(AlignedElement.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_CompareReturn', 'test_compare_return_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_CompareReturn,test_compare_return_serialization,args['unaligned_elements'] = [UnalignedElement.from_dict(x) for x in _dict.get('unaligned_elements')],"
args['unaligned_elements'] = []
for x in _dict.get('unaligned_elements'):
    args['unaligned_elements'].append(UnalignedElement.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_CompareReturn', 'test_compare_return_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_DocStructure,test_doc_structure_serialization,args['section_titles'] = [SectionTitles.from_dict(x) for x in _dict.get('section_titles')],"
args['section_titles'] = []
for x in _dict.get('section_titles'):
    args['section_titles'].append(SectionTitles.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_DocStructure', 'test_doc_structure_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_DocStructure,test_doc_structure_serialization,args['leading_sentences'] = [LeadingSentence.from_dict(x) for x in _dict.get('leading_sentences')],"
args['leading_sentences'] = []
for x in _dict.get('leading_sentences'):
    args['leading_sentences'].append(LeadingSentence.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_DocStructure', 'test_doc_structure_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_DocStructure,test_doc_structure_serialization,args['paragraphs'] = [Paragraphs.from_dict(x) for x in _dict.get('paragraphs')],"
args['paragraphs'] = []
for x in _dict.get('paragraphs'):
    args['paragraphs'].append(Paragraphs.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_DocStructure', 'test_doc_structure_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_Element,test_element_serialization,args['types'] = [TypeLabel.from_dict(x) for x in _dict.get('types')],"
args['types'] = []
for x in _dict.get('types'):
    args['types'].append(TypeLabel.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_Element', 'test_element_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_Element,test_element_serialization,args['categories'] = [Category.from_dict(x) for x in _dict.get('categories')],"
args['categories'] = []
for x in _dict.get('categories'):
    args['categories'].append(Category.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_Element', 'test_element_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_Element,test_element_serialization,args['attributes'] = [Attribute.from_dict(x) for x in _dict.get('attributes')],"
args['attributes'] = []
for x in _dict.get('attributes'):
    args['attributes'].append(Attribute.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_Element', 'test_element_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_ElementPair,test_element_pair_serialization,args['types'] = [TypeLabelComparison.from_dict(x) for x in _dict.get('types')],"
args['types'] = []
for x in _dict.get('types'):
    args['types'].append(TypeLabelComparison.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_ElementPair', 'test_element_pair_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_ElementPair,test_element_pair_serialization,args['categories'] = [CategoryComparison.from_dict(x) for x in _dict.get('categories')],"
args['categories'] = []
for x in _dict.get('categories'):
    args['categories'].append(CategoryComparison.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_ElementPair', 'test_element_pair_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_ElementPair,test_element_pair_serialization,args['attributes'] = [Attribute.from_dict(x) for x in _dict.get('attributes')],"
args['attributes'] = []
for x in _dict.get('attributes'):
    args['attributes'].append(Attribute.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_ElementPair', 'test_element_pair_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_FeedbackList,test_feedback_list_serialization,args['feedback'] = [GetFeedback.from_dict(x) for x in _dict.get('feedback')],"
args['feedback'] = []
for x in _dict.get('feedback'):
    args['feedback'].append(GetFeedback.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_FeedbackList', 'test_feedback_list_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_KeyValuePair,test_key_value_pair_serialization,args['value'] = [Value.from_dict(x) for x in _dict.get('value')],"
args['value'] = []
for x in _dict.get('value'):
    args['value'].append(Value.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_KeyValuePair', 'test_key_value_pair_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_LeadingSentence,test_leading_sentence_serialization,args['element_locations'] = [ElementLocations.from_dict(x) for x in _dict.get('element_locations')],"
args['element_locations'] = []
for x in _dict.get('element_locations'):
    args['element_locations'].append(ElementLocations.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_LeadingSentence', 'test_leading_sentence_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_OriginalLabelsIn,test_original_labels_in_serialization,args['types'] = [TypeLabel.from_dict(x) for x in _dict.get('types')],"
args['types'] = []
for x in _dict.get('types'):
    args['types'].append(TypeLabel.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_OriginalLabelsIn', 'test_original_labels_in_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_OriginalLabelsIn,test_original_labels_in_serialization,args['categories'] = [Category.from_dict(x) for x in _dict.get('categories')],"
args['categories'] = []
for x in _dict.get('categories'):
    args['categories'].append(Category.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_OriginalLabelsIn', 'test_original_labels_in_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_OriginalLabelsOut,test_original_labels_out_serialization,args['types'] = [TypeLabel.from_dict(x) for x in _dict.get('types')],"
args['types'] = []
for x in _dict.get('types'):
    args['types'].append(TypeLabel.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_OriginalLabelsOut', 'test_original_labels_out_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_OriginalLabelsOut,test_original_labels_out_serialization,args['categories'] = [Category.from_dict(x) for x in _dict.get('categories')],"
args['categories'] = []
for x in _dict.get('categories'):
    args['categories'].append(Category.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_OriginalLabelsOut', 'test_original_labels_out_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_Parties,test_parties_serialization,args['addresses'] = [Address.from_dict(x) for x in _dict.get('addresses')],"
args['addresses'] = []
for x in _dict.get('addresses'):
    args['addresses'].append(Address.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_Parties', 'test_parties_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_Parties,test_parties_serialization,args['contacts'] = [Contact.from_dict(x) for x in _dict.get('contacts')],"
args['contacts'] = []
for x in _dict.get('contacts'):
    args['contacts'].append(Contact.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_Parties', 'test_parties_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_Parties,test_parties_serialization,args['mentions'] = [Mention.from_dict(x) for x in _dict.get('mentions')],"
args['mentions'] = []
for x in _dict.get('mentions'):
    args['mentions'].append(Mention.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_Parties', 'test_parties_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_SectionTitles,test_section_titles_serialization,args['element_locations'] = [ElementLocations.from_dict(x) for x in _dict.get('element_locations')],"
args['element_locations'] = []
for x in _dict.get('element_locations'):
    args['element_locations'].append(ElementLocations.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_SectionTitles', 'test_section_titles_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_TableReturn,test_table_return_serialization,args['tables'] = [Tables.from_dict(x) for x in _dict.get('tables')],"
args['tables'] = []
for x in _dict.get('tables'):
    args['tables'].append(Tables.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_TableReturn', 'test_table_return_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_Tables,test_tables_serialization,args['table_headers'] = [TableHeaders.from_dict(x) for x in _dict.get('table_headers')],"
args['table_headers'] = []
for x in _dict.get('table_headers'):
    args['table_headers'].append(TableHeaders.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_Tables', 'test_tables_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_Tables,test_tables_serialization,args['row_headers'] = [RowHeaders.from_dict(x) for x in _dict.get('row_headers')],"
args['row_headers'] = []
for x in _dict.get('row_headers'):
    args['row_headers'].append(RowHeaders.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_Tables', 'test_tables_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_Tables,test_tables_serialization,args['column_headers'] = [ColumnHeaders.from_dict(x) for x in _dict.get('column_headers')],"
args['column_headers'] = []
for x in _dict.get('column_headers'):
    args['column_headers'].append(ColumnHeaders.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_Tables', 'test_tables_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_Tables,test_tables_serialization,args['body_cells'] = [BodyCells.from_dict(x) for x in _dict.get('body_cells')],"
args['body_cells'] = []
for x in _dict.get('body_cells'):
    args['body_cells'].append(BodyCells.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_Tables', 'test_tables_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_Tables,test_tables_serialization,args['contexts'] = [Contexts.from_dict(x) for x in _dict.get('contexts')],"
args['contexts'] = []
for x in _dict.get('contexts'):
    args['contexts'].append(Contexts.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_Tables', 'test_tables_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_Tables,test_tables_serialization,args['key_value_pairs'] = [KeyValuePair.from_dict(x) for x in _dict.get('key_value_pairs')],"
args['key_value_pairs'] = []
for x in _dict.get('key_value_pairs'):
    args['key_value_pairs'].append(KeyValuePair.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_Tables', 'test_tables_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_UnalignedElement,test_unaligned_element_serialization,args['types'] = [TypeLabelComparison.from_dict(x) for x in _dict.get('types')],"
args['types'] = []
for x in _dict.get('types'):
    args['types'].append(TypeLabelComparison.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_UnalignedElement', 'test_unaligned_element_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_UnalignedElement,test_unaligned_element_serialization,args['categories'] = [CategoryComparison.from_dict(x) for x in _dict.get('categories')],"
args['categories'] = []
for x in _dict.get('categories'):
    args['categories'].append(CategoryComparison.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_UnalignedElement', 'test_unaligned_element_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_UnalignedElement,test_unaligned_element_serialization,args['attributes'] = [Attribute.from_dict(x) for x in _dict.get('attributes')],"
args['attributes'] = []
for x in _dict.get('attributes'):
    args['attributes'].append(Attribute.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_UnalignedElement', 'test_unaligned_element_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_UpdatedLabelsIn,test_updated_labels_in_serialization,args['types'] = [TypeLabel.from_dict(x) for x in _dict.get('types')],"
args['types'] = []
for x in _dict.get('types'):
    args['types'].append(TypeLabel.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_UpdatedLabelsIn', 'test_updated_labels_in_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_UpdatedLabelsIn,test_updated_labels_in_serialization,args['categories'] = [Category.from_dict(x) for x in _dict.get('categories')],"
args['categories'] = []
for x in _dict.get('categories'):
    args['categories'].append(Category.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_UpdatedLabelsIn', 'test_updated_labels_in_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_UpdatedLabelsOut,test_updated_labels_out_serialization,args['types'] = [TypeLabel.from_dict(x) for x in _dict.get('types')],"
args['types'] = []
for x in _dict.get('types'):
    args['types'].append(TypeLabel.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_UpdatedLabelsOut', 'test_updated_labels_out_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/compare_comply_v1.py,TestModel_UpdatedLabelsOut,test_updated_labels_out_serialization,args['categories'] = [Category.from_dict(x) for x in _dict.get('categories')],"
args['categories'] = []
for x in _dict.get('categories'):
    args['categories'].append(Category.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_compare_comply_v1.py', 'test.unit.test_compare_comply_v1', 'TestModel_UpdatedLabelsOut', 'test_updated_labels_out_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/natural_language_classifier_v1.py,TestModel_Classification,test_classification_serialization,args['classes'] = [ClassifiedClass.from_dict(x) for x in _dict.get('classes')],"
args['classes'] = []
for x in _dict.get('classes'):
    args['classes'].append(ClassifiedClass.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_natural_language_classifier_v1.py', 'test.unit.test_natural_language_classifier_v1', 'TestModel_Classification', 'test_classification_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/natural_language_classifier_v1.py,TestModel_ClassificationCollection,test_classification_collection_serialization,args['collection'] = [CollectionItem.from_dict(x) for x in _dict.get('collection')],"
args['collection'] = []
for x in _dict.get('collection'):
    args['collection'].append(CollectionItem.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_natural_language_classifier_v1.py', 'test.unit.test_natural_language_classifier_v1', 'TestModel_ClassificationCollection', 'test_classification_collection_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/natural_language_classifier_v1.py,TestModel_ClassifierList,test_classifier_list_serialization,args['classifiers'] = [Classifier.from_dict(x) for x in _dict.get('classifiers')],"
args['classifiers'] = []
for x in _dict.get('classifiers'):
    args['classifiers'].append(Classifier.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_natural_language_classifier_v1.py', 'test.unit.test_natural_language_classifier_v1', 'TestModel_ClassifierList', 'test_classifier_list_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/natural_language_classifier_v1.py,TestModel_CollectionItem,test_collection_item_serialization,args['classes'] = [ClassifiedClass.from_dict(x) for x in _dict.get('classes')],"
args['classes'] = []
for x in _dict.get('classes'):
    args['classes'].append(ClassifiedClass.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_natural_language_classifier_v1.py', 'test.unit.test_natural_language_classifier_v1', 'TestModel_CollectionItem', 'test_collection_item_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v2.py,TestModel_BulkClassifyOutput,test_bulk_classify_output_serialization,args['entities'] = [RuntimeEntity.from_dict(x) for x in _dict.get('entities')],"
args['entities'] = []
for x in _dict.get('entities'):
    args['entities'].append(RuntimeEntity.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_BulkClassifyOutput', 'test_bulk_classify_output_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_BulkClassifyOutput', 'test_bulk_classify_output_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v2.py,TestModel_BulkClassifyOutput,test_bulk_classify_output_serialization,args['intents'] = [RuntimeIntent.from_dict(x) for x in _dict.get('intents')],"
args['intents'] = []
for x in _dict.get('intents'):
    args['intents'].append(RuntimeIntent.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_BulkClassifyOutput', 'test_bulk_classify_output_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_BulkClassifyOutput', 'test_bulk_classify_output_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v2.py,TestModel_BulkClassifyResponse,test_bulk_classify_response_serialization,args['output'] = [BulkClassifyOutput.from_dict(x) for x in _dict.get('output')],"
args['output'] = []
for x in _dict.get('output'):
    args['output'].append(BulkClassifyOutput.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_BulkClassifyResponse', 'test_bulk_classify_response_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_BulkClassifyResponse', 'test_bulk_classify_response_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v2.py,TestModel_LogCollection,test_log_collection_serialization,args['logs'] = [Log.from_dict(x) for x in _dict.get('logs')],"
args['logs'] = []
for x in _dict.get('logs'):
    args['logs'].append(Log.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_LogCollection', 'test_log_collection_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_LogCollection', 'test_log_collection_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v2.py,TestModel_MessageInput,test_message_input_serialization,args['intents'] = [RuntimeIntent.from_dict(x) for x in _dict.get('intents')],"
args['intents'] = []
for x in _dict.get('intents'):
    args['intents'].append(RuntimeIntent.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_MessageInput', 'test_message_input_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_MessageInput', 'test_message_input_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v2.py,TestModel_MessageInput,test_message_input_serialization,args['entities'] = [RuntimeEntity.from_dict(x) for x in _dict.get('entities')],"
args['entities'] = []
for x in _dict.get('entities'):
    args['entities'].append(RuntimeEntity.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_MessageInput', 'test_message_input_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_MessageInput', 'test_message_input_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v2.py,TestModel_MessageInputStateless,test_message_input_stateless_serialization,args['intents'] = [RuntimeIntent.from_dict(x) for x in _dict.get('intents')],"
args['intents'] = []
for x in _dict.get('intents'):
    args['intents'].append(RuntimeIntent.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_MessageInputStateless', 'test_message_input_stateless_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v2.py,TestModel_MessageInputStateless,test_message_input_stateless_serialization,args['entities'] = [RuntimeEntity.from_dict(x) for x in _dict.get('entities')],"
args['entities'] = []
for x in _dict.get('entities'):
    args['entities'].append(RuntimeEntity.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_MessageInputStateless', 'test_message_input_stateless_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v2.py,TestModel_MessageOutput,test_message_output_serialization,args['generic'] = [RuntimeResponseGeneric.from_dict(x) for x in _dict.get('generic')],"
args['generic'] = []
for x in _dict.get('generic'):
    args['generic'].append(RuntimeResponseGeneric.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_MessageOutput', 'test_message_output_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v2.py,TestModel_MessageOutput,test_message_output_serialization,args['intents'] = [RuntimeIntent.from_dict(x) for x in _dict.get('intents')],"
args['intents'] = []
for x in _dict.get('intents'):
    args['intents'].append(RuntimeIntent.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_MessageOutput', 'test_message_output_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v2.py,TestModel_MessageOutput,test_message_output_serialization,args['entities'] = [RuntimeEntity.from_dict(x) for x in _dict.get('entities')],"
args['entities'] = []
for x in _dict.get('entities'):
    args['entities'].append(RuntimeEntity.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_MessageOutput', 'test_message_output_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v2.py,TestModel_MessageOutput,test_message_output_serialization,args['actions'] = [DialogNodeAction.from_dict(x) for x in _dict.get('actions')],"
args['actions'] = []
for x in _dict.get('actions'):
    args['actions'].append(DialogNodeAction.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_MessageOutput', 'test_message_output_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v2.py,TestModel_MessageOutputDebug,test_message_output_debug_serialization,args['nodes_visited'] = [DialogNodesVisited.from_dict(x) for x in _dict.get('nodes_visited')],"
args['nodes_visited'] = []
for x in _dict.get('nodes_visited'):
    args['nodes_visited'].append(DialogNodesVisited.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_MessageOutputDebug', 'test_message_output_debug_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v2.py,TestModel_MessageOutputDebug,test_message_output_debug_serialization,args['log_messages'] = [DialogLogMessage.from_dict(x) for x in _dict.get('log_messages')],"
args['log_messages'] = []
for x in _dict.get('log_messages'):
    args['log_messages'].append(DialogLogMessage.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_MessageOutputDebug', 'test_message_output_debug_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v2.py,TestModel_RuntimeEntity,test_runtime_entity_serialization,args['groups'] = [CaptureGroup.from_dict(x) for x in _dict.get('groups')],"
args['groups'] = []
for x in _dict.get('groups'):
    args['groups'].append(CaptureGroup.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_RuntimeEntity', 'test_runtime_entity_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_RuntimeEntity', 'test_runtime_entity_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v2.py,TestModel_RuntimeEntity,test_runtime_entity_serialization,args['alternatives'] = [RuntimeEntityAlternative.from_dict(x) for x in _dict.get('alternatives')],"
args['alternatives'] = []
for x in _dict.get('alternatives'):
    args['alternatives'].append(RuntimeEntityAlternative.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_RuntimeEntity', 'test_runtime_entity_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_RuntimeEntity', 'test_runtime_entity_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v2.py,TestModel_SearchResult,test_search_result_serialization,args['answers'] = [SearchResultAnswer.from_dict(x) for x in _dict.get('answers')],"
args['answers'] = []
for x in _dict.get('answers'):
    args['answers'].append(SearchResultAnswer.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_SearchResult', 'test_search_result_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v2.py,TestModel_RuntimeResponseGenericRuntimeResponseTypeChannelTransfer,test_runtime_response_generic_runtime_response_type_channel_transfer_serialization,args['channels'] = [ResponseGenericChannel.from_dict(x) for x in _dict.get('channels')],"
args['channels'] = []
for x in _dict.get('channels'):
    args['channels'].append(ResponseGenericChannel.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_RuntimeResponseGenericRuntimeResponseTypeChannelTransfer', 'test_runtime_response_generic_runtime_response_type_channel_transfer_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_RuntimeResponseGenericRuntimeResponseTypeChannelTransfer', 'test_runtime_response_generic_runtime_response_type_channel_transfer_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v2.py,TestModel_RuntimeResponseGenericRuntimeResponseTypeConnectToAgent,test_runtime_response_generic_runtime_response_type_connect_to_agent_serialization,args['channels'] = [ResponseGenericChannel.from_dict(x) for x in _dict.get('channels')],"
args['channels'] = []
for x in _dict.get('channels'):
    args['channels'].append(ResponseGenericChannel.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_RuntimeResponseGenericRuntimeResponseTypeConnectToAgent', 'test_runtime_response_generic_runtime_response_type_connect_to_agent_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_RuntimeResponseGenericRuntimeResponseTypeConnectToAgent', 'test_runtime_response_generic_runtime_response_type_connect_to_agent_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v2.py,TestModel_RuntimeResponseGenericRuntimeResponseTypeImage,test_runtime_response_generic_runtime_response_type_image_serialization,args['channels'] = [ResponseGenericChannel.from_dict(x) for x in _dict.get('channels')],"
args['channels'] = []
for x in _dict.get('channels'):
    args['channels'].append(ResponseGenericChannel.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_RuntimeResponseGenericRuntimeResponseTypeImage', 'test_runtime_response_generic_runtime_response_type_image_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_RuntimeResponseGenericRuntimeResponseTypeImage', 'test_runtime_response_generic_runtime_response_type_image_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v2.py,TestModel_RuntimeResponseGenericRuntimeResponseTypeOption,test_runtime_response_generic_runtime_response_type_option_serialization,args['options'] = [DialogNodeOutputOptionsElement.from_dict(x) for x in _dict.get('options')],"
args['options'] = []
for x in _dict.get('options'):
    args['options'].append(DialogNodeOutputOptionsElement.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_RuntimeResponseGenericRuntimeResponseTypeOption', 'test_runtime_response_generic_runtime_response_type_option_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_RuntimeResponseGenericRuntimeResponseTypeOption', 'test_runtime_response_generic_runtime_response_type_option_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v2.py,TestModel_RuntimeResponseGenericRuntimeResponseTypeOption,test_runtime_response_generic_runtime_response_type_option_serialization,args['channels'] = [ResponseGenericChannel.from_dict(x) for x in _dict.get('channels')],"
args['channels'] = []
for x in _dict.get('channels'):
    args['channels'].append(ResponseGenericChannel.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_RuntimeResponseGenericRuntimeResponseTypeOption', 'test_runtime_response_generic_runtime_response_type_option_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_RuntimeResponseGenericRuntimeResponseTypeOption', 'test_runtime_response_generic_runtime_response_type_option_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v2.py,TestModel_RuntimeResponseGenericRuntimeResponseTypePause,test_runtime_response_generic_runtime_response_type_pause_serialization,args['channels'] = [ResponseGenericChannel.from_dict(x) for x in _dict.get('channels')],"
args['channels'] = []
for x in _dict.get('channels'):
    args['channels'].append(ResponseGenericChannel.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_RuntimeResponseGenericRuntimeResponseTypePause', 'test_runtime_response_generic_runtime_response_type_pause_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_RuntimeResponseGenericRuntimeResponseTypePause', 'test_runtime_response_generic_runtime_response_type_pause_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v2.py,TestModel_RuntimeResponseGenericRuntimeResponseTypeSearch,test_runtime_response_generic_runtime_response_type_search_serialization,args['primary_results'] = [SearchResult.from_dict(x) for x in _dict.get('primary_results')],"
args['primary_results'] = []
for x in _dict.get('primary_results'):
    args['primary_results'].append(SearchResult.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_RuntimeResponseGenericRuntimeResponseTypeSearch', 'test_runtime_response_generic_runtime_response_type_search_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v2.py,TestModel_RuntimeResponseGenericRuntimeResponseTypeSearch,test_runtime_response_generic_runtime_response_type_search_serialization,args['additional_results'] = [SearchResult.from_dict(x) for x in _dict.get('additional_results')],"
args['additional_results'] = []
for x in _dict.get('additional_results'):
    args['additional_results'].append(SearchResult.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_RuntimeResponseGenericRuntimeResponseTypeSearch', 'test_runtime_response_generic_runtime_response_type_search_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v2.py,TestModel_RuntimeResponseGenericRuntimeResponseTypeSearch,test_runtime_response_generic_runtime_response_type_search_serialization,args['channels'] = [ResponseGenericChannel.from_dict(x) for x in _dict.get('channels')],"
args['channels'] = []
for x in _dict.get('channels'):
    args['channels'].append(ResponseGenericChannel.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_RuntimeResponseGenericRuntimeResponseTypeSearch', 'test_runtime_response_generic_runtime_response_type_search_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v2.py,TestModel_RuntimeResponseGenericRuntimeResponseTypeSuggestion,test_runtime_response_generic_runtime_response_type_suggestion_serialization,args['suggestions'] = [DialogSuggestion.from_dict(x) for x in _dict.get('suggestions')],"
args['suggestions'] = []
for x in _dict.get('suggestions'):
    args['suggestions'].append(DialogSuggestion.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_RuntimeResponseGenericRuntimeResponseTypeSuggestion', 'test_runtime_response_generic_runtime_response_type_suggestion_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_RuntimeResponseGenericRuntimeResponseTypeSuggestion', 'test_runtime_response_generic_runtime_response_type_suggestion_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v2.py,TestModel_RuntimeResponseGenericRuntimeResponseTypeSuggestion,test_runtime_response_generic_runtime_response_type_suggestion_serialization,args['channels'] = [ResponseGenericChannel.from_dict(x) for x in _dict.get('channels')],"
args['channels'] = []
for x in _dict.get('channels'):
    args['channels'].append(ResponseGenericChannel.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_RuntimeResponseGenericRuntimeResponseTypeSuggestion', 'test_runtime_response_generic_runtime_response_type_suggestion_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_RuntimeResponseGenericRuntimeResponseTypeSuggestion', 'test_runtime_response_generic_runtime_response_type_suggestion_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v2.py,TestModel_RuntimeResponseGenericRuntimeResponseTypeText,test_runtime_response_generic_runtime_response_type_text_serialization,args['channels'] = [ResponseGenericChannel.from_dict(x) for x in _dict.get('channels')],"
args['channels'] = []
for x in _dict.get('channels'):
    args['channels'].append(ResponseGenericChannel.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_RuntimeResponseGenericRuntimeResponseTypeText', 'test_runtime_response_generic_runtime_response_type_text_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_RuntimeResponseGenericRuntimeResponseTypeText', 'test_runtime_response_generic_runtime_response_type_text_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/assistant_v2.py,TestModel_RuntimeResponseGenericRuntimeResponseTypeUserDefined,test_runtime_response_generic_runtime_response_type_user_defined_serialization,args['channels'] = [ResponseGenericChannel.from_dict(x) for x in _dict.get('channels')],"
args['channels'] = []
for x in _dict.get('channels'):
    args['channels'].append(ResponseGenericChannel.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v1.py', 'test.unit.test_assistant_v1', 'TestModel_RuntimeResponseGenericRuntimeResponseTypeUserDefined', 'test_runtime_response_generic_runtime_response_type_user_defined_serialization'], ['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_assistant_v2.py', 'test.unit.test_assistant_v2', 'TestModel_RuntimeResponseGenericRuntimeResponseTypeUserDefined', 'test_runtime_response_generic_runtime_response_type_user_defined_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/tone_analyzer_v3.py,TestModel_DocumentAnalysis,test_document_analysis_serialization,args['tones'] = [ToneScore.from_dict(x) for x in _dict.get('tones')],"
args['tones'] = []
for x in _dict.get('tones'):
    args['tones'].append(ToneScore.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_tone_analyzer_v3.py', 'test.unit.test_tone_analyzer_v3', 'TestModel_DocumentAnalysis', 'test_document_analysis_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/tone_analyzer_v3.py,TestModel_DocumentAnalysis,test_document_analysis_serialization,args['tone_categories'] = [ToneCategory.from_dict(x) for x in _dict.get('tone_categories')],"
args['tone_categories'] = []
for x in _dict.get('tone_categories'):
    args['tone_categories'].append(ToneCategory.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_tone_analyzer_v3.py', 'test.unit.test_tone_analyzer_v3', 'TestModel_DocumentAnalysis', 'test_document_analysis_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/tone_analyzer_v3.py,TestModel_SentenceAnalysis,test_sentence_analysis_serialization,args['tones'] = [ToneScore.from_dict(x) for x in _dict.get('tones')],"
args['tones'] = []
for x in _dict.get('tones'):
    args['tones'].append(ToneScore.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_tone_analyzer_v3.py', 'test.unit.test_tone_analyzer_v3', 'TestModel_SentenceAnalysis', 'test_sentence_analysis_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/tone_analyzer_v3.py,TestModel_SentenceAnalysis,test_sentence_analysis_serialization,args['tone_categories'] = [ToneCategory.from_dict(x) for x in _dict.get('tone_categories')],"
args['tone_categories'] = []
for x in _dict.get('tone_categories'):
    args['tone_categories'].append(ToneCategory.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_tone_analyzer_v3.py', 'test.unit.test_tone_analyzer_v3', 'TestModel_SentenceAnalysis', 'test_sentence_analysis_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/tone_analyzer_v3.py,TestModel_ToneAnalysis,test_tone_analysis_serialization,args['sentences_tone'] = [SentenceAnalysis.from_dict(x) for x in _dict.get('sentences_tone')],"
args['sentences_tone'] = []
for x in _dict.get('sentences_tone'):
    args['sentences_tone'].append(SentenceAnalysis.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_tone_analyzer_v3.py', 'test.unit.test_tone_analyzer_v3', 'TestModel_ToneAnalysis', 'test_tone_analysis_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/tone_analyzer_v3.py,TestModel_ToneCategory,test_tone_category_serialization,args['tones'] = [ToneScore.from_dict(x) for x in _dict.get('tones')],"
args['tones'] = []
for x in _dict.get('tones'):
    args['tones'].append(ToneScore.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_tone_analyzer_v3.py', 'test.unit.test_tone_analyzer_v3', 'TestModel_ToneCategory', 'test_tone_category_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/tone_analyzer_v3.py,TestModel_UtteranceAnalyses,test_utterance_analyses_serialization,args['utterances_tone'] = [UtteranceAnalysis.from_dict(x) for x in _dict.get('utterances_tone')],"
args['utterances_tone'] = []
for x in _dict.get('utterances_tone'):
    args['utterances_tone'].append(UtteranceAnalysis.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_tone_analyzer_v3.py', 'test.unit.test_tone_analyzer_v3', 'TestModel_UtteranceAnalyses', 'test_utterance_analyses_serialization']]"
python-sdk,https://github.com/qiniu/python-sdk/tree/master/ibm_watson/tone_analyzer_v3.py,TestModel_UtteranceAnalysis,test_utterance_analysis_serialization,args['tones'] = [ToneChatScore.from_dict(x) for x in _dict.get('tones')],"
args['tones'] = []
for x in _dict.get('tones'):
    args['tones'].append(ToneChatScore.from_dict(x))
",1,"[['https://github.com/qiniu/python-sdk/tree/master/test/unit/test_tone_analyzer_v3.py', 'test.unit.test_tone_analyzer_v3', 'TestModel_UtteranceAnalysis', 'test_utterance_analysis_serialization']]"
thunder,https://github.com/thunder-project/thunder/tree/master/thunder/readers.py,,test_local_nested,files = [fpath for fpath in files if not os.path.isdir(fpath)],"tmp_ListComp0 = []
for fpath in files:
    if not os.path.isdir(fpath):
        tmp_ListComp0.append(fpath)

files = tmp_ListComp0
",1,"[['https://github.com/thunder-project/thunder/tree/master/test/test_readers.py', 'test.test_readers', '', 'test_local_recursive_flat'], ['https://github.com/thunder-project/thunder/tree/master/test/test_readers.py', 'test.test_readers', '', 'test_local_recursive_nested'], ['https://github.com/thunder-project/thunder/tree/master/test/test_readers.py', 'test.test_readers', '', 'test_local_flat'], ['https://github.com/thunder-project/thunder/tree/master/test/test_readers.py', 'test.test_readers', '', 'test_local_nested']]"
troposphere,https://github.com/cloudtools/troposphere/tree/master/troposphere/awslambda.py,TestAWSLambda,test_check_zip_file,"v_lengths = [len(v) for v in values if isinstance(v, str)]","
v_lengths = []
for v in values:
    if isinstance(v, str):
        v_lengths.append(len(v))
",1,"[['https://github.com/cloudtools/troposphere/tree/master/tests/test_awslambda.py', 'tests.test_awslambda', 'TestAWSLambda', 'test_check_zip_file']]"
troposphere,https://github.com/cloudtools/troposphere/tree/master/troposphere/rds.py,TestRDS,test_az_and_multiaz_funcs,invalid_properties = [s for s in self.properties.keys() if s in invalid_replica_properties],"
invalid_properties = []
for s in self.properties.keys():
    if s in invalid_replica_properties:
        invalid_properties.append(s)
",1,"[['https://github.com/cloudtools/troposphere/tree/master/tests/test_rds.py', 'tests.test_rds', 'TestRDS', 'test_az_and_multiaz_funcs']]"
yake,https://github.com/LIAAD/yake/tree/master/yake/yake.py,,test_null_and_blank_example,"todedup = sorted([cc for cc in dc.candidates.values() if cc.isValid()], key=lambda c: c.H)","tmp_ListComp0 = []
for cc in dc.candidates.values():
    if cc.isValid():
        tmp_ListComp0.append(cc)

todedup = sorted(tmp_ListComp0, key=lambda c: c.H)
",1,"[['https://github.com/LIAAD/yake/tree/master/tests/test_yake.py', 'tests.test_yake', '', 'test_n1_EN'], ['https://github.com/LIAAD/yake/tree/master/tests/test_yake.py', 'tests.test_yake', '', 'test_n3_PT'], ['https://github.com/LIAAD/yake/tree/master/tests/test_yake.py', 'tests.test_yake', '', 'test_phraseless_example'], ['https://github.com/LIAAD/yake/tree/master/tests/test_yake.py', 'tests.test_yake', '', 'test_n3_EN'], ['https://github.com/LIAAD/yake/tree/master/tests/test_yake.py', 'tests.test_yake', '', 'test_null_and_blank_example']]"
yake,https://github.com/LIAAD/yake/tree/master/yake/yake.py,,test_null_and_blank_example,"return [(cand.kw, h) for (h, cand) in resultSet]","tmp_ListComp0 = []
for (h, cand) in resultSet:
    tmp_ListComp0.append((cand.kw, h))

return tmp_ListComp0
",1,"[['https://github.com/LIAAD/yake/tree/master/tests/test_yake.py', 'tests.test_yake', '', 'test_n1_EN'], ['https://github.com/LIAAD/yake/tree/master/tests/test_yake.py', 'tests.test_yake', '', 'test_n3_PT'], ['https://github.com/LIAAD/yake/tree/master/tests/test_yake.py', 'tests.test_yake', '', 'test_phraseless_example'], ['https://github.com/LIAAD/yake/tree/master/tests/test_yake.py', 'tests.test_yake', '', 'test_n3_EN'], ['https://github.com/LIAAD/yake/tree/master/tests/test_yake.py', 'tests.test_yake', '', 'test_null_and_blank_example']]"
yake,https://github.com/LIAAD/yake/tree/master/yake/yake.py,,test_null_and_blank_example,"return [(cand.H, cand.unique_kw) for cand in todedup][:self.top]","tmp_ListComp0 = []
for cand in todedup:
    tmp_ListComp0.append((cand.H, cand.unique_kw))

return tmp_ListComp0[:self.top]
",1,"[['https://github.com/LIAAD/yake/tree/master/tests/test_yake.py', 'tests.test_yake', '', 'test_n1_EN'], ['https://github.com/LIAAD/yake/tree/master/tests/test_yake.py', 'tests.test_yake', '', 'test_n3_PT'], ['https://github.com/LIAAD/yake/tree/master/tests/test_yake.py', 'tests.test_yake', '', 'test_phraseless_example'], ['https://github.com/LIAAD/yake/tree/master/tests/test_yake.py', 'tests.test_yake', '', 'test_n3_EN'], ['https://github.com/LIAAD/yake/tree/master/tests/test_yake.py', 'tests.test_yake', '', 'test_null_and_blank_example']]"
yake,https://github.com/LIAAD/yake/tree/master/yake/highlight.py,,test_n1_EN,kw_list = [x[0] for x in keywords],"
kw_list = []
for x in keywords:
    kw_list.append(x[0])
",1,"[['https://github.com/LIAAD/yake/tree/master/tests/test_yake.py', 'tests.test_yake', '', 'test_n3_EN'], ['https://github.com/LIAAD/yake/tree/master/tests/test_yake.py', 'tests.test_yake', '', 'test_n3_PT'], ['https://github.com/LIAAD/yake/tree/master/tests/test_yake.py', 'tests.test_yake', '', 'test_n1_EN']]"
beartype,https://github.com/beartype/beartype/tree/master/beartype_test/a00_unit/data/pep/pep563/data_pep563_poem.py,,test_pep563_closure_nonnested,return [stanza.format(player_name=player_name) for stanza in _MINECRAFT_END_TXT_STANZAS if str(substr) in stanza],"tmp_ListComp0 = []
for stanza in _MINECRAFT_END_TXT_STANZAS:
    if str(substr) in stanza:
        tmp_ListComp0.append(stanza.format(player_name=player_name))

return tmp_ListComp0
",1,"[['https://github.com/beartype/beartype/tree/master/beartype_test/a00_unit/a10_pep/test_pep563.py', 'beartype_test.a00_unit.a10_pep.test_pep563', '', 'test_pep563_closure_nonnested']]"
beartype,https://github.com/beartype/beartype/tree/master/beartype_test/a00_unit/data/pep/pep563/data_pep563_poem.py,,test_pep563_closure_nonnested,return [stanza.format(player_name=player_name) for stanza in _MINECRAFT_END_TXT_STANZAS if str(substr) in stanza],"tmp_ListComp0 = []
for stanza in _MINECRAFT_END_TXT_STANZAS:
    if str(substr) in stanza:
        tmp_ListComp0.append(stanza.format(player_name=player_name))

return tmp_ListComp0
",1,"[['https://github.com/beartype/beartype/tree/master/beartype_test/a00_unit/a10_pep/test_pep563.py', 'beartype_test.a00_unit.a10_pep.test_pep563', '', 'test_pep563_closure_nonnested']]"
beartype,https://github.com/beartype/beartype/tree/master/beartype_test/a00_unit/data/pep/pep563/data_pep563_poem.py,,test_pep563_closure_nested,return [stanza.format(player_name=player_name) for stanza in _MINECRAFT_END_TXT_STANZAS if len(stanza) >= int(stanza_len_min) and len(stanza) <= int(stanza_len_max) and (str(substr) in stanza)],"tmp_ListComp0 = []
for stanza in _MINECRAFT_END_TXT_STANZAS:
    if len(stanza) >= int(stanza_len_min) and len(stanza) <= int(stanza_len_max) and (str(substr) in stanza):
        tmp_ListComp0.append(stanza.format(player_name=player_name))

return tmp_ListComp0
",1,"[['https://github.com/beartype/beartype/tree/master/beartype_test/a00_unit/a10_pep/test_pep563.py', 'beartype_test.a00_unit.a10_pep.test_pep563', '', 'test_pep563_closure_nested']]"
beartype,https://github.com/beartype/beartype/tree/master/beartype_test/a00_unit/data/pep/pep563/data_pep563_poem.py,,test_pep563_closure_nested,return [stanza.format(player_name=player_name) for stanza in _MINECRAFT_END_TXT_STANZAS if len(stanza) >= int(stanza_len_min) and len(stanza) <= int(stanza_len_max) and (str(substr) in stanza)],"tmp_ListComp0 = []
for stanza in _MINECRAFT_END_TXT_STANZAS:
    if len(stanza) >= int(stanza_len_min) and len(stanza) <= int(stanza_len_max) and (str(substr) in stanza):
        tmp_ListComp0.append(stanza.format(player_name=player_name))

return tmp_ListComp0
",1,"[['https://github.com/beartype/beartype/tree/master/beartype_test/a00_unit/a10_pep/test_pep563.py', 'beartype_test.a00_unit.a10_pep.test_pep563', '', 'test_pep563_closure_nested']]"
beartype,https://github.com/beartype/beartype/tree/master/beartype_test/a00_unit/data/pep/pep563/data_pep563_poem.py,,test_pep563_closure_nested,return [stanza.format(player_name=player_name) for stanza in _MINECRAFT_END_TXT_STANZAS if len(stanza) >= int(stanza_len_min) and len(stanza) <= int(stanza_len_max) and (str(substr) in stanza)],"tmp_ListComp0 = []
for stanza in _MINECRAFT_END_TXT_STANZAS:
    if len(stanza) >= int(stanza_len_min) and len(stanza) <= int(stanza_len_max) and (str(substr) in stanza):
        tmp_ListComp0.append(stanza.format(player_name=player_name))

return tmp_ListComp0
",1,"[['https://github.com/beartype/beartype/tree/master/beartype_test/a00_unit/a10_pep/test_pep563.py', 'beartype_test.a00_unit.a10_pep.test_pep563', '', 'test_pep563_closure_nested']]"
pampy,https://github.com/santinic/pampy/tree/master/pampy/pampy.py,IterableTests,test_match_iterable_with_tuples,"tail = [value for (pattern, value) in padded_pairs[i:] if value is not PaddedValue]","
tail = []
for (pattern, value) in padded_pairs[i:]:
    if value is not PaddedValue:
        tail.append(value)
",1,"[['https://github.com/santinic/pampy/tree/master/tests/test_iterable.py', 'tests.test_iterable', 'IterableTests', 'test_match_iterable_with_tuples']]"
graphite-api,https://github.com/brutasse/graphite-api/tree/master/graphite_api/encoders.py,EncoderTestCase,test_json_encoder,return [i for i in o],"tmp_ListComp0 = []
for i in o:
    tmp_ListComp0.append(i)

return tmp_ListComp0
",1,"[['https://github.com/brutasse/graphite-api/tree/master/tests/test_encoders.py', 'tests.test_encoders', 'EncoderTestCase', 'test_json_encoder']]"
graphite-api,https://github.com/brutasse/graphite-api/tree/master/graphite_api/intervals.py,IntervalTestCase,test_interval_set,intersections = [x for x in (i.intersect(j) for i in self.intervals for j in other.intervals) if x],"
intersections = []
for x in (i.intersect(j) for i in self.intervals for j in other.intervals):
    if x:
        intersections.append(x)
",1,"[['https://github.com/brutasse/graphite-api/tree/master/tests/test_intervals.py', 'tests.test_intervals', 'IntervalTestCase', 'test_interval_set']]"
graphite-api,https://github.com/brutasse/graphite-api/tree/master/graphite_api/carbonlink.py,ConsistentHashRingTest,test_chr_remove_node,self.ring = [entry for entry in self.ring if entry[1] != key],"tmp_ListComp0 = []
for entry in self.ring:
    if entry[1] != key:
        tmp_ListComp0.append(entry)

self.ring = tmp_ListComp0
",1,"[['https://github.com/brutasse/graphite-api/tree/master/tests/test_carbonlink.py', 'tests.test_carbonlink', 'ConsistentHashRingTest', 'test_chr_remove_node_missing'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_carbonlink.py', 'tests.test_carbonlink', 'ConsistentHashRingTest', 'test_chr_remove_node']]"
graphite-api,https://github.com/brutasse/graphite-api/tree/master/graphite_api/functions.py,FunctionsTest,test_safe_map_all_None,return [function(x) for x in safeValues],"tmp_ListComp0 = []
for x in safeValues:
    tmp_ListComp0.append(function(x))

return tmp_ListComp0
",1,"[['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_safe_map_mixed'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_safe_map_None'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_safe_map_empty_list'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_safe_map_all_numbers'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_safe_map_all_None']]"
graphite-api,https://github.com/brutasse/graphite-api/tree/master/graphite_api/_vendor/whisper.py,WhisperFinderTest,test_multiple_globstars,"oldest = max([secondsPerPoint * points for (secondsPerPoint, points) in archiveList])","tmp_ListComp0 = []
for (secondsPerPoint, points) in archiveList:
    tmp_ListComp0.append(secondsPerPoint * points)

oldest = max(tmp_ListComp0)
",1,"[['https://github.com/brutasse/graphite-api/tree/master/tests/test_finders.py', 'tests.test_finders', 'WhisperFinderTest', 'test_whisper_finder'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_finders.py', 'tests.test_finders', 'WhisperFinderTest', 'test_terminal_globstar'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_finders.py', 'tests.test_finders', 'WhisperFinderTest', 'test_gzipped_whisper_finder'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_finders.py', 'tests.test_finders', 'WhisperFinderTest', 'test_globstar'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_finders.py', 'tests.test_finders', 'WhisperFinderTest', 'test_multiple_globstars']]"
graphite-api,https://github.com/brutasse/graphite-api/tree/master/graphite_api/render/glyph.py,glyphStandaloneFunctionTest,test_dataLimits_drawNull_ymax_negative_missing_data,finiteData = [series for series in data if not series.options.get('drawAsInfinite')],"
finiteData = []
for series in data:
    if not series.options.get('drawAsInfinite'):
        finiteData.append(series)
",1,"[['https://github.com/brutasse/graphite-api/tree/master/tests/test_render_glyph.py', 'tests.test_render_glyph', 'glyphStandaloneFunctionTest', 'test_dataLimits_drawNull'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_render_glyph.py', 'tests.test_render_glyph', 'glyphStandaloneFunctionTest', 'test_dataLimits_stacked'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_render_glyph.py', 'tests.test_render_glyph', 'glyphStandaloneFunctionTest', 'test_dataLimits_drawNull_stacked_no_missing'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_render_glyph.py', 'tests.test_render_glyph', 'glyphStandaloneFunctionTest', 'test_dataLimits_drawNull_stacked'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_render_glyph.py', 'tests.test_render_glyph', 'glyphStandaloneFunctionTest', 'test_dataLimits_defaults_ymin_positive'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_render_glyph.py', 'tests.test_render_glyph', 'glyphStandaloneFunctionTest', 'test_dataLimits_defaults'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_render_glyph.py', 'tests.test_render_glyph', 'glyphStandaloneFunctionTest', 'test_dataLimits_drawNull_ymin_positive_missing_data'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_render_glyph.py', 'tests.test_render_glyph', 'glyphStandaloneFunctionTest', 'test_dataLimits_empty_list'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_render_glyph.py', 'tests.test_render_glyph', 'glyphStandaloneFunctionTest', 'test_dataLimits_drawNull_ymax_negative_missing_data']]"
mlens,https://github.com/flennerhag/mlens/tree/master/mlens/externals/sklearn/base.py,,test_clone,"return estimator_type([clone(e, safe=safe) for e in estimator])","tmp_ListComp0 = []
for e in estimator:
    tmp_ListComp0.append(clone(e, safe=safe))

return estimator_type(tmp_ListComp0)
",1,"[['https://github.com/flennerhag/mlens/tree/master/mlens/utils/tests/test_checks.py', 'mlens.utils.tests.test_checks', '', 'test_check_ensemble_build_lc_none_no_raise_'], ['https://github.com/flennerhag/mlens/tree/master/mlens/estimators/tests/test_transformer.py', 'mlens.estimators.tests.test_transformer', '', 'test_learner_clone'], ['https://github.com/flennerhag/mlens/tree/master/mlens/estimators/tests/test_layer.py', 'mlens.estimators.tests.test_layer', '', 'test_layer_clone'], ['https://github.com/flennerhag/mlens/tree/master/mlens/utils/tests/test_checks.py', 'mlens.utils.tests.test_checks', '', 'test_check_ensemble_build_lc_none'], ['https://github.com/flennerhag/mlens/tree/master/mlens/ensemble/tests/test_base.py', 'mlens.ensemble.tests.test_base', '', 'test_clone'], ['https://github.com/flennerhag/mlens/tree/master/mlens/estimators/tests/test_learner.py', 'mlens.estimators.tests.test_learner', '', 'test_learner_clone'], ['https://github.com/flennerhag/mlens/tree/master/mlens/utils/tests/test_checks.py', 'mlens.utils.tests.test_checks', '', 'test_check_ensemble_build_no_lc'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_d_wrapper.py', 'mlens.parallel.tests.test_d_wrapper', '', 'test_clone']]"
mlens,https://github.com/flennerhag/mlens/tree/master/mlens/utils/checks.py,,test_assert_correct_layer_format_1,prep_check = [key in preprocessing for key in estimators],"
prep_check = []
for key in estimators:
    prep_check.append(key in preprocessing)
",1,"[['https://github.com/flennerhag/mlens/tree/master/mlens/utils/tests/test_checks.py', 'mlens.utils.tests.test_checks', '', 'test_assert_correct_layer_format_4'], ['https://github.com/flennerhag/mlens/tree/master/mlens/utils/tests/test_checks.py', 'mlens.utils.tests.test_checks', '', 'test_assert_correct_layer_format_2'], ['https://github.com/flennerhag/mlens/tree/master/mlens/utils/tests/test_checks.py', 'mlens.utils.tests.test_checks', '', 'test_assert_correct_layer_format_3'], ['https://github.com/flennerhag/mlens/tree/master/mlens/utils/tests/test_dummy.py', 'mlens.utils.tests.test_dummy', '', 'test_estimator_lists'], ['https://github.com/flennerhag/mlens/tree/master/mlens/utils/tests/test_checks.py', 'mlens.utils.tests.test_checks', '', 'test_assert_correct_layer_format_1']]"
mlens,https://github.com/flennerhag/mlens/tree/master/mlens/utils/checks.py,,test_assert_correct_layer_format_1,est_check = [key in estimators for key in preprocessing],"
est_check = []
for key in preprocessing:
    est_check.append(key in estimators)
",1,"[['https://github.com/flennerhag/mlens/tree/master/mlens/utils/tests/test_checks.py', 'mlens.utils.tests.test_checks', '', 'test_assert_correct_layer_format_4'], ['https://github.com/flennerhag/mlens/tree/master/mlens/utils/tests/test_checks.py', 'mlens.utils.tests.test_checks', '', 'test_assert_correct_layer_format_2'], ['https://github.com/flennerhag/mlens/tree/master/mlens/utils/tests/test_checks.py', 'mlens.utils.tests.test_checks', '', 'test_assert_correct_layer_format_3'], ['https://github.com/flennerhag/mlens/tree/master/mlens/utils/tests/test_dummy.py', 'mlens.utils.tests.test_dummy', '', 'test_estimator_lists'], ['https://github.com/flennerhag/mlens/tree/master/mlens/utils/tests/test_checks.py', 'mlens.utils.tests.test_checks', '', 'test_assert_correct_layer_format_1']]"
mlens,https://github.com/flennerhag/mlens/tree/master/mlens/utils/formatting.py,,test_formatting_list,names = [tup[0] for tup in named_instances],"
names = []
for tup in named_instances:
    names.append(tup[0])
",1,"[['https://github.com/flennerhag/mlens/tree/master/mlens/utils/tests/test_dummy.py', 'mlens.utils.tests.test_dummy', '', 'test_estimator_lists'], ['https://github.com/flennerhag/mlens/tree/master/mlens/utils/tests/test_formatting.py', 'mlens.utils.tests.test_formatting', '', 'test_formatting_list']]"
mlens,https://github.com/flennerhag/mlens/tree/master/mlens/utils/formatting.py,,test_check_format_non_est,names = Counter([tup[0] for tup in instance_list]),"tmp_ListComp0 = []
for tup in instance_list:
    tmp_ListComp0.append(tup[0])

names = Counter(tmp_ListComp0)
",1,"[['https://github.com/flennerhag/mlens/tree/master/mlens/utils/tests/test_formatting.py', 'mlens.utils.tests.test_formatting', '', 'test_check_format_empty'], ['https://github.com/flennerhag/mlens/tree/master/mlens/utils/tests/test_formatting.py', 'mlens.utils.tests.test_formatting', '', 'test_check_format'], ['https://github.com/flennerhag/mlens/tree/master/mlens/utils/tests/test_formatting.py', 'mlens.utils.tests.test_formatting', '', 'test_check_format_duplicate'], ['https://github.com/flennerhag/mlens/tree/master/mlens/utils/tests/test_formatting.py', 'mlens.utils.tests.test_formatting', '', 'test_check_format_no_name'], ['https://github.com/flennerhag/mlens/tree/master/mlens/utils/tests/test_formatting.py', 'mlens.utils.tests.test_formatting', '', 'test_check_format_iterable'], ['https://github.com/flennerhag/mlens/tree/master/mlens/utils/tests/test_formatting.py', 'mlens.utils.tests.test_formatting', '', 'test_check_format_non_est']]"
mlens,https://github.com/flennerhag/mlens/tree/master/mlens/utils/dummy.py,,test_logistic_regression_weights,self.coef_ = np.vstack([l.coef_ for l in self._models_]),"tmp_ListComp0 = []
for l in self._models_:
    tmp_ListComp0.append(l.coef_)

self.coef_ = np.vstack(tmp_ListComp0)
",1,"[['https://github.com/flennerhag/mlens/tree/master/mlens/utils/tests/test_dummy.py', 'mlens.utils.tests.test_dummy', '', 'test_logistic_regression_preds_labels'], ['https://github.com/flennerhag/mlens/tree/master/mlens/utils/tests/test_dummy.py', 'mlens.utils.tests.test_dummy', '', 'test_logistic_regression_preds_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/utils/tests/test_dummy.py', 'mlens.utils.tests.test_dummy', '', 'test_logistic_regression_weights']]"
mlens,https://github.com/flennerhag/mlens/tree/master/mlens/testing/dummy.py,,test_predict_proba,w = [obj.estimator.coef_ for obj in lrs],"
w = []
for obj in lrs:
    w.append(obj.estimator.coef_)
",1,"[['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_a_learner_subset.py', 'mlens.parallel.tests.test_a_learner_subset', '', 'test_transform_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_a_learner_subset.py', 'mlens.parallel.tests.test_a_learner_subset', '', 'test_fit'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_a_learner_stack.py', 'mlens.parallel.tests.test_a_learner_stack', '', 'test_predict'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_a_learner_subset.py', 'mlens.parallel.tests.test_a_learner_subset', '', 'test_fit_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_a_learner_temporal.py', 'mlens.parallel.tests.test_a_learner_temporal', '', 'test_predict_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_a_learner_subset.py', 'mlens.parallel.tests.test_a_learner_subset', '', 'test_predict'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_a_learner_subset.py', 'mlens.parallel.tests.test_a_learner_subset', '', 'test_fit_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_a_learner_stack.py', 'mlens.parallel.tests.test_a_learner_stack', '', 'test_predict_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_a_learner_stack.py', 'mlens.parallel.tests.test_a_learner_stack', '', 'test_transform'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_a_learner_stack.py', 'mlens.parallel.tests.test_a_learner_stack', '', 'test_transform_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_a_learner_subset.py', 'mlens.parallel.tests.test_a_learner_subset', '', 'test_transform_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_a_learner_temporal.py', 'mlens.parallel.tests.test_a_learner_temporal', '', 'test_fit'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_a_learner_temporal.py', 'mlens.parallel.tests.test_a_learner_temporal', '', 'test_fit_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_a_learner_temporal.py', 'mlens.parallel.tests.test_a_learner_temporal', '', 'test_fit_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_a_learner_stack.py', 'mlens.parallel.tests.test_a_learner_stack', '', 'test_fit'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_a_learner_subset.py', 'mlens.parallel.tests.test_a_learner_subset', '', 'test_predict_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_a_learner_stack.py', 'mlens.parallel.tests.test_a_learner_stack', '', 'test_transform_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_a_learner_temporal.py', 'mlens.parallel.tests.test_a_learner_temporal', '', 'test_predict_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_a_learner_temporal.py', 'mlens.parallel.tests.test_a_learner_temporal', '', 'test_transform_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_a_learner_stack.py', 'mlens.parallel.tests.test_a_learner_stack', '', 'test_predict_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_a_learner_temporal.py', 'mlens.parallel.tests.test_a_learner_temporal', '', 'test_predict_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_a_learner_stack.py', 'mlens.parallel.tests.test_a_learner_stack', '', 'test_fit_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_a_learner_subset.py', 'mlens.parallel.tests.test_a_learner_subset', '', 'test_transform'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_a_learner_temporal.py', 'mlens.parallel.tests.test_a_learner_temporal', '', 'test_transform'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_a_learner_stack.py', 'mlens.parallel.tests.test_a_learner_stack', '', 'test_fit_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_a_learner_temporal.py', 'mlens.parallel.tests.test_a_learner_temporal', '', 'test_predict'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_a_learner_temporal.py', 'mlens.parallel.tests.test_a_learner_temporal', '', 'test_fit_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_a_learner_subset.py', 'mlens.parallel.tests.test_a_learner_subset', '', 'test_fit_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_a_learner_stack.py', 'mlens.parallel.tests.test_a_learner_stack', '', 'test_fit_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_a_learner_temporal.py', 'mlens.parallel.tests.test_a_learner_temporal', '', 'test_transform_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_a_learner_subset.py', 'mlens.parallel.tests.test_a_learner_subset', '', 'test_predict_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_a_learner_stack.py', 'mlens.parallel.tests.test_a_learner_stack', '', 'test_transform_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_a_learner_subset.py', 'mlens.parallel.tests.test_a_learner_subset', '', 'test_transform_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_a_learner_subset.py', 'mlens.parallel.tests.test_a_learner_subset', '', 'test_predict_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_a_learner_temporal.py', 'mlens.parallel.tests.test_a_learner_temporal', '', 'test_transform_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_a_learner_stack.py', 'mlens.parallel.tests.test_a_learner_stack', '', 'test_predict_proba']]"
mlens,https://github.com/flennerhag/mlens/tree/master/mlens/testing/dummy.py,,test_fit_proba,w = [obj.estimator.coef_ for lr in layer.learners for obj in lr.sublearners],"
w = []
for lr in layer.learners:
    for obj in lr.sublearners:
        w.append(obj.estimator.coef_)
",1,"[['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_full.py', 'mlens.parallel.tests.test_b3_layer_full', '', 'test_fit_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_blend.py', 'mlens.parallel.tests.test_b2_layer_blend', '', 'test_predict_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_blend.py', 'mlens.parallel.tests.test_b3_layer_blend', '', 'test_transform_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_subset.py', 'mlens.parallel.tests.test_b3_layer_subset', '', 'test_fit_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_subset.py', 'mlens.parallel.tests.test_b2_layer_subset', '', 'test_predict_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_stack.py', 'mlens.parallel.tests.test_b1_layer_stack', '', 'test_fit_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_temporal.py', 'mlens.parallel.tests.test_b2_layer_temporal', '', 'test_predict_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_full.py', 'mlens.parallel.tests.test_b2_layer_full', '', 'test_predict_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_temporal.py', 'mlens.parallel.tests.test_b1_layer_temporal', '', 'test_fit_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_full.py', 'mlens.parallel.tests.test_b3_layer_full', '', 'test_predict_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_blend.py', 'mlens.parallel.tests.test_b2_layer_blend', '', 'test_fit_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_full.py', 'mlens.parallel.tests.test_b1_layer_full', '', 'test_transform_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_temporal.py', 'mlens.parallel.tests.test_b1_layer_temporal', '', 'test_fit'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_full.py', 'mlens.parallel.tests.test_b2_layer_full', '', 'test_fit_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_blend.py', 'mlens.parallel.tests.test_b3_layer_blend', '', 'test_fit'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_full.py', 'mlens.parallel.tests.test_b1_layer_full', '', 'test_predict_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_blend.py', 'mlens.parallel.tests.test_b2_layer_blend', '', 'test_predict_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_temporal.py', 'mlens.parallel.tests.test_b2_layer_temporal', '', 'test_transform_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_stack.py', 'mlens.parallel.tests.test_b2_layer_stack', '', 'test_transform_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_stack.py', 'mlens.parallel.tests.test_b2_layer_stack', '', 'test_predict_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_subset.py', 'mlens.parallel.tests.test_b1_layer_subset', '', 'test_predict_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_subset.py', 'mlens.parallel.tests.test_b2_layer_subset', '', 'test_fit_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_subset.py', 'mlens.parallel.tests.test_b1_layer_subset', '', 'test_transform_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_stack.py', 'mlens.parallel.tests.test_b3_layer_stack', '', 'test_predict'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_blend.py', 'mlens.parallel.tests.test_b1_layer_blend', '', 'test_fit_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_temporal.py', 'mlens.parallel.tests.test_b2_layer_temporal', '', 'test_transform_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_temporal.py', 'mlens.parallel.tests.test_b1_layer_temporal', '', 'test_transform_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_subset.py', 'mlens.parallel.tests.test_b2_layer_subset', '', 'test_fit_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_stack.py', 'mlens.parallel.tests.test_b3_layer_stack', '', 'test_transform_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_temporal.py', 'mlens.parallel.tests.test_b1_layer_temporal', '', 'test_predict_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_subset.py', 'mlens.parallel.tests.test_b3_layer_subset', '', 'test_fit_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_stack.py', 'mlens.parallel.tests.test_b3_layer_stack', '', 'test_transform_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_subset.py', 'mlens.parallel.tests.test_b3_layer_subset', '', 'test_transform_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_full.py', 'mlens.parallel.tests.test_b3_layer_full', '', 'test_transform_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_subset.py', 'mlens.parallel.tests.test_b3_layer_subset', '', 'test_fit'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_temporal.py', 'mlens.parallel.tests.test_b3_layer_temporal', '', 'test_fit_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_blend.py', 'mlens.parallel.tests.test_b2_layer_blend', '', 'test_predict'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_stack.py', 'mlens.parallel.tests.test_b2_layer_stack', '', 'test_predict_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_temporal.py', 'mlens.parallel.tests.test_b3_layer_temporal', '', 'test_fit'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_stack.py', 'mlens.parallel.tests.test_b2_layer_stack', '', 'test_fit_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_stack.py', 'mlens.parallel.tests.test_b2_layer_stack', '', 'test_transform_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_subset.py', 'mlens.parallel.tests.test_b3_layer_subset', '', 'test_predict_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_stack.py', 'mlens.parallel.tests.test_b3_layer_stack', '', 'test_predict_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_stack.py', 'mlens.parallel.tests.test_b1_layer_stack', '', 'test_transform_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_blend.py', 'mlens.parallel.tests.test_b2_layer_blend', '', 'test_transform_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_stack.py', 'mlens.parallel.tests.test_b3_layer_stack', '', 'test_transform_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_blend.py', 'mlens.parallel.tests.test_b1_layer_blend', '', 'test_transform_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_subset.py', 'mlens.parallel.tests.test_b3_layer_subset', '', 'test_fit_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_subset.py', 'mlens.parallel.tests.test_b3_layer_subset', '', 'test_transform'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_temporal.py', 'mlens.parallel.tests.test_b3_layer_temporal', '', 'test_predict_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_blend.py', 'mlens.parallel.tests.test_b3_layer_blend', '', 'test_fit_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_subset.py', 'mlens.parallel.tests.test_b1_layer_subset', '', 'test_predict_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_subset.py', 'mlens.parallel.tests.test_b3_layer_subset', '', 'test_predict_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_temporal.py', 'mlens.parallel.tests.test_b3_layer_temporal', '', 'test_transform_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_subset.py', 'mlens.parallel.tests.test_b2_layer_subset', '', 'test_predict'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_subset.py', 'mlens.parallel.tests.test_b2_layer_subset', '', 'test_predict_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_subset.py', 'mlens.parallel.tests.test_b1_layer_subset', '', 'test_fit_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_full.py', 'mlens.parallel.tests.test_b2_layer_full', '', 'test_transform_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_full.py', 'mlens.parallel.tests.test_b1_layer_full', '', 'test_transform'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_temporal.py', 'mlens.parallel.tests.test_b3_layer_temporal', '', 'test_transform'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_full.py', 'mlens.parallel.tests.test_b3_layer_full', '', 'test_fit_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_stack.py', 'mlens.parallel.tests.test_b3_layer_stack', '', 'test_predict_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_subset.py', 'mlens.parallel.tests.test_b3_layer_subset', '', 'test_transform_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_stack.py', 'mlens.parallel.tests.test_b1_layer_stack', '', 'test_transform'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_temporal.py', 'mlens.parallel.tests.test_b3_layer_temporal', '', 'test_fit_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_temporal.py', 'mlens.parallel.tests.test_b1_layer_temporal', '', 'test_transform_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_subset.py', 'mlens.parallel.tests.test_b1_layer_subset', '', 'test_transform_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_temporal.py', 'mlens.parallel.tests.test_b1_layer_temporal', '', 'test_predict'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_full.py', 'mlens.parallel.tests.test_b2_layer_full', '', 'test_predict'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_temporal.py', 'mlens.parallel.tests.test_b2_layer_temporal', '', 'test_fit_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_stack.py', 'mlens.parallel.tests.test_b1_layer_stack', '', 'test_predict'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_stack.py', 'mlens.parallel.tests.test_b2_layer_stack', '', 'test_transform_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_stack.py', 'mlens.parallel.tests.test_b2_layer_stack', '', 'test_fit_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_blend.py', 'mlens.parallel.tests.test_b3_layer_blend', '', 'test_predict_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_stack.py', 'mlens.parallel.tests.test_b1_layer_stack', '', 'test_fit_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_full.py', 'mlens.parallel.tests.test_b2_layer_full', '', 'test_transform_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_temporal.py', 'mlens.parallel.tests.test_b3_layer_temporal', '', 'test_transform_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_subset.py', 'mlens.parallel.tests.test_b3_layer_subset', '', 'test_predict'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_subset.py', 'mlens.parallel.tests.test_b3_layer_subset', '', 'test_transform_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_full.py', 'mlens.parallel.tests.test_b3_layer_full', '', 'test_fit_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_stack.py', 'mlens.parallel.tests.test_b3_layer_stack', '', 'test_fit'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_stack.py', 'mlens.parallel.tests.test_b3_layer_stack', '', 'test_fit_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_blend.py', 'mlens.parallel.tests.test_b1_layer_blend', '', 'test_fit_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_full.py', 'mlens.parallel.tests.test_b1_layer_full', '', 'test_fit_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_full.py', 'mlens.parallel.tests.test_b2_layer_full', '', 'test_predict_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_full.py', 'mlens.parallel.tests.test_b1_layer_full', '', 'test_fit'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_temporal.py', 'mlens.parallel.tests.test_b3_layer_temporal', '', 'test_fit_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_temporal.py', 'mlens.parallel.tests.test_b2_layer_temporal', '', 'test_predict_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_full.py', 'mlens.parallel.tests.test_b3_layer_full', '', 'test_fit'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_subset.py', 'mlens.parallel.tests.test_b2_layer_subset', '', 'test_predict_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_blend.py', 'mlens.parallel.tests.test_b3_layer_blend', '', 'test_transform_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_blend.py', 'mlens.parallel.tests.test_b3_layer_blend', '', 'test_fit_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_temporal.py', 'mlens.parallel.tests.test_b1_layer_temporal', '', 'test_predict_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_stack.py', 'mlens.parallel.tests.test_b3_layer_stack', '', 'test_transform'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_subset.py', 'mlens.parallel.tests.test_b1_layer_subset', '', 'test_fit_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_stack.py', 'mlens.parallel.tests.test_b3_layer_stack', '', 'test_fit_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_stack.py', 'mlens.parallel.tests.test_b1_layer_stack', '', 'test_fit_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_blend.py', 'mlens.parallel.tests.test_b1_layer_blend', '', 'test_transform'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_blend.py', 'mlens.parallel.tests.test_b3_layer_blend', '', 'test_transform_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_blend.py', 'mlens.parallel.tests.test_b1_layer_blend', '', 'test_predict_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_subset.py', 'mlens.parallel.tests.test_b1_layer_subset', '', 'test_predict'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_subset.py', 'mlens.parallel.tests.test_b3_layer_subset', '', 'test_predict_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_blend.py', 'mlens.parallel.tests.test_b2_layer_blend', '', 'test_transform'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_temporal.py', 'mlens.parallel.tests.test_b3_layer_temporal', '', 'test_predict_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_blend.py', 'mlens.parallel.tests.test_b3_layer_blend', '', 'test_predict_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_stack.py', 'mlens.parallel.tests.test_b3_layer_stack', '', 'test_fit_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_stack.py', 'mlens.parallel.tests.test_b3_layer_stack', '', 'test_predict_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_stack.py', 'mlens.parallel.tests.test_b1_layer_stack', '', 'test_fit'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_temporal.py', 'mlens.parallel.tests.test_b3_layer_temporal', '', 'test_transform_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_full.py', 'mlens.parallel.tests.test_b3_layer_full', '', 'test_predict_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_blend.py', 'mlens.parallel.tests.test_b1_layer_blend', '', 'test_transform_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_temporal.py', 'mlens.parallel.tests.test_b2_layer_temporal', '', 'test_predict'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_temporal.py', 'mlens.parallel.tests.test_b1_layer_temporal', '', 'test_fit_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_blend.py', 'mlens.parallel.tests.test_b3_layer_blend', '', 'test_transform'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_full.py', 'mlens.parallel.tests.test_b1_layer_full', '', 'test_fit_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_blend.py', 'mlens.parallel.tests.test_b1_layer_blend', '', 'test_predict_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_blend.py', 'mlens.parallel.tests.test_b3_layer_blend', '', 'test_predict'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_stack.py', 'mlens.parallel.tests.test_b2_layer_stack', '', 'test_fit_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_blend.py', 'mlens.parallel.tests.test_b1_layer_blend', '', 'test_fit_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_stack.py', 'mlens.parallel.tests.test_b1_layer_stack', '', 'test_predict_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_subset.py', 'mlens.parallel.tests.test_b3_layer_subset', '', 'test_fit_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_stack.py', 'mlens.parallel.tests.test_b3_layer_stack', '', 'test_fit_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_blend.py', 'mlens.parallel.tests.test_b3_layer_blend', '', 'test_predict_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_temporal.py', 'mlens.parallel.tests.test_b3_layer_temporal', '', 'test_predict'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_temporal.py', 'mlens.parallel.tests.test_b2_layer_temporal', '', 'test_transform'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_blend.py', 'mlens.parallel.tests.test_b3_layer_blend', '', 'test_transform_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_full.py', 'mlens.parallel.tests.test_b2_layer_full', '', 'test_predict_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_temporal.py', 'mlens.parallel.tests.test_b2_layer_temporal', '', 'test_predict_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_stack.py', 'mlens.parallel.tests.test_b2_layer_stack', '', 'test_fit'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_subset.py', 'mlens.parallel.tests.test_b1_layer_subset', '', 'test_fit'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_blend.py', 'mlens.parallel.tests.test_b2_layer_blend', '', 'test_predict_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_subset.py', 'mlens.parallel.tests.test_b2_layer_subset', '', 'test_transform'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_stack.py', 'mlens.parallel.tests.test_b1_layer_stack', '', 'test_transform_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_temporal.py', 'mlens.parallel.tests.test_b3_layer_temporal', '', 'test_predict_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_full.py', 'mlens.parallel.tests.test_b1_layer_full', '', 'test_fit_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_full.py', 'mlens.parallel.tests.test_b2_layer_full', '', 'test_transform'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_subset.py', 'mlens.parallel.tests.test_b2_layer_subset', '', 'test_fit_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_stack.py', 'mlens.parallel.tests.test_b1_layer_stack', '', 'test_predict_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_temporal.py', 'mlens.parallel.tests.test_b1_layer_temporal', '', 'test_transform'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_subset.py', 'mlens.parallel.tests.test_b1_layer_subset', '', 'test_transform_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_blend.py', 'mlens.parallel.tests.test_b2_layer_blend', '', 'test_transform_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_subset.py', 'mlens.parallel.tests.test_b3_layer_subset', '', 'test_predict_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_blend.py', 'mlens.parallel.tests.test_b2_layer_blend', '', 'test_transform_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_subset.py', 'mlens.parallel.tests.test_b2_layer_subset', '', 'test_transform_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_temporal.py', 'mlens.parallel.tests.test_b2_layer_temporal', '', 'test_transform_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_full.py', 'mlens.parallel.tests.test_b1_layer_full', '', 'test_transform_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_full.py', 'mlens.parallel.tests.test_b3_layer_full', '', 'test_fit_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_full.py', 'mlens.parallel.tests.test_b2_layer_full', '', 'test_transform_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_temporal.py', 'mlens.parallel.tests.test_b2_layer_temporal', '', 'test_fit_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_subset.py', 'mlens.parallel.tests.test_b2_layer_subset', '', 'test_transform_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_temporal.py', 'mlens.parallel.tests.test_b2_layer_temporal', '', 'test_fit'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_full.py', 'mlens.parallel.tests.test_b2_layer_full', '', 'test_fit_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_stack.py', 'mlens.parallel.tests.test_b2_layer_stack', '', 'test_fit_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_stack.py', 'mlens.parallel.tests.test_b3_layer_stack', '', 'test_transform_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_full.py', 'mlens.parallel.tests.test_b3_layer_full', '', 'test_predict_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_full.py', 'mlens.parallel.tests.test_b3_layer_full', '', 'test_transform_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_full.py', 'mlens.parallel.tests.test_b3_layer_full', '', 'test_transform'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_temporal.py', 'mlens.parallel.tests.test_b1_layer_temporal', '', 'test_transform_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_full.py', 'mlens.parallel.tests.test_b2_layer_full', '', 'test_predict_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_blend.py', 'mlens.parallel.tests.test_b2_layer_blend', '', 'test_fit_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_temporal.py', 'mlens.parallel.tests.test_b2_layer_temporal', '', 'test_fit_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_stack.py', 'mlens.parallel.tests.test_b3_layer_stack', '', 'test_predict_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_stack.py', 'mlens.parallel.tests.test_b2_layer_stack', '', 'test_predict'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_blend.py', 'mlens.parallel.tests.test_b2_layer_blend', '', 'test_predict_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_subset.py', 'mlens.parallel.tests.test_b2_layer_subset', '', 'test_predict_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_full.py', 'mlens.parallel.tests.test_b1_layer_full', '', 'test_predict_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_blend.py', 'mlens.parallel.tests.test_b1_layer_blend', '', 'test_fit'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_full.py', 'mlens.parallel.tests.test_b3_layer_full', '', 'test_transform_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_subset.py', 'mlens.parallel.tests.test_b3_layer_subset', '', 'test_transform_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_subset.py', 'mlens.parallel.tests.test_b2_layer_subset', '', 'test_transform_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_subset.py', 'mlens.parallel.tests.test_b1_layer_subset', '', 'test_fit_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_full.py', 'mlens.parallel.tests.test_b1_layer_full', '', 'test_predict_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_stack.py', 'mlens.parallel.tests.test_b2_layer_stack', '', 'test_transform_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_temporal.py', 'mlens.parallel.tests.test_b3_layer_temporal', '', 'test_transform_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_stack.py', 'mlens.parallel.tests.test_b2_layer_stack', '', 'test_predict_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_blend.py', 'mlens.parallel.tests.test_b1_layer_blend', '', 'test_predict'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_blend.py', 'mlens.parallel.tests.test_b2_layer_blend', '', 'test_transform_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_blend.py', 'mlens.parallel.tests.test_b1_layer_blend', '', 'test_transform_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_subset.py', 'mlens.parallel.tests.test_b1_layer_subset', '', 'test_transform'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_subset.py', 'mlens.parallel.tests.test_b1_layer_subset', '', 'test_predict_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_stack.py', 'mlens.parallel.tests.test_b1_layer_stack', '', 'test_predict_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_subset.py', 'mlens.parallel.tests.test_b2_layer_subset', '', 'test_fit'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_full.py', 'mlens.parallel.tests.test_b3_layer_full', '', 'test_transform_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_temporal.py', 'mlens.parallel.tests.test_b3_layer_temporal', '', 'test_fit_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_full.py', 'mlens.parallel.tests.test_b2_layer_full', '', 'test_transform_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_full.py', 'mlens.parallel.tests.test_b2_layer_full', '', 'test_fit'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_subset.py', 'mlens.parallel.tests.test_b2_layer_subset', '', 'test_transform_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_blend.py', 'mlens.parallel.tests.test_b1_layer_blend', '', 'test_predict_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_full.py', 'mlens.parallel.tests.test_b1_layer_full', '', 'test_predict'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_temporal.py', 'mlens.parallel.tests.test_b2_layer_temporal', '', 'test_fit_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_stack.py', 'mlens.parallel.tests.test_b2_layer_stack', '', 'test_transform'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_full.py', 'mlens.parallel.tests.test_b3_layer_full', '', 'test_predict_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_stack.py', 'mlens.parallel.tests.test_b2_layer_stack', '', 'test_predict_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_blend.py', 'mlens.parallel.tests.test_b3_layer_blend', '', 'test_predict_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_temporal.py', 'mlens.parallel.tests.test_b1_layer_temporal', '', 'test_predict_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_blend.py', 'mlens.parallel.tests.test_b3_layer_blend', '', 'test_fit_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_stack.py', 'ml"
mlens,https://github.com/flennerhag/mlens/tree/master/mlens/testing/dummy.py,,test_fit_proba,w = [obj.estimator.coef_ for lr in layer.learners for obj in lr.learner],"
w = []
for lr in layer.learners:
    for obj in lr.learner:
        w.append(obj.estimator.coef_)
",1,"[['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_full.py', 'mlens.parallel.tests.test_b3_layer_full', '', 'test_fit_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_blend.py', 'mlens.parallel.tests.test_b2_layer_blend', '', 'test_predict_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_blend.py', 'mlens.parallel.tests.test_b3_layer_blend', '', 'test_transform_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_subset.py', 'mlens.parallel.tests.test_b3_layer_subset', '', 'test_fit_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_subset.py', 'mlens.parallel.tests.test_b2_layer_subset', '', 'test_predict_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_stack.py', 'mlens.parallel.tests.test_b1_layer_stack', '', 'test_fit_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_temporal.py', 'mlens.parallel.tests.test_b2_layer_temporal', '', 'test_predict_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_full.py', 'mlens.parallel.tests.test_b2_layer_full', '', 'test_predict_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_temporal.py', 'mlens.parallel.tests.test_b1_layer_temporal', '', 'test_fit_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_full.py', 'mlens.parallel.tests.test_b3_layer_full', '', 'test_predict_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_blend.py', 'mlens.parallel.tests.test_b2_layer_blend', '', 'test_fit_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_full.py', 'mlens.parallel.tests.test_b1_layer_full', '', 'test_transform_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_temporal.py', 'mlens.parallel.tests.test_b1_layer_temporal', '', 'test_fit'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_full.py', 'mlens.parallel.tests.test_b2_layer_full', '', 'test_fit_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_blend.py', 'mlens.parallel.tests.test_b3_layer_blend', '', 'test_fit'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_full.py', 'mlens.parallel.tests.test_b1_layer_full', '', 'test_predict_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_blend.py', 'mlens.parallel.tests.test_b2_layer_blend', '', 'test_predict_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_temporal.py', 'mlens.parallel.tests.test_b2_layer_temporal', '', 'test_transform_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_stack.py', 'mlens.parallel.tests.test_b2_layer_stack', '', 'test_transform_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_stack.py', 'mlens.parallel.tests.test_b2_layer_stack', '', 'test_predict_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_subset.py', 'mlens.parallel.tests.test_b1_layer_subset', '', 'test_predict_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_subset.py', 'mlens.parallel.tests.test_b2_layer_subset', '', 'test_fit_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_subset.py', 'mlens.parallel.tests.test_b1_layer_subset', '', 'test_transform_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_stack.py', 'mlens.parallel.tests.test_b3_layer_stack', '', 'test_predict'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_blend.py', 'mlens.parallel.tests.test_b1_layer_blend', '', 'test_fit_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_temporal.py', 'mlens.parallel.tests.test_b2_layer_temporal', '', 'test_transform_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_temporal.py', 'mlens.parallel.tests.test_b1_layer_temporal', '', 'test_transform_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_subset.py', 'mlens.parallel.tests.test_b2_layer_subset', '', 'test_fit_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_stack.py', 'mlens.parallel.tests.test_b3_layer_stack', '', 'test_transform_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_temporal.py', 'mlens.parallel.tests.test_b1_layer_temporal', '', 'test_predict_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_subset.py', 'mlens.parallel.tests.test_b3_layer_subset', '', 'test_fit_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_stack.py', 'mlens.parallel.tests.test_b3_layer_stack', '', 'test_transform_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_subset.py', 'mlens.parallel.tests.test_b3_layer_subset', '', 'test_transform_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_full.py', 'mlens.parallel.tests.test_b3_layer_full', '', 'test_transform_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_subset.py', 'mlens.parallel.tests.test_b3_layer_subset', '', 'test_fit'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_temporal.py', 'mlens.parallel.tests.test_b3_layer_temporal', '', 'test_fit_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_blend.py', 'mlens.parallel.tests.test_b2_layer_blend', '', 'test_predict'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_stack.py', 'mlens.parallel.tests.test_b2_layer_stack', '', 'test_predict_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_temporal.py', 'mlens.parallel.tests.test_b3_layer_temporal', '', 'test_fit'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_stack.py', 'mlens.parallel.tests.test_b2_layer_stack', '', 'test_fit_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_stack.py', 'mlens.parallel.tests.test_b2_layer_stack', '', 'test_transform_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_subset.py', 'mlens.parallel.tests.test_b3_layer_subset', '', 'test_predict_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_stack.py', 'mlens.parallel.tests.test_b3_layer_stack', '', 'test_predict_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_stack.py', 'mlens.parallel.tests.test_b1_layer_stack', '', 'test_transform_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_blend.py', 'mlens.parallel.tests.test_b2_layer_blend', '', 'test_transform_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_stack.py', 'mlens.parallel.tests.test_b3_layer_stack', '', 'test_transform_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_blend.py', 'mlens.parallel.tests.test_b1_layer_blend', '', 'test_transform_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_subset.py', 'mlens.parallel.tests.test_b3_layer_subset', '', 'test_fit_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_subset.py', 'mlens.parallel.tests.test_b3_layer_subset', '', 'test_transform'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_temporal.py', 'mlens.parallel.tests.test_b3_layer_temporal', '', 'test_predict_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_blend.py', 'mlens.parallel.tests.test_b3_layer_blend', '', 'test_fit_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_subset.py', 'mlens.parallel.tests.test_b1_layer_subset', '', 'test_predict_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_subset.py', 'mlens.parallel.tests.test_b3_layer_subset', '', 'test_predict_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_temporal.py', 'mlens.parallel.tests.test_b3_layer_temporal', '', 'test_transform_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_subset.py', 'mlens.parallel.tests.test_b2_layer_subset', '', 'test_predict'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_subset.py', 'mlens.parallel.tests.test_b2_layer_subset', '', 'test_predict_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_subset.py', 'mlens.parallel.tests.test_b1_layer_subset', '', 'test_fit_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_full.py', 'mlens.parallel.tests.test_b2_layer_full', '', 'test_transform_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_full.py', 'mlens.parallel.tests.test_b1_layer_full', '', 'test_transform'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_temporal.py', 'mlens.parallel.tests.test_b3_layer_temporal', '', 'test_transform'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_full.py', 'mlens.parallel.tests.test_b3_layer_full', '', 'test_fit_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_stack.py', 'mlens.parallel.tests.test_b3_layer_stack', '', 'test_predict_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_subset.py', 'mlens.parallel.tests.test_b3_layer_subset', '', 'test_transform_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_stack.py', 'mlens.parallel.tests.test_b1_layer_stack', '', 'test_transform'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_temporal.py', 'mlens.parallel.tests.test_b3_layer_temporal', '', 'test_fit_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_temporal.py', 'mlens.parallel.tests.test_b1_layer_temporal', '', 'test_transform_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_subset.py', 'mlens.parallel.tests.test_b1_layer_subset', '', 'test_transform_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_temporal.py', 'mlens.parallel.tests.test_b1_layer_temporal', '', 'test_predict'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_full.py', 'mlens.parallel.tests.test_b2_layer_full', '', 'test_predict'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_temporal.py', 'mlens.parallel.tests.test_b2_layer_temporal', '', 'test_fit_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_stack.py', 'mlens.parallel.tests.test_b1_layer_stack', '', 'test_predict'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_stack.py', 'mlens.parallel.tests.test_b2_layer_stack', '', 'test_transform_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_stack.py', 'mlens.parallel.tests.test_b2_layer_stack', '', 'test_fit_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_blend.py', 'mlens.parallel.tests.test_b3_layer_blend', '', 'test_predict_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_stack.py', 'mlens.parallel.tests.test_b1_layer_stack', '', 'test_fit_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_full.py', 'mlens.parallel.tests.test_b2_layer_full', '', 'test_transform_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_temporal.py', 'mlens.parallel.tests.test_b3_layer_temporal', '', 'test_transform_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_subset.py', 'mlens.parallel.tests.test_b3_layer_subset', '', 'test_predict'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_subset.py', 'mlens.parallel.tests.test_b3_layer_subset', '', 'test_transform_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_full.py', 'mlens.parallel.tests.test_b3_layer_full', '', 'test_fit_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_stack.py', 'mlens.parallel.tests.test_b3_layer_stack', '', 'test_fit'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_stack.py', 'mlens.parallel.tests.test_b3_layer_stack', '', 'test_fit_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_blend.py', 'mlens.parallel.tests.test_b1_layer_blend', '', 'test_fit_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_full.py', 'mlens.parallel.tests.test_b1_layer_full', '', 'test_fit_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_full.py', 'mlens.parallel.tests.test_b2_layer_full', '', 'test_predict_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_full.py', 'mlens.parallel.tests.test_b1_layer_full', '', 'test_fit'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_temporal.py', 'mlens.parallel.tests.test_b3_layer_temporal', '', 'test_fit_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_temporal.py', 'mlens.parallel.tests.test_b2_layer_temporal', '', 'test_predict_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_full.py', 'mlens.parallel.tests.test_b3_layer_full', '', 'test_fit'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_subset.py', 'mlens.parallel.tests.test_b2_layer_subset', '', 'test_predict_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_blend.py', 'mlens.parallel.tests.test_b3_layer_blend', '', 'test_transform_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_blend.py', 'mlens.parallel.tests.test_b3_layer_blend', '', 'test_fit_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_temporal.py', 'mlens.parallel.tests.test_b1_layer_temporal', '', 'test_predict_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_stack.py', 'mlens.parallel.tests.test_b3_layer_stack', '', 'test_transform'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_subset.py', 'mlens.parallel.tests.test_b1_layer_subset', '', 'test_fit_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_stack.py', 'mlens.parallel.tests.test_b3_layer_stack', '', 'test_fit_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_stack.py', 'mlens.parallel.tests.test_b1_layer_stack', '', 'test_fit_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_blend.py', 'mlens.parallel.tests.test_b1_layer_blend', '', 'test_transform'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_blend.py', 'mlens.parallel.tests.test_b3_layer_blend', '', 'test_transform_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_blend.py', 'mlens.parallel.tests.test_b1_layer_blend', '', 'test_predict_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_subset.py', 'mlens.parallel.tests.test_b1_layer_subset', '', 'test_predict'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_subset.py', 'mlens.parallel.tests.test_b3_layer_subset', '', 'test_predict_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_blend.py', 'mlens.parallel.tests.test_b2_layer_blend', '', 'test_transform'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_temporal.py', 'mlens.parallel.tests.test_b3_layer_temporal', '', 'test_predict_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_blend.py', 'mlens.parallel.tests.test_b3_layer_blend', '', 'test_predict_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_stack.py', 'mlens.parallel.tests.test_b3_layer_stack', '', 'test_fit_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_stack.py', 'mlens.parallel.tests.test_b3_layer_stack', '', 'test_predict_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_stack.py', 'mlens.parallel.tests.test_b1_layer_stack', '', 'test_fit'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_temporal.py', 'mlens.parallel.tests.test_b3_layer_temporal', '', 'test_transform_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_full.py', 'mlens.parallel.tests.test_b3_layer_full', '', 'test_predict_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_blend.py', 'mlens.parallel.tests.test_b1_layer_blend', '', 'test_transform_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_temporal.py', 'mlens.parallel.tests.test_b2_layer_temporal', '', 'test_predict'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_temporal.py', 'mlens.parallel.tests.test_b1_layer_temporal', '', 'test_fit_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_blend.py', 'mlens.parallel.tests.test_b3_layer_blend', '', 'test_transform'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_full.py', 'mlens.parallel.tests.test_b1_layer_full', '', 'test_fit_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_blend.py', 'mlens.parallel.tests.test_b1_layer_blend', '', 'test_predict_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_blend.py', 'mlens.parallel.tests.test_b3_layer_blend', '', 'test_predict'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_stack.py', 'mlens.parallel.tests.test_b2_layer_stack', '', 'test_fit_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_blend.py', 'mlens.parallel.tests.test_b1_layer_blend', '', 'test_fit_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_stack.py', 'mlens.parallel.tests.test_b1_layer_stack', '', 'test_predict_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_subset.py', 'mlens.parallel.tests.test_b3_layer_subset', '', 'test_fit_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_stack.py', 'mlens.parallel.tests.test_b3_layer_stack', '', 'test_fit_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_blend.py', 'mlens.parallel.tests.test_b3_layer_blend', '', 'test_predict_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_temporal.py', 'mlens.parallel.tests.test_b3_layer_temporal', '', 'test_predict'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_temporal.py', 'mlens.parallel.tests.test_b2_layer_temporal', '', 'test_transform'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_blend.py', 'mlens.parallel.tests.test_b3_layer_blend', '', 'test_transform_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_full.py', 'mlens.parallel.tests.test_b2_layer_full', '', 'test_predict_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_temporal.py', 'mlens.parallel.tests.test_b2_layer_temporal', '', 'test_predict_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_stack.py', 'mlens.parallel.tests.test_b2_layer_stack', '', 'test_fit'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_subset.py', 'mlens.parallel.tests.test_b1_layer_subset', '', 'test_fit'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_blend.py', 'mlens.parallel.tests.test_b2_layer_blend', '', 'test_predict_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_subset.py', 'mlens.parallel.tests.test_b2_layer_subset', '', 'test_transform'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_stack.py', 'mlens.parallel.tests.test_b1_layer_stack', '', 'test_transform_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_temporal.py', 'mlens.parallel.tests.test_b3_layer_temporal', '', 'test_predict_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_full.py', 'mlens.parallel.tests.test_b1_layer_full', '', 'test_fit_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_full.py', 'mlens.parallel.tests.test_b2_layer_full', '', 'test_transform'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_subset.py', 'mlens.parallel.tests.test_b2_layer_subset', '', 'test_fit_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_stack.py', 'mlens.parallel.tests.test_b1_layer_stack', '', 'test_predict_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_temporal.py', 'mlens.parallel.tests.test_b1_layer_temporal', '', 'test_transform'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_subset.py', 'mlens.parallel.tests.test_b1_layer_subset', '', 'test_transform_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_blend.py', 'mlens.parallel.tests.test_b2_layer_blend', '', 'test_transform_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_subset.py', 'mlens.parallel.tests.test_b3_layer_subset', '', 'test_predict_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_blend.py', 'mlens.parallel.tests.test_b2_layer_blend', '', 'test_transform_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_subset.py', 'mlens.parallel.tests.test_b2_layer_subset', '', 'test_transform_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_temporal.py', 'mlens.parallel.tests.test_b2_layer_temporal', '', 'test_transform_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_full.py', 'mlens.parallel.tests.test_b1_layer_full', '', 'test_transform_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_full.py', 'mlens.parallel.tests.test_b3_layer_full', '', 'test_fit_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_full.py', 'mlens.parallel.tests.test_b2_layer_full', '', 'test_transform_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_temporal.py', 'mlens.parallel.tests.test_b2_layer_temporal', '', 'test_fit_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_subset.py', 'mlens.parallel.tests.test_b2_layer_subset', '', 'test_transform_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_temporal.py', 'mlens.parallel.tests.test_b2_layer_temporal', '', 'test_fit'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_full.py', 'mlens.parallel.tests.test_b2_layer_full', '', 'test_fit_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_stack.py', 'mlens.parallel.tests.test_b2_layer_stack', '', 'test_fit_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_stack.py', 'mlens.parallel.tests.test_b3_layer_stack', '', 'test_transform_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_full.py', 'mlens.parallel.tests.test_b3_layer_full', '', 'test_predict_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_full.py', 'mlens.parallel.tests.test_b3_layer_full', '', 'test_transform_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_full.py', 'mlens.parallel.tests.test_b3_layer_full', '', 'test_transform'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_temporal.py', 'mlens.parallel.tests.test_b1_layer_temporal', '', 'test_transform_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_full.py', 'mlens.parallel.tests.test_b2_layer_full', '', 'test_predict_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_blend.py', 'mlens.parallel.tests.test_b2_layer_blend', '', 'test_fit_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_temporal.py', 'mlens.parallel.tests.test_b2_layer_temporal', '', 'test_fit_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_stack.py', 'mlens.parallel.tests.test_b3_layer_stack', '', 'test_predict_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_stack.py', 'mlens.parallel.tests.test_b2_layer_stack', '', 'test_predict'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_blend.py', 'mlens.parallel.tests.test_b2_layer_blend', '', 'test_predict_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_subset.py', 'mlens.parallel.tests.test_b2_layer_subset', '', 'test_predict_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_full.py', 'mlens.parallel.tests.test_b1_layer_full', '', 'test_predict_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_blend.py', 'mlens.parallel.tests.test_b1_layer_blend', '', 'test_fit'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_full.py', 'mlens.parallel.tests.test_b3_layer_full', '', 'test_transform_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_subset.py', 'mlens.parallel.tests.test_b3_layer_subset', '', 'test_transform_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_subset.py', 'mlens.parallel.tests.test_b2_layer_subset', '', 'test_transform_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_subset.py', 'mlens.parallel.tests.test_b1_layer_subset', '', 'test_fit_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_full.py', 'mlens.parallel.tests.test_b1_layer_full', '', 'test_predict_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_stack.py', 'mlens.parallel.tests.test_b2_layer_stack', '', 'test_transform_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_temporal.py', 'mlens.parallel.tests.test_b3_layer_temporal', '', 'test_transform_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_stack.py', 'mlens.parallel.tests.test_b2_layer_stack', '', 'test_predict_fp'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_blend.py', 'mlens.parallel.tests.test_b1_layer_blend', '', 'test_predict'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_blend.py', 'mlens.parallel.tests.test_b2_layer_blend', '', 'test_transform_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_blend.py', 'mlens.parallel.tests.test_b1_layer_blend', '', 'test_transform_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_subset.py', 'mlens.parallel.tests.test_b1_layer_subset', '', 'test_transform'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_subset.py', 'mlens.parallel.tests.test_b1_layer_subset', '', 'test_predict_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_stack.py', 'mlens.parallel.tests.test_b1_layer_stack', '', 'test_predict_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_subset.py', 'mlens.parallel.tests.test_b2_layer_subset', '', 'test_fit'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_full.py', 'mlens.parallel.tests.test_b3_layer_full', '', 'test_transform_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_temporal.py', 'mlens.parallel.tests.test_b3_layer_temporal', '', 'test_fit_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_full.py', 'mlens.parallel.tests.test_b2_layer_full', '', 'test_transform_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_full.py', 'mlens.parallel.tests.test_b2_layer_full', '', 'test_fit'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_subset.py', 'mlens.parallel.tests.test_b2_layer_subset', '', 'test_transform_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_blend.py', 'mlens.parallel.tests.test_b1_layer_blend', '', 'test_predict_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_full.py', 'mlens.parallel.tests.test_b1_layer_full', '', 'test_predict'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_temporal.py', 'mlens.parallel.tests.test_b2_layer_temporal', '', 'test_fit_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_stack.py', 'mlens.parallel.tests.test_b2_layer_stack', '', 'test_transform'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_full.py', 'mlens.parallel.tests.test_b3_layer_full', '', 'test_predict_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b2_layer_stack.py', 'mlens.parallel.tests.test_b2_layer_stack', '', 'test_predict_prep'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_blend.py', 'mlens.parallel.tests.test_b3_layer_blend', '', 'test_predict_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_temporal.py', 'mlens.parallel.tests.test_b1_layer_temporal', '', 'test_predict_prep_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b3_layer_blend.py', 'mlens.parallel.tests.test_b3_layer_blend', '', 'test_fit_proba'], ['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b1_layer_stack.py', 'ml"
mlens,https://github.com/flennerhag/mlens/tree/master/mlens/parallel/handles.py,,test_data,"transformers = [Transformer(estimator=Pipeline(tr, return_y=True), name=case_name, **transformer_kwargs) for (case_name, tr) in preprocessing]","
transformers = []
for (case_name, tr) in preprocessing:
    transformers.append(Transformer(estimator=Pipeline(tr, return_y=True), name=case_name, **transformer_kwargs))
",1,"[['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b4_layer_push_pop.py', 'mlens.parallel.tests.test_b4_layer_push_pop', '', 'test_data']]"
mlens,https://github.com/flennerhag/mlens/tree/master/mlens/parallel/handles.py,,test_data,"learners = [Learner(estimator=est, preprocess=case_name, name=learner_name, **learner_kwargs) for (case_name, learner_name, est) in estimators]","
learners = []
for (case_name, learner_name, est) in estimators:
    learners.append(Learner(estimator=est, preprocess=case_name, name=learner_name, **learner_kwargs))
",1,"[['https://github.com/flennerhag/mlens/tree/master/mlens/parallel/tests/test_b4_layer_push_pop.py', 'mlens.parallel.tests.test_b4_layer_push_pop', '', 'test_data']]"
TensorNetwork,https://github.com/google/TensorNetwork/tree/master/tensornetwork/ncon_interface.py,,test_get_cont_out_labels_1,flat_labels = [l for sublist in network_structure for l in sublist],"
flat_labels = []
for sublist in network_structure:
    for l in sublist:
        flat_labels.append(l)
",1,"[['https://github.com/google/TensorNetwork/tree/master/tensornetwork/tests/ncon_interface_test.py', 'tensornetwork.tests.ncon_interface_test', '', 'test_get_cont_out_labels_2'], ['https://github.com/google/TensorNetwork/tree/master/tensornetwork/tests/ncon_interface_test.py', 'tensornetwork.tests.ncon_interface_test', '', 'test_get_cont_out_labels_1']]"
TensorNetwork,https://github.com/google/TensorNetwork/tree/master/tensornetwork/ncon_interface.py,,test_get_cont_out_labels_1,"int_out_labels = sorted([l for l in int_labels if l < 0], reverse=True)","tmp_ListComp0 = []
for l in int_labels:
    if l < 0:
        tmp_ListComp0.append(l)

int_out_labels = sorted(tmp_ListComp0, reverse=True)
",1,"[['https://github.com/google/TensorNetwork/tree/master/tensornetwork/tests/ncon_interface_test.py', 'tensornetwork.tests.ncon_interface_test', '', 'test_get_cont_out_labels_2'], ['https://github.com/google/TensorNetwork/tree/master/tensornetwork/tests/ncon_interface_test.py', 'tensornetwork.tests.ncon_interface_test', '', 'test_get_cont_out_labels_1']]"
TensorNetwork,https://github.com/google/TensorNetwork/tree/master/tensornetwork/ncon_interface.py,,test_get_cont_out_labels_1,int_cont_labels = sorted([label for label in int_labels if label >= 0]),"tmp_ListComp0 = []
for label in int_labels:
    if label >= 0:
        tmp_ListComp0.append(label)

int_cont_labels = sorted(tmp_ListComp0)
",1,"[['https://github.com/google/TensorNetwork/tree/master/tensornetwork/tests/ncon_interface_test.py', 'tensornetwork.tests.ncon_interface_test', '', 'test_get_cont_out_labels_2'], ['https://github.com/google/TensorNetwork/tree/master/tensornetwork/tests/ncon_interface_test.py', 'tensornetwork.tests.ncon_interface_test', '', 'test_get_cont_out_labels_1']]"
TensorNetwork,https://github.com/google/TensorNetwork/tree/master/tensornetwork/ncon_interface.py,,test_get_cont_out_labels_1,"str_out_labels = sorted([label for label in str_labels if label[0] == '-'], key=lambda x: str(x))","tmp_ListComp0 = []
for label in str_labels:
    if label[0] == '-':
        tmp_ListComp0.append(label)

str_out_labels = sorted(tmp_ListComp0, key=lambda x: str(x))
",1,"[['https://github.com/google/TensorNetwork/tree/master/tensornetwork/tests/ncon_interface_test.py', 'tensornetwork.tests.ncon_interface_test', '', 'test_get_cont_out_labels_2'], ['https://github.com/google/TensorNetwork/tree/master/tensornetwork/tests/ncon_interface_test.py', 'tensornetwork.tests.ncon_interface_test', '', 'test_get_cont_out_labels_1']]"
TensorNetwork,https://github.com/google/TensorNetwork/tree/master/tensornetwork/ncon_interface.py,,test_get_cont_out_labels_1,"str_cont_labels = sorted([label for label in str_labels if label[0] != '-'], key=lambda x: str(x))","tmp_ListComp0 = []
for label in str_labels:
    if label[0] != '-':
        tmp_ListComp0.append(label)

str_cont_labels = sorted(tmp_ListComp0, key=lambda x: str(x))
",1,"[['https://github.com/google/TensorNetwork/tree/master/tensornetwork/tests/ncon_interface_test.py', 'tensornetwork.tests.ncon_interface_test', '', 'test_get_cont_out_labels_2'], ['https://github.com/google/TensorNetwork/tree/master/tensornetwork/tests/ncon_interface_test.py', 'tensornetwork.tests.ncon_interface_test', '', 'test_get_cont_out_labels_1']]"
TensorNetwork,https://github.com/google/TensorNetwork/tree/master/tensornetwork/ncon_interface.py,,test_canonicalize_network_structure,flat_labels = [l for sublist in network_structure for l in sublist],"
flat_labels = []
for sublist in network_structure:
    for l in sublist:
        flat_labels.append(l)
",1,"[['https://github.com/google/TensorNetwork/tree/master/tensornetwork/tests/ncon_interface_test.py', 'tensornetwork.tests.ncon_interface_test', '', 'test_canonicalize_network_structure']]"
TensorNetwork,https://github.com/google/TensorNetwork/tree/master/tensornetwork/ncon_interface.py,,test_canonicalize_network_structure,mapped_network_structure = [[neg_mapping[label] for label in labels] for labels in network_structure],"
mapped_network_structure = []
for labels in network_structure:
    mapped_network_structure1 = []
    for label in labels:
        mapped_network_structure1.append(neg_mapping[label])
    mapped_network_structure.append(mapped_network_structure1)
",1,"[['https://github.com/google/TensorNetwork/tree/master/tensornetwork/tests/ncon_interface_test.py', 'tensornetwork.tests.ncon_interface_test', '', 'test_canonicalize_network_structure']]"
TensorNetwork,https://github.com/google/TensorNetwork/tree/master/tensornetwork/network_operations.py,,test_split_node_of_node_without_backend_raises_error,left_axes_order = [edge.axis1 if edge.node1 is node else edge.axis2 for edge in left_edges],"
left_axes_order = []
for edge in left_edges:
    if edge.node1 is node:
        left_axes_order.append(edge.axis1)
    else:
        left_axes_order.append(edge.axis2)
",1,"[['https://github.com/google/TensorNetwork/tree/master/tensornetwork/tests/network_operations_test.py', 'tensornetwork.tests.network_operations_test', '', 'test_split_node_of_node_without_backend_raises_error']]"
TensorNetwork,https://github.com/google/TensorNetwork/tree/master/tensornetwork/network_operations.py,,test_split_node_of_node_without_backend_raises_error,right_axes_order = [edge.axis1 if edge.node1 is node else edge.axis2 for edge in right_edges],"
right_axes_order = []
for edge in right_edges:
    if edge.node1 is node:
        right_axes_order.append(edge.axis1)
    else:
        right_axes_order.append(edge.axis2)
",1,"[['https://github.com/google/TensorNetwork/tree/master/tensornetwork/tests/network_operations_test.py', 'tensornetwork.tests.network_operations_test', '', 'test_split_node_of_node_without_backend_raises_error']]"
TensorNetwork,https://github.com/google/TensorNetwork/tree/master/tensornetwork/network_operations.py,,test_split_node_qr_of_node_without_backend_raises_error,left_axes_order = [edge.axis1 if edge.node1 is node else edge.axis2 for edge in left_edges],"
left_axes_order = []
for edge in left_edges:
    if edge.node1 is node:
        left_axes_order.append(edge.axis1)
    else:
        left_axes_order.append(edge.axis2)
",1,"[['https://github.com/google/TensorNetwork/tree/master/tensornetwork/tests/network_operations_test.py', 'tensornetwork.tests.network_operations_test', '', 'test_split_node_qr_of_node_without_backend_raises_error']]"
TensorNetwork,https://github.com/google/TensorNetwork/tree/master/tensornetwork/network_operations.py,,test_split_node_qr_of_node_without_backend_raises_error,right_axes_order = [edge.axis1 if edge.node1 is node else edge.axis2 for edge in right_edges],"
right_axes_order = []
for edge in right_edges:
    if edge.node1 is node:
        right_axes_order.append(edge.axis1)
    else:
        right_axes_order.append(edge.axis2)
",1,"[['https://github.com/google/TensorNetwork/tree/master/tensornetwork/tests/network_operations_test.py', 'tensornetwork.tests.network_operations_test', '', 'test_split_node_qr_of_node_without_backend_raises_error']]"
TensorNetwork,https://github.com/google/TensorNetwork/tree/master/tensornetwork/network_operations.py,,test_split_node_rq_of_node_without_backend_raises_error,left_axes_order = [edge.axis1 if edge.node1 is node else edge.axis2 for edge in left_edges],"
left_axes_order = []
for edge in left_edges:
    if edge.node1 is node:
        left_axes_order.append(edge.axis1)
    else:
        left_axes_order.append(edge.axis2)
",1,"[['https://github.com/google/TensorNetwork/tree/master/tensornetwork/tests/network_operations_test.py', 'tensornetwork.tests.network_operations_test', '', 'test_split_node_rq_of_node_without_backend_raises_error']]"
TensorNetwork,https://github.com/google/TensorNetwork/tree/master/tensornetwork/network_operations.py,,test_split_node_rq_of_node_without_backend_raises_error,right_axes_order = [edge.axis1 if edge.node1 is node else edge.axis2 for edge in right_edges],"
right_axes_order = []
for edge in right_edges:
    if edge.node1 is node:
        right_axes_order.append(edge.axis1)
    else:
        right_axes_order.append(edge.axis2)
",1,"[['https://github.com/google/TensorNetwork/tree/master/tensornetwork/tests/network_operations_test.py', 'tensornetwork.tests.network_operations_test', '', 'test_split_node_rq_of_node_without_backend_raises_error']]"
TensorNetwork,https://github.com/google/TensorNetwork/tree/master/tensornetwork/network_operations.py,,test_split_node_full_svd_of_node_without_backend_raises_error,left_axes_order = [edge.axis1 if edge.node1 is node else edge.axis2 for edge in left_edges],"
left_axes_order = []
for edge in left_edges:
    if edge.node1 is node:
        left_axes_order.append(edge.axis1)
    else:
        left_axes_order.append(edge.axis2)
",1,"[['https://github.com/google/TensorNetwork/tree/master/tensornetwork/tests/network_operations_test.py', 'tensornetwork.tests.network_operations_test', '', 'test_split_node_full_svd_of_node_without_backend_raises_error']]"
TensorNetwork,https://github.com/google/TensorNetwork/tree/master/tensornetwork/network_operations.py,,test_split_node_full_svd_of_node_without_backend_raises_error,right_axes_order = [edge.axis1 if edge.node1 is node else edge.axis2 for edge in right_edges],"
right_axes_order = []
for edge in right_edges:
    if edge.node1 is node:
        right_axes_order.append(edge.axis1)
    else:
        right_axes_order.append(edge.axis2)
",1,"[['https://github.com/google/TensorNetwork/tree/master/tensornetwork/tests/network_operations_test.py', 'tensornetwork.tests.network_operations_test', '', 'test_split_node_full_svd_of_node_without_backend_raises_error']]"
TensorNetwork,https://github.com/google/TensorNetwork/tree/master/tensornetwork/network_operations.py,,test_serial_with_bindings,node_ids = [node_id_dict.get(n) for n in edge.get_nodes()],"
node_ids = []
for n in edge.get_nodes():
    node_ids.append(node_id_dict.get(n))
",1,"[['https://github.com/google/TensorNetwork/tree/master/tensornetwork/tests/serialize_test.py', 'tensornetwork.tests.serialize_test', '', 'test_serial_non_str_keys'], ['https://github.com/google/TensorNetwork/tree/master/tensornetwork/tests/serialize_test.py', 'tensornetwork.tests.serialize_test', '', 'test_exlcuded_node_serial'], ['https://github.com/google/TensorNetwork/tree/master/tensornetwork/tests/serialize_test.py', 'tensornetwork.tests.serialize_test', '', 'test_serial_exclude_non_network_edges'], ['https://github.com/google/TensorNetwork/tree/master/tensornetwork/tests/serialize_test.py', 'tensornetwork.tests.serialize_test', '', 'test_basic_serial'], ['https://github.com/google/TensorNetwork/tree/master/tensornetwork/tests/serialize_test.py', 'tensornetwork.tests.serialize_test', '', 'test_serial_non_edge_values'], ['https://github.com/google/TensorNetwork/tree/master/tensornetwork/tests/serialize_test.py', 'tensornetwork.tests.serialize_test', '', 'test_serial_with_bindings']]"
TensorNetwork,https://github.com/google/TensorNetwork/tree/master/tensornetwork/network_operations.py,,test_serial_with_bindings,"attributes['axes'] = [a if node_ids[j] is not None else None for (j, a) in enumerate(attributes['axes'])]","tmp_ListComp0 = []
for (j, a) in enumerate(attributes['axes']):
    if node_ids[j] is not None:
        tmp_ListComp0.append(a)
    else:
        tmp_ListComp0.append(None)

attributes['axes'] = tmp_ListComp0
",1,"[['https://github.com/google/TensorNetwork/tree/master/tensornetwork/tests/serialize_test.py', 'tensornetwork.tests.serialize_test', '', 'test_serial_non_str_keys'], ['https://github.com/google/TensorNetwork/tree/master/tensornetwork/tests/serialize_test.py', 'tensornetwork.tests.serialize_test', '', 'test_exlcuded_node_serial'], ['https://github.com/google/TensorNetwork/tree/master/tensornetwork/tests/serialize_test.py', 'tensornetwork.tests.serialize_test', '', 'test_serial_exclude_non_network_edges'], ['https://github.com/google/TensorNetwork/tree/master/tensornetwork/tests/serialize_test.py', 'tensornetwork.tests.serialize_test', '', 'test_basic_serial'], ['https://github.com/google/TensorNetwork/tree/master/tensornetwork/tests/serialize_test.py', 'tensornetwork.tests.serialize_test', '', 'test_serial_non_edge_values'], ['https://github.com/google/TensorNetwork/tree/master/tensornetwork/tests/serialize_test.py', 'tensornetwork.tests.serialize_test', '', 'test_serial_with_bindings']]"
TensorNetwork,https://github.com/google/TensorNetwork/tree/master/tensornetwork/network_operations.py,,test_serial_exclude_non_network_edges,e_nodes = [node_ids.get(n_id) for n_id in e['node_ids']],"
e_nodes = []
for n_id in e['node_ids']:
    e_nodes.append(node_ids.get(n_id))
",1,"[['https://github.com/google/TensorNetwork/tree/master/tensornetwork/tests/serialize_test.py', 'tensornetwork.tests.serialize_test', '', 'test_serial_with_bindings'], ['https://github.com/google/TensorNetwork/tree/master/tensornetwork/tests/serialize_test.py', 'tensornetwork.tests.serialize_test', '', 'test_basic_serial'], ['https://github.com/google/TensorNetwork/tree/master/tensornetwork/tests/serialize_test.py', 'tensornetwork.tests.serialize_test', '', 'test_exlcuded_node_serial'], ['https://github.com/google/TensorNetwork/tree/master/tensornetwork/tests/serialize_test.py', 'tensornetwork.tests.serialize_test', '', 'test_serial_exclude_non_network_edges']]"
TensorNetwork,https://github.com/google/TensorNetwork/tree/master/tensornetwork/block_sparse/blocksparse_utils.py,,test_cache,"tensor_dims = np.array([charges[n].dim for n in range(num_inds)], dtype=int)","tmp_ListComp0 = []
for n in range(num_inds):
    tmp_ListComp0.append(charges[n].dim)

tensor_dims = np.array(tmp_ListComp0, dtype=int)
",1,"[['https://github.com/google/TensorNetwork/tree/master/tensornetwork/block_sparse/caching_test.py', 'tensornetwork.block_sparse.caching_test', '', 'test_cache']]"
TensorNetwork,https://github.com/google/TensorNetwork/tree/master/tensornetwork/block_sparse/blocksparse_utils.py,,test_cache,new_row_charges = [charges[n] for n in order[:tr_partition]],"
new_row_charges = []
for n in order[:tr_partition]:
    new_row_charges.append(charges[n])
",1,"[['https://github.com/google/TensorNetwork/tree/master/tensornetwork/block_sparse/caching_test.py', 'tensornetwork.block_sparse.caching_test', '', 'test_cache']]"
TensorNetwork,https://github.com/google/TensorNetwork/tree/master/tensornetwork/block_sparse/blocksparse_utils.py,,test_cache,new_col_charges = [charges[n] for n in order[tr_partition:]],"
new_col_charges = []
for n in order[tr_partition:]:
    new_col_charges.append(charges[n])
",1,"[['https://github.com/google/TensorNetwork/tree/master/tensornetwork/block_sparse/caching_test.py', 'tensornetwork.block_sparse.caching_test', '', 'test_cache']]"
TensorNetwork,https://github.com/google/TensorNetwork/tree/master/tensornetwork/block_sparse/blocksparse_utils.py,,test_cache,"return ''.join([str(c.charges.tostring()) for c in charges] + [str(np.array(flows).tostring()), str(tr_partition), str(np.array(order, dtype=np.int16).tostring())])","def my_comprehension_func(str):
    tmp_ListComp0 = []
    for c in charges:
        tmp_ListComp0.append(str(c.charges.tostring()))
    return tmp_ListComp0

return ''.join(my_comprehension_func(str) + [str(np.array(flows).tostring()), str(tr_partition), str(np.array(order, dtype=np.int16).tostring())])
",1,"[['https://github.com/google/TensorNetwork/tree/master/tensornetwork/block_sparse/caching_test.py', 'tensornetwork.block_sparse.caching_test', '', 'test_cache']]"
geojson,https://github.com/jazzband/geojson/tree/master/geojson/utils.py,TestGenerateRandom,test_bbox_polygon,return LineString([createPoint() for unused in range(numberVertices)]),"tmp_ListComp0 = []
for unused in range(numberVertices):
    tmp_ListComp0.append(createPoint())

return LineString(tmp_ListComp0)
",1,"[['https://github.com/jazzband/geojson/tree/master/tests/test_utils.py', 'tests.test_utils', 'TestGenerateRandom', 'test_simple_polygon'], ['https://github.com/jazzband/geojson/tree/master/tests/test_utils.py', 'tests.test_utils', 'TestGenerateRandom', 'test_bbox_polygon']]"
policy_sentry,https://github.com/salesforce/policy_sentry/tree/master/policy_sentry/util/policy_files.py,PolicyFilesTestCase,test_get_actions_from_policy,actions_list = [x.lower() for x in actions_list],"tmp_ListComp0 = []
for x in actions_list:
    tmp_ListComp0.append(x.lower())

actions_list = tmp_ListComp0
",1,"[['https://github.com/salesforce/policy_sentry/tree/master/test/util/test_policy_files.py', 'test.util.test_policy_files', 'PolicyFilesTestCase', 'test_get_actions_from_policy']]"
policy_sentry,https://github.com/salesforce/policy_sentry/tree/master/policy_sentry/writing/minimize.py,MinimizeWildcardActionsTestCase,test_minimize_statement_actions,desired_actions = [x.lower() for x in desired_actions],"tmp_ListComp0 = []
for x in desired_actions:
    tmp_ListComp0.append(x.lower())

desired_actions = tmp_ListComp0
",1,"[['https://github.com/salesforce/policy_sentry/tree/master/test/writing/test_minimize.py', 'test.writing.test_minimize', 'MinimizeWildcardActionsTestCase', 'test_minimize_statement_actions_funky_case'], ['https://github.com/salesforce/policy_sentry/tree/master/test/writing/test_minimize.py', 'test.writing.test_minimize', 'MinimizeWildcardActionsTestCase', 'test_minimize_statement_actions']]"
policy_sentry,https://github.com/salesforce/policy_sentry/tree/master/policy_sentry/writing/sid_group.py,SidGroupCrudTestCase,test_sid_group,dependent_actions = [x for x in dependent_actions if x not in supplied_actions],"tmp_ListComp0 = []
for x in dependent_actions:
    if x not in supplied_actions:
        tmp_ListComp0.append(x)

dependent_actions = tmp_ListComp0
",1,"[['https://github.com/salesforce/policy_sentry/tree/master/test/writing/test_sid_group_crud.py', 'test.writing.test_sid_group_crud', 'SidGroupCrudTestCase', 'test_sid_group_multiple'], ['https://github.com/salesforce/policy_sentry/tree/master/test/writing/test_sid_group_crud.py', 'test.writing.test_sid_group_crud', 'SidGroupCrudTestCase', 'test_resource_restriction_plus_dependent_action_simple_2'], ['https://github.com/salesforce/policy_sentry/tree/master/test/writing/test_sid_group_crud.py', 'test.writing.test_sid_group_crud', 'SidGroupCrudTestCase', 'test_refactored_crud_policy'], ['https://github.com/salesforce/policy_sentry/tree/master/test/writing/test_sid_group_crud.py', 'test.writing.test_sid_group_crud', 'SidGroupCrudTestCase', 'test_sid_group']]"
quark-engine,https://github.com/quark-engine/quark-engine/tree/master/quark/utils/regex.py,,test_extract_ip_with_no_result,return [x for x in ip if validate_ip_address(x)],"tmp_ListComp0 = []
for x in ip:
    if validate_ip_address(x):
        tmp_ListComp0.append(x)

return tmp_ListComp0
",1,"[['https://github.com/quark-engine/quark-engine/tree/master/tests/utils/test_regex.py', 'tests.utils.test_regex', '', 'test_extract_ip_with_result'], ['https://github.com/quark-engine/quark-engine/tree/master/tests/utils/test_regex.py', 'tests.utils.test_regex', '', 'test_extract_ip_with_no_result']]"
quark-engine,https://github.com/quark-engine/quark-engine/tree/master/quark/utils/regex.py,,test_extract_url_with_result,return [x[0] for x in url if validate_url(x[0])],"tmp_ListComp0 = []
for x in url:
    if validate_url(x[0]):
        tmp_ListComp0.append(x[0])

return tmp_ListComp0
",1,"[['https://github.com/quark-engine/quark-engine/tree/master/tests/utils/test_regex.py', 'tests.utils.test_regex', '', 'test_extract_url_with_no_result'], ['https://github.com/quark-engine/quark-engine/tree/master/tests/utils/test_regex.py', 'tests.utils.test_regex', '', 'test_extract_url_with_result']]"
xlwt,https://github.com/python-excel/xlwt/tree/master/xlwt/BIFFRecords.py,TestSharedStringTable,test_shared_string_table,"data = [(idx, s) for (s, idx) in self._str_indexes.items()]","
data = []
for (s, idx) in self._str_indexes.items():
    data.append((idx, s))
",1,"[['https://github.com/python-excel/xlwt/tree/master/tests/test_biff_records.py', 'tests.test_biff_records', 'TestSharedStringTable', 'test_shared_string_table']]"
Deep-Reinforcement-Learning-Hands-On,https://github.com/PacktPublishing/Deep-Reinforcement-Learning-Hands-On/tree/master/Chapter18/lib/game.py,TestMoveFunctions,test_possible_moves,"return [idx for (idx, col) in enumerate(field) if len(col) < GAME_ROWS]","tmp_ListComp0 = []
for (idx, col) in enumerate(field):
    if len(col) < GAME_ROWS:
        tmp_ListComp0.append(idx)

return tmp_ListComp0
",1,"[['https://github.com/PacktPublishing/Deep-Reinforcement-Learning-Hands-On/tree/master/Chapter18/tests/test_game.py', 'Chapter18.tests.test_game', 'TestMoveFunctions', 'test_possible_moves']]"
httpx,https://github.com/encode/httpx/tree/master/httpx/_models.py,,test_headers,"return [(key.decode(self.encoding), value.decode(self.encoding)) for (_, key, value) in self._list]","tmp_ListComp0 = []
for (_, key, value) in self._list:
    tmp_ListComp0.append((key.decode(self.encoding), value.decode(self.encoding)))

return tmp_ListComp0
",1,"[['https://github.com/encode/httpx/tree/master/tests/models/test_headers.py', 'tests.models.test_headers', '', 'test_headers']]"
fairlearn,https://github.com/fairlearn/fairlearn/tree/master/test/unit/reductions/moments/data_generator.py,,test_construct_and_load,Y_a0 = [x > a0_threshold for x in a0_scores],"
Y_a0 = []
for x in a0_scores:
    Y_a0.append(x > a0_threshold)
",1,"[['https://github.com/fairlearn/fairlearn/tree/master/test/unit/reductions/moments/test_moments_demographic_parity.py', 'test.unit.reductions.moments.test_moments_demographic_parity', '', 'test_signed_weights'], ['https://github.com/fairlearn/fairlearn/tree/master/test/unit/reductions/moments/test_moments_equalized_odds.py', 'test.unit.reductions.moments.test_moments_equalized_odds', '', 'test_signed_weights'], ['https://github.com/fairlearn/fairlearn/tree/master/test/unit/reductions/moments/test_moments_equalized_odds.py', 'test.unit.reductions.moments.test_moments_equalized_odds', '', 'test_construct_and_load'], ['https://github.com/fairlearn/fairlearn/tree/master/test/unit/reductions/moments/test_moments_demographic_parity.py', 'test.unit.reductions.moments.test_moments_demographic_parity', '', 'test_construct_and_load']]"
fairlearn,https://github.com/fairlearn/fairlearn/tree/master/test/unit/reductions/moments/data_generator.py,,test_construct_and_load,Y_a1 = [x > a1_threshold for x in a1_scores],"
Y_a1 = []
for x in a1_scores:
    Y_a1.append(x > a1_threshold)
",1,"[['https://github.com/fairlearn/fairlearn/tree/master/test/unit/reductions/moments/test_moments_demographic_parity.py', 'test.unit.reductions.moments.test_moments_demographic_parity', '', 'test_signed_weights'], ['https://github.com/fairlearn/fairlearn/tree/master/test/unit/reductions/moments/test_moments_equalized_odds.py', 'test.unit.reductions.moments.test_moments_equalized_odds', '', 'test_signed_weights'], ['https://github.com/fairlearn/fairlearn/tree/master/test/unit/reductions/moments/test_moments_equalized_odds.py', 'test.unit.reductions.moments.test_moments_equalized_odds', '', 'test_construct_and_load'], ['https://github.com/fairlearn/fairlearn/tree/master/test/unit/reductions/moments/test_moments_demographic_parity.py', 'test.unit.reductions.moments.test_moments_demographic_parity', '', 'test_construct_and_load']]"
cosmic-ray,https://github.com/sixty-north/cosmic-ray/tree/master/tests/resources/example_project/adam/adam_1.py,Tests,test_equals,"return all([constraint(x, y) for x in vals for y in vals])","tmp_ListComp0 = []
for x in vals:
    for y in vals:
        tmp_ListComp0.append(constraint(x, y))

return all(tmp_ListComp0)
",1,"[['https://github.com/sixty-north/cosmic-ray/tree/master/tests/resources/example_project/tests/test_adam.py', 'tests.resources.example_project.tests.test_adam', 'Tests', 'test_equals']]"
google-maps-services-python,https://github.com/googlemaps/google-maps-services-python/tree/master/googlemaps/convert.py,ConvertTest,test_location_list,return '|'.join([latlng(location) for location in as_list(arg)]),"tmp_ListComp0 = []
for location in as_list(arg):
    tmp_ListComp0.append(latlng(location))

return '|'.join(tmp_ListComp0)
",1,"[['https://github.com/googlemaps/google-maps-services-python/tree/master/tests/test_convert.py', 'tests.test_convert', 'ConvertTest', 'test_location_list']]"
zdict,https://github.com/zdict/zdict/tree/master/zdict/api.py,,test_dump,"return [r.word for r in Record.select() if re.fullmatch(pattern, r.word)]","tmp_ListComp0 = []
for r in Record.select():
    if re.fullmatch(pattern, r.word):
        tmp_ListComp0.append(r.word)

return tmp_ListComp0
",1,"[['https://github.com/zdict/zdict/tree/master/zdict/tests/test_api.py', 'zdict.tests.test_api', '', 'test_dump']]"
lifetimes,https://github.com/CamDavidsonPilon/lifetimes/tree/master/lifetimes/utils.py,,test_calibration_and_holdout_data_is_okay_with_other_indexes,calibration_summary_data.columns = [c + '_cal' for c in calibration_summary_data.columns],"tmp_ListComp0 = []
for c in calibration_summary_data.columns:
    tmp_ListComp0.append(c + '_cal')

calibration_summary_data.columns = tmp_ListComp0
",1,"[['https://github.com/CamDavidsonPilon/lifetimes/tree/master/tests/test_utils.py', 'tests.test_utils', '', 'test_calibration_and_holdout_data_gives_correct_date_boundaries'], ['https://github.com/CamDavidsonPilon/lifetimes/tree/master/tests/test_utils.py', 'tests.test_utils', '', 'test_calibration_and_holdout_data_with_monetary_value'], ['https://github.com/CamDavidsonPilon/lifetimes/tree/master/tests/test_utils.py', 'tests.test_utils', '', 'test_calibration_and_holdout_data_throws_better_error_if_observation_period_end_is_too_early'], ['https://github.com/CamDavidsonPilon/lifetimes/tree/master/tests/test_utils.py', 'tests.test_utils', '', 'test_calibration_and_holdout_data_works_with_specific_frequency'], ['https://github.com/CamDavidsonPilon/lifetimes/tree/master/tests/test_utils.py', 'tests.test_utils', '', 'test_calibration_and_holdout_data'], ['https://github.com/CamDavidsonPilon/lifetimes/tree/master/tests/test_utils.py', 'tests.test_utils', '', 'test_calibration_and_holdout_data_is_okay_with_other_indexes']]"
lifetimes,https://github.com/CamDavidsonPilon/lifetimes/tree/master/lifetimes/utils.py,,test_expected_cumulative_transactions_dedups_inside_a_time_period,times = np.array([d.n for d in period - first_trans_size.index]),"tmp_ListComp0 = []
for d in period - first_trans_size.index:
    tmp_ListComp0.append(d.n)

times = np.array(tmp_ListComp0)
",1,"[['https://github.com/CamDavidsonPilon/lifetimes/tree/master/tests/test_utils.py', 'tests.test_utils', '', 'test_expected_cumulative_transactions_date_index'], ['https://github.com/CamDavidsonPilon/lifetimes/tree/master/tests/test_utils.py', 'tests.test_utils', '', 'test_expected_cumulative_transactions_dedups_inside_a_time_period']]"
pycoin,https://github.com/richardkiss/pycoin/tree/master/pycoin/key/subpaths.py,KeychainTest,test_keychain,iterators = [range_iterator(c) for c in components],"
iterators = []
for c in components:
    iterators.append(range_iterator(c))
",1,"[['https://github.com/richardkiss/pycoin/tree/master/tests/keychain_test.py', 'tests.keychain_test', 'KeychainTest', 'test_keychain']]"
pycoin,https://github.com/richardkiss/pycoin/tree/master/pycoin/key/subpaths.py,KeychainTest,test_keychain,"(low, high) = [int(x) for x in r.split('-', 1)]","tmp_ListComp0 = []
for x in r.split('-', 1):
    tmp_ListComp0.append(int(x))

(low, high) = tmp_ListComp0
",1,"[['https://github.com/richardkiss/pycoin/tree/master/tests/keychain_test.py', 'tests.keychain_test', 'KeychainTest', 'test_keychain']]"
pycoin,https://github.com/richardkiss/pycoin/tree/master/pycoin/message/make_parser_and_packer.py,MessageTest,test_make_parser_and_packer,pairs = [t.split(':') for t in the_fields],"
pairs = []
for t in the_fields:
    pairs.append(t.split(':'))
",1,"[['https://github.com/richardkiss/pycoin/tree/master/tests/message_test.py', 'tests.message_test', 'MessageTest', 'test_make_parser_and_packer']]"
pycoin,https://github.com/richardkiss/pycoin/tree/master/pycoin/coins/Tx.py,SignTest,test_sign_pay_to_script_multisig,"return [self.Spendable.from_tx_out(tx_out, h, tx_out_index, block_index_available) for (tx_out_index, tx_out) in enumerate(self.txs_out)]","tmp_ListComp0 = []
for (tx_out_index, tx_out) in enumerate(self.txs_out):
    tmp_ListComp0.append(self.Spendable.from_tx_out(tx_out, h, tx_out_index, block_index_available))

return tmp_ListComp0
",1,"[['https://github.com/richardkiss/pycoin/tree/master/tests/who_signed_test.py', 'tests.who_signed_test', 'WhoSignedTest', 'test_multisig_one_at_a_time'], ['https://github.com/richardkiss/pycoin/tree/master/tests/who_signed_test.py', 'tests.who_signed_test', 'WhoSignedTest', 'test_sign_pay_to_script_multisig'], ['https://github.com/richardkiss/pycoin/tree/master/tests/sign_test.py', 'tests.sign_test', 'SignTest', 'test_multisig_one_at_a_time'], ['https://github.com/richardkiss/pycoin/tree/master/tests/sign_test.py', 'tests.sign_test', 'SignTest', 'test_sign_pay_to_script_multisig']]"
pycoin,https://github.com/richardkiss/pycoin/tree/master/pycoin/coins/bitcoin/Tx.py,SignTest,test_sign_pay_to_script_multisig,"return [self.Spendable.from_tx_out(tx_out, h, tx_out_index, block_index_available) for (tx_out_index, tx_out) in enumerate(self.txs_out)]","tmp_ListComp0 = []
for (tx_out_index, tx_out) in enumerate(self.txs_out):
    tmp_ListComp0.append(self.Spendable.from_tx_out(tx_out, h, tx_out_index, block_index_available))

return tmp_ListComp0
",1,"[['https://github.com/richardkiss/pycoin/tree/master/tests/who_signed_test.py', 'tests.who_signed_test', 'WhoSignedTest', 'test_multisig_one_at_a_time'], ['https://github.com/richardkiss/pycoin/tree/master/tests/who_signed_test.py', 'tests.who_signed_test', 'WhoSignedTest', 'test_sign_pay_to_script_multisig'], ['https://github.com/richardkiss/pycoin/tree/master/tests/sign_test.py', 'tests.sign_test', 'SignTest', 'test_multisig_one_at_a_time'], ['https://github.com/richardkiss/pycoin/tree/master/tests/sign_test.py', 'tests.sign_test', 'SignTest', 'test_sign_pay_to_script_multisig']]"
python-seo-analyzer,https://github.com/sethblack/python-seo-analyzer/tree/master/seoanalyzer/page.py,,test_analyze,"visible_text = [w for w in filter(self.visible_tags, texts)]","
visible_text = []
for w in filter(self.visible_tags, texts):
    visible_text.append(w)
",1,"[['https://github.com/sethblack/python-seo-analyzer/tree/master/tests/test_page.py', 'tests.test_page', '', 'test_analyze']]"
xar,https://github.com/facebookincubator/xar/tree/master/xar/py_util.py,PyUtilTest,test_wheel_determine_kind_normal,xar_prefix = [dst_paths[kind] for kind in kinds],"
xar_prefix = []
for kind in kinds:
    xar_prefix.append(dst_paths[kind])
",1,"[['https://github.com/facebookincubator/xar/tree/master/xar/tests/py_util_test.py', 'xar.tests.py_util_test', 'PyUtilTest', 'test_wheel_determine_kind_mac'], ['https://github.com/facebookincubator/xar/tree/master/xar/tests/py_util_test.py', 'xar.tests.py_util_test', 'PyUtilTest', 'test_wheel_determine_kind_normal']]"
xar,https://github.com/facebookincubator/xar/tree/master/xar/py_util.py,PyUtilTest,test_wheel_determine_kind_normal,"kinds = [kind for (kind, path) in src_paths.items() if prefix == path]","
kinds = []
for (kind, path) in src_paths.items():
    if prefix == path:
        kinds.append(kind)
",1,"[['https://github.com/facebookincubator/xar/tree/master/xar/tests/py_util_test.py', 'xar.tests.py_util_test', 'PyUtilTest', 'test_wheel_determine_kind_mac'], ['https://github.com/facebookincubator/xar/tree/master/xar/tests/py_util_test.py', 'xar.tests.py_util_test', 'PyUtilTest', 'test_wheel_determine_kind_normal']]"
pattern,https://github.com/clips/pattern/tree/master/pattern/metrics.py,TestTextMetrics,test_suffixes,"d = [(int(sum(y.values())), x, y.items()) for (x, y) in d.items()]","tmp_ListComp0 = []
for (x, y) in d.items():
    tmp_ListComp0.append((int(sum(y.values())), x, y.items()))

d = tmp_ListComp0
",1,"[['https://github.com/clips/pattern/tree/master/test/test_metrics.py', 'test.test_metrics', 'TestTextMetrics', 'test_suffixes']]"
detect-secrets,https://github.com/Yelp/detect-secrets/tree/master/detect_secrets/core/secrets_collection.py,TestTrim,test_remove_non_existent_files,filelist = [filename for filename in self.files if not os.path.exists(filename)],"
filelist = []
for filename in self.files:
    if not os.path.exists(filename):
        filelist.append(filename)
",1,"[['https://github.com/Yelp/detect-secrets/tree/master/tests/core/secrets_collection_test.py', 'tests.core.secrets_collection_test', 'TestTrim', 'test_maintains_labels'], ['https://github.com/Yelp/detect-secrets/tree/master/tests/core/secrets_collection_test.py', 'tests.core.secrets_collection_test', 'TestTrim', 'test_same_secret_new_location'], ['https://github.com/Yelp/detect-secrets/tree/master/tests/core/secrets_collection_test.py', 'tests.core.secrets_collection_test', 'TestTrim', 'test_deleted_secret'], ['https://github.com/Yelp/detect-secrets/tree/master/tests/core/secrets_collection_test.py', 'tests.core.secrets_collection_test', 'TestTrim', 'test_deleted_secret_file'], ['https://github.com/Yelp/detect-secrets/tree/master/tests/core/secrets_collection_test.py', 'tests.core.secrets_collection_test', 'TestTrim', 'test_remove_non_existent_files']]"
skidl,https://github.com/devbisme/skidl/tree/master/skidl/part.py,,test_connect_3,"rmv_attrs = [k for (k, v) in list(cpy.__dict__.items()) if isinstance(v, (Pin, PartUnit))]","
rmv_attrs = []
for (k, v) in list(cpy.__dict__.items()):
    if isinstance(v, (Pin, PartUnit)):
        rmv_attrs.append(k)
",1,"[['https://github.com/devbisme/skidl/tree/master/tests/test_connect.py', 'tests.test_connect', '', 'test_connect_6'], ['https://github.com/devbisme/skidl/tree/master/tests/test_connect.py', 'tests.test_connect', '', 'test_connect_2'], ['https://github.com/devbisme/skidl/tree/master/tests/test_connect.py', 'tests.test_connect', '', 'test_connect_3']]"
skidl,https://github.com/devbisme/skidl/tree/master/skidl/part.py,,test_connect_3,cpy += [p.copy() for p in self.pins],"tmp_ListComp0 = []
for p in self.pins:
    tmp_ListComp0.append(p.copy())

cpy += tmp_ListComp0
",1,"[['https://github.com/devbisme/skidl/tree/master/tests/test_connect.py', 'tests.test_connect', '', 'test_connect_6'], ['https://github.com/devbisme/skidl/tree/master/tests/test_connect.py', 'tests.test_connect', '', 'test_connect_2'], ['https://github.com/devbisme/skidl/tree/master/tests/test_connect.py', 'tests.test_connect', '', 'test_connect_3']]"
skidl,https://github.com/devbisme/skidl/tree/master/skidl/netlist_to_skidl.py,,test_parser_1,"chars = [c for c in [comp.lib, comp.name, comp.footprint] if len(c)]","
chars = []
for c in [comp.lib, comp.name, comp.footprint]:
    if len(c):
        chars.append(c)
",1,"[['https://github.com/devbisme/skidl/tree/master/tests/test_parse.py', 'tests.test_parse', '', 'test_parser_1']]"
skidl,https://github.com/devbisme/skidl/tree/master/skidl/netlist_to_skidl.py,,test_parser_1,template_statements = sorted([template_comp_to_skidl(c) for c in list(comp_templates.values())]),"tmp_ListComp0 = []
for c in list(comp_templates.values()):
    tmp_ListComp0.append(template_comp_to_skidl(c))

template_statements = sorted(tmp_ListComp0)
",1,"[['https://github.com/devbisme/skidl/tree/master/tests/test_parse.py', 'tests.test_parse', '', 'test_parser_1']]"
skidl,https://github.com/devbisme/skidl/tree/master/skidl/netlist_to_skidl.py,,test_parser_1,"comp_inst_statements = sorted([comp_to_skidl(c, comp_templates) for c in ntlst.parts])","tmp_ListComp0 = []
for c in ntlst.parts:
    tmp_ListComp0.append(comp_to_skidl(c, comp_templates))

comp_inst_statements = sorted(tmp_ListComp0)
",1,"[['https://github.com/devbisme/skidl/tree/master/tests/test_parse.py', 'tests.test_parse', '', 'test_parser_1']]"
skidl,https://github.com/devbisme/skidl/tree/master/skidl/netlist_to_skidl.py,,test_parser_1,net_statements = sorted([net_to_skidl(n) for n in ntlst.nets]),"tmp_ListComp0 = []
for n in ntlst.nets:
    tmp_ListComp0.append(net_to_skidl(n))

net_statements = sorted(tmp_ListComp0)
",1,"[['https://github.com/devbisme/skidl/tree/master/tests/test_parse.py', 'tests.test_parse', '', 'test_parser_1']]"
skidl,https://github.com/devbisme/skidl/tree/master/skidl/schlib.py,,test_lib_export_1,"part_export_str = ','.join([p.export() for p in self.parts])","tmp_ListComp0 = []
for p in self.parts:
    tmp_ListComp0.append(p.export())

part_export_str = ','.join(tmp_ListComp0)
",1,"[['https://github.com/devbisme/skidl/tree/master/tests/test_lib.py', 'tests.test_lib', '', 'test_lib_1'], ['https://github.com/devbisme/skidl/tree/master/tests/test_lib.py', 'tests.test_lib', '', 'test_lib_export_1']]"
joblib,https://github.com/joblib/joblib/tree/master/joblib/func_inspect.py,,test_func_name_on_inner_func,module = [_clean_win_chars(s) for s in module],"tmp_ListComp0 = []
for s in module:
    tmp_ListComp0.append(_clean_win_chars(s))

module = tmp_ListComp0
",1,"[['https://github.com/joblib/joblib/tree/master/joblib/test/test_func_inspect.py', 'joblib.test.test_func_inspect', '', 'test_func_inspect_errors'], ['https://github.com/joblib/joblib/tree/master/joblib/test/test_func_inspect.py', 'joblib.test.test_func_inspect', '', 'test_func_name_on_inner_func']]"
joblib,https://github.com/joblib/joblib/tree/master/joblib/func_inspect.py,,test_format_signature_long_arguments,module = [m for m in module if m],"tmp_ListComp0 = []
for m in module:
    if m:
        tmp_ListComp0.append(m)

module = tmp_ListComp0
",1,"[['https://github.com/joblib/joblib/tree/master/joblib/test/test_func_inspect.py', 'joblib.test.test_func_inspect', '', 'test_format_signature_long_arguments']]"
joblib,https://github.com/joblib/joblib/tree/master/joblib/func_inspect.py,,test_format_signature_long_arguments,"arg_str.extend(['%s=%s' % (v, _format_arg(i)) for (v, i) in kwargs.items()])","tmp_ListComp0 = []
for (v, i) in kwargs.items():
    tmp_ListComp0.append('%s=%s' % (v, _format_arg(i)))

arg_str.extend(tmp_ListComp0)
",1,"[['https://github.com/joblib/joblib/tree/master/joblib/test/test_func_inspect.py', 'joblib.test.test_func_inspect', '', 'test_format_signature_long_arguments']]"
django-environ,https://github.com/joke2k/django-environ/tree/master/environ/environ.py,,test_redis_socket_url,"locations = [scheme + '://' + loc + url.path for loc in url.netloc.split(',')]","
locations = []
for loc in url.netloc.split(','):
    locations.append(scheme + '://' + loc + url.path)
",1,"[['https://github.com/joke2k/django-environ/tree/master/tests/test_cache.py', 'tests.test_cache', '', 'test_base_options_parsing'], ['https://github.com/joke2k/django-environ/tree/master/tests/test_cache.py', 'tests.test_cache', '', 'test_redis_parsing'], ['https://github.com/joke2k/django-environ/tree/master/tests/test_cache.py', 'tests.test_cache', '', 'test_unknown_backend'], ['https://github.com/joke2k/django-environ/tree/master/tests/test_cache.py', 'tests.test_cache', '', 'test_options_parsing'], ['https://github.com/joke2k/django-environ/tree/master/tests/test_cache.py', 'tests.test_cache', '', 'test_custom_backend'], ['https://github.com/joke2k/django-environ/tree/master/tests/test_cache.py', 'tests.test_cache', '', 'test_empty_url_is_mapped_to_empty_config'], ['https://github.com/joke2k/django-environ/tree/master/tests/test_cache.py', 'tests.test_cache', '', 'test_redis_socket_url']]"
cement,https://github.com/datafolklabs/cement/tree/master/cement/core/foundation.py,,test_add_handler_override_options_no_interface,choices = [x._meta.label for x in handlers if x._meta.overridable is True],"
choices = []
for x in handlers:
    if x._meta.overridable is True:
        choices.append(x._meta.label)
",1,"[['https://github.com/datafolklabs/cement/tree/master/tests/core/test_foundation.py', 'tests.core.test_foundation', '', 'test_add_handler_override_options_none'], ['https://github.com/datafolklabs/cement/tree/master/tests/core/test_foundation.py', 'tests.core.test_foundation', '', 'test_add_handler_override_options_no_override'], ['https://github.com/datafolklabs/cement/tree/master/tests/core/test_foundation.py', 'tests.core.test_foundation', '', 'test_add_handler_override_options_no_interface']]"
pydantic,https://github.com/samuelcolvin/pydantic/tree/master/pydantic/color.py,,test_as_hex,values = [float_to_255(c) for c in self._rgba[:3]],"
values = []
for c in self._rgba[:3]:
    values.append(float_to_255(c))
",1,"[['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_color.py', 'tests.test_color', '', 'test_as_hex']]"
pydantic,https://github.com/samuelcolvin/pydantic/tree/master/pydantic/utils.py,,test_getdict,return [self[k] for k in self],"tmp_ListComp0 = []
for k in self:
    tmp_ListComp0.append(self[k])

return tmp_ListComp0
",1,"[['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_orm_mode.py', 'tests.test_orm_mode', '', 'test_getdict']]"
pydantic,https://github.com/samuelcolvin/pydantic/tree/master/pydantic/schema.py,,test_schema_no_definitions,clean_models = [get_model(model) for model in models],"
clean_models = []
for model in models:
    clean_models.append(get_model(model))
",1,"[['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_schema.py', 'tests.test_schema', '', 'test_schema_ref_template_key_error'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_schema.py', 'tests.test_schema', '', 'test_schema_from_models'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_schema.py', 'tests.test_schema', '', 'test_dataclass'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_schema.py', 'tests.test_schema', '', 'test_schema_with_custom_ref_template'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_schema.py', 'tests.test_schema', '', 'test_multiple_models_with_same_name'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_schema.py', 'tests.test_schema', '', 'test_schema_no_definitions']]"
dulwich,https://github.com/dulwich/dulwich/tree/master/dulwich/client.py,RemoteErrorFromStderrTests,test_nothing,lines = [line.rstrip(b'\n') for line in stderr.readlines()],"
lines = []
for line in stderr.readlines():
    lines.append(line.rstrip(b'\n'))
",1,"[['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_client.py', 'dulwich.tests.test_client', 'RemoteErrorFromStderrTests', 'test_no_error_line'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_client.py', 'dulwich.tests.test_client', 'RemoteErrorFromStderrTests', 'test_error_line'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_client.py', 'dulwich.tests.test_client', 'RemoteErrorFromStderrTests', 'test_nothing']]"
dulwich,https://github.com/dulwich/dulwich/tree/master/dulwich/pack.py,TestPack,test_copy,"entries = sorted([(k, v[0], v[1]) for (k, v) in entries.items()])","tmp_ListComp0 = []
for (k, v) in entries.items():
    tmp_ListComp0.append((k, v[0], v[1]))

entries = sorted(tmp_ListComp0)
",1,"[['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/compat/test_pack.py', 'dulwich.tests.compat.test_pack', 'TestPack', 'test_delta_medium_object'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/compat/test_pack.py', 'dulwich.tests.compat.test_pack', 'TestPack', 'test_copy'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/compat/test_pack.py', 'dulwich.tests.compat.test_pack', 'TestPack', 'test_deltas_work'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_pack.py', 'dulwich.tests.test_pack', 'TestPack', 'test_copy']]"
dulwich,https://github.com/dulwich/dulwich/tree/master/dulwich/porcelain.py,LogTests,test_simple,outstream.writelines([line + '\n' for line in print_name_status(entry.changes())]),"tmp_ListComp0 = []
for line in print_name_status(entry.changes()):
    tmp_ListComp0.append(line + '\n')

outstream.writelines(tmp_ListComp0)
",1,"[['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'LogTests', 'test_max_entries'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'LogTests', 'test_simple']]"
dulwich,https://github.com/dulwich/dulwich/tree/master/dulwich/tests/utils.py,UpdateHeadTests,test_set_to_commit_detached,parent_ids = [nums[pn] for pn in commit[1:]],"
parent_ids = []
for pn in commit[1:]:
    parent_ids.append(nums[pn])
",1,"[['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'TagCreateTests', 'test_annotated'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'CloneTests', 'test_fetch_symref'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'TagCreateTests', 'test_unannotated'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_objectspec.py', 'dulwich.tests.test_objectspec', 'ParseCommitTests', 'test_commit_by_sha'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'TagDeleteTests', 'test_simple'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'CommitTests', 'test_unicode'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'UpdateHeadTests', 'test_set_to_branch'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_archive.py', 'dulwich.tests.test_archive', 'ArchiveTests', 'test_empty'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'CommitTests', 'test_no_verify'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_objectspec.py', 'dulwich.tests.test_objectspec', 'ParseCommitRangeTests', 'test_commit_by_sha'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'SymbolicRefTests', 'test_set_symbolic_ref_other_than_master'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'BranchCreateTests', 'test_branch_exists'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_objectspec.py', 'dulwich.tests.test_objectspec', 'ParseCommitTests', 'test_commit_by_short_sha'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'RevListTests', 'test_simple'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_objectspec.py', 'dulwich.tests.test_objectspec', 'ParseTreeTests', 'test_from_ref'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'CloneTests', 'test_simple_local'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'BranchListTests', 'test_new_branch'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'BranchDeleteTests', 'test_simple'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'SymbolicRefTests', 'test_set_force_wrong_symbolic_ref'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'DiffTreeTests', 'test_empty'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_fastexport.py', 'dulwich.tests.test_fastexport', 'GitImportProcessorTests', 'test_reset_handler_default'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_fastexport.py', 'dulwich.tests.test_fastexport', 'GitImportProcessorTests', 'test_commit_handler_markers'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_fastexport.py', 'dulwich.tests.test_fastexport', 'GitImportProcessorTests', 'test_reset_handler'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'CloneTests', 'test_no_head_no_checkout'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'CloneTests', 'test_bare_local_with_checkout'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'ShowTests', 'test_nolist'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'UpdateHeadTests', 'test_set_new_branch'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_utils.py', 'dulwich.tests.test_utils', 'BuildCommitGraphTest', 'test_commit_time'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_fastexport.py', 'dulwich.tests.test_fastexport', 'GitImportProcessorTests', 'test_reset_handler_marker'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'CommitTests', 'test_custom_author'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'UpdateHeadTests', 'test_set_to_branch_detached'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'LogTests', 'test_max_entries'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'CloneTests', 'test_no_checkout_with_bare'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_utils.py', 'dulwich.tests.test_utils', 'BuildCommitGraphTest', 'test_linear'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'CloneTests', 'test_simple_local_with_checkout'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'SymbolicRefTests', 'test_set_symbolic_ref'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_utils.py', 'dulwich.tests.test_utils', 'BuildCommitGraphTest', 'test_attrs'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'LogTests', 'test_simple'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'BranchDeleteTests', 'test_simple_unicode'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'TagCreateTests', 'test_unannotated_unicode'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'CloneTests', 'test_no_head_no_checkout_outstream_errstream_autofallback'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_objectspec.py', 'dulwich.tests.test_objectspec', 'ParseTreeTests', 'test_from_commit'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'UpdateServerInfoTests', 'test_simple'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'SymbolicRefTests', 'test_set_wrong_symbolic_ref'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_utils.py', 'dulwich.tests.test_utils', 'BuildCommitGraphTest', 'test_merge'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_utils.py', 'dulwich.tests.test_utils', 'BuildCommitGraphTest', 'test_trees'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'ArchiveTests', 'test_simple'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'ShowTests', 'test_simple'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'CommitTreeTests', 'test_simple'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'BranchCreateTests', 'test_new_branch'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'UpdateHeadTests', 'test_set_to_commit_detached']]"
mentalist,https://github.com/sc0tfree/mentalist/tree/master/mentalist/model.py,TestModel,test_case_hashcat_chain,return '\n'.join([''.join(line) for line in lines]) + '\n',"tmp_ListComp0 = []
for line in lines:
    tmp_ListComp0.append(''.join(line))

return '\n'.join(tmp_ListComp0) + '\n'
",1,"[['https://github.com/sc0tfree/mentalist/tree/master/tests/test_model.py', 'tests.test_model', 'TestModel', 'test_add_chain'], ['https://github.com/sc0tfree/mentalist/tree/master/tests/test_model.py', 'tests.test_model', 'TestModel', 'test_empty_mutate_chain'], ['https://github.com/sc0tfree/mentalist/tree/master/tests/test_model.py', 'tests.test_model', 'TestModel', 'test_append_nothing_chain'], ['https://github.com/sc0tfree/mentalist/tree/master/tests/test_model.py', 'tests.test_model', 'TestModel', 'test_empty_mutate_case_chain'], ['https://github.com/sc0tfree/mentalist/tree/master/tests/test_model.py', 'tests.test_model', 'TestModel', 'test_nothing_mutator_chain'], ['https://github.com/sc0tfree/mentalist/tree/master/tests/test_model.py', 'tests.test_model', 'TestModel', 'test_substitution_hashcat_chain'], ['https://github.com/sc0tfree/mentalist/tree/master/tests/test_model.py', 'tests.test_model', 'TestModel', 'test_empty_add_case_chain'], ['https://github.com/sc0tfree/mentalist/tree/master/tests/test_model.py', 'tests.test_model', 'TestModel', 'test_long_hashcat_chain'], ['https://github.com/sc0tfree/mentalist/tree/master/tests/test_model.py', 'tests.test_model', 'TestModel', 'test_case_hashcat_chain']]"
docker-py,https://github.com/docker/docker-py/tree/master/docker/errors.py,CreateUnexpectedKwargsErrorTest,test_create_unexpected_kwargs_error_multiple,quoted_kwargs = [f"'{k}'" for k in sorted(kwargs)],"
quoted_kwargs = []
for k in sorted(kwargs):
    quoted_kwargs.append(f""'{k}'"")
",1,"[['https://github.com/docker/docker-py/tree/master/tests/unit/errors_test.py', 'tests.unit.errors_test', 'CreateUnexpectedKwargsErrorTest', 'test_create_unexpected_kwargs_error_single'], ['https://github.com/docker/docker-py/tree/master/tests/unit/errors_test.py', 'tests.unit.errors_test', 'CreateUnexpectedKwargsErrorTest', 'test_create_unexpected_kwargs_error_multiple']]"
docker-py,https://github.com/docker/docker-py/tree/master/docker/models/containers.py,ContainerCollectionTest,test_create_container_args,"create_kwargs['ports'] = [tuple(p.split('/', 1)) for p in sorted(port_bindings.keys())]","
create_kwargs['ports'] = []
for p in sorted(port_bindings.keys()):
    create_kwargs['ports'].append(tuple(p.split('/', 1)))
",1,"[['https://github.com/docker/docker-py/tree/master/tests/unit/models_containers_test.py', 'tests.unit.models_containers_test', 'ContainerCollectionTest', 'test_create_container_args']]"
docker-py,https://github.com/docker/docker-py/tree/master/docker/models/containers.py,ContainerCollectionTest,test_create_container_args,create_kwargs['volumes'] = [v.get('bind') for v in volumes.values()],"
create_kwargs['volumes'] = []
for v in volumes.values():
    create_kwargs['volumes'].append(v.get('bind'))
",1,"[['https://github.com/docker/docker-py/tree/master/tests/unit/models_containers_test.py', 'tests.unit.models_containers_test', 'ContainerCollectionTest', 'test_create_container_args']]"
docker-py,https://github.com/docker/docker-py/tree/master/docker/models/containers.py,ContainerCollectionTest,test_create_container_args,create_kwargs['volumes'] = [_host_volume_from_bind(v) for v in volumes],"
create_kwargs['volumes'] = []
for v in volumes:
    create_kwargs['volumes'].append(_host_volume_from_bind(v))
",1,"[['https://github.com/docker/docker-py/tree/master/tests/unit/models_containers_test.py', 'tests.unit.models_containers_test', 'ContainerCollectionTest', 'test_create_container_args']]"
docker-py,https://github.com/docker/docker-py/tree/master/docker/utils/utils.py,UtilsTest,test_convert_filters,"result[k] = [str(item) if not isinstance(item, str) else item for item in v]","
result[k] = []
for item in v:
    if not isinstance(item, str):
        result[k].append(str(item))
    else:
        result[k].append(item)
",1,"[['https://github.com/docker/docker-py/tree/master/tests/unit/api_test.py', 'tests.unit.api_test', 'DockerApiTest', 'test_events_with_filters'], ['https://github.com/docker/docker-py/tree/master/tests/unit/utils_test.py', 'tests.unit.utils_test', 'UtilsTest', 'test_convert_filters']]"
docker-py,https://github.com/docker/docker-py/tree/master/docker/utils/ports.py,PortsTest,test_split_port_range_with_host_ip_no_port,"return (internal, [(host, ext_port) for ext_port in external])","tmp_ListComp0 = []
for ext_port in external:
    tmp_ListComp0.append((host, ext_port))

return (internal, tmp_ListComp0)
",1,"[['https://github.com/docker/docker-py/tree/master/tests/unit/utils_test.py', 'tests.unit.utils_test', 'PortsTest', 'test_split_port_with_ipv6_address'], ['https://github.com/docker/docker-py/tree/master/tests/unit/utils_test.py', 'tests.unit.utils_test', 'PortsTest', 'test_port_and_range_invalid'], ['https://github.com/docker/docker-py/tree/master/tests/unit/utils_test.py', 'tests.unit.utils_test', 'PortsTest', 'test_host_only_with_colon'], ['https://github.com/docker/docker-py/tree/master/tests/unit/utils_test.py', 'tests.unit.utils_test', 'PortsTest', 'test_split_port_with_host_ip'], ['https://github.com/docker/docker-py/tree/master/tests/unit/utils_test.py', 'tests.unit.utils_test', 'PortsTest', 'test_split_port_with_host_port'], ['https://github.com/docker/docker-py/tree/master/tests/unit/utils_test.py', 'tests.unit.utils_test', 'PortsTest', 'test_split_port_with_ipv6_square_brackets_address'], ['https://github.com/docker/docker-py/tree/master/tests/unit/utils_test.py', 'tests.unit.utils_test', 'PortsTest', 'test_split_port_invalid'], ['https://github.com/docker/docker-py/tree/master/tests/unit/utils_test.py', 'tests.unit.utils_test', 'PortsTest', 'test_non_matching_length_port_ranges'], ['https://github.com/docker/docker-py/tree/master/tests/unit/utils_test.py', 'tests.unit.utils_test', 'PortsTest', 'test_split_port_with_protocol'], ['https://github.com/docker/docker-py/tree/master/tests/unit/utils_test.py', 'tests.unit.utils_test', 'PortsTest', 'test_with_no_container_port'], ['https://github.com/docker/docker-py/tree/master/tests/unit/utils_test.py', 'tests.unit.utils_test', 'PortsTest', 'test_split_port_range_no_host_port'], ['https://github.com/docker/docker-py/tree/master/tests/unit/utils_test.py', 'tests.unit.utils_test', 'PortsTest', 'test_split_port_range_with_protocol'], ['https://github.com/docker/docker-py/tree/master/tests/unit/utils_test.py', 'tests.unit.utils_test', 'PortsTest', 'test_split_port_range_with_host_port'], ['https://github.com/docker/docker-py/tree/master/tests/unit/utils_test.py', 'tests.unit.utils_test', 'PortsTest', 'test_split_port_empty_string'], ['https://github.com/docker/docker-py/tree/master/tests/unit/utils_test.py', 'tests.unit.utils_test', 'PortsTest', 'test_split_port_random_port_range_with_host_port'], ['https://github.com/docker/docker-py/tree/master/tests/unit/utils_test.py', 'tests.unit.utils_test', 'PortsTest', 'test_split_port_invalid_protocol'], ['https://github.com/docker/docker-py/tree/master/tests/unit/utils_test.py', 'tests.unit.utils_test', 'PortsTest', 'test_split_port_with_host_ip_no_port'], ['https://github.com/docker/docker-py/tree/master/tests/unit/utils_test.py', 'tests.unit.utils_test', 'PortsTest', 'test_split_port_no_host_port'], ['https://github.com/docker/docker-py/tree/master/tests/unit/utils_test.py', 'tests.unit.utils_test', 'PortsTest', 'test_port_only_with_colon'], ['https://github.com/docker/docker-py/tree/master/tests/unit/utils_test.py', 'tests.unit.utils_test', 'PortsTest', 'test_split_port_non_string'], ['https://github.com/docker/docker-py/tree/master/tests/unit/utils_test.py', 'tests.unit.utils_test', 'PortsTest', 'test_split_port_range_with_host_ip_no_port']]"
ThreatIngestor,https://github.com/InQuest/ThreatIngestor/tree/master/threatingestor/artifacts.py,TestArtifacts,test_is_domain,return not self.is_ip() and len(self.domain()) > 3 and ('.' in self.domain()[1:-1]) and all([x.isalnum() or x in '-.' for x in self.domain()]) and self.domain()[self.domain().rfind('.') + 1:].isalpha() and (len(self.domain()[self.domain().rfind('.') + 1:]) > 1),"def my_comprehension_func(self):
    tmp_ListComp0 = []
    for x in self.domain():
        tmp_ListComp0.append(x.isalnum() or x in '-.')
    return tmp_ListComp0

return not self.is_ip() and len(self.domain()) > 3 and ('.' in self.domain()[1:-1]) and all(my_comprehension_func(self)) and self.domain()[self.domain().rfind('.') + 1:].isalpha() and (len(self.domain()[self.domain().rfind('.') + 1:]) > 1)
",1,"[['https://github.com/InQuest/ThreatIngestor/tree/master/tests/test_artifacts.py', 'tests.test_artifacts', 'TestArtifacts', 'test_is_domain']]"
ThreatIngestor,https://github.com/InQuest/ThreatIngestor/tree/master/threatingestor/sources/twitter.py,TestTwitter,test_run_includes_nonobfuscated_iff_configured,"tweets = [{'content': s.get('full_text', ''), 'id': s.get('id_str', ''), 'user': s.get('user', {}).get('screen_name', ''), 'entities': s.get('entities', {})} for s in tweet_list]","
tweets = []
for s in tweet_list:
    tweets.append({'content': s.get('full_text', ''), 'id': s.get('id_str', ''), 'user': s.get('user', {}).get('screen_name', ''), 'entities': s.get('entities', {})})
",1,"[['https://github.com/InQuest/ThreatIngestor/tree/master/tests/test_sources_twitter.py', 'tests.test_sources_twitter', 'TestTwitter', 'test_run_includes_nonobfuscated_iff_configured']]"
ThreatIngestor,https://github.com/InQuest/ThreatIngestor/tree/master/threatingestor/sources/rss.py,TestRSS,test_run_respects_feed_type,[x.unwrap() for x in soup.find_all('strong')],"tmp_ListComp0 = []
for x in soup.find_all('strong'):
    tmp_ListComp0.append(x.unwrap())

tmp_ListComp0
",1,"[['https://github.com/InQuest/ThreatIngestor/tree/master/tests/test_sources_rss.py', 'tests.test_sources_rss', 'TestRSS', 'test_run_supports_both_link_url'], ['https://github.com/InQuest/ThreatIngestor/tree/master/tests/test_sources_rss.py', 'tests.test_sources_rss', 'TestRSS', 'test_run_respects_feed_type']]"
ThreatIngestor,https://github.com/InQuest/ThreatIngestor/tree/master/threatingestor/sources/rss.py,TestRSS,test_run_respects_feed_type,[x.unwrap() for x in soup.find_all('b')],"tmp_ListComp0 = []
for x in soup.find_all('b'):
    tmp_ListComp0.append(x.unwrap())

tmp_ListComp0
",1,"[['https://github.com/InQuest/ThreatIngestor/tree/master/tests/test_sources_rss.py', 'tests.test_sources_rss', 'TestRSS', 'test_run_supports_both_link_url'], ['https://github.com/InQuest/ThreatIngestor/tree/master/tests/test_sources_rss.py', 'tests.test_sources_rss', 'TestRSS', 'test_run_respects_feed_type']]"
ThreatIngestor,https://github.com/InQuest/ThreatIngestor/tree/master/threatingestor/sources/rss.py,TestRSS,test_run_respects_feed_type,[x.unwrap() for x in soup.find_all('em')],"tmp_ListComp0 = []
for x in soup.find_all('em'):
    tmp_ListComp0.append(x.unwrap())

tmp_ListComp0
",1,"[['https://github.com/InQuest/ThreatIngestor/tree/master/tests/test_sources_rss.py', 'tests.test_sources_rss', 'TestRSS', 'test_run_supports_both_link_url'], ['https://github.com/InQuest/ThreatIngestor/tree/master/tests/test_sources_rss.py', 'tests.test_sources_rss', 'TestRSS', 'test_run_respects_feed_type']]"
ThreatIngestor,https://github.com/InQuest/ThreatIngestor/tree/master/threatingestor/sources/rss.py,TestRSS,test_run_respects_feed_type,[x.unwrap() for x in soup.find_all('i')],"tmp_ListComp0 = []
for x in soup.find_all('i'):
    tmp_ListComp0.append(x.unwrap())

tmp_ListComp0
",1,"[['https://github.com/InQuest/ThreatIngestor/tree/master/tests/test_sources_rss.py', 'tests.test_sources_rss', 'TestRSS', 'test_run_supports_both_link_url'], ['https://github.com/InQuest/ThreatIngestor/tree/master/tests/test_sources_rss.py', 'tests.test_sources_rss', 'TestRSS', 'test_run_respects_feed_type']]"
ubelt,https://github.com/Erotemic/ubelt/tree/master/ubelt/util_dict.py,,test_dict_hist_ordered,"hist = OrderedDict([(key, value) for (key, value) in sorted(hist_.items(), key=getval)])","tmp_ListComp0 = []
for (key, value) in sorted(hist_.items(), key=getval):
    tmp_ListComp0.append((key, value))

hist = OrderedDict(tmp_ListComp0)
",1,"[['https://github.com/Erotemic/ubelt/tree/master/tests/test_dict.py', 'tests.test_dict', '', 'test_dict_hist_ordered']]"
ubelt,https://github.com/Erotemic/ubelt/tree/master/ubelt/util_dict.py,,test_group_items_callable,"keyval_list = [(key, func(val)) for (key, val) in iteritems(dict_)]","
keyval_list = []
for (key, val) in iteritems(dict_):
    keyval_list.append((key, func(val)))
",1,"[['https://github.com/Erotemic/ubelt/tree/master/tests/test_dict.py', 'tests.test_dict', '', 'test_group_items_callable']]"
finta,https://github.com/peerchemist/finta/tree/master/finta/finta.py,,test_tmf,"ohlcv['ll'] = [min(l, c) for (l, c) in zip(ohlcv['low'], ohlcv['close'].shift(1))]","tmp_ListComp0 = []
for (l, c) in zip(ohlcv['low'], ohlcv['close'].shift(1)):
    tmp_ListComp0.append(min(l, c))

ohlcv['ll'] = tmp_ListComp0
",1,"[['https://github.com/peerchemist/finta/tree/master/tests/test_unit.py', 'tests.test_unit', '', 'test_tmf']]"
finta,https://github.com/peerchemist/finta/tree/master/finta/finta.py,,test_tmf,"ohlcv['hh'] = [max(h, c) for (h, c) in zip(ohlcv['high'], ohlcv['close'].shift(1))]","tmp_ListComp0 = []
for (h, c) in zip(ohlcv['high'], ohlcv['close'].shift(1)):
    tmp_ListComp0.append(max(h, c))

ohlcv['hh'] = tmp_ListComp0
",1,"[['https://github.com/peerchemist/finta/tree/master/tests/test_unit.py', 'tests.test_unit', '', 'test_tmf']]"
simpleai,https://github.com/simpleai-team/simpleai/tree/master/simpleai/search/csp.py,TestCsp,test_min_conflicts,conflict_variables = [v for v in problem.variables if any((v in conflict[0] for conflict in conflicts))],"
conflict_variables = []
for v in problem.variables:
    if any((v in conflict[0] for conflict in conflicts)):
        conflict_variables.append(v)
",1,"[['https://github.com/simpleai-team/simpleai/tree/master/tests/search/test_csp.py', 'tests.search.test_csp', 'TestCsp', 'test_min_conflicts']]"
simpleai,https://github.com/simpleai-team/simpleai/tree/master/simpleai/machine_learning/evaluation.py,TestKfold,test_kfold_is_0,"train = [x for (j, x) in enumerate(dataset) if j % k != i]","
train = []
for (j, x) in enumerate(dataset):
    if j % k != i:
        train.append(x)
",1,"[['https://github.com/simpleai-team/simpleai/tree/master/tests/machine_learning/test_evaluation.py', 'tests.machine_learning.test_evaluation', 'TestKfold', 'test_k1_is_bad'], ['https://github.com/simpleai-team/simpleai/tree/master/tests/machine_learning/test_evaluation.py', 'tests.machine_learning.test_evaluation', 'TestKfold', 'test_kfold_lt_75'], ['https://github.com/simpleai-team/simpleai/tree/master/tests/machine_learning/test_evaluation.py', 'tests.machine_learning.test_evaluation', 'TestKfold', 'test_kfold_is_0']]"
simpleai,https://github.com/simpleai-team/simpleai/tree/master/simpleai/machine_learning/evaluation.py,TestKfold,test_kfold_is_0,"test = [x for (j, x) in enumerate(dataset) if j % k == i]","
test = []
for (j, x) in enumerate(dataset):
    if j % k == i:
        test.append(x)
",1,"[['https://github.com/simpleai-team/simpleai/tree/master/tests/machine_learning/test_evaluation.py', 'tests.machine_learning.test_evaluation', 'TestKfold', 'test_k1_is_bad'], ['https://github.com/simpleai-team/simpleai/tree/master/tests/machine_learning/test_evaluation.py', 'tests.machine_learning.test_evaluation', 'TestKfold', 'test_kfold_lt_75'], ['https://github.com/simpleai-team/simpleai/tree/master/tests/machine_learning/test_evaluation.py', 'tests.machine_learning.test_evaluation', 'TestKfold', 'test_kfold_is_0']]"
simpleai,https://github.com/simpleai-team/simpleai/tree/master/simpleai/machine_learning/reinforcement_learning.py,TestBoltzmann_exploration,test_all_equals_utilities,utilities = [utilities[x] for x in actions],"tmp_ListComp0 = []
for x in actions:
    tmp_ListComp0.append(utilities[x])

utilities = tmp_ListComp0
",1,"[['https://github.com/simpleai-team/simpleai/tree/master/tests/machine_learning/test_reinforcement_learning.py', 'tests.machine_learning.test_reinforcement_learning', 'TestBoltzmann_exploration', 'test_low_randomness_in_cold'], ['https://github.com/simpleai-team/simpleai/tree/master/tests/machine_learning/test_reinforcement_learning.py', 'tests.machine_learning.test_reinforcement_learning', 'TestBoltzmann_exploration', 'test_high_randomness_in_hot'], ['https://github.com/simpleai-team/simpleai/tree/master/tests/machine_learning/test_reinforcement_learning.py', 'tests.machine_learning.test_reinforcement_learning', 'TestBoltzmann_exploration', 'test_all_equals_utilities']]"
simpleai,https://github.com/simpleai-team/simpleai/tree/master/simpleai/machine_learning/reinforcement_learning.py,TestBoltzmann_exploration,test_all_equals_utilities,probs = [u / sum(utilities) for u in utilities],"
probs = []
for u in utilities:
    probs.append(u / sum(utilities))
",1,"[['https://github.com/simpleai-team/simpleai/tree/master/tests/machine_learning/test_reinforcement_learning.py', 'tests.machine_learning.test_reinforcement_learning', 'TestBoltzmann_exploration', 'test_low_randomness_in_cold'], ['https://github.com/simpleai-team/simpleai/tree/master/tests/machine_learning/test_reinforcement_learning.py', 'tests.machine_learning.test_reinforcement_learning', 'TestBoltzmann_exploration', 'test_high_randomness_in_hot'], ['https://github.com/simpleai-team/simpleai/tree/master/tests/machine_learning/test_reinforcement_learning.py', 'tests.machine_learning.test_reinforcement_learning', 'TestBoltzmann_exploration', 'test_all_equals_utilities']]"
dupeguru,https://github.com/arsenetar/dupeguru/tree/master/hscommon/util.py,,test_stripfalse,return [x for x in seq if x],"tmp_ListComp0 = []
for x in seq:
    if x:
        tmp_ListComp0.append(x)

return tmp_ListComp0
",1,"[['https://github.com/arsenetar/dupeguru/tree/master/hscommon/tests/util_test.py', 'hscommon.tests.util_test', '', 'test_stripfalse']]"
dupeguru,https://github.com/arsenetar/dupeguru/tree/master/hscommon/util.py,,test_multi_replace,replace_to = [replace_to for _ in replace_from],"tmp_ListComp0 = []
for _ in replace_from:
    tmp_ListComp0.append(replace_to)

replace_to = tmp_ListComp0
",1,"[['https://github.com/arsenetar/dupeguru/tree/master/hscommon/tests/util_test.py', 'hscommon.tests.util_test', '', 'test_multi_replace']]"
dupeguru,https://github.com/arsenetar/dupeguru/tree/master/core/directories.py,,test_load_from_file_with_invalid_path,self._dirs = [p for p in self._dirs if p not in path],"tmp_ListComp0 = []
for p in self._dirs:
    if p not in path:
        tmp_ListComp0.append(p)

self._dirs = tmp_ListComp0
",1,"[['https://github.com/arsenetar/dupeguru/tree/master/core/tests/directories_test.py', 'core.tests.directories_test', '', 'test_save_and_load'], ['https://github.com/arsenetar/dupeguru/tree/master/core/tests/directories_test.py', 'core.tests.directories_test', '', 'test_load_from_file_with_invalid_path']]"
guessit,https://github.com/guessit-io/guessit/tree/master/guessit/__main__.py,,test_main_json,filenames.extend([line.strip() for line in input_file.readlines()]),"tmp_ListComp0 = []
for line in input_file.readlines():
    tmp_ListComp0.append(line.strip())

filenames.extend(tmp_ListComp0)
",1,"[['https://github.com/guessit-io/guessit/tree/master/guessit/test/test_main.py', 'guessit.test.test_main', '', 'test_main_no_args'], ['https://github.com/guessit-io/guessit/tree/master/guessit/test/test_main.py', 'guessit.test.test_main', '', 'test_main_advanced'], ['https://github.com/guessit-io/guessit/tree/master/guessit/test/test_main.py', 'guessit.test.test_main', '', 'test_main_yaml'], ['https://github.com/guessit-io/guessit/tree/master/guessit/test/test_main.py', 'guessit.test.test_main', '', 'test_json_no_output_input_string'], ['https://github.com/guessit-io/guessit/tree/master/guessit/test/test_main.py', 'guessit.test.test_main', '', 'test_main_unicode'], ['https://github.com/guessit-io/guessit/tree/master/guessit/test/test_main.py', 'guessit.test.test_main', '', 'test_main_show_property'], ['https://github.com/guessit-io/guessit/tree/master/guessit/test/test_main.py', 'guessit.test.test_main', '', 'test_main'], ['https://github.com/guessit-io/guessit/tree/master/guessit/test/test_main.py', 'guessit.test.test_main', '', 'test_main_forced_unicode'], ['https://github.com/guessit-io/guessit/tree/master/guessit/test/test_main.py', 'guessit.test.test_main', '', 'test_main_version'], ['https://github.com/guessit-io/guessit/tree/master/guessit/test/test_main.py', 'guessit.test.test_main', '', 'test_main_verbose'], ['https://github.com/guessit-io/guessit/tree/master/guessit/test/test_main.py', 'guessit.test.test_main', '', 'test_main_values'], ['https://github.com/guessit-io/guessit/tree/master/guessit/test/test_main.py', 'guessit.test.test_main', '', 'test_main_input'], ['https://github.com/guessit-io/guessit/tree/master/guessit/test/test_main.py', 'guessit.test.test_main', '', 'test_json_output_input_string'], ['https://github.com/guessit-io/guessit/tree/master/guessit/test/test_main.py', 'guessit.test.test_main', '', 'test_main_help'], ['https://github.com/guessit-io/guessit/tree/master/guessit/test/test_main.py', 'guessit.test.test_main', '', 'test_main_properties'], ['https://github.com/guessit-io/guessit/tree/master/guessit/test/test_main.py', 'guessit.test.test_main', '', 'test_main_json']]"
guessit,https://github.com/guessit-io/guessit/tree/master/guessit/options.py,,test_load_config,config_files = [f for f in config_file_locations if os.path.exists(f)],"
config_files = []
for f in config_file_locations:
    if os.path.exists(f):
        config_files.append(f)
",1,"[['https://github.com/guessit-io/guessit/tree/master/guessit/test/test_options.py', 'guessit.test.test_options', '', 'test_load_config']]"
fuck-coding-interviews,https://github.com/vinta/fuck-coding-interviews/tree/master/data_structures/trees/binary_search_tree.py,BinarySearchTreeTest,test_from_array_representation,nodes = [value if value is None else cls.NODE_CLASS(value) for value in array],"
nodes = []
for value in array:
    if value is None:
        nodes.append(value)
    else:
        nodes.append(cls.NODE_CLASS(value))
",1,"[['https://github.com/vinta/fuck-coding-interviews/tree/master/data_structures/trees/tests/test_binary_search_tree.py', 'data_structures.trees.tests.test_binary_search_tree', 'BinarySearchTreeTest', 'test_from_array_representation']]"
wifiphisher,https://github.com/wifiphisher/wifiphisher/tree/master/wifiphisher/common/extensions.py,TestExtensionManager,test_multiple_extensions,channels = [str(ch) for ch in universal.ALL_2G_CHANNELS] + ['*'],"tmp_ListComp0 = []
for ch in universal.ALL_2G_CHANNELS:
    tmp_ListComp0.append(str(ch))

channels = tmp_ListComp0 + ['*']
",1,"[['https://github.com/wifiphisher/wifiphisher/tree/master/tests/test_extensions.py', 'tests.test_extensions', 'TestExtensionManager', 'test_single_extension'], ['https://github.com/wifiphisher/wifiphisher/tree/master/tests/test_extensions.py', 'tests.test_extensions', 'TestExtensionManager', 'test_multiple_extensions']]"
PyLaTeX,https://github.com/JelteF/PyLaTeX/tree/master/pylatex/utils.py,,test_mapper,strings = [_latex_item_to_string(s) for s in strings],"tmp_ListComp0 = []
for s in strings:
    tmp_ListComp0.append(_latex_item_to_string(s))

strings = tmp_ListComp0
",1,"[['https://github.com/JelteF/PyLaTeX/tree/master/tests/test_utils_dumps_list.py', 'tests.test_utils_dumps_list', '', 'test_mapper']]"
PyLaTeX,https://github.com/JelteF/PyLaTeX/tree/master/pylatex/utils.py,,test_mapper,strings = [m(s) for s in strings],"tmp_ListComp0 = []
for s in strings:
    tmp_ListComp0.append(m(s))

strings = tmp_ListComp0
",1,"[['https://github.com/JelteF/PyLaTeX/tree/master/tests/test_utils_dumps_list.py', 'tests.test_utils_dumps_list', '', 'test_mapper']]"
MuGo,https://github.com/brilee/MuGo/tree/master//go.py,TestDataSetHelpers,test_onehot,"ALL_COORDS = [(i, j) for i in range(n) for j in range(n)]","
ALL_COORDS = []
for i in range(n):
    for j in range(n):
        ALL_COORDS.append((i, j))
",1,"[['https://github.com/brilee/MuGo/tree/master/tests/test_datasets.py', 'tests.test_datasets', 'TestDataSetHelpers', 'test_onehot']]"
pydash,https://github.com/dgilland/pydash/tree/master/src/pydash/collections.py,,test_dash_suffixed_method_aliases,"return [value for (is_true, value, _, _) in iteriteratee(collection, predicate) if is_true]","tmp_ListComp0 = []
for (is_true, value, _, _) in iteriteratee(collection, predicate):
    if is_true:
        tmp_ListComp0.append(value)

return tmp_ListComp0
",1,"[['https://github.com/dgilland/pydash/tree/master/tests/test_chaining.py', 'tests.test_chaining', '', 'test_dash_suffixed_method_aliases']]"
asv,https://github.com/airspeed-velocity/asv/tree/master/asv/environment.py,,test_matrix_expand_exclude,"values = [value if isinstance(value, list) else [value] for value in values]","tmp_ListComp0 = []
for value in values:
    if isinstance(value, list):
        tmp_ListComp0.append(value)
    else:
        tmp_ListComp0.append([value])

values = tmp_ListComp0
",1,"[['https://github.com/airspeed-velocity/asv/tree/master/test/test_environment.py', 'test.test_environment', '', 'test_matrix_expand_include_detect_env_type'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_environment.py', 'test.test_environment', '', 'test_iter_env_matrix_combinations'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_environment.py', 'test.test_environment', '', 'test_matrix_expand_include'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_environment.py', 'test.test_environment', '', 'test_matrix_expand_basic'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_environment.py', 'test.test_environment', '', 'test_matrix_expand_exclude']]"
asv,https://github.com/airspeed-velocity/asv/tree/master/asv/environment.py,,test_matrix_expand_exclude,values = [[''] if value == [] else value for value in values],"tmp_ListComp0 = []
for value in values:
    if value == []:
        tmp_ListComp0.append([''])
    else:
        tmp_ListComp0.append(value)

values = tmp_ListComp0
",1,"[['https://github.com/airspeed-velocity/asv/tree/master/test/test_environment.py', 'test.test_environment', '', 'test_matrix_expand_include_detect_env_type'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_environment.py', 'test.test_environment', '', 'test_iter_env_matrix_combinations'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_environment.py', 'test.test_environment', '', 'test_matrix_expand_include'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_environment.py', 'test.test_environment', '', 'test_matrix_expand_basic'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_environment.py', 'test.test_environment', '', 'test_matrix_expand_exclude']]"
asv,https://github.com/airspeed-velocity/asv/tree/master/asv/environment.py,,test_matrix_empty,"requirements_iter = [{('python', None): python} for python in pythons]","
requirements_iter = []
for python in pythons:
    requirements_iter.append({('python', None): python})
",1,"[['https://github.com/airspeed-velocity/asv/tree/master/test/test_environment.py', 'test.test_environment', '', 'test_conda_environment_file'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_environment.py', 'test.test_environment', '', 'test_environment_select_autodetect'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_environment.py', 'test.test_environment', '', 'test_presence_checks'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_environment.py', 'test.test_environment', '', 'test_environment_env_matrix'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_environment.py', 'test.test_environment', '', 'test_environment_select'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_environment.py', 'test.test_environment', '', 'test_matrix_environments'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_benchmarks.py', 'test.test_benchmarks', '', 'test_conf_inside_benchmarks_dir'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_environment.py', 'test.test_environment', '', 'test_large_environment_matrix'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_environment.py', 'test.test_environment', '', 'test_matrix_existing'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_benchmarks.py', 'test.test_benchmarks', '', 'test_find_benchmarks_cwd_imports'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_environment.py', 'test.test_environment', '', 'test_install_env_matrix_values'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_environment.py', 'test.test_environment', '', 'test_installed_commit_hash'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_environment.py', 'test.test_environment', '', 'test_build_isolation'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_run.py', 'test.test_run', '', 'test_set_commit_hash'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_environment.py', 'test.test_environment', '', 'test_conda_pip_install'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_benchmarks.py', 'test.test_benchmarks', '', 'test_code_extraction'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_environment.py', 'test.test_environment', '', 'test_custom_commands'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_benchmarks.py', 'test.test_benchmarks', '', 'test_invalid_benchmark_tree'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_environment.py', 'test.test_environment', '', 'test_conda_run_executable'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_benchmarks.py', 'test.test_benchmarks', '', 'test_import_failure_retry'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_run.py', 'test.test_run', '', 'test_run_spec'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_environment.py', 'test.test_environment', '', 'test_environment_name_sanitization'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_environment.py', 'test.test_environment', '', 'test_install_success'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_environment.py', 'test.test_environment', '', 'test_matrix_empty']]"
asv,https://github.com/airspeed-velocity/asv/tree/master/asv/util.py,,test_which_path,"filenames = [filename + ext for ext in ('.exe', '.bat', '.com', '')]","
filenames = []
for ext in ('.exe', '.bat', '.com', ''):
    filenames.append(filename + ext)
",1,"[['https://github.com/airspeed-velocity/asv/tree/master/test/test_find.py', 'test.test_find', '', 'test_find_timeout'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_find.py', 'test.test_find', '', 'test_find'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_find.py', 'test.test_find', '', 'test_find_inverted'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_util.py', 'test.test_util', '', 'test_which_path']]"
asv,https://github.com/airspeed-velocity/asv/tree/master/asv/util.py,,test_which_path,locations = [path[1:-1] if len(path) > 2 and path[0] == path[-1] == '"' else path for path in locations],"tmp_ListComp0 = []
for path in locations:
    if len(path) > 2 and path[0] == path[-1] == '""':
        tmp_ListComp0.append(path[1:-1])
    else:
        tmp_ListComp0.append(path)

locations = tmp_ListComp0
",1,"[['https://github.com/airspeed-velocity/asv/tree/master/test/test_find.py', 'test.test_find', '', 'test_find_timeout'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_find.py', 'test.test_find', '', 'test_find'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_find.py', 'test.test_find', '', 'test_find_inverted'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_util.py', 'test.test_util', '', 'test_which_path']]"
asv,https://github.com/airspeed-velocity/asv/tree/master/asv/util.py,,test_graph_multi,values = [x for x in values if not is_na(x)],"tmp_ListComp0 = []
for x in values:
    if not is_na(x):
        tmp_ListComp0.append(x)

values = tmp_ListComp0
",1,"[['https://github.com/airspeed-velocity/asv/tree/master/test/test_util.py', 'test.test_util', '', 'test_geom_mean_na'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_graph.py', 'test.test_graph', '', 'test_graph_multi']]"
asv,https://github.com/airspeed-velocity/asv/tree/master/asv/util.py,,test_interpolate_command,result = [c.format(**variables) for c in parts],"
result = []
for c in parts:
    result.append(c.format(**variables))
",1,"[['https://github.com/airspeed-velocity/asv/tree/master/test/test_util.py', 'test.test_util', '', 'test_interpolate_command']]"
asv,https://github.com/airspeed-velocity/asv/tree/master/asv/results.py,,test_set_commit_hash,obj._stats[name] = [{} for _ in value],"
obj._stats[name] = []
for _ in value:
    obj._stats[name].append({})
",1,"[['https://github.com/airspeed-velocity/asv/tree/master/test/test_run.py', 'test.test_run', '', 'test_set_commit_hash']]"
asv,https://github.com/airspeed-velocity/asv/tree/master/asv/graph.py,,test_empty_graph,return [mean_na((x[j] for x in v)) for j in xrange(self.n_series)],"tmp_ListComp0 = []
for j in xrange(self.n_series):
    tmp_ListComp0.append(mean_na((x[j] for x in v)))

return tmp_ListComp0
",1,"[['https://github.com/airspeed-velocity/asv/tree/master/test/test_graph.py', 'test.test_graph', '', 'test_summary_graph_loop'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_graph.py', 'test.test_graph', '', 'test_summary_graph'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_graph.py', 'test.test_graph', '', 'test_graph_multi'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_graph.py', 'test.test_graph', '', 'test_nan'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_graph.py', 'test.test_graph', '', 'test_graph_single'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_graph.py', 'test.test_graph', '', 'test_empty_graph']]"
asv,https://github.com/airspeed-velocity/asv/tree/master/asv/graph.py,,test_empty_graph,"val = [(k, v[0], w[0]) for (k, v, w) in val]","tmp_ListComp0 = []
for (k, v, w) in val:
    tmp_ListComp0.append((k, v[0], w[0]))

val = tmp_ListComp0
",1,"[['https://github.com/airspeed-velocity/asv/tree/master/test/test_graph.py', 'test.test_graph', '', 'test_summary_graph_loop'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_graph.py', 'test.test_graph', '', 'test_summary_graph'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_graph.py', 'test.test_graph', '', 'test_graph_multi'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_graph.py', 'test.test_graph', '', 'test_nan'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_graph.py', 'test.test_graph', '', 'test_graph_single'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_graph.py', 'test.test_graph', '', 'test_empty_graph']]"
asv,https://github.com/airspeed-velocity/asv/tree/master/asv/graph.py,,test__combine_graph_data,datasets = [graph.get_data() for graph in graphs],"
datasets = []
for graph in graphs:
    datasets.append(graph.get_data())
",1,"[['https://github.com/airspeed-velocity/asv/tree/master/test/test_graph.py', 'test.test_graph', '', 'test__combine_graph_data']]"
asv,https://github.com/airspeed-velocity/asv/tree/master/asv/graph.py,,test__combine_graph_data,ys = [[None] * len(x_idx) for j in range(n_series)],"
ys = []
for j in range(n_series):
    ys.append([None] * len(x_idx))
",1,"[['https://github.com/airspeed-velocity/asv/tree/master/test/test_graph.py', 'test.test_graph', '', 'test__combine_graph_data']]"
proselint,https://github.com/amperser/proselint/tree/master/proselint/tools.py,TestCheck,test_smoke,"matches = [[m for m in re.finditer(w[0], text)], [m for m in re.finditer(w[1], text)]]","def my_comprehension_func(text, re, w):
    tmp_ListComp0 = []
    for m in re.finditer(w[0], text):
        tmp_ListComp0.append(m)
    return tmp_ListComp0

matches = [my_comprehension_func(text, re, w), [m for m in re.finditer(w[1], text)]]
",1,"[['https://github.com/amperser/proselint/tree/master/tests/test_consistency_check.py', 'tests.test_consistency_check', 'TestCheck', 'test_smoke']]"
pefile,https://github.com/erocarrera/pefile/tree/master//pefile.py,Test_pefile,test_pe_image_regression_test,[dump.add_line('  ' + line) for line in st_entry.dump()],"tmp_ListComp0 = []
for line in st_entry.dump():
    tmp_ListComp0.append(dump.add_line('  ' + line))

tmp_ListComp0
",1,"[['https://github.com/erocarrera/pefile/tree/master/tests/pefile_test.py', 'tests.pefile_test', 'Test_pefile', 'test_pe_image_regression_test']]"
pefile,https://github.com/erocarrera/pefile/tree/master//pefile.py,Test_pefile,test_pe_image_regression_test,[dump.add_line('  ' + line) for line in var_entry.dump()],"tmp_ListComp0 = []
for line in var_entry.dump():
    tmp_ListComp0.append(dump.add_line('  ' + line))

tmp_ListComp0
",1,"[['https://github.com/erocarrera/pefile/tree/master/tests/pefile_test.py', 'tests.pefile_test', 'Test_pefile', 'test_pe_image_regression_test']]"
Axelrod,https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/fingerprint.py,TestTransitiveFingerprint,test_plot_with_axis,"edges = [(0, k + 1) for k in range(len(self.opponents))]","
edges = []
for k in range(len(self.opponents)):
    edges.append((0, k + 1))
",1,"[['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_fingerprint.py', 'axelrod.tests.unit.test_fingerprint', 'TestTransitiveFingerprint', 'test_plot'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_fingerprint.py', 'axelrod.tests.unit.test_fingerprint', 'TestTransitiveFingerprint', 'test_fingerprint_with_filename'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_fingerprint.py', 'axelrod.tests.unit.test_fingerprint', 'TestTransitiveFingerprint', 'test_parallel_fingerprint'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_fingerprint.py', 'axelrod.tests.unit.test_fingerprint', 'TestTransitiveFingerprint', 'test_serial_fingerprint'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_fingerprint.py', 'axelrod.tests.unit.test_fingerprint', 'TestTransitiveFingerprint', 'test_plot_with_axis']]"
Axelrod,https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tournament.py,TestTournament,test_no_build_result_set,"result_set = ResultSet(filename=self.filename, players=[str(p) for p in self.players], repetitions=self.repetitions, processes=processes, progress_bar=progress_bar)","def my_comprehension_func(self):
    tmp_ListComp0 = []
    for p in self.players:
        tmp_ListComp0.append(str(p))
    return tmp_ListComp0

result_set = ResultSet(filename=self.filename, players=my_comprehension_func(self), repetitions=self.repetitions, processes=processes, progress_bar=progress_bar)
",1,"[['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_tournament.py', 'axelrod.tests.unit.test_tournament', 'TestTournament', 'test_parallel_play_with_writing_to_file'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_plot.py', 'axelrod.tests.unit.test_plot', 'TestPlot', 'test_init_from_resulsetfromfile'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/strategies/test_titfortat.py', 'axelrod.tests.strategies.test_titfortat', 'TestOriginalGradual', 'test_output_from_literature'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_resultset.py', 'axelrod.tests.unit.test_resultset', 'TestResultSet', 'test_self_interaction_for_random_strategies'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_tournament.py', 'axelrod.tests.unit.test_tournament', 'TestTournament', 'test_serial_play_with_different_game'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_tournament.py', 'axelrod.tests.unit.test_tournament', 'TestTournament', 'test_write_to_csv_with_results'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_resultset.py', 'axelrod.tests.unit.test_resultset', 'TestResultSet', 'test_equality'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_tournament.py', 'axelrod.tests.unit.test_tournament', 'TestProbEndingSpatialTournament', 'test_one_turn_tournament'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/integration/test_tournament.py', 'axelrod.tests.integration.test_tournament', 'TestTournament', 'test_serial_play'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_tournament.py', 'axelrod.tests.unit.test_tournament', 'TestTournament', 'test_write_to_csv_without_results'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_tournament.py', 'axelrod.tests.unit.test_tournament', 'TestTournament', 'test_serial_play'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_interaction_utils.py', 'axelrod.tests.unit.test_interaction_utils', 'TestMatch', 'test_read_interactions_from_file'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_tournament.py', 'axelrod.tests.unit.test_tournament', 'TestTournament', 'test_warning'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/strategies/test_titfortat.py', 'axelrod.tests.strategies.test_titfortat', 'TestGradual', 'test_specific_set_of_results'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/integration/test_tournament.py', 'axelrod.tests.integration.test_tournament', 'TestProbEndTournament', 'test_matches_have_different_length'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_tournament.py', 'axelrod.tests.unit.test_tournament', 'TestTournament', 'test_property_serial_play'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/integration/test_tournament.py', 'axelrod.tests.integration.test_tournament', 'TestProbEndTournament', 'test_players_do_not_know_match_length'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_tournament.py', 'axelrod.tests.unit.test_tournament', 'TestProbEndingSpatialTournament', 'test_complete_tournament'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/integration/test_tournament.py', 'axelrod.tests.integration.test_tournament', 'TestTournament', 'test_repeat_tournament_stochastic'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_tournament.py', 'axelrod.tests.unit.test_tournament', 'TestTournament', 'test_seeding_inequality'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_tournament.py', 'axelrod.tests.unit.test_tournament', 'TestTournament', 'test_seeding_equality'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_tournament.py', 'axelrod.tests.unit.test_tournament', 'TestTournament', 'test_no_progress_bar_play'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/integration/test_tournament.py', 'axelrod.tests.integration.test_tournament', 'TestTournament', 'test_parallel_play'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_resultset.py', 'axelrod.tests.unit.test_resultset', 'TestSummary', 'test_summarise_without_failure'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/integration/test_tournament.py', 'axelrod.tests.integration.test_tournament', 'TestTournament', 'test_big_tournaments'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_tournament.py', 'axelrod.tests.unit.test_tournament', 'TestTournament', 'test_progress_bar_play'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_tournament.py', 'axelrod.tests.unit.test_tournament', 'TestTournament', 'test_write_interactions'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/integration/test_tournament.py', 'axelrod.tests.integration.test_tournament', 'TestNoisyTournament', 'test_noisy_tournament'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_tournament.py', 'axelrod.tests.unit.test_tournament', 'TestTournament', 'test_progress_bar_play_parallel'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_tournament.py', 'axelrod.tests.unit.test_tournament', 'TestTournament', 'test_parallel_play'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_tournament.py', 'axelrod.tests.unit.test_tournament', 'TestSpatialTournament', 'test_particular_tournament'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_tournament.py', 'axelrod.tests.unit.test_tournament', 'TestProbEndTournament', 'test_property_serial_play'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_tournament.py', 'axelrod.tests.unit.test_tournament', 'TestSpatialTournament', 'test_complete_tournament'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/integration/test_tournament.py', 'axelrod.tests.integration.test_tournament', 'TestTournament', 'test_repeat_tournament_deterministic'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_resultset.py', 'axelrod.tests.unit.test_resultset', 'TestResultSet', 'test_summarise_regression_test'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_tournament.py', 'axelrod.tests.unit.test_tournament', 'TestTournament', 'test_build_result_set'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_tournament.py', 'axelrod.tests.unit.test_tournament', 'TestTournament', 'test_no_build_result_set']]"
Axelrod,https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/evolvable_player.py,TestUtilityFunctions,test_crossover_dictionaries,"new_items = [(k, table1[k]) for k in keys[:cross_point]]","
new_items = []
for k in keys[:cross_point]:
    new_items.append((k, table1[k]))
",1,"[['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/strategies/test_evolvable_player.py', 'axelrod.tests.strategies.test_evolvable_player', 'TestUtilityFunctions', 'test_crossover_dictionaries']]"
Axelrod,https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/evolvable_player.py,TestUtilityFunctions,test_crossover_dictionaries,"new_items += [(k, table2[k]) for k in keys[cross_point:]]","tmp_ListComp0 = []
for k in keys[cross_point:]:
    tmp_ListComp0.append((k, table2[k]))

new_items += tmp_ListComp0
",1,"[['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/strategies/test_evolvable_player.py', 'axelrod.tests.strategies.test_evolvable_player', 'TestUtilityFunctions', 'test_crossover_dictionaries']]"
Axelrod,https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/plot.py,TestPlot,test_stackplot_with_passed_axes,pops = [[populations[iturn][ir] for iturn in turns] for ir in self.result_set.ranking],"
pops = []
for ir in self.result_set.ranking:
    pops1 = []
    for iturn in turns:
        pops1.append(populations[iturn][ir])
    pops.append(pops1)
",1,"[['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_plot.py', 'axelrod.tests.unit.test_plot', 'TestPlot', 'test_stackplot'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_plot.py', 'axelrod.tests.unit.test_plot', 'TestPlot', 'test_stackplot_with_passed_axes']]"
Axelrod,https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/graph.py,TestCycle,test_length_3_directed,"edges = [(i, i + 1) for i in range(length - 1)]","
edges = []
for i in range(length - 1):
    edges.append((i, i + 1))
",1,"[['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_graph.py', 'axelrod.tests.unit.test_graph', 'TestCycle', 'test_length_3_undirected'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_moran.py', 'axelrod.tests.unit.test_moran', 'GraphMoranProcess', 'test_asymmetry'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_graph.py', 'axelrod.tests.unit.test_graph', 'TestCycle', 'test_length_1_directed'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_graph.py', 'axelrod.tests.unit.test_graph', 'TestCycle', 'test_length_4_directed'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_graph.py', 'axelrod.tests.unit.test_graph', 'TestCycle', 'test_length_2_directed'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_moran.py', 'axelrod.tests.unit.test_moran', 'GraphMoranProcess', 'test_cycle'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_moran.py', 'axelrod.tests.unit.test_moran', 'GraphMoranProcess', 'test_cycle_death_birth'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_graph.py', 'axelrod.tests.unit.test_graph', 'TestCycle', 'test_length_2_undirected'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_graph.py', 'axelrod.tests.unit.test_graph', 'TestCycle', 'test_length_1_undirected'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_graph.py', 'axelrod.tests.unit.test_graph', 'TestCycle', 'test_length_4_undirected'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_graph.py', 'axelrod.tests.unit.test_graph', 'TestCycle', 'test_length_3_directed']]"
Axelrod,https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/history.py,TestHistory,test_str_list_repr,flipped_plays = [action.flip() for action in self._plays],"
flipped_plays = []
for action in self._plays:
    flipped_plays.append(action.flip())
",1,"[['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_history.py', 'axelrod.tests.unit.test_history', 'TestHistory', 'test_str_list_repr']]"
Axelrod,https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/moran.py,TestMoranProcess,test_fps,csums = np.cumsum([fitness_transformation(s) for s in scores]),"tmp_ListComp0 = []
for s in scores:
    tmp_ListComp0.append(fitness_transformation(s))

csums = np.cumsum(tmp_ListComp0)
",1,"[['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_moran.py', 'axelrod.tests.unit.test_moran', 'TestMoranProcess', 'test_fps']]"
Axelrod,https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/interaction_utils.py,TestMatch,test_compute_scores,return [game.score(plays) for plays in interactions],"tmp_ListComp0 = []
for plays in interactions:
    tmp_ListComp0.append(game.score(plays))

return tmp_ListComp0
",1,"[['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_interaction_utils.py', 'axelrod.tests.unit.test_interaction_utils', 'TestMatch', 'test_compute_scores']]"
Axelrod,https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/ecosystem.py,TestPlot,test_stackplot_with_passed_axes,payoffs = [0.0 for ip in plist],"
payoffs = []
for ip in plist:
    payoffs.append(0.0)
",1,"[['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_ecosystem.py', 'axelrod.tests.unit.test_ecosystem', 'TestEcosystem', 'test_cooperators_are_stable_over_time'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_plot.py', 'axelrod.tests.unit.test_plot', 'TestPlot', 'test_stackplot'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_ecosystem.py', 'axelrod.tests.unit.test_ecosystem', 'TestEcosystem', 'test_defector_wins_with_only_cooperators'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_plot.py', 'axelrod.tests.unit.test_plot', 'TestPlot', 'test_stackplot_with_passed_axes']]"
Axelrod,https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/ecosystem.py,TestPlot,test_stackplot_with_passed_axes,fitness = [self.fitness(p) for p in payoffs],"
fitness = []
for p in payoffs:
    fitness.append(self.fitness(p))
",1,"[['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_ecosystem.py', 'axelrod.tests.unit.test_ecosystem', 'TestEcosystem', 'test_cooperators_are_stable_over_time'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_plot.py', 'axelrod.tests.unit.test_plot', 'TestPlot', 'test_stackplot'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_ecosystem.py', 'axelrod.tests.unit.test_ecosystem', 'TestEcosystem', 'test_defector_wins_with_only_cooperators'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_plot.py', 'axelrod.tests.unit.test_plot', 'TestPlot', 'test_stackplot_with_passed_axes']]"
Axelrod,https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/ecosystem.py,TestPlot,test_stackplot_with_passed_axes,"newpops = [p * f for (p, f) in zip(pops, fitness)]","
newpops = []
for (p, f) in zip(pops, fitness):
    newpops.append(p * f)
",1,"[['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_ecosystem.py', 'axelrod.tests.unit.test_ecosystem', 'TestEcosystem', 'test_cooperators_are_stable_over_time'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_plot.py', 'axelrod.tests.unit.test_plot', 'TestPlot', 'test_stackplot'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_ecosystem.py', 'axelrod.tests.unit.test_ecosystem', 'TestEcosystem', 'test_defector_wins_with_only_cooperators'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_plot.py', 'axelrod.tests.unit.test_plot', 'TestPlot', 'test_stackplot_with_passed_axes']]"
Axelrod,https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/ecosystem.py,TestPlot,test_stackplot_with_passed_axes,newpops = [p / norm for p in newpops],"tmp_ListComp0 = []
for p in newpops:
    tmp_ListComp0.append(p / norm)

newpops = tmp_ListComp0
",1,"[['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_ecosystem.py', 'axelrod.tests.unit.test_ecosystem', 'TestEcosystem', 'test_cooperators_are_stable_over_time'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_plot.py', 'axelrod.tests.unit.test_plot', 'TestPlot', 'test_stackplot'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_ecosystem.py', 'axelrod.tests.unit.test_ecosystem', 'TestEcosystem', 'test_defector_wins_with_only_cooperators'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_plot.py', 'axelrod.tests.unit.test_plot', 'TestPlot', 'test_stackplot_with_passed_axes']]"
Axelrod,https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/strategy_transformers.py,TestTransformers,test_reclassification,arg = [player.name for player in arg],"tmp_ListComp0 = []
for player in arg:
    tmp_ListComp0.append(player.name)

arg = tmp_ListComp0
",1,"[['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_strategy_transformers.py', 'axelrod.tests.unit.test_strategy_transformers', 'TestIdentityTransformer', 'test_generic'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_strategy_transformers.py', 'axelrod.tests.unit.test_strategy_transformers', 'TestTransformers', 'test_reclassification']]"
Axelrod,https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/strategies/human.py,TestHumanClass,test_history_toolbar,my_history = [self.symbols[action] for action in self.history],"
my_history = []
for action in self.history:
    my_history.append(self.symbols[action])
",1,"[['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/strategies/test_human.py', 'axelrod.tests.strategies.test_human', 'TestHumanClass', 'test_history_toolbar']]"
Axelrod,https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/strategies/human.py,TestHumanClass,test_history_toolbar,opponent_history = [self.symbols[action] for action in self.history.coplays],"
opponent_history = []
for action in self.history.coplays:
    opponent_history.append(self.symbols[action])
",1,"[['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/strategies/test_human.py', 'axelrod.tests.strategies.test_human', 'TestHumanClass', 'test_history_toolbar']]"
Axelrod,https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/strategies/lookerup.py,TestEvolvableGambler,test_vector_to_instance,return [Plays(*plays_tuple) for plays_tuple in iterator],"tmp_ListComp0 = []
for plays_tuple in iterator:
    tmp_ListComp0.append(Plays(*plays_tuple))

return tmp_ListComp0
",1,"[['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/strategies/test_gambler.py', 'axelrod.tests.strategies.test_gambler', 'TestEvolvableGambler', 'test_vector_to_instance']]"
Axelrod,https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/property.py,TestTournament,test_big_tournaments,players = [s() for s in strategies],"
players = []
for s in strategies:
    players.append(s())
",1,"[['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_tournament.py', 'axelrod.tests.unit.test_tournament', 'TestTournament', 'test_property_serial_play'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_resultset.py', 'axelrod.tests.unit.test_resultset', 'TestSummary', 'test_summarise_without_failure'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/integration/test_tournament.py', 'axelrod.tests.integration.test_tournament', 'TestTournament', 'test_big_tournaments']]"
fgmk,https://github.com/ericoporto/fgmk/tree/master/fgmk/ff/write_file.py,,test_fwriteKeyVals,"sorted_data = [(k, data[k]) for k in natural_sort_list(data)]","
sorted_data = []
for k in natural_sort_list(data):
    sorted_data.append((k, data[k]))
",1,"[['https://github.com/ericoporto/fgmk/tree/master/tests/test_write_file.py', 'tests.test_write_file', '', 'test_fwriteKeyVals']]"
projector-installer,https://github.com/JetBrains/projector-installer/tree/master/projector_installer/products.py,ProductsTest,test_get_all_product_codes,codes = [KIND2CODE[kind] for kind in IDEKind if kind != IDEKind.Unknown],"
codes = []
for kind in IDEKind:
    if kind != IDEKind.Unknown:
        codes.append(KIND2CODE[kind])
",1,"[['https://github.com/JetBrains/projector-installer/tree/master/test/products_test.py', 'test.products_test', 'ProductsTest', 'test_get_all_product_codes']]"
nimporter,https://github.com/Pebaz/nimporter/tree/master//nimporter.py,,test_invoke_compiler,errors = [line for line in lines if 'Error:' in line],"
errors = []
for line in lines:
    if 'Error:' in line:
        errors.append(line)
",1,"[['https://github.com/Pebaz/nimporter/tree/master/tests/test_build.py', 'tests.test_build', '', 'test_invoke_compiler']]"
nimporter,https://github.com/Pebaz/nimporter/tree/master//nimporter.py,,test_invoke_compiler,warnings = [line for line in lines if 'Warning:' in line],"
warnings = []
for line in lines:
    if 'Warning:' in line:
        warnings.append(line)
",1,"[['https://github.com/Pebaz/nimporter/tree/master/tests/test_build.py', 'tests.test_build', '', 'test_invoke_compiler']]"
nimporter,https://github.com/Pebaz/nimporter/tree/master//nimporter.py,,test_invoke_compiler,hints = [line for line in lines if 'Hint:' in line],"
hints = []
for line in lines:
    if 'Hint:' in line:
        hints.append(line)
",1,"[['https://github.com/Pebaz/nimporter/tree/master/tests/test_build.py', 'tests.test_build', '', 'test_invoke_compiler']]"
nmigen,https://github.com/m-labs/nmigen/tree/master/nmigen/compat/genlib/record.py,RecordTestCase,test_operators,"return [getattr(self, f[0]).eq(getattr(other, f[0])) for f in self.layout if hasattr(other, f[0])]","tmp_ListComp0 = []
for f in self.layout:
    if hasattr(other, f[0]):
        tmp_ListComp0.append(getattr(self, f[0]).eq(getattr(other, f[0])))

return tmp_ListComp0
",1,"[['https://github.com/m-labs/nmigen/tree/master/tests/test_hdl_rec.py', 'tests.test_hdl_rec', 'RecordTestCase', 'test_operators']]"
nmigen,https://github.com/m-labs/nmigen/tree/master/nmigen/hdl/rec.py,ConnectTestCase,test_flat_exclude,stmts += [sub_item.eq(item) for sub_item in subord_items],"tmp_ListComp0 = []
for sub_item in subord_items:
    tmp_ListComp0.append(sub_item.eq(item))

stmts += tmp_ListComp0
",1,"[['https://github.com/m-labs/nmigen/tree/master/tests/test_hdl_rec.py', 'tests.test_hdl_rec', 'ConnectTestCase', 'test_flat_include'], ['https://github.com/m-labs/nmigen/tree/master/tests/test_hdl_rec.py', 'tests.test_hdl_rec', 'ConnectTestCase', 'test_nested'], ['https://github.com/m-labs/nmigen/tree/master/tests/test_hdl_rec.py', 'tests.test_hdl_rec', 'ConnectTestCase', 'test_wrong_include_exclude'], ['https://github.com/m-labs/nmigen/tree/master/tests/test_hdl_rec.py', 'tests.test_hdl_rec', 'ConnectTestCase', 'test_flat'], ['https://github.com/m-labs/nmigen/tree/master/tests/test_hdl_rec.py', 'tests.test_hdl_rec', 'ConnectTestCase', 'test_wrong_missing_field'], ['https://github.com/m-labs/nmigen/tree/master/tests/test_hdl_rec.py', 'tests.test_hdl_rec', 'ConnectTestCase', 'test_flat_exclude']]"
nibabel,https://github.com/nipy/nibabel/tree/master/nibabel/deprecator.py,,test__add_dep_doc,setup_lines = [indent + L for L in setup.splitlines()],"
setup_lines = []
for L in setup.splitlines():
    setup_lines.append(indent + L)
",1,"[['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_deprecator.py', 'nibabel.tests.test_deprecator', '', 'test__add_dep_doc']]"
nibabel,https://github.com/nipy/nibabel/tree/master/nibabel/deprecator.py,,test__add_dep_doc,dep_lines = [indent + L for L in [''] + dep_doc.splitlines() + ['']],"
dep_lines = []
for L in [''] + dep_doc.splitlines() + ['']:
    dep_lines.append(indent + L)
",1,"[['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_deprecator.py', 'nibabel.tests.test_deprecator', '', 'test__add_dep_doc']]"
nibabel,https://github.com/nipy/nibabel/tree/master/nibabel/deprecator.py,,test__add_dep_doc,cleanup_lines = [indent + L for L in cleanup.splitlines()],"
cleanup_lines = []
for L in cleanup.splitlines():
    cleanup_lines.append(indent + L)
",1,"[['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_deprecator.py', 'nibabel.tests.test_deprecator', '', 'test__add_dep_doc']]"
nibabel,https://github.com/nipy/nibabel/tree/master/nibabel/orientations.py,,test_resample_from_to,"axis_transpose = [int(v) for v in ornt[:, 0]]","
axis_transpose = []
for v in ornt[:, 0]:
    axis_transpose.append(int(v))
",1,"[['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_processing.py', 'nibabel.tests.test_processing', '', 'test_resample_from_to']]"
dnspython,https://github.com/rthalley/dnspython/tree/master/dns/rdata.py,RdataTestCase,test_wordbreak,"return separator.join([data[i:i + chunksize] for i in range(0, len(data), chunksize)]).decode()","tmp_ListComp0 = []
for i in range(0, len(data), chunksize):
    tmp_ListComp0.append(data[i:i + chunksize])

return separator.join(tmp_ListComp0).decode()
",1,"[['https://github.com/rthalley/dnspython/tree/master/tests/test_rdata.py', 'tests.test_rdata', 'RdataTestCase', 'test_wordbreak']]"
dnspython,https://github.com/rthalley/dnspython/tree/master/dns/ipv4.py,IPv4Tests,test_valid,b = [int(part) for part in parts],"
b = []
for part in parts:
    b.append(int(part))
",1,"[['https://github.com/rthalley/dnspython/tree/master/tests/test_address.py', 'tests.test_address', 'IPv4Tests', 'test_invalid'], ['https://github.com/rthalley/dnspython/tree/master/tests/test_address.py', 'tests.test_address', 'IPv4Tests', 'test_valid']]"
cleanlab,https://github.com/cleanlab/cleanlab/tree/master/cleanlab/util.py,,test_pu_remove_noise,"x[cwn, [i for i in range(K) if i != cwn]] = 0.0","tmp_ListComp0 = []
for i in range(K):
    if i != cwn:
        tmp_ListComp0.append(i)

x[cwn, tmp_ListComp0] = 0.0
",1,"[['https://github.com/cleanlab/cleanlab/tree/master/tests/test_util.py', 'tests.test_util', '', 'test_pu_remove_noise']]"
cleanlab,https://github.com/cleanlab/cleanlab/tree/master/cleanlab/util.py,,test_print_square,print(' ' + short_title + ''.join(['\t' + top_name + '=' + str(i) for i in range(K)])),"tmp_ListComp0 = []
for i in range(K):
    tmp_ListComp0.append('\t' + top_name + '=' + str(i))

print(' ' + short_title + ''.join(tmp_ListComp0))
",1,"[['https://github.com/cleanlab/cleanlab/tree/master/tests/test_util.py', 'tests.test_util', '', 'test_print_square']]"
cleanlab,https://github.com/cleanlab/cleanlab/tree/master/cleanlab/util.py,,test_print_square,"entry = '\t'.join([str(z) for z in list(matrix.round(round_places)[i, :])])","tmp_ListComp0 = []
for z in list(matrix.round(round_places)[i, :]):
    tmp_ListComp0.append(str(z))

entry = '\t'.join(tmp_ListComp0)
",1,"[['https://github.com/cleanlab/cleanlab/tree/master/tests/test_util.py', 'tests.test_util', '', 'test_print_square']]"
cleanlab,https://github.com/cleanlab/cleanlab/tree/master/cleanlab/noise_generation.py,,test_main_pipeline,"noise = [s_labels[i] for (i, c) in enumerate(s_counts) for z in range(c)]","
noise = []
for (i, c) in enumerate(s_counts):
    for z in range(c):
        noise.append(s_labels[i])
",1,"[['https://github.com/cleanlab/cleanlab/tree/master/tests/test_noise_generation.py', 'tests.test_noise_generation', '', 'test_main_pipeline']]"
cleanlab,https://github.com/cleanlab/cleanlab/tree/master/cleanlab/noise_generation.py,,test_trace_less_than_1_error,"rows = np.random.choice([row for row in range(K) if row != col], num_noise, replace=False)","tmp_ListComp0 = []
for row in range(K):
    if row != col:
        tmp_ListComp0.append(row)

rows = np.random.choice(tmp_ListComp0, num_noise, replace=False)
",1,"[['https://github.com/cleanlab/cleanlab/tree/master/tests/test_noise_generation.py', 'tests.test_noise_generation', '', 'test_one_class_error'], ['https://github.com/cleanlab/cleanlab/tree/master/tests/test_noise_generation.py', 'tests.test_noise_generation', '', 'test_two_class_nofraczero'], ['https://github.com/cleanlab/cleanlab/tree/master/tests/test_noise_generation.py', 'tests.test_noise_generation', '', 'test_max_iter'], ['https://github.com/cleanlab/cleanlab/tree/master/tests/test_noise_generation.py', 'tests.test_noise_generation', '', 'test_valid_no_py_error'], ['https://github.com/cleanlab/cleanlab/tree/master/tests/test_noise_generation.py', 'tests.test_noise_generation', '', 'test_two_class_fraczero_high'], ['https://github.com/cleanlab/cleanlab/tree/master/tests/test_noise_generation.py', 'tests.test_noise_generation', '', 'test_main_pipeline'], ['https://github.com/cleanlab/cleanlab/tree/master/tests/test_noise_generation.py', 'tests.test_noise_generation', '', 'test_trace_less_than_1_error']]"
cleanlab,https://github.com/cleanlab/cleanlab/tree/master/cleanlab/pruning.py,,test_get_noise_indices_multi_label,s_counts = value_counts([i for lst in s for i in lst]),"tmp_ListComp0 = []
for lst in s:
    for i in lst:
        tmp_ListComp0.append(i)

s_counts = value_counts(tmp_ListComp0)
",1,"[['https://github.com/cleanlab/cleanlab/tree/master/tests/test_latent_estimation_and_pruning.py', 'tests.test_latent_estimation_and_pruning', '', 'test_exact_prune_count'], ['https://github.com/cleanlab/cleanlab/tree/master/tests/test_latent_estimation_and_pruning.py', 'tests.test_latent_estimation_and_pruning', '', 'test_prune_on_small_data'], ['https://github.com/cleanlab/cleanlab/tree/master/tests/test_latent_estimation_and_pruning.py', 'tests.test_latent_estimation_and_pruning', '', 'test_pruning_order_method'], ['https://github.com/cleanlab/cleanlab/tree/master/tests/test_latent_estimation_and_pruning.py', 'tests.test_latent_estimation_and_pruning', '', 'test_get_noise_indices_multi_label']]"
cleanlab,https://github.com/cleanlab/cleanlab/tree/master/cleanlab/pruning.py,,test_get_noise_indices_multi_label,"noise_masks_per_class = [_prune_by_class(k, args) for k in range(K)]","
noise_masks_per_class = []
for k in range(K):
    noise_masks_per_class.append(_prune_by_class(k, args))
",1,"[['https://github.com/cleanlab/cleanlab/tree/master/tests/test_latent_estimation_and_pruning.py', 'tests.test_latent_estimation_and_pruning', '', 'test_exact_prune_count'], ['https://github.com/cleanlab/cleanlab/tree/master/tests/test_latent_estimation_and_pruning.py', 'tests.test_latent_estimation_and_pruning', '', 'test_prune_on_small_data'], ['https://github.com/cleanlab/cleanlab/tree/master/tests/test_latent_estimation_and_pruning.py', 'tests.test_latent_estimation_and_pruning', '', 'test_pruning_order_method'], ['https://github.com/cleanlab/cleanlab/tree/master/tests/test_latent_estimation_and_pruning.py', 'tests.test_latent_estimation_and_pruning', '', 'test_get_noise_indices_multi_label']]"
cleanlab,https://github.com/cleanlab/cleanlab/tree/master/cleanlab/pruning.py,,test_get_noise_indices_multi_label,"noise_masks_per_class = [_prune_by_count(k, args) for k in range(K)]","
noise_masks_per_class = []
for k in range(K):
    noise_masks_per_class.append(_prune_by_count(k, args))
",1,"[['https://github.com/cleanlab/cleanlab/tree/master/tests/test_latent_estimation_and_pruning.py', 'tests.test_latent_estimation_and_pruning', '', 'test_exact_prune_count'], ['https://github.com/cleanlab/cleanlab/tree/master/tests/test_latent_estimation_and_pruning.py', 'tests.test_latent_estimation_and_pruning', '', 'test_prune_on_small_data'], ['https://github.com/cleanlab/cleanlab/tree/master/tests/test_latent_estimation_and_pruning.py', 'tests.test_latent_estimation_and_pruning', '', 'test_pruning_order_method'], ['https://github.com/cleanlab/cleanlab/tree/master/tests/test_latent_estimation_and_pruning.py', 'tests.test_latent_estimation_and_pruning', '', 'test_get_noise_indices_multi_label']]"
cleanlab,https://github.com/cleanlab/cleanlab/tree/master/cleanlab/latent_estimation.py,,test_calibrate_joint,s_counts = value_counts([x for lst in s for x in lst]),"tmp_ListComp0 = []
for lst in s:
    for x in lst:
        tmp_ListComp0.append(x)

s_counts = value_counts(tmp_ListComp0)
",1,"[['https://github.com/cleanlab/cleanlab/tree/master/tests/test_latent_estimation_and_pruning.py', 'tests.test_latent_estimation_and_pruning', '', 'test_calibrate_joint']]"
cleanlab,https://github.com/cleanlab/cleanlab/tree/master/cleanlab/latent_estimation.py,,test_compute_confident_joint,"thresholds = [np.mean(psx[:, k][s == k]) for k in range(K)]","
thresholds = []
for k in range(K):
    thresholds.append(np.mean(psx[:, k][s == k]))
",1,"[['https://github.com/cleanlab/cleanlab/tree/master/tests/test_latent_estimation_and_pruning.py', 'tests.test_latent_estimation_and_pruning', '', 'test_calibrate_joint'], ['https://github.com/cleanlab/cleanlab/tree/master/tests/test_latent_estimation_and_pruning.py', 'tests.test_latent_estimation_and_pruning', '', 'test_compute_confident_joint']]"
cleanlab,https://github.com/cleanlab/cleanlab/tree/master/cleanlab/latent_estimation.py,,test_cj_from_probs,"thresholds = [np.mean(psx[:, k][s == k]) for k in range(K)]","
thresholds = []
for k in range(K):
    thresholds.append(np.mean(psx[:, k][s == k]))
",1,"[['https://github.com/cleanlab/cleanlab/tree/master/tests/test_latent_estimation_and_pruning.py', 'tests.test_latent_estimation_and_pruning', '', 'test_cj_from_probs']]"
luminaire,https://github.com/zillow/luminaire/tree/master/luminaire/exploration/data_exploration.py,TestDataExploration,test_data_change_detection,change_point_list = [i.__str__() for i in df_subset.index],"
change_point_list = []
for i in df_subset.index:
    change_point_list.append(i.__str__())
",1,"[['https://github.com/zillow/luminaire/tree/master/luminaire/tests/test_exploration.py', 'luminaire.tests.test_exploration', 'TestDataExploration', 'test_data_change_detection']]"
forseti-security,https://github.com/forseti-security/forseti-security/tree/master/google/cloud/forseti/enforcer/gce_firewall_enforcer.py,FirewallRulesTest,test_export_and_import_of_rules,"rule = dict([(key, item[key]) for key in rv.ALLOWED_RULE_ITEMS if key in item])","tmp_ListComp0 = []
for key in rv.ALLOWED_RULE_ITEMS:
    if key in item:
        tmp_ListComp0.append((key, item[key]))

rule = dict(tmp_ListComp0)
",1,"[['https://github.com/forseti-security/forseti-security/tree/master/tests/enforcer/gce_firewall_enforcer_test.py', 'tests.enforcer.gce_firewall_enforcer_test', 'FirewallRulesTest', 'test_export_and_import_of_rules']]"
errbot,https://github.com/errbotio/errbot/tree/master/errbot/plugin_info.py,,test_errbot_version_check,"deps = [name.strip() for name in depends_on.split(',')] if depends_on else []","def my_comprehension_func(depends_on):
    tmp_ListComp0 = []
    for name in depends_on.split(','):
        tmp_ListComp0.append(name.strip())
    return tmp_ListComp0

deps = my_comprehension_func(depends_on) if depends_on else []
",1,"[['https://github.com/errbotio/errbot/tree/master/tests/plugin_management_test.py', 'tests.plugin_management_test', '', 'test_errbot_version_check']]"
errbot,https://github.com/errbotio/errbot/tree/master/errbot/flow.py,,test_flow_predicate,"return [node for (predicate, node) in self._current_step.children if predicate(self.ctx)]","tmp_ListComp0 = []
for (predicate, node) in self._current_step.children:
    if predicate(self.ctx):
        tmp_ListComp0.append(node)

return tmp_ListComp0
",1,"[['https://github.com/errbotio/errbot/tree/master/tests/flow_test.py', 'tests.flow_test', '', 'test_flow_predicate']]"
sen,https://github.com/TomasTomecek/sen/tree/master/sen/docker_backend.py,,test_containers_call,return [x for x in list(self._containers.values()) if x.running],"tmp_ListComp0 = []
for x in list(self._containers.values()):
    if x.running:
        tmp_ListComp0.append(x)

return tmp_ListComp0
",1,"[['https://github.com/TomasTomecek/sen/tree/master/tests/test_docker_backend.py', 'tests.test_docker_backend', '', 'test_stats'], ['https://github.com/TomasTomecek/sen/tree/master/tests/test_docker_backend.py', 'tests.test_docker_backend', '', 'test_containers_call']]"
sen,https://github.com/TomasTomecek/sen/tree/master/sen/tui/views/container_info.py,,test_short_id,root_process = [x for x in self.data if x.ppid not in self._pids],"
root_process = []
for x in self.data:
    if x.ppid not in self._pids:
        root_process.append(x)
",1,"[['https://github.com/TomasTomecek/sen/tree/master/tests/test_container_info.py', 'tests.test_container_info', '', 'test_short_id']]"
dynaconf,https://github.com/rochacbruno/dynaconf/tree/master/dynaconf/loaders/toml_loader.py,,test_encode_nulls,return [encode_nulls(item) for item in data],"tmp_ListComp0 = []
for item in data:
    tmp_ListComp0.append(encode_nulls(item))

return tmp_ListComp0
",1,"[['https://github.com/rochacbruno/dynaconf/tree/master/tests/test_toml_loader.py', 'tests.test_toml_loader', '', 'test_encode_nulls']]"
DataProfiler,https://github.com/capitalone/DataProfiler/tree/master/dataprofiler/reports/graphs.py,TestPlotMissingValuesMatrix,test_bad_input,column_names = ['"' + str(col.name) + '"' for col in col_profiler_list],"
column_names = []
for col in col_profiler_list:
    column_names.append('""' + str(col.name) + '""')
",1,"[['https://github.com/capitalone/DataProfiler/tree/master/dataprofiler/tests/reports/test_graphs.py', 'dataprofiler.tests.reports.test_graphs', 'TestPlotMissingValuesMatrix', 'test_bad_input']]"
DataProfiler,https://github.com/capitalone/DataProfiler/tree/master/dataprofiler/reports/graphs.py,TestPlotMissingValuesMatrix,test_bad_input,xticks = [0.5 + i for i in range(col_id + 1)],"
xticks = []
for i in range(col_id + 1):
    xticks.append(0.5 + i)
",1,"[['https://github.com/capitalone/DataProfiler/tree/master/dataprofiler/tests/reports/test_graphs.py', 'dataprofiler.tests.reports.test_graphs', 'TestPlotMissingValuesMatrix', 'test_bad_input']]"
DataProfiler,https://github.com/capitalone/DataProfiler/tree/master/dataprofiler/labelers/data_processing.py,TestDirectPassPreprocessor,test_process,num_dim = sum([dim > 1 for dim in data.shape]),"tmp_ListComp0 = []
for dim in data.shape:
    tmp_ListComp0.append(dim > 1)

num_dim = sum(tmp_ListComp0)
",1,"[['https://github.com/capitalone/DataProfiler/tree/master/dataprofiler/tests/labelers/test_data_processing.py', 'dataprofiler.tests.labelers.test_data_processing', 'TestStructCharPreprocessor', 'test_process_input_checks'], ['https://github.com/capitalone/DataProfiler/tree/master/dataprofiler/tests/labelers/test_data_processing.py', 'dataprofiler.tests.labelers.test_data_processing', 'TestCharPreprocessor', 'test_process_input_checks'], ['https://github.com/capitalone/DataProfiler/tree/master/dataprofiler/tests/labelers/test_data_processing.py', 'dataprofiler.tests.labelers.test_data_processing', 'TestDirectPassPreprocessor', 'test_process']]"
pypiserver,https://github.com/pypiserver/pypiserver/tree/master/pypiserver/manage.py,,test_update_all_packages_with_blacklist,packages = frozenset([pkg for pkg in all_packages if pkg.pkgname not in skip_packages]),"tmp_ListComp0 = []
for pkg in all_packages:
    if pkg.pkgname not in skip_packages:
        tmp_ListComp0.append(pkg)

packages = frozenset(tmp_ListComp0)
",1,"[['https://github.com/pypiserver/pypiserver/tree/master/tests/test_manage.py', 'tests.test_manage', '', 'test_update_all_packages'], ['https://github.com/pypiserver/pypiserver/tree/master/tests/test_manage.py', 'tests.test_manage', '', 'test_update_all_packages_with_blacklist']]"
pudb,https://github.com/inducer/pudb/tree/master/pudb/settings.py,,test_load_breakpoints,lines.extend([line.strip() for line in rc_file.readlines()]),"tmp_ListComp0 = []
for line in rc_file.readlines():
    tmp_ListComp0.append(line.strip())

lines.extend(tmp_ListComp0)
",1,"[['https://github.com/inducer/pudb/tree/master/test/test_settings.py', 'test.test_settings', '', 'test_load_breakpoints']]"
pudb,https://github.com/inducer/pudb/tree/master/pudb/ui_tools.py,,test_simple,"line_attr = [(aname, l) for (aname, l) in line_attr if l > 0]","tmp_ListComp0 = []
for (aname, l) in line_attr:
    if l > 0:
        tmp_ListComp0.append((aname, l))

line_attr = tmp_ListComp0
",1,"[['https://github.com/inducer/pudb/tree/master/test/test_make_canvas.py', 'test.test_make_canvas', '', 'test_wide_chars'], ['https://github.com/inducer/pudb/tree/master/test/test_make_canvas.py', 'test.test_make_canvas', '', 'test_byte_boundary'], ['https://github.com/inducer/pudb/tree/master/test/test_make_canvas.py', 'test.test_make_canvas', '', 'test_boundary'], ['https://github.com/inducer/pudb/tree/master/test/test_make_canvas.py', 'test.test_make_canvas', '', 'test_multiple'], ['https://github.com/inducer/pudb/tree/master/test/test_make_canvas.py', 'test.test_make_canvas', '', 'test_simple']]"
PySceneDetect,https://github.com/Breakthrough/PySceneDetect/tree/master/scenedetect/stats_manager.py,,test_metrics,"return [self._get_metric(frame_number, metric_key) for metric_key in metric_keys]","tmp_ListComp0 = []
for metric_key in metric_keys:
    tmp_ListComp0.append(self._get_metric(frame_number, metric_key))

return tmp_ListComp0
",1,"[['https://github.com/Breakthrough/PySceneDetect/tree/master/tests/test_stats_manager.py', 'tests.test_stats_manager', '', 'test_load_hardcoded_file'], ['https://github.com/Breakthrough/PySceneDetect/tree/master/tests/test_stats_manager.py', 'tests.test_stats_manager', '', 'test_load_hardcoded_file_backwards_compat'], ['https://github.com/Breakthrough/PySceneDetect/tree/master/tests/test_stats_manager.py', 'tests.test_stats_manager', '', 'test_metrics']]"
pyte,https://github.com/selectel/pyte/tree/master/pyte/screens.py,,test_set_mode,modes = [mode << 5 for mode in modes],"tmp_ListComp0 = []
for mode in modes:
    tmp_ListComp0.append(mode << 5)

modes = tmp_ListComp0
",1,"[['https://github.com/selectel/pyte/tree/master/tests/test_screen.py', 'tests.test_screen', '', 'test_restore_cursor_out_of_bounds'], ['https://github.com/selectel/pyte/tree/master/tests/test_screen.py', 'tests.test_screen', '', 'test_report_device_status'], ['https://github.com/selectel/pyte/tree/master/tests/test_screen.py', 'tests.test_screen', '', 'test_draw_width0_irm'], ['https://github.com/selectel/pyte/tree/master/tests/test_screen.py', 'tests.test_screen', '', 'test_resize'], ['https://github.com/selectel/pyte/tree/master/tests/test_diff.py', 'tests.test_diff', '', 'test_draw_wrap'], ['https://github.com/selectel/pyte/tree/master/tests/test_screen.py', 'tests.test_screen', '', 'test_restore_cursor_with_none_saved'], ['https://github.com/selectel/pyte/tree/master/tests/test_screen.py', 'tests.test_screen', '', 'test_hide_cursor'], ['https://github.com/selectel/pyte/tree/master/tests/test_screen.py', 'tests.test_screen', '', 'test_cursor_position'], ['https://github.com/selectel/pyte/tree/master/tests/test_screen.py', 'tests.test_screen', '', 'test_save_cursor'], ['https://github.com/selectel/pyte/tree/master/tests/test_diff.py', 'tests.test_diff', '', 'test_modes'], ['https://github.com/selectel/pyte/tree/master/tests/test_screen.py', 'tests.test_screen', '', 'test_linefeed'], ['https://github.com/selectel/pyte/tree/master/tests/test_screen.py', 'tests.test_screen', '', 'test_draw'], ['https://github.com/selectel/pyte/tree/master/tests/test_screen.py', 'tests.test_screen', '', 'test_attributes_reset'], ['https://github.com/selectel/pyte/tree/master/tests/test_screen.py', 'tests.test_screen', '', 'test_alignment_display'], ['https://github.com/selectel/pyte/tree/master/tests/test_screen.py', 'tests.test_screen', '', 'test_set_mode']]"
goatools,https://github.com/tanghaibao/goatools/tree/master/goatools/nt_utils.py,,test_combine_nt_lists,lens = [len(lst) for lst in lists],"
lens = []
for lst in lists:
    lens.append(len(lst))
",1,"[['https://github.com/tanghaibao/goatools/tree/master/tests/test_combine_nt_lists.py', 'tests.test_combine_nt_lists', '', 'test_combine_nt_lists']]"
goatools,https://github.com/tanghaibao/goatools/tree/master/goatools/go_enrichment.py,,test_goea_bonferroni,results = [r for r in results if keep_if(r)],"tmp_ListComp0 = []
for r in results:
    if keep_if(r):
        tmp_ListComp0.append(r)

results = tmp_ListComp0
",1,"[['https://github.com/tanghaibao/goatools/tree/master/tests/test_goea_local.py', 'tests.test_goea_local', '', 'test_goea_fdr_dflt'], ['https://github.com/tanghaibao/goatools/tree/master/tests/test_goea_statsmodels.py', 'tests.test_goea_statsmodels', '', 'test_goea_statsmodels'], ['https://github.com/tanghaibao/goatools/tree/master/tests/test_i96_goea_ncbi.py', 'tests.test_i96_goea_ncbi', '', 'test_i96'], ['https://github.com/tanghaibao/goatools/tree/master/tests/test_goea_local.py', 'tests.test_goea_local', '', 'test_goea_local'], ['https://github.com/tanghaibao/goatools/tree/master/tests/test_goea_local.py', 'tests.test_goea_local', '', 'test_goea_bonferroni']]"
goatools,https://github.com/tanghaibao/goatools/tree/master/goatools/wr_tbl.py,,test_wr_methods,"return [f.split(':')[0] for f in re.findall('{(\\S+)}', prtfmt)]","tmp_ListComp0 = []
for f in re.findall('{(\\S+)}', prtfmt):
    tmp_ListComp0.append(f.split(':')[0])

return tmp_ListComp0
",1,"[['https://github.com/tanghaibao/goatools/tree/master/tests/test_wr_tbl_subset.py', 'tests.test_wr_tbl_subset', '', 'test_wr_methods']]"
python-string-similarity,https://github.com/luozhouyang/python-string-similarity/tree/master/strsimpy/longest_common_subsequence.py,LongestCommonSubsequenceTest,test_longest_common_subsequence,matrix = [[0] * (s1_len + 1) for _ in range(s0_len + 1)],"
matrix = []
for _ in range(s0_len + 1):
    matrix.append([0] * (s1_len + 1))
",1,"[['https://github.com/luozhouyang/python-string-similarity/tree/master/strsimpy/longest_common_subsequence_test.py', 'strsimpy.longest_common_subsequence_test', 'LongestCommonSubsequenceTest', 'test_longest_common_subsequence']]"
python-string-similarity,https://github.com/luozhouyang/python-string-similarity/tree/master/strsimpy/optimal_string_alignment.py,TestOptimalStringAlignment,test_optimal_string_alignment,d = [[0] * (m + 2) for _ in range(n + 2)],"
d = []
for _ in range(n + 2):
    d.append([0] * (m + 2))
",1,"[['https://github.com/luozhouyang/python-string-similarity/tree/master/strsimpy/optimal_string_alignment_test.py', 'strsimpy.optimal_string_alignment_test', 'TestOptimalStringAlignment', 'test_optimal_string_alignment']]"
python-string-similarity,https://github.com/luozhouyang/python-string-similarity/tree/master/strsimpy/damerau.py,TestDamerau,test_damerau,h = [[0] * (len(s1) + 2) for _ in range(len(s0) + 2)],"
h = []
for _ in range(len(s0) + 2):
    h.append([0] * (len(s1) + 2))
",1,"[['https://github.com/luozhouyang/python-string-similarity/tree/master/strsimpy/damerau_test.py', 'strsimpy.damerau_test', 'TestDamerau', 'test_damerau']]"
yt-dlc,https://github.com/blackjack4494/yt-dlc/tree/master/youtube_dlc/utils.py,TestUtil,test_xpath_with_ns,components = [c.split(':') for c in path.split('/')],"
components = []
for c in path.split('/'):
    components.append(c.split(':'))
",1,"[['https://github.com/blackjack4494/yt-dlc/tree/master/test/test_utils.py', 'test.test_utils', 'TestUtil', 'test_xpath_with_ns']]"
yt-dlc,https://github.com/blackjack4494/yt-dlc/tree/master/youtube_dlc/compat.py,TestCompat,test_compat_urllib_parse_urlencode,return [encode_elem(e) for e in l],"tmp_ListComp0 = []
for e in l:
    tmp_ListComp0.append(encode_elem(e))

return tmp_ListComp0
",1,"[['https://github.com/blackjack4494/yt-dlc/tree/master/test/test_compat.py', 'test.test_compat', 'TestCompat', 'test_compat_urllib_parse_urlencode']]"
aeneas,https://github.com/readbeyond/aeneas/tree/master/aeneas/logger.py,TestLogger,test_tag,ppl = [entry.pretty_print(show_datetime) for entry in self.entries],"
ppl = []
for entry in self.entries:
    ppl.append(entry.pretty_print(show_datetime))
",1,"[['https://github.com/readbeyond/aeneas/tree/master/aeneas/tests/test_logger.py', 'aeneas.tests.test_logger', 'TestLogger', 'test_tag']]"
aeneas,https://github.com/readbeyond/aeneas/tree/master/aeneas/globalfunctions.py,TestGlobalFunctions,test_config_txt_to_string,pairs = [l.strip() for l in string.splitlines() if len(l.strip()) > 0],"
pairs = []
for l in string.splitlines():
    if len(l.strip()) > 0:
        pairs.append(l.strip())
",1,"[['https://github.com/readbeyond/aeneas/tree/master/aeneas/tests/test_globalfunctions.py', 'aeneas.tests.test_globalfunctions', 'TestGlobalFunctions', 'test_config_txt_to_string']]"
aeneas,https://github.com/readbeyond/aeneas/tree/master/aeneas/task.py,TestTask,test_task_sync_map_leaves,return [f for f in self.sync_map.leaves(fragment_type)],"tmp_ListComp0 = []
for f in self.sync_map.leaves(fragment_type):
    tmp_ListComp0.append(f)

return tmp_ListComp0
",1,"[['https://github.com/readbeyond/aeneas/tree/master/aeneas/tests/test_task.py', 'aeneas.tests.test_task', 'TestTask', 'test_task_sync_map_leaves_empty'], ['https://github.com/readbeyond/aeneas/tree/master/aeneas/tests/test_task.py', 'aeneas.tests.test_task', 'TestTask', 'test_task_sync_map_leaves']]"
audiogrep,https://github.com/antiboredom/audiogrep/tree/master/audiogrep/audiogrep.py,,test_convert_timestamps,"lines = [re.sub('\\(.*?\\)', '', l).strip().split(' ') for l in lines]","tmp_ListComp0 = []
for l in lines:
    tmp_ListComp0.append(re.sub('\\(.*?\\)', '', l).strip().split(' '))

lines = tmp_ListComp0
",1,"[['https://github.com/antiboredom/audiogrep/tree/master/audiogrep/tests/test_audiogrep.py', 'audiogrep.tests.test_audiogrep', '', 'test_convert_timestamps']]"
audiogrep,https://github.com/antiboredom/audiogrep/tree/master/audiogrep/audiogrep.py,,test_convert_timestamps,lines = [l for l in lines if len(l) == 4],"tmp_ListComp0 = []
for l in lines:
    if len(l) == 4:
        tmp_ListComp0.append(l)

lines = tmp_ListComp0
",1,"[['https://github.com/antiboredom/audiogrep/tree/master/audiogrep/tests/test_audiogrep.py', 'audiogrep.tests.test_audiogrep', '', 'test_convert_timestamps']]"
authlib,https://github.com/lepture/authlib/tree/master/authlib/oauth2/rfc6749/util.py,OAuth2UtilTest,test_list_to_scope,return ' '.join([to_unicode(s) for s in scope]),"tmp_ListComp0 = []
for s in scope:
    tmp_ListComp0.append(to_unicode(s))

return ' '.join(tmp_ListComp0)
",1,"[['https://github.com/lepture/authlib/tree/master/tests/core/test_oauth2/test_rfc6749_misc.py', 'tests.core.test_oauth2.test_rfc6749_misc', 'OAuth2UtilTest', 'test_list_to_scope']]"
stcgal,https://github.com/grigorig/stcgal/tree/master/stcgal/utils.py,TestUtils,test_hexstr,return sep.join(['%02X' % x for x in bytes(bytestr)]),"tmp_ListComp0 = []
for x in bytes(bytestr):
    tmp_ListComp0.append('%02X' % x)

return sep.join(tmp_ListComp0)
",1,"[['https://github.com/grigorig/stcgal/tree/master/tests/test_utils.py', 'tests.test_utils', 'TestUtils', 'test_hexstr']]"
cubes,https://github.com/DataBrewery/cubes/tree/master/cubes/metadata/cube.py,CubeTestCase,test_inherit_nonadditive,existing = [agg for agg in aggregates if agg.function == aggregate.function and agg.measure == measure.name],"
existing = []
for agg in aggregates:
    if agg.function == aggregate.function and agg.measure == measure.name:
        existing.append(agg)
",1,"[['https://github.com/DataBrewery/cubes/tree/master/tests/test_model.py', 'tests.test_model', 'CubeTestCase', 'test_create_cube'], ['https://github.com/DataBrewery/cubes/tree/master/tests/test_model.py', 'tests.test_model', 'CubeTestCase', 'test_inherit_nonadditive']]"
cubes,https://github.com/DataBrewery/cubes/tree/master/cubes/metadata/dimension.py,CubeTestCase,test_inherit_nonadditive,levels = [level for level in levels if level.name in used_levels],"tmp_ListComp0 = []
for level in levels:
    if level.name in used_levels:
        tmp_ListComp0.append(level)

levels = tmp_ListComp0
",1,"[['https://github.com/DataBrewery/cubes/tree/master/tests/test_model.py', 'tests.test_model', 'DimensionTestCase', 'test_template'], ['https://github.com/DataBrewery/cubes/tree/master/tests/test_model.py', 'tests.test_model', 'DimensionTestCase', 'test_flat_dimension'], ['https://github.com/DataBrewery/cubes/tree/master/tests/test_model.py', 'tests.test_model', 'DimensionTestCase', 'test_to_dict'], ['https://github.com/DataBrewery/cubes/tree/master/tests/test_model.py', 'tests.test_model', 'DimensionTestCase', 'test_template_info'], ['https://github.com/DataBrewery/cubes/tree/master/tests/test_model.py', 'tests.test_model', 'DimensionTestCase', 'test_create'], ['https://github.com/DataBrewery/cubes/tree/master/tests/test_model.py', 'tests.test_model', 'DimensionTestCase', 'test_comparisons'], ['https://github.com/DataBrewery/cubes/tree/master/tests/test_model.py', 'tests.test_model', 'DimensionTestCase', 'test_template_hierarchies'], ['https://github.com/DataBrewery/cubes/tree/master/tests/test_model.py', 'tests.test_model', 'CubeTestCase', 'test_inherit_nonadditive']]"
cubes,https://github.com/DataBrewery/cubes/tree/master/cubes/metadata/dimension.py,CubeTestCase,test_inherit_nonadditive,levels = [copy.deepcopy(level) for level in template.levels],"
levels = []
for level in template.levels:
    levels.append(copy.deepcopy(level))
",1,"[['https://github.com/DataBrewery/cubes/tree/master/tests/test_model.py', 'tests.test_model', 'DimensionTestCase', 'test_template'], ['https://github.com/DataBrewery/cubes/tree/master/tests/test_model.py', 'tests.test_model', 'DimensionTestCase', 'test_flat_dimension'], ['https://github.com/DataBrewery/cubes/tree/master/tests/test_model.py', 'tests.test_model', 'DimensionTestCase', 'test_to_dict'], ['https://github.com/DataBrewery/cubes/tree/master/tests/test_model.py', 'tests.test_model', 'DimensionTestCase', 'test_template_info'], ['https://github.com/DataBrewery/cubes/tree/master/tests/test_model.py', 'tests.test_model', 'DimensionTestCase', 'test_create'], ['https://github.com/DataBrewery/cubes/tree/master/tests/test_model.py', 'tests.test_model', 'DimensionTestCase', 'test_comparisons'], ['https://github.com/DataBrewery/cubes/tree/master/tests/test_model.py', 'tests.test_model', 'DimensionTestCase', 'test_template_hierarchies'], ['https://github.com/DataBrewery/cubes/tree/master/tests/test_model.py', 'tests.test_model', 'CubeTestCase', 'test_inherit_nonadditive']]"
cubes,https://github.com/DataBrewery/cubes/tree/master/cubes/metadata/dimension.py,CubeTestCase,test_inherit_nonadditive,level_names = set([level.name for level in levels]),"tmp_ListComp0 = []
for level in levels:
    tmp_ListComp0.append(level.name)

level_names = set(tmp_ListComp0)
",1,"[['https://github.com/DataBrewery/cubes/tree/master/tests/test_model.py', 'tests.test_model', 'DimensionTestCase', 'test_template'], ['https://github.com/DataBrewery/cubes/tree/master/tests/test_model.py', 'tests.test_model', 'DimensionTestCase', 'test_flat_dimension'], ['https://github.com/DataBrewery/cubes/tree/master/tests/test_model.py', 'tests.test_model', 'DimensionTestCase', 'test_to_dict'], ['https://github.com/DataBrewery/cubes/tree/master/tests/test_model.py', 'tests.test_model', 'DimensionTestCase', 'test_template_info'], ['https://github.com/DataBrewery/cubes/tree/master/tests/test_model.py', 'tests.test_model', 'DimensionTestCase', 'test_create'], ['https://github.com/DataBrewery/cubes/tree/master/tests/test_model.py', 'tests.test_model', 'DimensionTestCase', 'test_comparisons'], ['https://github.com/DataBrewery/cubes/tree/master/tests/test_model.py', 'tests.test_model', 'DimensionTestCase', 'test_template_hierarchies'], ['https://github.com/DataBrewery/cubes/tree/master/tests/test_model.py', 'tests.test_model', 'CubeTestCase', 'test_inherit_nonadditive']]"
cubes,https://github.com/DataBrewery/cubes/tree/master/cubes/metadata/dimension.py,CubeTestCase,test_inherit_nonadditive,hier_levels = [level_dict[level.name] for level in hier.levels],"
hier_levels = []
for level in hier.levels:
    hier_levels.append(level_dict[level.name])
",1,"[['https://github.com/DataBrewery/cubes/tree/master/tests/test_model.py', 'tests.test_model', 'DimensionTestCase', 'test_template'], ['https://github.com/DataBrewery/cubes/tree/master/tests/test_model.py', 'tests.test_model', 'DimensionTestCase', 'test_flat_dimension'], ['https://github.com/DataBrewery/cubes/tree/master/tests/test_model.py', 'tests.test_model', 'DimensionTestCase', 'test_to_dict'], ['https://github.com/DataBrewery/cubes/tree/master/tests/test_model.py', 'tests.test_model', 'DimensionTestCase', 'test_template_info'], ['https://github.com/DataBrewery/cubes/tree/master/tests/test_model.py', 'tests.test_model', 'DimensionTestCase', 'test_create'], ['https://github.com/DataBrewery/cubes/tree/master/tests/test_model.py', 'tests.test_model', 'DimensionTestCase', 'test_comparisons'], ['https://github.com/DataBrewery/cubes/tree/master/tests/test_model.py', 'tests.test_model', 'DimensionTestCase', 'test_template_hierarchies'], ['https://github.com/DataBrewery/cubes/tree/master/tests/test_model.py', 'tests.test_model', 'CubeTestCase', 'test_inherit_nonadditive']]"
cubes,https://github.com/DataBrewery/cubes/tree/master/cubes/metadata/attributes.py,ExpressionUnitTestCase,test_sorted_attributes,"dependants = [attr for (attr, deps) in remaining.items() if base in deps]","
dependants = []
for (attr, deps) in remaining.items():
    if base in deps:
        dependants.append(attr)
",1,"[['https://github.com/DataBrewery/cubes/tree/master/tests/test_expressions.py', 'tests.test_expressions', 'ExpressionUnitTestCase', 'test_sorted_circular'], ['https://github.com/DataBrewery/cubes/tree/master/tests/test_expressions.py', 'tests.test_expressions', 'ExpressionUnitTestCase', 'test_sorted_attributes_base'], ['https://github.com/DataBrewery/cubes/tree/master/tests/test_expressions.py', 'tests.test_expressions', 'ExpressionUnitTestCase', 'test_sorted_unknown'], ['https://github.com/DataBrewery/cubes/tree/master/tests/test_expressions.py', 'tests.test_expressions', 'ExpressionUnitTestCase', 'test_sorted_attributes']]"
crossplane,https://github.com/nginxinc/crossplane/tree/master/crossplane/__main__.py,,test_with_config_comments,"payload = [(token, lineno) for (token, lineno, quoted) in payload]","tmp_ListComp0 = []
for (token, lineno, quoted) in payload:
    tmp_ListComp0.append((token, lineno))

payload = tmp_ListComp0
",1,"[['https://github.com/nginxinc/crossplane/tree/master/tests/test_lex.py', 'tests.test_lex', '', 'test_quoted_right_brace'], ['https://github.com/nginxinc/crossplane/tree/master/tests/ext/test_lua.py', 'tests.ext.test_lua', '', 'test_lex_lua_block_tricky'], ['https://github.com/nginxinc/crossplane/tree/master/tests/test_lex.py', 'tests.test_lex', '', 'test_messy_config'], ['https://github.com/nginxinc/crossplane/tree/master/tests/ext/test_lua.py', 'tests.ext.test_lua', '', 'test_lex_lua_block_simple'], ['https://github.com/nginxinc/crossplane/tree/master/tests/test_lex.py', 'tests.test_lex', '', 'test_simple_config'], ['https://github.com/nginxinc/crossplane/tree/master/tests/test_lex.py', 'tests.test_lex', '', 'test_quote_behavior'], ['https://github.com/nginxinc/crossplane/tree/master/tests/ext/test_lua.py', 'tests.ext.test_lua', '', 'test_lex_lua_block_larger'], ['https://github.com/nginxinc/crossplane/tree/master/tests/test_lex.py', 'tests.test_lex', '', 'test_with_config_comments']]"
crossplane,https://github.com/nginxinc/crossplane/tree/master/crossplane/__main__.py,,test_with_config_comments,"payload = [token for (token, lineno, quoted) in payload]","tmp_ListComp0 = []
for (token, lineno, quoted) in payload:
    tmp_ListComp0.append(token)

payload = tmp_ListComp0
",1,"[['https://github.com/nginxinc/crossplane/tree/master/tests/test_lex.py', 'tests.test_lex', '', 'test_quoted_right_brace'], ['https://github.com/nginxinc/crossplane/tree/master/tests/ext/test_lua.py', 'tests.ext.test_lua', '', 'test_lex_lua_block_tricky'], ['https://github.com/nginxinc/crossplane/tree/master/tests/test_lex.py', 'tests.test_lex', '', 'test_messy_config'], ['https://github.com/nginxinc/crossplane/tree/master/tests/ext/test_lua.py', 'tests.ext.test_lua', '', 'test_lex_lua_block_simple'], ['https://github.com/nginxinc/crossplane/tree/master/tests/test_lex.py', 'tests.test_lex', '', 'test_simple_config'], ['https://github.com/nginxinc/crossplane/tree/master/tests/test_lex.py', 'tests.test_lex', '', 'test_quote_behavior'], ['https://github.com/nginxinc/crossplane/tree/master/tests/ext/test_lua.py', 'tests.ext.test_lua', '', 'test_lex_lua_block_larger'], ['https://github.com/nginxinc/crossplane/tree/master/tests/test_lex.py', 'tests.test_lex', '', 'test_with_config_comments']]"
crossplane,https://github.com/nginxinc/crossplane/tree/master/crossplane/builder.py,,test_build_with_comments,args = [_enquote(arg) for arg in stmt['args']],"
args = []
for arg in stmt['args']:
    args.append(_enquote(arg))
",1,"[['https://github.com/nginxinc/crossplane/tree/master/tests/test_build.py', 'tests.test_build', '', 'test_build_multiple_comments_on_one_line'], ['https://github.com/nginxinc/crossplane/tree/master/tests/test_build.py', 'tests.test_build', '', 'test_build_starts_with_comments'], ['https://github.com/nginxinc/crossplane/tree/master/tests/test_build.py', 'tests.test_build', '', 'test_build_with_quoted_unicode'], ['https://github.com/nginxinc/crossplane/tree/master/tests/test_build.py', 'tests.test_build', '', 'test_build_nested_and_multiple_args'], ['https://github.com/nginxinc/crossplane/tree/master/tests/test_build.py', 'tests.test_build', '', 'test_build_with_comments']]"
crossplane,https://github.com/nginxinc/crossplane/tree/master/crossplane/analyzer.py,,test_state_directive,masks = [mask for mask in masks if mask & CONTEXTS[ctx]],"tmp_ListComp0 = []
for mask in masks:
    if mask & CONTEXTS[ctx]:
        tmp_ListComp0.append(mask)

masks = tmp_ListComp0
",1,"[['https://github.com/nginxinc/crossplane/tree/master/tests/test_analyze.py', 'tests.test_analyze', '', 'test_flag_directive_args'], ['https://github.com/nginxinc/crossplane/tree/master/tests/test_analyze.py', 'tests.test_analyze', '', 'test_state_directive']]"
chia-blockchain,https://github.com/Chia-Network/chia-blockchain/tree/master/chia/util/cached_bls.py,TestCachedBLS,test_cached_bls,pks_objects: List[G1Element] = [G1Element.from_bytes(pk) for pk in pks],"
pks_objects = []
for pk in pks:
    pks_objects.append(G1Element.from_bytes(pk))
",1,"[['https://github.com/Chia-Network/chia-blockchain/tree/master/tests/core/util/test_cached_bls.py', 'tests.core.util.test_cached_bls', 'TestCachedBLS', 'test_cached_bls']]"
chia-blockchain,https://github.com/Chia-Network/chia-blockchain/tree/master/chia/util/bech32m.py,,test_invalid_imports,data = [CHARSET.find(x) for x in bech[pos + 1:]],"
data = []
for x in bech[pos + 1:]:
    data.append(CHARSET.find(x))
",1,"[['https://github.com/Chia-Network/chia-blockchain/tree/master/tests/wallet/test_bech32m.py', 'tests.wallet.test_bech32m', '', 'test_valid_imports'], ['https://github.com/Chia-Network/chia-blockchain/tree/master/tests/wallet/test_bech32m.py', 'tests.wallet.test_bech32m', '', 'test_invalid_imports']]"
ariadne,https://github.com/mirumee/ariadne/tree/master/ariadne/load_schema.py,,test_loading_schema_from_nested_directories,schema_list = [read_graphql_file(f) for f in sorted(walk_graphql_files(path))],"
schema_list = []
for f in sorted(walk_graphql_files(path)):
    schema_list.append(read_graphql_file(f))
",1,"[['https://github.com/mirumee/ariadne/tree/master/tests/test_schema_file_load.py', 'tests.test_schema_file_load', '', 'test_load_schema_from_single_file'], ['https://github.com/mirumee/ariadne/tree/master/tests/test_schema_file_load.py', 'tests.test_schema_file_load', '', 'test_loading_schema_from_directory'], ['https://github.com/mirumee/ariadne/tree/master/tests/test_schema_file_load.py', 'tests.test_schema_file_load', '', 'test_loading_schema_fails_on_bad_syntax'], ['https://github.com/mirumee/ariadne/tree/master/tests/test_schema_file_load.py', 'tests.test_schema_file_load', '', 'test_loading_schema_from_nested_directories']]"
ariadne,https://github.com/mirumee/ariadne/tree/master/ariadne/contrib/federation/utils.py,,test_get_entity_types_with_key_directive,return [t for t in schema_types if check_type(t)],"tmp_ListComp0 = []
for t in schema_types:
    if check_type(t):
        tmp_ListComp0.append(t)

return tmp_ListComp0
",1,"[['https://github.com/mirumee/ariadne/tree/master/tests/federation/test_utils.py', 'tests.federation.test_utils', '', 'test_get_entity_types_with_key_directive']]"
more-itertools,https://github.com/more-itertools/more-itertools/tree/master/more_itertools/recipes.py,RandomProductTests,test_simple_lists,pools = [tuple(pool) for pool in args] * repeat,"tmp_ListComp0 = []
for pool in args:
    tmp_ListComp0.append(tuple(pool))

pools = tmp_ListComp0 * repeat
",1,"[['https://github.com/more-itertools/more-itertools/tree/master/tests/test_recipes.py', 'tests.test_recipes', 'RandomProductTests', 'test_list_with_repeat'], ['https://github.com/more-itertools/more-itertools/tree/master/tests/test_recipes.py', 'tests.test_recipes', 'RandomProductTests', 'test_simple_lists']]"
more-itertools,https://github.com/more-itertools/more-itertools/tree/master/more_itertools/more.py,UniqueToEachTests,test_all_unique,pool = [list(it) for it in iterables],"
pool = []
for it in iterables:
    pool.append(list(it))
",1,"[['https://github.com/more-itertools/more-itertools/tree/master/tests/test_more.py', 'tests.test_more', 'UniqueToEachTests', 'test_mixed'], ['https://github.com/more-itertools/more-itertools/tree/master/tests/test_more.py', 'tests.test_more', 'UniqueToEachTests', 'test_duplicates'], ['https://github.com/more-itertools/more-itertools/tree/master/tests/test_more.py', 'tests.test_more', 'UniqueToEachTests', 'test_all_unique']]"
more-itertools,https://github.com/more-itertools/more-itertools/tree/master/more_itertools/more.py,UniqueToEachTests,test_all_unique,"return [list(filter(uniques.__contains__, it)) for it in pool]","tmp_ListComp0 = []
for it in pool:
    tmp_ListComp0.append(list(filter(uniques.__contains__, it)))

return tmp_ListComp0
",1,"[['https://github.com/more-itertools/more-itertools/tree/master/tests/test_more.py', 'tests.test_more', 'UniqueToEachTests', 'test_mixed'], ['https://github.com/more-itertools/more-itertools/tree/master/tests/test_more.py', 'tests.test_more', 'UniqueToEachTests', 'test_duplicates'], ['https://github.com/more-itertools/more-itertools/tree/master/tests/test_more.py', 'tests.test_more', 'UniqueToEachTests', 'test_all_unique']]"
budoux,https://github.com/google/budoux/tree/master/scripts/train.py,TestTrain,test_preprocess,features = [item[0] for item in features_counter.most_common() if item[1] > feature_thres],"
features = []
for item in features_counter.most_common():
    if item[1] > feature_thres:
        features.append(item[0])
",1,"[['https://github.com/google/budoux/tree/master/tests/test_train.py', 'tests.test_train', 'TestTrain', 'test_preprocess']]"
budoux,https://github.com/google/budoux/tree/master/scripts/train.py,TestTrain,test_preprocess,"feature_index = dict([(feature, i) for (i, feature) in enumerate(features)])","tmp_ListComp0 = []
for (i, feature) in enumerate(features):
    tmp_ListComp0.append((feature, i))

feature_index = dict(tmp_ListComp0)
",1,"[['https://github.com/google/budoux/tree/master/tests/test_train.py', 'tests.test_train', 'TestTrain', 'test_preprocess']]"
budoux,https://github.com/google/budoux/tree/master/scripts/train.py,TestTrain,test_preprocess,entries = [row.strip().split('\t') for row in f.read().splitlines()],"
entries = []
for row in f.read().splitlines():
    entries.append(row.strip().split('\t'))
",1,"[['https://github.com/google/budoux/tree/master/tests/test_train.py', 'tests.test_train', 'TestTrain', 'test_preprocess']]"
astor,https://github.com/berkerpeksag/astor/tree/master/astor/node_util.py,FastCompareTestCase,test_fast_compare,f1 = [x for x in f1 if x != 'ctx'],"tmp_ListComp0 = []
for x in f1:
    if x != 'ctx':
        tmp_ListComp0.append(x)

f1 = tmp_ListComp0
",1,"[['https://github.com/berkerpeksag/astor/tree/master/tests/test_misc.py', 'tests.test_misc', 'FastCompareTestCase', 'test_fast_compare']]"
mido,https://github.com/mido/mido/tree/master/mido/syx.py,,test_read,return [msg for msg in parser if msg.type == 'sysex'],"tmp_ListComp0 = []
for msg in parser:
    if msg.type == 'sysex':
        tmp_ListComp0.append(msg)

return tmp_ListComp0
",1,"[['https://github.com/mido/mido/tree/master/tests/test_syx.py', 'tests.test_syx', '', 'test_handle_any_whitespace'], ['https://github.com/mido/mido/tree/master/tests/test_syx.py', 'tests.test_syx', '', 'test_read']]"
mido,https://github.com/mido/mido/tree/master/mido/syx.py,,test_write,messages = [m for m in messages if m.type == 'sysex'],"tmp_ListComp0 = []
for m in messages:
    if m.type == 'sysex':
        tmp_ListComp0.append(m)

messages = tmp_ListComp0
",1,"[['https://github.com/mido/mido/tree/master/tests/test_syx.py', 'tests.test_syx', '', 'test_write']]"
mido,https://github.com/mido/mido/tree/master/mido/messages/encode.py,,test_encode_decode_all,data = [msg[name] for name in spec['value_names'] if name != 'channel'],"
data = []
for name in spec['value_names']:
    if name != 'channel':
        data.append(msg[name])
",1,"[['https://github.com/mido/mido/tree/master/tests/messages/test_encode.py', 'tests.messages.test_encode', '', 'test_encode_decode_all']]"
apprise,https://github.com/caronc/apprise/tree/master/apprise/AppriseAttachment.py,,test_apprise_attachment,return sum([len(a) for a in self.attachments if len(a) > 0]),"tmp_ListComp0 = []
for a in self.attachments:
    if len(a) > 0:
        tmp_ListComp0.append(len(a))

return sum(tmp_ListComp0)
",1,"[['https://github.com/caronc/apprise/tree/master/test/test_apprise_attachments.py', 'test.test_apprise_attachments', '', 'test_apprise_attachment']]"
apprise,https://github.com/caronc/apprise/tree/master/apprise/utils.py,,test_parse_qsd,pairs = [s2 for s1 in qs.split('&') for s2 in s1.split(';')],"
pairs = []
for s1 in qs.split('&'):
    for s2 in s1.split(';'):
        pairs.append(s2)
",1,"[['https://github.com/caronc/apprise/tree/master/test/test_utils.py', 'test.test_utils', '', 'test_parse_qsd']]"
apprise,https://github.com/caronc/apprise/tree/master/apprise/utils.py,,test_parse_phone_no,"result += [x for x in filter(bool, re.split(STRING_DELIMITERS, arg))]","tmp_ListComp0 = []
for x in filter(bool, re.split(STRING_DELIMITERS, arg)):
    tmp_ListComp0.append(x)

result += tmp_ListComp0
",1,"[['https://github.com/caronc/apprise/tree/master/test/test_utils.py', 'test.test_utils', '', 'test_parse_phone_no']]"
apprise,https://github.com/caronc/apprise/tree/master/apprise/utils.py,,test_parse_emails,"result += [x for x in filter(bool, re.split(STRING_DELIMITERS, arg))]","tmp_ListComp0 = []
for x in filter(bool, re.split(STRING_DELIMITERS, arg)):
    tmp_ListComp0.append(x)

result += tmp_ListComp0
",1,"[['https://github.com/caronc/apprise/tree/master/test/test_utils.py', 'test.test_utils', '', 'test_parse_emails']]"
apprise,https://github.com/caronc/apprise/tree/master/apprise/utils.py,,test_parse_urls,"result += [x for x in filter(bool, re.split(STRING_DELIMITERS, arg))]","tmp_ListComp0 = []
for x in filter(bool, re.split(STRING_DELIMITERS, arg)):
    tmp_ListComp0.append(x)

result += tmp_ListComp0
",1,"[['https://github.com/caronc/apprise/tree/master/test/test_utils.py', 'test.test_utils', '', 'test_parse_urls']]"
apprise,https://github.com/caronc/apprise/tree/master/apprise/utils.py,,test_parse_list,"return sorted([x for x in filter(bool, list(set(result)))])","tmp_ListComp0 = []
for x in filter(bool, list(set(result))):
    tmp_ListComp0.append(x)

return sorted(tmp_ListComp0)
",1,"[['https://github.com/caronc/apprise/tree/master/test/test_utils.py', 'test.test_utils', '', 'test_parse_list']]"
apprise,https://github.com/caronc/apprise/tree/master/apprise/utils.py,,test_apprise_validate_regex,"flags = reduce(lambda x, y: x | y, [0] + [_map[f] for f in flags if f in _map])","tmp_ListComp0 = []
for f in flags:
    if f in _map:
        tmp_ListComp0.append(_map[f])

flags = reduce(lambda x, y: x | y, [0] + tmp_ListComp0)
",1,"[['https://github.com/caronc/apprise/tree/master/test/test_utils.py', 'test.test_utils', '', 'test_apprise_validate_regex']]"
apprise,https://github.com/caronc/apprise/tree/master/apprise/utils.py,,test_cwe312_url,"results['fullpath'] = '/' + '/'.join([cwe312_word(x) for x in re.split('[\\\\/]+', results['fullpath'].lstrip('/'))]) if results['fullpath'] else ''","def my_comprehension_func(results):
    tmp_ListComp0 = []
    for x in re.split('[\\\\/]+', results['fullpath'].lstrip('/')):
        tmp_ListComp0.append(cwe312_word(x))
    return tmp_ListComp0

results['fullpath'] = '/' + '/'.join(my_comprehension_func(results)) if results['fullpath'] else ''
",1,"[['https://github.com/caronc/apprise/tree/master/test/test_utils.py', 'test.test_utils', '', 'test_cwe312_url']]"
apprise,https://github.com/caronc/apprise/tree/master/apprise/utils.py,,test_cwe312_url,"params = '?{}'.format('&'.join(['{}={}'.format(k, cwe312_word(v, force=k in ('password', 'secret', 'pass', 'token', 'key', 'id', 'apikey', 'to'))) for (k, v) in results['qsd'].items()]))","tmp_ListComp0 = []
for (k, v) in results['qsd'].items():
    tmp_ListComp0.append('{}={}'.format(k, cwe312_word(v, force=k in ('password', 'secret', 'pass', 'token', 'key', 'id', 'apikey', 'to'))))

params = '?{}'.format('&'.join(tmp_ListComp0))
",1,"[['https://github.com/caronc/apprise/tree/master/test/test_utils.py', 'test.test_utils', '', 'test_cwe312_url']]"
apprise,https://github.com/caronc/apprise/tree/master/apprise/utils.py,,test_environ_temporary_change,"[os.environ.pop(k, None) for k in remove]","tmp_ListComp0 = []
for k in remove:
    tmp_ListComp0.append(os.environ.pop(k, None))

tmp_ListComp0
",1,"[['https://github.com/caronc/apprise/tree/master/test/test_cli.py', 'test.test_cli', '', 'test_apprise_cli_nux_env'], ['https://github.com/caronc/apprise/tree/master/test/test_utils.py', 'test.test_utils', '', 'test_environ_temporary_change']]"
apprise,https://github.com/caronc/apprise/tree/master/apprise/utils.py,,test_apply_templating,lookup = [re.escape(x) for x in kwargs.keys()],"
lookup = []
for x in kwargs.keys():
    lookup.append(re.escape(x))
",1,"[['https://github.com/caronc/apprise/tree/master/test/test_utils.py', 'test.test_utils', '', 'test_apply_templating']]"
honcho,https://github.com/nickstenning/honcho/tree/master/honcho/colour.py,,test_get_colours,cs = [globals()[c] for c in cs],"tmp_ListComp0 = []
for c in cs:
    tmp_ListComp0.append(globals()[c])

cs = tmp_ListComp0
",1,"[['https://github.com/nickstenning/honcho/tree/master/tests/test_colour.py', 'tests.test_colour', '', 'test_get_colours']]"
socli,https://github.com/gautamkrishnar/socli/tree/master/socli/search.py,,test_searchStats,"answers = [s.get_text() for s in soup.find_all('div', class_='js-post-body')][1:]","tmp_ListComp0 = []
for s in soup.find_all('div', class_='js-post-body'):
    tmp_ListComp0.append(s.get_text())

answers = tmp_ListComp0[1:]
",1,"[['https://github.com/gautamkrishnar/socli/tree/master/socli/tests/test_socli.py', 'socli.tests.test_socli', '', 'test_searchStats']]"
gaft,https://github.com/PytLab/gaft/tree/master/gaft/engine.py,GAEngineTest,test_binary_run,"children = [self.mutation.mutate(child, self) for child in children]","tmp_ListComp0 = []
for child in children:
    tmp_ListComp0.append(self.mutation.mutate(child, self))

children = tmp_ListComp0
",1,"[['https://github.com/PytLab/gaft/tree/master/gaft/tests/dynamic_linear_scaling_test.py', 'gaft.tests.dynamic_linear_scaling_test', 'DynamicLinearScalingTest', 'test_run'], ['https://github.com/PytLab/gaft/tree/master/gaft/tests/linear_scaling_test.py', 'gaft.tests.linear_scaling_test', 'LinearScalingTest', 'test_run'], ['https://github.com/PytLab/gaft/tree/master/gaft/tests/engine_test.py', 'gaft.tests.engine_test', 'GAEngineTest', 'test_decimal_run'], ['https://github.com/PytLab/gaft/tree/master/gaft/tests/engine_test.py', 'gaft.tests.engine_test', 'GAEngineTest', 'test_binary_run']]"
gaft,https://github.com/PytLab/gaft/tree/master/gaft/mpiutil.py,MPIUtilTest,test_split_seq,"starts = [i for i in range(0, len(sequence), len(sequence) // self.size)]","
starts = []
for i in range(0, len(sequence), len(sequence) // self.size):
    starts.append(i)
",1,"[['https://github.com/PytLab/gaft/tree/master/gaft/tests/mpiutil_test.py', 'gaft.tests.mpiutil_test', 'MPIUtilTest', 'test_split_seq']]"
gaft,https://github.com/PytLab/gaft/tree/master/gaft/operators/selection/roulette_wheel_selection.py,RouletteWheelSelectionTest,test_selection,fit = [i - min_fit for i in fit],"tmp_ListComp0 = []
for i in fit:
    tmp_ListComp0.append(i - min_fit)

fit = tmp_ListComp0
",1,"[['https://github.com/PytLab/gaft/tree/master/gaft/tests/roulette_wheel_selection_test.py', 'gaft.tests.roulette_wheel_selection_test', 'RouletteWheelSelectionTest', 'test_selection']]"
gaft,https://github.com/PytLab/gaft/tree/master/gaft/operators/selection/roulette_wheel_selection.py,RouletteWheelSelectionTest,test_selection,wheel = list(accumulate([i / sum_fit for i in fit])),"tmp_ListComp0 = []
for i in fit:
    tmp_ListComp0.append(i / sum_fit)

wheel = list(accumulate(tmp_ListComp0))
",1,"[['https://github.com/PytLab/gaft/tree/master/gaft/tests/roulette_wheel_selection_test.py', 'gaft.tests.roulette_wheel_selection_test', 'RouletteWheelSelectionTest', 'test_selection']]"
gaft,https://github.com/PytLab/gaft/tree/master/gaft/components/population.py,PopulationTest,test_all_fits,return [fitness(indv) for indv in self.individuals],"tmp_ListComp0 = []
for indv in self.individuals:
    tmp_ListComp0.append(fitness(indv))

return tmp_ListComp0
",1,"[['https://github.com/PytLab/gaft/tree/master/gaft/tests/population_test.py', 'gaft.tests.population_test', 'PopulationTest', 'test_all_fits']]"
gaft,https://github.com/PytLab/gaft/tree/master/gaft/components/binary_individual.py,IndividualTest,test_binary_encoding,"solution = [self.decimalize(self.chromsome[start:end], eps, lower_bound) for ((start, end), (lower_bound, _), eps) in zip(self.gene_indices, self.ranges, self.precisions)]","
solution = []
for ((start, end), (lower_bound, _), eps) in zip(self.gene_indices, self.ranges, self.precisions):
    solution.append(self.decimalize(self.chromsome[start:end], eps, lower_bound))
",1,"[['https://github.com/PytLab/gaft/tree/master/gaft/tests/individual_test.py', 'gaft.tests.individual_test', 'IndividualTest', 'test_binary_encoding']]"
sacred,https://github.com/IDSIA/sacred/tree/master/sacred/optional.py,,test_optional_import_nonexisting,packages = [importlib.import_module(pn) for pn in package_names],"
packages = []
for pn in package_names:
    packages.append(importlib.import_module(pn))
",1,"[['https://github.com/IDSIA/sacred/tree/master/tests/test_optional.py', 'tests.test_optional', '', 'test_optional_import'], ['https://github.com/IDSIA/sacred/tree/master/tests/test_optional.py', 'tests.test_optional', '', 'test_optional_import_nonexisting']]"
traitlets,https://github.com/ipython/traitlets/tree/master/traitlets/tests/_warnings.py,TestHasTraits,test_trait_metadata_deprecated,remaining = [m for m in matching if not '\\A\\Z' in m.split('|')],"
remaining = []
for m in matching:
    if not '\\A\\Z' in m.split('|'):
        remaining.append(m)
",1,"[['https://github.com/ipython/traitlets/tree/master/traitlets/tests/test_traitlets.py', 'traitlets.tests.test_traitlets', 'TestTraitType', 'test_deprecated_method_warnings'], ['https://github.com/ipython/traitlets/tree/master/traitlets/tests/test_traitlets.py', 'traitlets.tests.test_traitlets', 'TestHasTraits', 'test_traits_metadata_deprecated'], ['https://github.com/ipython/traitlets/tree/master/traitlets/tests/test_traitlets.py', 'traitlets.tests.test_traitlets', 'TestTraitType', 'test_deprecated_metadata_access'], ['https://github.com/ipython/traitlets/tree/master/traitlets/config/tests/test_configurable.py', 'traitlets.config.tests.test_configurable', 'TestConfigContainers', 'test_config_default_deprecated'], ['https://github.com/ipython/traitlets/tree/master/traitlets/tests/test_traitlets.py', 'traitlets.tests.test_traitlets', 'TestTraitType', 'test_trait_types_tuple_deprecated'], ['https://github.com/ipython/traitlets/tree/master/traitlets/tests/test_traitlets.py', 'traitlets.tests.test_traitlets', 'TestTraitType', 'test_trait_types_list_deprecated'], ['https://github.com/ipython/traitlets/tree/master/traitlets/tests/test_traitlets.py', 'traitlets.tests.test_traitlets', 'TestTraitType', 'test_trait_types_deprecated'], ['https://github.com/ipython/traitlets/tree/master/traitlets/config/tests/test_configurable.py', 'traitlets.config.tests.test_configurable', 'TestConfigurable', 'test_parent'], ['https://github.com/ipython/traitlets/tree/master/traitlets/tests/test_traitlets.py', 'traitlets.tests.test_traitlets', '', 'test_super_bad_args'], ['https://github.com/ipython/traitlets/tree/master/traitlets/tests/test_traitlets.py', 'traitlets.tests.test_traitlets', 'TestTraitType', 'test_trait_types_dict_deprecated'], ['https://github.com/ipython/traitlets/tree/master/traitlets/config/tests/test_configurable.py', 'traitlets.config.tests.test_configurable', 'TestConfigurable', 'test_override2'], ['https://github.com/ipython/traitlets/tree/master/traitlets/tests/test_traitlets.py', 'traitlets.tests.test_traitlets', 'TestHasTraits', 'test_trait_metadata_deprecated']]"
CTags,https://github.com/SublimeText/CTags/tree/master//ctagsplugin.py,CTagsPluginTest,test_get_common_ancestor_folder__single_sibling_folder_open,matches = [path for x in folders if x.startswith(path)],"
matches = []
for x in folders:
    if x.startswith(path):
        matches.append(path)
",1,"[['https://github.com/SublimeText/CTags/tree/master//test_ctagsplugin.py', 'test_ctagsplugin', 'CTagsPluginTest', 'test_get_common_ancestor_folder__single_child_folder_open'], ['https://github.com/SublimeText/CTags/tree/master//test_ctagsplugin.py', 'test_ctagsplugin', 'CTagsPluginTest', 'test_get_common_ancestor_folder__current_folder_open'], ['https://github.com/SublimeText/CTags/tree/master//test_ctagsplugin.py', 'test_ctagsplugin', 'CTagsPluginTest', 'test_get_common_ancestor_folder__single_ancestor_folder_open'], ['https://github.com/SublimeText/CTags/tree/master//test_ctagsplugin.py', 'test_ctagsplugin', 'CTagsPluginTest', 'test_get_common_ancestor_folder__single_sibling_folder_open']]"
asciimatics,https://github.com/peterbrittain/asciimatics/tree/master/asciimatics/widgets/layout.py,TestWidgets,test_clear_widgets,self._columns = [[] for _ in self._columns],"tmp_ListComp0 = []
for _ in self._columns:
    tmp_ListComp0.append([])

self._columns = tmp_ListComp0
",1,"[['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_clear_widgets']]"
youtube-dl,https://github.com/lrvick/youtube-dl/tree/master/youtube_dl/utils.py,TestUtil,test_xpath_with_ns,components = [c.split(':') for c in path.split('/')],"
components = []
for c in path.split('/'):
    components.append(c.split(':'))
",1,"[['https://github.com/lrvick/youtube-dl/tree/master/test/test_utils.py', 'test.test_utils', 'TestUtil', 'test_xpath_with_ns']]"
youtube-dl,https://github.com/lrvick/youtube-dl/tree/master/youtube_dl/compat.py,TestCompat,test_compat_urllib_parse_urlencode,return [encode_elem(e) for e in l],"tmp_ListComp0 = []
for e in l:
    tmp_ListComp0.append(encode_elem(e))

return tmp_ListComp0
",1,"[['https://github.com/lrvick/youtube-dl/tree/master/test/test_compat.py', 'test.test_compat', 'TestCompat', 'test_compat_urllib_parse_urlencode']]"
cantools,https://github.com/cantools/cantools/tree/master/cantools/subparsers/dump/formatting.py,CanToolsDumpTest,test_multiplex_choices,return [prefix + line for line in lines],"tmp_ListComp0 = []
for line in lines:
    tmp_ListComp0.append(prefix + line)

return tmp_ListComp0
",1,"[['https://github.com/cantools/cantools/tree/master/tests/test_dump.py', 'tests.test_dump', 'CanToolsDumpTest', 'test_the_homer'], ['https://github.com/cantools/cantools/tree/master/tests/test_dump.py', 'tests.test_dump', 'CanToolsDumpTest', 'test_multiplex_extended'], ['https://github.com/cantools/cantools/tree/master/tests/test_dump.py', 'tests.test_dump', 'CanToolsDumpTest', 'test_multiplex'], ['https://github.com/cantools/cantools/tree/master/tests/test_dump.py', 'tests.test_dump', 'CanToolsDumpTest', 'test_multiplex_choices']]"
scikit-plot,https://github.com/reiinakano/scikit-plot/tree/master/scikitplot/estimators.py,TestFeatureImportances,test_order,"std = np.std([tree.feature_importances_ for tree in clf.estimators_], axis=0)","tmp_ListComp0 = []
for tree in clf.estimators_:
    tmp_ListComp0.append(tree.feature_importances_)

std = np.std(tmp_ListComp0, axis=0)
",1,"[['https://github.com/reiinakano/scikit-plot/tree/master/scikitplot/tests/test_estimators.py', 'scikitplot.tests.test_estimators', 'TestFeatureImportances', 'test_ax'], ['https://github.com/reiinakano/scikit-plot/tree/master/scikitplot/tests/test_estimators.py', 'scikitplot.tests.test_estimators', 'TestFeatureImportances', 'test_max_num_features'], ['https://github.com/reiinakano/scikit-plot/tree/master/scikitplot/tests/test_estimators.py', 'scikitplot.tests.test_estimators', 'TestFeatureImportances', 'test_feature_names'], ['https://github.com/reiinakano/scikit-plot/tree/master/scikitplot/tests/test_estimators.py', 'scikitplot.tests.test_estimators', 'TestFeatureImportances', 'test_string_classes'], ['https://github.com/reiinakano/scikit-plot/tree/master/scikitplot/tests/test_estimators.py', 'scikitplot.tests.test_estimators', 'TestFeatureImportances', 'test_order']]"
scikit-plot,https://github.com/reiinakano/scikit-plot/tree/master/scikitplot/metrics.py,TestPlotROCCurve,test_cmap,all_fpr = np.unique(np.concatenate([fpr[x] for x in range(len(classes))])),"tmp_ListComp0 = []
for x in range(len(classes)):
    tmp_ListComp0.append(fpr[x])

all_fpr = np.unique(np.concatenate(tmp_ListComp0))
",1,"[['https://github.com/reiinakano/scikit-plot/tree/master/scikitplot/tests/test_metrics.py', 'scikitplot.tests.test_metrics', 'TestPlotROCCurve', 'test_array_like'], ['https://github.com/reiinakano/scikit-plot/tree/master/scikitplot/tests/test_metrics.py', 'scikitplot.tests.test_metrics', 'TestPlotROCCurve', 'test_ax'], ['https://github.com/reiinakano/scikit-plot/tree/master/scikitplot/tests/test_metrics.py', 'scikitplot.tests.test_metrics', 'TestPlotROCCurve', 'test_string_classes'], ['https://github.com/reiinakano/scikit-plot/tree/master/scikitplot/tests/test_metrics.py', 'scikitplot.tests.test_metrics', 'TestPlotROCCurve', 'test_curve_diffs'], ['https://github.com/reiinakano/scikit-plot/tree/master/scikitplot/tests/test_metrics.py', 'scikitplot.tests.test_metrics', 'TestPlotROCCurve', 'test_cmap']]"
scikit-plot,https://github.com/reiinakano/scikit-plot/tree/master/scikitplot/plotters.py,TestPlotROCCurve,test_array_like,all_fpr = np.unique(np.concatenate([fpr[x] for x in range(len(classes))])),"tmp_ListComp0 = []
for x in range(len(classes)):
    tmp_ListComp0.append(fpr[x])

all_fpr = np.unique(np.concatenate(tmp_ListComp0))
",1,"[['https://github.com/reiinakano/scikit-plot/tree/master/scikitplot/tests/test_classifiers.py', 'scikitplot.tests.test_classifiers', 'TestPlotROCCurve', 'test_array_like']]"
subword-nmt,https://github.com/rsennrich/subword-nmt/tree/master//learn_bpe.py,TestBPELearnMethod,test_learn_bpe,"vocab = dict([(tuple(x[:-1]) + (x[-1] + '</w>',), y) for (x, y) in vocab.items()])","tmp_ListComp0 = []
for (x, y) in vocab.items():
    tmp_ListComp0.append((tuple(x[:-1]) + (x[-1] + '</w>',), y))

vocab = dict(tmp_ListComp0)
",1,"[['https://github.com/rsennrich/subword-nmt/tree/master/subword_nmt/tests/test_bpe.py', 'subword_nmt.tests.test_bpe', 'TestBPELearnMethod', 'test_learn_bpe']]"
subword-nmt,https://github.com/rsennrich/subword-nmt/tree/master/subword_nmt/learn_bpe.py,TestBPELearnMethod,test_learn_bpe,"vocab = dict([(tuple(x[:-1]) + (x[-1] + '</w>',), y) for (x, y) in vocab.items()])","tmp_ListComp0 = []
for (x, y) in vocab.items():
    tmp_ListComp0.append((tuple(x[:-1]) + (x[-1] + '</w>',), y))

vocab = dict(tmp_ListComp0)
",1,"[['https://github.com/rsennrich/subword-nmt/tree/master/subword_nmt/tests/test_bpe.py', 'subword_nmt.tests.test_bpe', 'TestBPELearnMethod', 'test_learn_bpe']]"
deep_learning_and_the_game_of_go,https://github.com/maxpumperla/deep_learning_and_the_game_of_go/tree/master/code/dlgo/encoders/alphago.py,AlphaGoEncoderTest,test_encoder,adjacent_strings = [game_state.board.get_go_string(nb) for nb in point.neighbors()],"
adjacent_strings = []
for nb in point.neighbors():
    adjacent_strings.append(game_state.board.get_go_string(nb))
",1,"[['https://github.com/maxpumperla/deep_learning_and_the_game_of_go/tree/master/code/dlgo/encoders/alphago_test.py', 'code.dlgo.encoders.alphago_test', 'AlphaGoEncoderTest', 'test_encoder']]"
git-revise,https://github.com/mystor/git-revise/tree/master/gitrevise/todo.py,,test_fixup_order_cycle,"steps = [Step(StepKind.PICK, commit) for commit in commits]","
steps = []
for commit in commits:
    steps.append(Step(StepKind.PICK, commit))
",1,"[['https://github.com/mystor/git-revise/tree/master/tests/test_fixup.py', 'tests.test_fixup', '', 'test_fixup_order'], ['https://github.com/mystor/git-revise/tree/master/tests/test_fixup.py', 'tests.test_fixup', '', 'test_fixup_order_transitive'], ['https://github.com/mystor/git-revise/tree/master/tests/test_fixup.py', 'tests.test_fixup', '', 'test_fixup_order_cycle']]"
git-revise,https://github.com/mystor/git-revise/tree/master/gitrevise/todo.py,,test_fixup_order_cycle,return [s for p in picks for s in p],"tmp_ListComp0 = []
for p in picks:
    for s in p:
        tmp_ListComp0.append(s)

return tmp_ListComp0
",1,"[['https://github.com/mystor/git-revise/tree/master/tests/test_fixup.py', 'tests.test_fixup', '', 'test_fixup_order'], ['https://github.com/mystor/git-revise/tree/master/tests/test_fixup.py', 'tests.test_fixup', '', 'test_fixup_order_transitive'], ['https://github.com/mystor/git-revise/tree/master/tests/test_fixup.py', 'tests.test_fixup', '', 'test_fixup_order_cycle']]"
doccano,https://github.com/doccano/doccano/tree/master/backend/api/views/download/writer.py,TestCSVWriter,test_create_header,header += sorted(set(itertools.chain(*[r.metadata.keys() for r in records]))),"tmp_ListComp0 = []
for r in records:
    tmp_ListComp0.append(r.metadata.keys())

header += sorted(set(itertools.chain(*tmp_ListComp0)))
",1,"[['https://github.com/doccano/doccano/tree/master/backend/api/tests/download/test_writer.py', 'backend.api.tests.download.test_writer', 'TestCSVWriter', 'test_create_header']]"
doccano,https://github.com/doccano/doccano/tree/master/backend/api/views/upload/utils.py,TestDatasetUtils,test_can_append_field,[d.update(kwargs) for d in data],"tmp_ListComp0 = []
for d in data:
    tmp_ListComp0.append(d.update(kwargs))

tmp_ListComp0
",1,"[['https://github.com/doccano/doccano/tree/master/backend/api/tests/upload/test_utils.py', 'backend.api.tests.upload.test_utils', 'TestDatasetUtils', 'test_can_append_field_to_nested_list'], ['https://github.com/doccano/doccano/tree/master/backend/api/tests/upload/test_utils.py', 'backend.api.tests.upload.test_utils', 'TestDatasetUtils', 'test_can_append_field']]"
pint,https://github.com/hgrecco/pint/tree/master/pint/util.py,TestMatrix,test_matrix_to_string,"ret += [rh + '\t' + '\t'.join((fmtfun(f) for f in row)) for (rh, row) in zip(row_headers, matrix)]","tmp_ListComp0 = []
for (rh, row) in zip(row_headers, matrix):
    tmp_ListComp0.append(rh + '\t' + '\t'.join((fmtfun(f) for f in row)))

ret += tmp_ListComp0
",1,"[['https://github.com/hgrecco/pint/tree/master/pint/testsuite/test_util.py', 'pint.testsuite.test_util', 'TestMatrix', 'test_matrix_to_string']]"
pint,https://github.com/hgrecco/pint/tree/master/pint/util.py,TestMatrix,test_matrix_to_string,ret += ['\t'.join((fmtfun(f) for f in row)) for row in matrix],"tmp_ListComp0 = []
for row in matrix:
    tmp_ListComp0.append('\t'.join((fmtfun(f) for f in row)))

ret += tmp_ListComp0
",1,"[['https://github.com/hgrecco/pint/tree/master/pint/testsuite/test_util.py', 'pint.testsuite.test_util', 'TestMatrix', 'test_matrix_to_string']]"
pint,https://github.com/hgrecco/pint/tree/master/pint/formatting.py,TestFormatter,test_formatter,other_lengths = [_babel_length for _babel_length in reversed(_babel_lengths) if babel_length != _babel_length],"
other_lengths = []
for _babel_length in reversed(_babel_lengths):
    if babel_length != _babel_length:
        other_lengths.append(_babel_length)
",1,"[['https://github.com/hgrecco/pint/tree/master/pint/testsuite/test_formatter.py', 'pint.testsuite.test_formatter', 'TestFormatter', 'test_formatter']]"
kb,https://github.com/gnebbia/kb/tree/master/kb/filesystem.py,,test_list_files,files = [str(f.relative_to(dirpath)) for f in dirpath.rglob('*') if f.is_file()],"
files = []
for f in dirpath.rglob('*'):
    if f.is_file():
        files.append(str(f.relative_to(dirpath)))
",1,"[['https://github.com/gnebbia/kb/tree/master/tests/test_filesystem.py', 'tests.test_filesystem', '', 'test_list_files']]"
kb,https://github.com/gnebbia/kb/tree/master/kb/filesystem.py,,test_list_dirs,files = [str(f.relative_to(dirpath)) for f in dirpath.rglob('*') if f.is_dir()],"
files = []
for f in dirpath.rglob('*'):
    if f.is_dir():
        files.append(str(f.relative_to(dirpath)))
",1,"[['https://github.com/gnebbia/kb/tree/master/tests/test_filesystem.py', 'tests.test_filesystem', '', 'test_list_dirs']]"
kb,https://github.com/gnebbia/kb/tree/master/kb/db.py,,test_get_artifacts_by_title,artifacts = [Artifact(*row) for row in cur.fetchall()],"
artifacts = []
for row in cur.fetchall():
    artifacts.append(Artifact(*row))
",1,"[['https://github.com/gnebbia/kb/tree/master/tests/test_db.py', 'tests.test_db', '', 'test_get_artifacts_by_title']]"
kb,https://github.com/gnebbia/kb/tree/master/kb/db.py,,test_get_artifacts_by_category,artifacts = [Artifact(*row) for row in cur.fetchall()],"
artifacts = []
for row in cur.fetchall():
    artifacts.append(Artifact(*row))
",1,"[['https://github.com/gnebbia/kb/tree/master/tests/test_db.py', 'tests.test_db', '', 'test_get_artifacts_by_category']]"
kb,https://github.com/gnebbia/kb/tree/master/kb/db.py,,test_get_artifacts_by_tags,rows = [r[:-2] for r in list(set(rows))],"tmp_ListComp0 = []
for r in list(set(rows)):
    tmp_ListComp0.append(r[:-2])

rows = tmp_ListComp0
",1,"[['https://github.com/gnebbia/kb/tree/master/tests/test_db.py', 'tests.test_db', '', 'test_get_artifacts_by_tags']]"
kb,https://github.com/gnebbia/kb/tree/master/kb/db.py,,test_get_artifacts_by_tags,artifacts = [Artifact(*row) for row in rows],"
artifacts = []
for row in rows:
    artifacts.append(Artifact(*row))
",1,"[['https://github.com/gnebbia/kb/tree/master/tests/test_db.py', 'tests.test_db', '', 'test_get_artifacts_by_tags']]"
kb,https://github.com/gnebbia/kb/tree/master/kb/db.py,,test_get_artifacts_by_tags,tags = ['%' + tag + '%' for tag in tags],"tmp_ListComp0 = []
for tag in tags:
    tmp_ListComp0.append('%' + tag + '%')

tags = tmp_ListComp0
",1,"[['https://github.com/gnebbia/kb/tree/master/tests/test_db.py', 'tests.test_db', '', 'test_get_artifacts_by_tags']]"
pyowm,https://github.com/csparpa/pyowm/tree/master/pyowm/weatherapi25/weather.py,TestWeather,test_from_dict_of_lists,return [Weather.from_dict(item) for item in the_dict['list']],"tmp_ListComp0 = []
for item in the_dict['list']:
    tmp_ListComp0.append(Weather.from_dict(item))

return tmp_ListComp0
",1,"[['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_weather.py', 'tests.unit.weatherapi25.test_weather', 'TestWeather', 'test_parse_JSON_when_location_not_found'], ['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_weather.py', 'tests.unit.weatherapi25.test_weather', 'TestWeather', 'test_from_dict_of_lists_when_no_results'], ['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_weather.py', 'tests.unit.weatherapi25.test_weather', 'TestWeather', 'test_from_dict_of_lists']]"
pyowm,https://github.com/csparpa/pyowm/tree/master/pyowm/weatherapi25/observation.py,TestObservation,test_from_dict_of_lists_when_resource_not_found,return [Observation.from_dict(item) for item in the_dict['list']],"tmp_ListComp0 = []
for item in the_dict['list']:
    tmp_ListComp0.append(Observation.from_dict(item))

return tmp_ListComp0
",1,"[['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_observation.py', 'tests.unit.weatherapi25.test_observation', 'TestObservation', 'test_from_dict_of_lists_when_no_items_returned'], ['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_observation.py', 'tests.unit.weatherapi25.test_observation', 'TestObservation', 'test_from_dict_of_lists_when_no_results'], ['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_observation.py', 'tests.unit.weatherapi25.test_observation', 'TestObservation', 'test_from_dict_of_lists_with_malformed_JSON_data'], ['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_observation.py', 'tests.unit.weatherapi25.test_observation', 'TestObservation', 'test_from_dict_of_lists_fails_when_JSON_data_is_None'], ['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_observation.py', 'tests.unit.weatherapi25.test_observation', 'TestObservation', 'test_from_dict_of_lists_when_server_error'], ['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_observation.py', 'tests.unit.weatherapi25.test_observation', 'TestObservation', 'test_from_dict_of_lists_when_resource_not_found']]"
pyowm,https://github.com/csparpa/pyowm/tree/master/pyowm/weatherapi25/forecast.py,TestForecast,test_from_dict_when_no_results,weathers = [weather.Weather.from_dict(item) for item in the_dict['list']],"
weathers = []
for item in the_dict['list']:
    weathers.append(weather.Weather.from_dict(item))
",1,"[['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_forecast.py', 'tests.unit.weatherapi25.test_forecast', 'TestForecast', 'test_from_dict_fails_when_JSON_data_is_None'], ['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_forecast.py', 'tests.unit.weatherapi25.test_forecast', 'TestForecast', 'test_from_dict_with_malformed_JSON_data'], ['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_forecast.py', 'tests.unit.weatherapi25.test_forecast', 'TestForecast', 'test_from_dict_when_server_error'], ['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_forecast.py', 'tests.unit.weatherapi25.test_forecast', 'TestForecast', 'test_from_dict_when_no_results']]"
pyowm,https://github.com/csparpa/pyowm/tree/master/pyowm/weatherapi25/one_call.py,TestWeather,test_one_call_historical_from_dict,minutely = [Weather.from_dict(item) for item in the_dict['minutely']],"
minutely = []
for item in the_dict['minutely']:
    minutely.append(Weather.from_dict(item))
",1,"[['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_one_call.py', 'tests.unit.weatherapi25.test_one_call', 'TestWeather', 'test_to_geopoint'], ['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_one_call.py', 'tests.unit.weatherapi25.test_one_call', 'TestWeather', 'test_one_call_from_dict_error_404'], ['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_one_call.py', 'tests.unit.weatherapi25.test_one_call', 'TestWeather', 'test_one_call_from_dict_error_400'], ['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_one_call.py', 'tests.unit.weatherapi25.test_one_call', 'TestWeather', 'test_one_call_from_dict_none'], ['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_one_call.py', 'tests.unit.weatherapi25.test_one_call', 'TestWeather', 'test_one_call_from_dict_error_429'], ['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_one_call.py', 'tests.unit.weatherapi25.test_one_call', 'TestWeather', 'test_one_call_from_dict'], ['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_one_call.py', 'tests.unit.weatherapi25.test_one_call', 'TestWeather', 'test_one_call_from_dict_when_other_errors'], ['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_one_call.py', 'tests.unit.weatherapi25.test_one_call', 'TestWeather', 'test_one_call_from_dict_current_missing'], ['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_one_call.py', 'tests.unit.weatherapi25.test_one_call', 'TestWeather', 'test_one_call_historical_from_dict']]"
pyowm,https://github.com/csparpa/pyowm/tree/master/pyowm/weatherapi25/one_call.py,TestWeather,test_one_call_historical_from_dict,hourly = [Weather.from_dict(item) for item in the_dict['hourly']],"
hourly = []
for item in the_dict['hourly']:
    hourly.append(Weather.from_dict(item))
",1,"[['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_one_call.py', 'tests.unit.weatherapi25.test_one_call', 'TestWeather', 'test_to_geopoint'], ['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_one_call.py', 'tests.unit.weatherapi25.test_one_call', 'TestWeather', 'test_one_call_from_dict_error_404'], ['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_one_call.py', 'tests.unit.weatherapi25.test_one_call', 'TestWeather', 'test_one_call_from_dict_error_400'], ['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_one_call.py', 'tests.unit.weatherapi25.test_one_call', 'TestWeather', 'test_one_call_from_dict_none'], ['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_one_call.py', 'tests.unit.weatherapi25.test_one_call', 'TestWeather', 'test_one_call_from_dict_error_429'], ['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_one_call.py', 'tests.unit.weatherapi25.test_one_call', 'TestWeather', 'test_one_call_from_dict'], ['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_one_call.py', 'tests.unit.weatherapi25.test_one_call', 'TestWeather', 'test_one_call_from_dict_when_other_errors'], ['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_one_call.py', 'tests.unit.weatherapi25.test_one_call', 'TestWeather', 'test_one_call_from_dict_current_missing'], ['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_one_call.py', 'tests.unit.weatherapi25.test_one_call', 'TestWeather', 'test_one_call_historical_from_dict']]"
pyowm,https://github.com/csparpa/pyowm/tree/master/pyowm/weatherapi25/one_call.py,TestWeather,test_one_call_historical_from_dict,daily = [Weather.from_dict(item) for item in the_dict['daily']],"
daily = []
for item in the_dict['daily']:
    daily.append(Weather.from_dict(item))
",1,"[['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_one_call.py', 'tests.unit.weatherapi25.test_one_call', 'TestWeather', 'test_to_geopoint'], ['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_one_call.py', 'tests.unit.weatherapi25.test_one_call', 'TestWeather', 'test_one_call_from_dict_error_404'], ['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_one_call.py', 'tests.unit.weatherapi25.test_one_call', 'TestWeather', 'test_one_call_from_dict_error_400'], ['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_one_call.py', 'tests.unit.weatherapi25.test_one_call', 'TestWeather', 'test_one_call_from_dict_none'], ['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_one_call.py', 'tests.unit.weatherapi25.test_one_call', 'TestWeather', 'test_one_call_from_dict_error_429'], ['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_one_call.py', 'tests.unit.weatherapi25.test_one_call', 'TestWeather', 'test_one_call_from_dict'], ['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_one_call.py', 'tests.unit.weatherapi25.test_one_call', 'TestWeather', 'test_one_call_from_dict_when_other_errors'], ['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_one_call.py', 'tests.unit.weatherapi25.test_one_call', 'TestWeather', 'test_one_call_from_dict_current_missing'], ['https://github.com/csparpa/pyowm/tree/master/tests/unit/weatherapi25/test_one_call.py', 'tests.unit.weatherapi25.test_one_call', 'TestWeather', 'test_one_call_historical_from_dict']]"
pyowm,https://github.com/csparpa/pyowm/tree/master/pyowm/alertapi30/alert.py,TestAlert,test_repr,"alert_met_conds = [dict(current_value=c['current_value']['min'], condition=Condition.from_dict(c['condition'])) for c in the_dict['conditions']]","
alert_met_conds = []
for c in the_dict['conditions']:
    alert_met_conds.append(dict(current_value=c['current_value']['min'], condition=Condition.from_dict(c['condition'])))
",1,"[['https://github.com/csparpa/pyowm/tree/master/tests/unit/alertapi30/test_alert.py', 'tests.unit.alertapi30.test_alert', 'TestAlert', 'test_from_dict'], ['https://github.com/csparpa/pyowm/tree/master/tests/unit/alertapi30/test_alert.py', 'tests.unit.alertapi30.test_alert', 'TestAlert', 'test_repr']]"
pyowm,https://github.com/csparpa/pyowm/tree/master/pyowm/alertapi30/trigger.py,TestAlertManager,test_update_trigger,conditions = [Condition.from_dict(c) for c in the_dict['conditions']],"
conditions = []
for c in the_dict['conditions']:
    conditions.append(Condition.from_dict(c))
",1,"[['https://github.com/csparpa/pyowm/tree/master/tests/unit/alertapi30/test_trigger.py', 'tests.unit.alertapi30.test_trigger', 'TestTrigger', 'test_from_dict'], ['https://github.com/csparpa/pyowm/tree/master/tests/unit/alertapi30/test_alert_manager.py', 'tests.unit.alertapi30.test_alert_manager', 'TestAlertManager', 'test_delete_trigger'], ['https://github.com/csparpa/pyowm/tree/master/tests/unit/alertapi30/test_alert_manager.py', 'tests.unit.alertapi30.test_alert_manager', 'TestAlertManager', 'test_update_trigger']]"
pyowm,https://github.com/csparpa/pyowm/tree/master/pyowm/alertapi30/trigger.py,TestAlertManager,test_update_trigger,area = [GeometryBuilder.build(a_dict) for a_dict in area_list],"
area = []
for a_dict in area_list:
    area.append(GeometryBuilder.build(a_dict))
",1,"[['https://github.com/csparpa/pyowm/tree/master/tests/unit/alertapi30/test_trigger.py', 'tests.unit.alertapi30.test_trigger', 'TestTrigger', 'test_from_dict'], ['https://github.com/csparpa/pyowm/tree/master/tests/unit/alertapi30/test_alert_manager.py', 'tests.unit.alertapi30.test_alert_manager', 'TestAlertManager', 'test_delete_trigger'], ['https://github.com/csparpa/pyowm/tree/master/tests/unit/alertapi30/test_alert_manager.py', 'tests.unit.alertapi30.test_alert_manager', 'TestAlertManager', 'test_update_trigger']]"
pyowm,https://github.com/csparpa/pyowm/tree/master/pyowm/utils/weather.py,TestWeatherUtils,test_filter_by_status,"return [weather for weather in weather_list if status_is(weather, status, weather_code_registry)]","tmp_ListComp0 = []
for weather in weather_list:
    if status_is(weather, status, weather_code_registry):
        tmp_ListComp0.append(weather)

return tmp_ListComp0
",1,"[['https://github.com/csparpa/pyowm/tree/master/tests/unit/utils/test_weather.py', 'tests.unit.utils.test_weather', 'TestWeatherUtils', 'test_filter_by_status']]"
pyowm,https://github.com/csparpa/pyowm/tree/master/pyowm/utils/strings.py,TestStringUtils,test_version_tuple_to_str,str_version_tuple = [str(v) for v in version_tuple],"
str_version_tuple = []
for v in version_tuple:
    str_version_tuple.append(str(v))
",1,"[['https://github.com/csparpa/pyowm/tree/master/tests/unit/utils/test_strings.py', 'tests.unit.utils.test_strings', 'TestStringUtils', 'test_version_tuple_to_str']]"
pyowm,https://github.com/csparpa/pyowm/tree/master/pyowm/utils/geo.py,TestGeo,test_multipoint_from_points,"return MultiPoint([(p.lon, p.lat) for p in iterable_of_points])","tmp_ListComp0 = []
for p in iterable_of_points:
    tmp_ListComp0.append((p.lon, p.lat))

return MultiPoint(tmp_ListComp0)
",1,"[['https://github.com/csparpa/pyowm/tree/master/tests/unit/utils/test_geo.py', 'tests.unit.utils.test_geo', 'TestGeo', 'test_multipoint_from_points']]"
pyowm,https://github.com/csparpa/pyowm/tree/master/pyowm/utils/geo.py,TestGeo,test_polygon_from_points,"curve = [(point.lon, point.lat) for point in l]","
curve = []
for point in l:
    curve.append((point.lon, point.lat))
",1,"[['https://github.com/csparpa/pyowm/tree/master/tests/unit/utils/test_geo.py', 'tests.unit.utils.test_geo', 'TestGeo', 'test_polygon_from_points']]"
pyowm,https://github.com/csparpa/pyowm/tree/master/pyowm/utils/geo.py,TestGeo,test_from_polygons,return MultiPolygon([polygon.to_dict()['coordinates'] for polygon in iterable_of_polygons]),"tmp_ListComp0 = []
for polygon in iterable_of_polygons:
    tmp_ListComp0.append(polygon.to_dict()['coordinates'])

return MultiPolygon(tmp_ListComp0)
",1,"[['https://github.com/csparpa/pyowm/tree/master/tests/unit/utils/test_geo.py', 'tests.unit.utils.test_geo', 'TestGeo', 'test_from_polygons']]"
pyowm,https://github.com/csparpa/pyowm/tree/master/pyowm/stationsapi30/stations_manager.py,TestStationManager,test_get_stations,return [Station.from_dict(item) for item in data],"tmp_ListComp0 = []
for item in data:
    tmp_ListComp0.append(Station.from_dict(item))

return tmp_ListComp0
",1,"[['https://github.com/csparpa/pyowm/tree/master/tests/unit/stationsapi30/test_stations_manager.py', 'tests.unit.stationsapi30.test_stations_manager', 'TestStationManager', 'test_get_stations']]"
pyowm,https://github.com/csparpa/pyowm/tree/master/pyowm/stationsapi30/persistence_backend.py,TestJSONPersistenceBackendsReadFS,test_json_persistence_backend_writes,data = [msmt.to_JSON() for msmt in buffer],"
data = []
for msmt in buffer:
    data.append(msmt.to_JSON())
",1,"[['https://github.com/csparpa/pyowm/tree/master/tests/unit/stationsapi30/test_persistence_backend.py', 'tests.unit.stationsapi30.test_persistence_backend', 'TestJSONPersistenceBackend', 'test_persist_buffer'], ['https://github.com/csparpa/pyowm/tree/master/tests/integration/stationsapi30/test_persistence_backends_read_fs.py', 'tests.integration.stationsapi30.test_persistence_backends_read_fs', 'TestJSONPersistenceBackendsReadFS', 'test_json_persistence_backend_writes']]"
pyowm,https://github.com/csparpa/pyowm/tree/master/pyowm/airpollutionapi30/airstatus.py,TestAirStatus,test_from_dict,"return [build_air_status(item, place, rcp_time) for item in items]","tmp_ListComp0 = []
for item in items:
    tmp_ListComp0.append(build_air_status(item, place, rcp_time))

return tmp_ListComp0
",1,"[['https://github.com/csparpa/pyowm/tree/master/tests/unit/airpollutionapi30/test_airstatus.py', 'tests.unit.airpollutionapi30.test_airstatus', 'TestAirStatus', 'test_from_dict']]"
pyowm,https://github.com/csparpa/pyowm/tree/master/pyowm/airpollutionapi30/no2index.py,TestNO2Index,test_from_dict,"no2_samples = [dict(label=key, precision=the_dict['data'][key]['precision'], value=the_dict['data'][key]['value']) for key in the_dict['data']]","
no2_samples = []
for key in the_dict['data']:
    no2_samples.append(dict(label=key, precision=the_dict['data'][key]['precision'], value=the_dict['data'][key]['value']))
",1,"[['https://github.com/csparpa/pyowm/tree/master/tests/unit/airpollutionapi30/test_no2index.py', 'tests.unit.airpollutionapi30.test_no2index', 'TestNO2Index', 'test_from_dict']]"
Minecraft-Overviewer,https://github.com/overviewer/Minecraft-Overviewer/tree/master/contrib/contributors.py,TestContributors,test_merge_short_term_contributors,short_term_contributor_lines = [l for l in contrib_file_lines[i:] if l] + [format_contributor(c) + '\n' for c in new_contributors],"tmp_ListComp0 = []
for l in contrib_file_lines[i:]:
    if l:
        tmp_ListComp0.append(l)

short_term_contributor_lines = tmp_ListComp0 + [format_contributor(c) + '\n' for c in new_contributors]
",1,"[['https://github.com/overviewer/Minecraft-Overviewer/tree/master/test/test_contributors.py', 'test.test_contributors', 'TestContributors', 'test_merge_short_term_contributors']]"
bubbles,https://github.com/Stiivi/bubbles/tree/master/bubbles/metadata.py,FieldListTestCase,test_deletion,names = [self._field_names[i] for i in indexes],"
names = []
for i in indexes:
    names.append(self._field_names[i])
",1,"[['https://github.com/Stiivi/bubbles/tree/master/tests/test_metadata.py', 'tests.test_metadata', 'FieldListTestCase', 'test_deletion']]"
bubbles,https://github.com/Stiivi/bubbles/tree/master/bubbles/operation.py,OperationTestCase,test_match,operands = [rep_to_operand(rep) for rep in operands],"tmp_ListComp0 = []
for rep in operands:
    tmp_ListComp0.append(rep_to_operand(rep))

operands = tmp_ListComp0
",1,"[['https://github.com/Stiivi/bubbles/tree/master/tests/test_core.py', 'tests.test_core', 'OperationTestCase', 'test_match']]"
bubbles,https://github.com/Stiivi/bubbles/tree/master/bubbles/operation.py,OperationTestCase,test_common_reps,common = [rep for rep in common if rep in obj.representations()],"tmp_ListComp0 = []
for rep in common:
    if rep in obj.representations():
        tmp_ListComp0.append(rep)

common = tmp_ListComp0
",1,"[['https://github.com/Stiivi/bubbles/tree/master/tests/test_core.py', 'tests.test_core', 'OperationTestCase', 'test_common_reps']]"
python-tabulate,https://github.com/astanin/python-tabulate/tree/master//tabulate.py,,test_align_column_decimal,"padded_strings = ['\n'.join([padfn(maxwidth, s) for s in ms.splitlines()]) for ms in strings]","
padded_strings = []
for ms in strings:
    padded_strings.append('\n'.join([padfn(maxwidth, s) for s in ms.splitlines()]))
",1,"[['https://github.com/astanin/python-tabulate/tree/master/test/test_internal.py', 'test.test_internal', '', 'test_align_column_none'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_internal.py', 'test.test_internal', '', 'test_align_column_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_internal.py', 'test.test_internal', '', 'test_align_column_decimal']]"
python-tabulate,https://github.com/astanin/python-tabulate/tree/master//tabulate.py,,test_align_column_decimal,"s_lens = [[len(s) for s in re.split('[\r\n]', ms)] for ms in strings]","
s_lens = []
for ms in strings:
    s_lens1 = []
    for s in re.split('[\r\n]', ms):
        s_lens1.append(len(s))
    s_lens.append(s_lens1)
",1,"[['https://github.com/astanin/python-tabulate/tree/master/test/test_internal.py', 'test.test_internal', '', 'test_align_column_none'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_internal.py', 'test.test_internal', '', 'test_align_column_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_internal.py', 'test.test_internal', '', 'test_align_column_decimal']]"
python-tabulate,https://github.com/astanin/python-tabulate/tree/master//tabulate.py,,test_align_column_decimal,"visible_widths = [[maxwidth - (w - l) for (w, l) in zip(mw, ml)] for (mw, ml) in zip(s_widths, s_lens)]","
visible_widths = []
for (mw, ml) in zip(s_widths, s_lens):
    visible_widths1 = []
    for (w, l) in zip(mw, ml):
        visible_widths1.append(maxwidth - (w - l))
    visible_widths.append(visible_widths1)
",1,"[['https://github.com/astanin/python-tabulate/tree/master/test/test_internal.py', 'test.test_internal', '', 'test_align_column_none'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_internal.py', 'test.test_internal', '', 'test_align_column_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_internal.py', 'test.test_internal', '', 'test_align_column_decimal']]"
python-tabulate,https://github.com/astanin/python-tabulate/tree/master//tabulate.py,,test_align_column_decimal,"padded_strings = ['\n'.join([padfn(w, s) for (s, w) in zip(ms.splitlines() or ms, mw)]) for (ms, mw) in zip(strings, visible_widths)]","
padded_strings = []
for (ms, mw) in zip(strings, visible_widths):
    padded_strings.append('\n'.join([padfn(w, s) for (s, w) in zip(ms.splitlines() or ms, mw)]))
",1,"[['https://github.com/astanin/python-tabulate/tree/master/test/test_internal.py', 'test.test_internal', '', 'test_align_column_none'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_internal.py', 'test.test_internal', '', 'test_align_column_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_internal.py', 'test.test_internal', '', 'test_align_column_decimal']]"
python-tabulate,https://github.com/astanin/python-tabulate/tree/master//tabulate.py,,test_align_column_decimal,"padded_strings = [padfn(maxwidth, s) for s in strings]","
padded_strings = []
for s in strings:
    padded_strings.append(padfn(maxwidth, s))
",1,"[['https://github.com/astanin/python-tabulate/tree/master/test/test_internal.py', 'test.test_internal', '', 'test_align_column_none'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_internal.py', 'test.test_internal', '', 'test_align_column_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_internal.py', 'test.test_internal', '', 'test_align_column_decimal']]"
python-tabulate,https://github.com/astanin/python-tabulate/tree/master//tabulate.py,,test_align_column_decimal,"visible_widths = [maxwidth - (w - l) for (w, l) in zip(s_widths, s_lens)]","
visible_widths = []
for (w, l) in zip(s_widths, s_lens):
    visible_widths.append(maxwidth - (w - l))
",1,"[['https://github.com/astanin/python-tabulate/tree/master/test/test_internal.py', 'test.test_internal', '', 'test_align_column_none'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_internal.py', 'test.test_internal', '', 'test_align_column_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_internal.py', 'test.test_internal', '', 'test_align_column_decimal']]"
python-tabulate,https://github.com/astanin/python-tabulate/tree/master//tabulate.py,,test_align_column_decimal,"padded_strings = [padfn(w, s) for (s, w) in zip(strings, visible_widths)]","
padded_strings = []
for (s, w) in zip(strings, visible_widths):
    padded_strings.append(padfn(w, s))
",1,"[['https://github.com/astanin/python-tabulate/tree/master/test/test_internal.py', 'test.test_internal', '', 'test_align_column_none'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_internal.py', 'test.test_internal', '', 'test_align_column_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_internal.py', 'test.test_internal', '', 'test_align_column_decimal']]"
python-tabulate,https://github.com/astanin/python-tabulate/tree/master//tabulate.py,,test_column_type_of_bytestring_columns,"types = [_type(s, has_invisible, numparse) for s in strings]","
types = []
for s in strings:
    types.append(_type(s, has_invisible, numparse))
",1,"[['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_column_type_of_bytestring_columns']]"
python-tabulate,https://github.com/astanin/python-tabulate/tree/master//tabulate.py,,test_simple_multiline_with_empty_cells,"plain_text = '\t'.join(['\t'.join(map(_text_type, headers))] + ['\t'.join(map(_text_type, row)) for row in list_of_lists])","def my_comprehension_func(_text_type, map):
    tmp_ListComp0 = []
    for row in list_of_lists:
        tmp_ListComp0.append('\t'.join(map(_text_type, row)))
    return tmp_ListComp0

plain_text = '\t'.join(['\t'.join(map(_text_type, headers))] + my_comprehension_func(_text_type, map))
",1,"[['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pandas_rst_with_named_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pipe_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_column_alignment'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_firstrow'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_disable_numparse_list'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_latex_escape_special_chars'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_empty_pipe_table_with_columns'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_multiline_with_wide_characters'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_escape_empty_cell_in_first_column_in_rst'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_jira'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_userdicts_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_ragged_rows'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_with_list_of_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_jira_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_html_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_maxcolwidth_autowraps'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_disable_numparse_default'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_with_dict_of_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_long_integers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex_raw'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_lists'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_iterable_of_iterables'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_floatfmt_multi'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_colalign_multi'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_simple_separated_format_with_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_lists_firstrow'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_github'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_with_empty_values_in_first_column'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_textile'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_html'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_multiline_with_links'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_ansi_color_bold_and_fgcolor'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_simple_separated_format'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_numeric_column_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_orgtbl_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_namedtuples'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_alignment_of_decimal_numbers_with_ansi_color'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_iterable_of_iterables_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_datetime_values'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_disable_numparse_true'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_unsafehtml_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_alignment_of_link_text_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_alignment_of_link_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_textile_with_center_align'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_list_of_lists_with_supplied_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_unaligned_separated'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_textile_with_header'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_maxcolwidth_single_value'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_py27orlater_list_of_ordereddicts'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_no_data_without_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_iterable_of_iterables_firstrow'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_empty_data_without_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex_booktabs'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_empty_data'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_wide_characters'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_iter_of_iters_with_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_alignment_of_colored_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_with_missing_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_youtrack'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_with_links'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_maxcolwidth_pad_tailing_widths'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pipe'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_column_with_mixed_value_types'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_ansi_color_in_table_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_maxcolwidth_honor_disable_parsenum'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_ansi_color_for_decimal_numbers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_align_long_integers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pandas_without_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_orgtbl'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_moinmoin_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_missingval_multi'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_string_with_comma_between_digits_without_floatfmt_grouping_option'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_dict_like'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex_booktabs_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_userdicts'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline_with_links'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_mediawiki_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_maxcolwidth_autowraps_wide_chars'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_lists_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline_with_links'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_missingval'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_floatfmt'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_dict_like_with_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_isconvertible_on_set_values'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_colorclass_colors'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_sqlite3'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_88_256_ANSI_color_codes'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_list_of_lists_with_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_moinmoin'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_float_conversions'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_mix_normal_and_wide_characters'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_sqlite3_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_list_of_lists_with_index_firstrow'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pandas_with_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_2'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_no_data'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_unsafehtml'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_preserve_whitespace'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_empty_table_with_keys_as_header'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_mediawiki'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_numpy_array_as_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pandas_rst_with_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_namedtuples_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_boolean_columns'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_custom_tablefmt'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_with_empty_cells']]"
python-tabulate,https://github.com/astanin/python-tabulate/tree/master//tabulate.py,,test_simple_multiline_with_empty_cells,"coltypes = [_column_type(col, numparse=np) for (col, np) in zip(cols, numparses)]","
coltypes = []
for (col, np) in zip(cols, numparses):
    coltypes.append(_column_type(col, numparse=np))
",1,"[['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pandas_rst_with_named_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pipe_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_column_alignment'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_firstrow'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_disable_numparse_list'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_latex_escape_special_chars'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_empty_pipe_table_with_columns'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_multiline_with_wide_characters'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_escape_empty_cell_in_first_column_in_rst'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_jira'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_userdicts_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_ragged_rows'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_with_list_of_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_jira_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_html_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_maxcolwidth_autowraps'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_disable_numparse_default'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_with_dict_of_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_long_integers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex_raw'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_lists'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_iterable_of_iterables'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_floatfmt_multi'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_colalign_multi'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_simple_separated_format_with_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_lists_firstrow'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_github'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_with_empty_values_in_first_column'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_textile'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_html'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_multiline_with_links'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_ansi_color_bold_and_fgcolor'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_simple_separated_format'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_numeric_column_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_orgtbl_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_namedtuples'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_alignment_of_decimal_numbers_with_ansi_color'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_iterable_of_iterables_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_datetime_values'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_disable_numparse_true'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_unsafehtml_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_alignment_of_link_text_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_alignment_of_link_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_textile_with_center_align'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_list_of_lists_with_supplied_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_unaligned_separated'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_textile_with_header'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_maxcolwidth_single_value'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_py27orlater_list_of_ordereddicts'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_no_data_without_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_iterable_of_iterables_firstrow'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_empty_data_without_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex_booktabs'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_empty_data'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_wide_characters'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_iter_of_iters_with_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_alignment_of_colored_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_with_missing_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_youtrack'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_with_links'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_maxcolwidth_pad_tailing_widths'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pipe'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_column_with_mixed_value_types'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_ansi_color_in_table_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_maxcolwidth_honor_disable_parsenum'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_ansi_color_for_decimal_numbers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_align_long_integers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pandas_without_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_orgtbl'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_moinmoin_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_missingval_multi'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_string_with_comma_between_digits_without_floatfmt_grouping_option'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_dict_like'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex_booktabs_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_userdicts'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline_with_links'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_mediawiki_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_maxcolwidth_autowraps_wide_chars'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_lists_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline_with_links'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_missingval'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_floatfmt'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_dict_like_with_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_isconvertible_on_set_values'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_colorclass_colors'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_sqlite3'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_88_256_ANSI_color_codes'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_list_of_lists_with_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_moinmoin'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_float_conversions'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_mix_normal_and_wide_characters'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_sqlite3_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_list_of_lists_with_index_firstrow'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pandas_with_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_2'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_no_data'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_unsafehtml'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_preserve_whitespace'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_empty_table_with_keys_as_header'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_mediawiki'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_numpy_array_as_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pandas_rst_with_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_namedtuples_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_boolean_columns'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_custom_tablefmt'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_with_empty_cells']]"
python-tabulate,https://github.com/astanin/python-tabulate/tree/master//tabulate.py,,test_simple_multiline_with_empty_cells,"cols = [[_format(v, ct, fl_fmt, miss_v, has_invisible) for v in c] for (c, ct, fl_fmt, miss_v) in zip(cols, coltypes, float_formats, missing_vals)]","tmp_ListComp0 = []
for (c, ct, fl_fmt, miss_v) in zip(cols, coltypes, float_formats, missing_vals):
    tmp_ListComp1 = []
    for v in c:
        tmp_ListComp1.append(_format(v, ct, fl_fmt, miss_v, has_invisible))
    tmp_ListComp0.append(tmp_ListComp1)

cols = tmp_ListComp0
",1,"[['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pandas_rst_with_named_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pipe_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_column_alignment'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_firstrow'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_disable_numparse_list'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_latex_escape_special_chars'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_empty_pipe_table_with_columns'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_multiline_with_wide_characters'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_escape_empty_cell_in_first_column_in_rst'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_jira'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_userdicts_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_ragged_rows'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_with_list_of_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_jira_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_html_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_maxcolwidth_autowraps'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_disable_numparse_default'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_with_dict_of_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_long_integers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex_raw'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_lists'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_iterable_of_iterables'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_floatfmt_multi'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_colalign_multi'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_simple_separated_format_with_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_lists_firstrow'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_github'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_with_empty_values_in_first_column'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_textile'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_html'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_multiline_with_links'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_ansi_color_bold_and_fgcolor'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_simple_separated_format'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_numeric_column_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_orgtbl_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_namedtuples'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_alignment_of_decimal_numbers_with_ansi_color'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_iterable_of_iterables_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_datetime_values'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_disable_numparse_true'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_unsafehtml_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_alignment_of_link_text_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_alignment_of_link_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_textile_with_center_align'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_list_of_lists_with_supplied_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_unaligned_separated'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_textile_with_header'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_maxcolwidth_single_value'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_py27orlater_list_of_ordereddicts'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_no_data_without_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_iterable_of_iterables_firstrow'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_empty_data_without_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex_booktabs'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_empty_data'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_wide_characters'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_iter_of_iters_with_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_alignment_of_colored_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_with_missing_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_youtrack'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_with_links'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_maxcolwidth_pad_tailing_widths'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pipe'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_column_with_mixed_value_types'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_ansi_color_in_table_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_maxcolwidth_honor_disable_parsenum'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_ansi_color_for_decimal_numbers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_align_long_integers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pandas_without_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_orgtbl'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_moinmoin_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_missingval_multi'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_string_with_comma_between_digits_without_floatfmt_grouping_option'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_dict_like'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex_booktabs_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_userdicts'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline_with_links'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_mediawiki_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_maxcolwidth_autowraps_wide_chars'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_lists_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline_with_links'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_missingval'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_floatfmt'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_dict_like_with_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_isconvertible_on_set_values'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_colorclass_colors'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_sqlite3'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_88_256_ANSI_color_codes'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_list_of_lists_with_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_moinmoin'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_float_conversions'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_mix_normal_and_wide_characters'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_sqlite3_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_list_of_lists_with_index_firstrow'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pandas_with_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_2'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_no_data'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_unsafehtml'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_preserve_whitespace'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_empty_table_with_keys_as_header'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_mediawiki'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_numpy_array_as_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pandas_rst_with_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_namedtuples_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_boolean_columns'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_custom_tablefmt'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_with_empty_cells']]"
python-tabulate,https://github.com/astanin/python-tabulate/tree/master//tabulate.py,,test_simple_multiline_with_empty_cells,"aligns = [numalign if ct in [int, float] else stralign for ct in coltypes]","
aligns = []
for ct in coltypes:
    if ct in [int, float]:
        aligns.append(numalign)
    else:
        aligns.append(stralign)
",1,"[['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pandas_rst_with_named_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pipe_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_column_alignment'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_firstrow'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_disable_numparse_list'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_latex_escape_special_chars'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_empty_pipe_table_with_columns'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_multiline_with_wide_characters'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_escape_empty_cell_in_first_column_in_rst'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_jira'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_userdicts_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_ragged_rows'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_with_list_of_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_jira_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_html_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_maxcolwidth_autowraps'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_disable_numparse_default'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_with_dict_of_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_long_integers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex_raw'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_lists'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_iterable_of_iterables'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_floatfmt_multi'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_colalign_multi'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_simple_separated_format_with_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_lists_firstrow'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_github'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_with_empty_values_in_first_column'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_textile'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_html'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_multiline_with_links'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_ansi_color_bold_and_fgcolor'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_simple_separated_format'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_numeric_column_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_orgtbl_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_namedtuples'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_alignment_of_decimal_numbers_with_ansi_color'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_iterable_of_iterables_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_datetime_values'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_disable_numparse_true'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_unsafehtml_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_alignment_of_link_text_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_alignment_of_link_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_textile_with_center_align'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_list_of_lists_with_supplied_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_unaligned_separated'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_textile_with_header'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_maxcolwidth_single_value'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_py27orlater_list_of_ordereddicts'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_no_data_without_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_iterable_of_iterables_firstrow'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_empty_data_without_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex_booktabs'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_empty_data'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_wide_characters'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_iter_of_iters_with_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_alignment_of_colored_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_with_missing_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_youtrack'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_with_links'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_maxcolwidth_pad_tailing_widths'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pipe'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_column_with_mixed_value_types'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_ansi_color_in_table_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_maxcolwidth_honor_disable_parsenum'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_ansi_color_for_decimal_numbers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_align_long_integers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pandas_without_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_orgtbl'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_moinmoin_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_missingval_multi'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_string_with_comma_between_digits_without_floatfmt_grouping_option'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_dict_like'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex_booktabs_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_userdicts'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline_with_links'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_mediawiki_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_maxcolwidth_autowraps_wide_chars'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_lists_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline_with_links'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_missingval'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_floatfmt'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_dict_like_with_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_isconvertible_on_set_values'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_colorclass_colors'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_sqlite3'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_88_256_ANSI_color_codes'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_list_of_lists_with_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_moinmoin'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_float_conversions'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_mix_normal_and_wide_characters'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_sqlite3_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_list_of_lists_with_index_firstrow'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pandas_with_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_2'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_no_data'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_unsafehtml'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_preserve_whitespace'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_empty_table_with_keys_as_header'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_mediawiki'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_numpy_array_as_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pandas_rst_with_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_namedtuples_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_boolean_columns'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_custom_tablefmt'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_with_empty_cells']]"
python-tabulate,https://github.com/astanin/python-tabulate/tree/master//tabulate.py,,test_simple_multiline_with_empty_cells,minwidths = [width_fn(h) + min_padding for h in headers] if headers else [0] * len(cols),"def my_comprehension_func(headers):
    tmp_ListComp0 = []
    for h in headers:
        tmp_ListComp0.append(width_fn(h) + min_padding)
    return tmp_ListComp0

minwidths = my_comprehension_func(headers) if headers else [0] * len(cols)
",1,"[['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pandas_rst_with_named_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pipe_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_column_alignment'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_firstrow'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_disable_numparse_list'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_latex_escape_special_chars'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_empty_pipe_table_with_columns'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_multiline_with_wide_characters'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_escape_empty_cell_in_first_column_in_rst'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_jira'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_userdicts_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_ragged_rows'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_with_list_of_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_jira_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_html_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_maxcolwidth_autowraps'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_disable_numparse_default'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_with_dict_of_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_long_integers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex_raw'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_lists'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_iterable_of_iterables'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_floatfmt_multi'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_colalign_multi'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_simple_separated_format_with_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_lists_firstrow'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_github'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_with_empty_values_in_first_column'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_textile'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_html'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_multiline_with_links'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_ansi_color_bold_and_fgcolor'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_simple_separated_format'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_numeric_column_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_orgtbl_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_namedtuples'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_alignment_of_decimal_numbers_with_ansi_color'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_iterable_of_iterables_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_datetime_values'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_disable_numparse_true'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_unsafehtml_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_alignment_of_link_text_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_alignment_of_link_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_textile_with_center_align'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_list_of_lists_with_supplied_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_unaligned_separated'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_textile_with_header'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_maxcolwidth_single_value'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_py27orlater_list_of_ordereddicts'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_no_data_without_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_iterable_of_iterables_firstrow'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_empty_data_without_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex_booktabs'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_empty_data'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_wide_characters'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_iter_of_iters_with_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_alignment_of_colored_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_with_missing_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_youtrack'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_with_links'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_maxcolwidth_pad_tailing_widths'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pipe'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_column_with_mixed_value_types'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_ansi_color_in_table_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_maxcolwidth_honor_disable_parsenum'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_ansi_color_for_decimal_numbers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_align_long_integers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pandas_without_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_orgtbl'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_moinmoin_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_missingval_multi'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_string_with_comma_between_digits_without_floatfmt_grouping_option'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_dict_like'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex_booktabs_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_userdicts'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline_with_links'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_mediawiki_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_maxcolwidth_autowraps_wide_chars'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_lists_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline_with_links'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_missingval'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_floatfmt'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_dict_like_with_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_isconvertible_on_set_values'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_colorclass_colors'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_sqlite3'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_88_256_ANSI_color_codes'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_list_of_lists_with_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_moinmoin'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_float_conversions'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_mix_normal_and_wide_characters'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_sqlite3_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_list_of_lists_with_index_firstrow'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pandas_with_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_2'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_no_data'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_unsafehtml'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_preserve_whitespace'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_empty_table_with_keys_as_header'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_mediawiki'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_numpy_array_as_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pandas_rst_with_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_namedtuples_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_boolean_columns'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_custom_tablefmt'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_with_empty_cells']]"
python-tabulate,https://github.com/astanin/python-tabulate/tree/master//tabulate.py,,test_simple_multiline_with_empty_cells,"cols = [_align_column(c, a, minw, has_invisible, enable_widechars, is_multiline) for (c, a, minw) in zip(cols, aligns, minwidths)]","tmp_ListComp0 = []
for (c, a, minw) in zip(cols, aligns, minwidths):
    tmp_ListComp0.append(_align_column(c, a, minw, has_invisible, enable_widechars, is_multiline))

cols = tmp_ListComp0
",1,"[['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pandas_rst_with_named_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pipe_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_column_alignment'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_firstrow'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_disable_numparse_list'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_latex_escape_special_chars'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_empty_pipe_table_with_columns'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_multiline_with_wide_characters'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_escape_empty_cell_in_first_column_in_rst'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_jira'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_userdicts_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_ragged_rows'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_with_list_of_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_jira_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_html_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_maxcolwidth_autowraps'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_disable_numparse_default'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_with_dict_of_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_long_integers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex_raw'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_lists'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_iterable_of_iterables'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_floatfmt_multi'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_colalign_multi'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_simple_separated_format_with_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_lists_firstrow'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_github'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_with_empty_values_in_first_column'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_textile'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_html'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_multiline_with_links'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_ansi_color_bold_and_fgcolor'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_simple_separated_format'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_numeric_column_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_orgtbl_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_namedtuples'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_alignment_of_decimal_numbers_with_ansi_color'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_iterable_of_iterables_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_datetime_values'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_disable_numparse_true'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_unsafehtml_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_alignment_of_link_text_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_alignment_of_link_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_textile_with_center_align'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_list_of_lists_with_supplied_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_unaligned_separated'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_textile_with_header'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_maxcolwidth_single_value'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_py27orlater_list_of_ordereddicts'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_no_data_without_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_iterable_of_iterables_firstrow'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_empty_data_without_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex_booktabs'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_empty_data'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_wide_characters'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_iter_of_iters_with_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_alignment_of_colored_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_with_missing_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_youtrack'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_with_links'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_maxcolwidth_pad_tailing_widths'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pipe'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_column_with_mixed_value_types'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_ansi_color_in_table_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_maxcolwidth_honor_disable_parsenum'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_ansi_color_for_decimal_numbers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_align_long_integers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pandas_without_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_orgtbl'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_moinmoin_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_missingval_multi'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_string_with_comma_between_digits_without_floatfmt_grouping_option'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_dict_like'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex_booktabs_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_userdicts'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline_with_links'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_mediawiki_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_maxcolwidth_autowraps_wide_chars'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_lists_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline_with_links'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_missingval'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_floatfmt'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_dict_like_with_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_isconvertible_on_set_values'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_colorclass_colors'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_sqlite3'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_88_256_ANSI_color_codes'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_list_of_lists_with_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_moinmoin'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_float_conversions'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_mix_normal_and_wide_characters'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_sqlite3_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_list_of_lists_with_index_firstrow'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pandas_with_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_2'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_no_data'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_unsafehtml'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_preserve_whitespace'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_empty_table_with_keys_as_header'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_mediawiki'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_numpy_array_as_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pandas_rst_with_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_namedtuples_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_boolean_columns'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_custom_tablefmt'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_with_empty_cells']]"
python-tabulate,https://github.com/astanin/python-tabulate/tree/master//tabulate.py,,test_simple_multiline_with_empty_cells,"minwidths = [max(minw, max((width_fn(cl) for cl in c))) for (minw, c) in zip(minwidths, t_cols)]","tmp_ListComp0 = []
for (minw, c) in zip(minwidths, t_cols):
    tmp_ListComp0.append(max(minw, max((width_fn(cl) for cl in c))))

minwidths = tmp_ListComp0
",1,"[['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pandas_rst_with_named_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pipe_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_column_alignment'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_firstrow'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_disable_numparse_list'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_latex_escape_special_chars'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_empty_pipe_table_with_columns'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_multiline_with_wide_characters'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_escape_empty_cell_in_first_column_in_rst'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_jira'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_userdicts_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_ragged_rows'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_with_list_of_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_jira_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_html_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_maxcolwidth_autowraps'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_disable_numparse_default'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_with_dict_of_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_long_integers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex_raw'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_lists'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_iterable_of_iterables'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_floatfmt_multi'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_colalign_multi'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_simple_separated_format_with_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_lists_firstrow'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_github'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_with_empty_values_in_first_column'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_textile'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_html'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_multiline_with_links'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_ansi_color_bold_and_fgcolor'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_simple_separated_format'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_numeric_column_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_orgtbl_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_namedtuples'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_alignment_of_decimal_numbers_with_ansi_color'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_iterable_of_iterables_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_datetime_values'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_disable_numparse_true'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_unsafehtml_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_alignment_of_link_text_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_alignment_of_link_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_textile_with_center_align'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_list_of_lists_with_supplied_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_unaligned_separated'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_textile_with_header'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_maxcolwidth_single_value'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_py27orlater_list_of_ordereddicts'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_no_data_without_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_iterable_of_iterables_firstrow'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_empty_data_without_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex_booktabs'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_empty_data'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_wide_characters'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_iter_of_iters_with_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_alignment_of_colored_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_with_missing_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_youtrack'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_with_links'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_maxcolwidth_pad_tailing_widths'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pipe'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_column_with_mixed_value_types'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_ansi_color_in_table_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_maxcolwidth_honor_disable_parsenum'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_ansi_color_for_decimal_numbers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_align_long_integers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pandas_without_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_orgtbl'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_moinmoin_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_missingval_multi'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_string_with_comma_between_digits_without_floatfmt_grouping_option'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_dict_like'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex_booktabs_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_userdicts'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline_with_links'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_mediawiki_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_maxcolwidth_autowraps_wide_chars'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_lists_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline_with_links'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_missingval'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_floatfmt'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_dict_like_with_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_isconvertible_on_set_values'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_colorclass_colors'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_sqlite3'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_88_256_ANSI_color_codes'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_list_of_lists_with_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_moinmoin'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_float_conversions'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_mix_normal_and_wide_characters'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_sqlite3_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_list_of_lists_with_index_firstrow'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pandas_with_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_2'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_no_data'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_unsafehtml'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_preserve_whitespace'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_empty_table_with_keys_as_header'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_mediawiki'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_numpy_array_as_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pandas_rst_with_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_namedtuples_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_boolean_columns'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_custom_tablefmt'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_with_empty_cells']]"
python-tabulate,https://github.com/astanin/python-tabulate/tree/master//tabulate.py,,test_simple_multiline_with_empty_cells,"headers = [_align_header(h, a, minw, width_fn(h), is_multiline, width_fn) for (h, a, minw) in zip(headers, t_aligns, minwidths)]","tmp_ListComp0 = []
for (h, a, minw) in zip(headers, t_aligns, minwidths):
    tmp_ListComp0.append(_align_header(h, a, minw, width_fn(h), is_multiline, width_fn))

headers = tmp_ListComp0
",1,"[['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pandas_rst_with_named_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pipe_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_column_alignment'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_firstrow'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_disable_numparse_list'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_latex_escape_special_chars'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_empty_pipe_table_with_columns'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_multiline_with_wide_characters'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_escape_empty_cell_in_first_column_in_rst'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_jira'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_userdicts_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_ragged_rows'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_with_list_of_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_jira_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_html_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_maxcolwidth_autowraps'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_disable_numparse_default'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_with_dict_of_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_long_integers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex_raw'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_lists'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_iterable_of_iterables'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_floatfmt_multi'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_colalign_multi'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_simple_separated_format_with_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_lists_firstrow'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_github'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_with_empty_values_in_first_column'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_textile'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_html'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_multiline_with_links'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_ansi_color_bold_and_fgcolor'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_simple_separated_format'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_numeric_column_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_orgtbl_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_namedtuples'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_alignment_of_decimal_numbers_with_ansi_color'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_iterable_of_iterables_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_datetime_values'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_disable_numparse_true'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_unsafehtml_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_alignment_of_link_text_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_alignment_of_link_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_textile_with_center_align'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_list_of_lists_with_supplied_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_unaligned_separated'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_textile_with_header'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_maxcolwidth_single_value'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_py27orlater_list_of_ordereddicts'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_no_data_without_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_iterable_of_iterables_firstrow'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_empty_data_without_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex_booktabs'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_empty_data'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_wide_characters'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_iter_of_iters_with_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_alignment_of_colored_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_with_missing_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_youtrack'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_with_links'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_maxcolwidth_pad_tailing_widths'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pipe'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_column_with_mixed_value_types'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_ansi_color_in_table_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_maxcolwidth_honor_disable_parsenum'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_ansi_color_for_decimal_numbers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_align_long_integers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pandas_without_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_orgtbl'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_moinmoin_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_missingval_multi'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_string_with_comma_between_digits_without_floatfmt_grouping_option'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_dict_like'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex_booktabs_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_userdicts'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline_with_links'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_mediawiki_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_maxcolwidth_autowraps_wide_chars'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_lists_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline_with_links'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_missingval'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_floatfmt'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_dict_like_with_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_isconvertible_on_set_values'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_colorclass_colors'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_sqlite3'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_88_256_ANSI_color_codes'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_list_of_lists_with_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_moinmoin'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_float_conversions'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_mix_normal_and_wide_characters'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_sqlite3_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_list_of_lists_with_index_firstrow'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pandas_with_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_2'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_no_data'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_unsafehtml'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_preserve_whitespace'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_empty_table_with_keys_as_header'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_mediawiki'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_numpy_array_as_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pandas_rst_with_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_namedtuples_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_boolean_columns'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_custom_tablefmt'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_with_empty_cells']]"
python-tabulate,https://github.com/astanin/python-tabulate/tree/master//tabulate.py,,test_simple_multiline_with_empty_cells,minwidths = [max((width_fn(cl) for cl in c)) for c in cols],"
minwidths = []
for c in cols:
    minwidths.append(max((width_fn(cl) for cl in c)))
",1,"[['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pandas_rst_with_named_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pipe_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_column_alignment'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_firstrow'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_disable_numparse_list'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_latex_escape_special_chars'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_empty_pipe_table_with_columns'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_multiline_with_wide_characters'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_escape_empty_cell_in_first_column_in_rst'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_jira'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_userdicts_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_ragged_rows'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_with_list_of_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_jira_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_html_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_maxcolwidth_autowraps'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_disable_numparse_default'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_with_dict_of_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_long_integers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex_raw'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_lists'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_iterable_of_iterables'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_floatfmt_multi'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_colalign_multi'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_simple_separated_format_with_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_lists_firstrow'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_github'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_with_empty_values_in_first_column'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_textile'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_html'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_multiline_with_links'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_ansi_color_bold_and_fgcolor'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_simple_separated_format'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_numeric_column_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_orgtbl_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_namedtuples'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_alignment_of_decimal_numbers_with_ansi_color'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_iterable_of_iterables_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_datetime_values'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_disable_numparse_true'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_unsafehtml_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_alignment_of_link_text_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_alignment_of_link_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_textile_with_center_align'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_list_of_lists_with_supplied_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_unaligned_separated'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_textile_with_header'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_maxcolwidth_single_value'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_py27orlater_list_of_ordereddicts'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_no_data_without_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_iterable_of_iterables_firstrow'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_empty_data_without_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex_booktabs'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_empty_data'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_wide_characters'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_iter_of_iters_with_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_alignment_of_colored_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_with_missing_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_youtrack'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_with_links'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_maxcolwidth_pad_tailing_widths'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pipe'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_column_with_mixed_value_types'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_ansi_color_in_table_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_maxcolwidth_honor_disable_parsenum'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_psql_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_ansi_color_for_decimal_numbers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_align_long_integers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pandas_without_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_orgtbl'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_moinmoin_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_missingval_multi'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_string_with_comma_between_digits_without_floatfmt_grouping_option'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_dict_like'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex_booktabs_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_userdicts'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_multiline_with_links'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_mediawiki_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_plain_maxcolwidth_autowraps_wide_chars'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_lists_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline_with_links'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_missingval'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_floatfmt'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_dict_like_with_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_isconvertible_on_set_values'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_colorclass_colors'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_sqlite3'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_88_256_ANSI_color_codes'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_list_of_lists_with_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_moinmoin'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_float_conversions'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_mix_normal_and_wide_characters'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_sqlite3_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_fancy_grid_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_latex'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_grid_multiline_with_empty_cells'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_list_of_lists_with_index_firstrow'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pandas_with_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_2'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_presto_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_no_data'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_rst_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_unsafehtml'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_preserve_whitespace'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pretty_multiline'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_empty_table_with_keys_as_header'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_mediawiki'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_numpy_array_as_headers'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_dicts_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_pandas_rst_with_index'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_input.py', 'test.test_input', '', 'test_list_of_namedtuples_keys'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_boolean_columns'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_regression.py', 'test.test_regression', '', 'test_custom_tablefmt'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_with_empty_cells_headerless'], ['https://github.com/astanin/python-tabulate/tree/master/test/test_output.py', 'test.test_output', '', 'test_simple_multiline_with_empty_cells']]"
parallel-ssh,https://github.com/ParallelSSH/parallel-ssh/tree/master/pssh/utils.py,ParallelSSHUtilsTest,test_enabling_pssh_logger,"stream_handlers = [h for h in _logger.handlers if isinstance(h, logging.StreamHandler)]","
stream_handlers = []
for h in _logger.handlers:
    if isinstance(h, logging.StreamHandler):
        stream_handlers.append(h)
",1,"[['https://github.com/ParallelSSH/parallel-ssh/tree/master/tests/test_utils.py', 'tests.test_utils', 'ParallelSSHUtilsTest', 'test_enabling_pssh_logger']]"
parallel-ssh,https://github.com/ParallelSSH/parallel-ssh/tree/master/pssh/clients/native/parallel.py,ParallelSSHClientTest,test_scp_send_exc,"copy_args = [{'local_file': local_file, 'remote_file': remote_file} for (i, host) in enumerate(self.hosts)] if copy_args is None else copy_args","tmp_ListComp0 = []
for (i, host) in enumerate(self.hosts):
    tmp_ListComp0.append({'local_file': local_file, 'remote_file': remote_file})

copy_args = tmp_ListComp0 if copy_args is None else copy_args
",1,"[['https://github.com/ParallelSSH/parallel-ssh/tree/master/tests/native/test_parallel_client.py', 'tests.native.test_parallel_client', 'ParallelSSHClientTest', 'test_scp_send_large_files_timeout'], ['https://github.com/ParallelSSH/parallel-ssh/tree/master/tests/native/test_parallel_client.py', 'tests.native.test_parallel_client', 'ParallelSSHClientTest', 'test_scp_send_exc']]"
parallel-ssh,https://github.com/ParallelSSH/parallel-ssh/tree/master/pssh/clients/native/parallel.py,ParallelSSHClientTest,test_scp_send_exc,"return [self.pool.spawn(self._scp_send, host_i, host, local_file % copy_args[host_i], remote_file % copy_args[host_i], recurse=recurse) for (host_i, host) in enumerate(self.hosts)]","tmp_ListComp0 = []
for (host_i, host) in enumerate(self.hosts):
    tmp_ListComp0.append(self.pool.spawn(self._scp_send, host_i, host, local_file % copy_args[host_i], remote_file % copy_args[host_i], recurse=recurse))

return tmp_ListComp0
",1,"[['https://github.com/ParallelSSH/parallel-ssh/tree/master/tests/native/test_parallel_client.py', 'tests.native.test_parallel_client', 'ParallelSSHClientTest', 'test_scp_send_large_files_timeout'], ['https://github.com/ParallelSSH/parallel-ssh/tree/master/tests/native/test_parallel_client.py', 'tests.native.test_parallel_client', 'ParallelSSHClientTest', 'test_scp_send_exc']]"
tasktiger,https://github.com/closeio/tasktiger/tree/master/tasktiger/task.py,TestPeriodicTasks,test_successful_execution_clears_executions_from_retries,executions = [json.loads(e) for e in serialized_executions if e],"
executions = []
for e in serialized_executions:
    if e:
        executions.append(json.loads(e))
",1,"[['https://github.com/closeio/tasktiger/tree/master/tests/test_periodic.py', 'tests.test_periodic', 'TestPeriodicTasks', 'test_successful_execution_doesnt_clear_previous_errors'], ['https://github.com/closeio/tasktiger/tree/master/tests/test_periodic.py', 'tests.test_periodic', 'TestPeriodicTasks', 'test_periodic_execution_unique_ids_self_correct'], ['https://github.com/closeio/tasktiger/tree/master/tests/test_periodic.py', 'tests.test_periodic', 'TestPeriodicTasks', 'test_periodic_execution_unique_ids'], ['https://github.com/closeio/tasktiger/tree/master/tests/test_task.py', 'tests.test_task', 'TestTaskFromId', 'test_task_wrong_queue'], ['https://github.com/closeio/tasktiger/tree/master/tests/test_task.py', 'tests.test_task', 'TestTaskFromId', 'test_task_found'], ['https://github.com/closeio/tasktiger/tree/master/tests/test_base.py', 'tests.test_base', 'TestTasks', 'test_delay_scheduled_2'], ['https://github.com/closeio/tasktiger/tree/master/tests/test_task.py', 'tests.test_task', 'TestTaskFromId', 'test_task_wrong_state'], ['https://github.com/closeio/tasktiger/tree/master/tests/test_periodic.py', 'tests.test_periodic', 'TestPeriodicTasks', 'test_successful_execution_clears_executions_from_retries']]"
tabview,https://github.com/TabViewer/tabview/tree/master/tabview/tabview.py,TestTabviewUnits,test_tabview_file_annotated_comment,data = [i.decode(enc) for i in data],"tmp_ListComp0 = []
for i in data:
    tmp_ListComp0.append(i.decode(enc))

data = tmp_ListComp0
",1,"[['https://github.com/TabViewer/tabview/tree/master/test/test_tabview.py', 'test.test_tabview', 'TestTabviewUnits', 'test_tabview_file_annotated_comment']]"
morphsnakes,https://github.com/pmneila/morphsnakes/tree/master//morphsnakes.py,,test_morphsnakes_simple_shape_geodesic_active_contour,grid = np.mgrid[[slice(i) for i in image_shape]],"tmp_ListComp0 = []
for i in image_shape:
    tmp_ListComp0.append(slice(i))

grid = np.mgrid[tmp_ListComp0]
",1,"[['https://github.com/pmneila/morphsnakes/tree/master//test_morphsnakes.py', 'test_morphsnakes', '', 'test_morphsnakes_simple_shape_chan_vese'], ['https://github.com/pmneila/morphsnakes/tree/master//test_morphsnakes.py', 'test_morphsnakes', '', 'test_morphsnakes_black'], ['https://github.com/pmneila/morphsnakes/tree/master//test_morphsnakes.py', 'test_morphsnakes', '', 'test_morphsnakes_simple_shape_geodesic_active_contour']]"
skll,https://github.com/EducationalTestingService/skll/tree/master/tests/utils.py,,test_multinomialnb_loading,"feature_names = [f'{feature_prefix}{n:02d}' for n in range(1, num_features + 1)]","
feature_names = []
for n in range(1, num_features + 1):
    feature_names.append(f'{feature_prefix}{n:02d}')
",1,"[['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_metrics.py', 'tests.test_custom_metrics', '', 'test_api_with_inverted_custom_metric'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_merge_missing_labels'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_iteration_without_dictvectorizer'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_skll_convert_libsvm_map'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_predict_labels_non_probabilistic'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_write_hashed_featureset'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_subtract'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_merge_different_vectorizers'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_label_index_order'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_output.py', 'tests.test_output', '', 'test_learning_curve_min_examples_check'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_filter_with_hashing'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_predict_labels_not_trained_with_probability'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_string_feature'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_non_probabilistic'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_empty_labels'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_learner.py', 'tests.test_custom_learner', '', 'test_custom_learner_model_loading'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_length'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_output.py', 'tests.test_output', '', 'test_learning_curve_min_examples_check_override'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_learner.py', 'tests.test_custom_learner', '', 'test_majority_class_custom_learner'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_sampling_for_multinomialNB'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_voting_learners_api_4.py', 'tests.test_voting_learners_api_4', '', 'test_cross_validate_grid_search_but_no_objective'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_learner_api_load_into_existing_instance'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_equality'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_mutually_exclusive_generate_predictions_args'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_merge_different_hashers'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_voting_learners_api_4.py', 'tests.test_voting_learners_api_4', '', 'test_cross_validate_with_continuous_labels'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_multi_class'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_merge_different_labels_same_ids'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_metrics.py', 'tests.test_custom_metrics', '', 'test_api_with_custom_prob_metric'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_learner.py', 'tests.test_custom_learner', '', 'test_logistic_custom_learner'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_mlp_classification'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_not_trained_with_probability'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_hashing_for_multinomialNB'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_console_bad_input_ext'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_multinomialnb_loading']]"
skll,https://github.com/EducationalTestingService/skll/tree/master/tests/utils.py,,test_multinomialnb_loading,"features = [dict(zip(feature_names, row)) for row in X]","
features = []
for row in X:
    features.append(dict(zip(feature_names, row)))
",1,"[['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_metrics.py', 'tests.test_custom_metrics', '', 'test_api_with_inverted_custom_metric'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_merge_missing_labels'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_iteration_without_dictvectorizer'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_skll_convert_libsvm_map'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_predict_labels_non_probabilistic'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_write_hashed_featureset'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_subtract'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_merge_different_vectorizers'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_label_index_order'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_output.py', 'tests.test_output', '', 'test_learning_curve_min_examples_check'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_filter_with_hashing'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_predict_labels_not_trained_with_probability'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_string_feature'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_non_probabilistic'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_empty_labels'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_learner.py', 'tests.test_custom_learner', '', 'test_custom_learner_model_loading'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_length'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_output.py', 'tests.test_output', '', 'test_learning_curve_min_examples_check_override'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_learner.py', 'tests.test_custom_learner', '', 'test_majority_class_custom_learner'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_sampling_for_multinomialNB'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_voting_learners_api_4.py', 'tests.test_voting_learners_api_4', '', 'test_cross_validate_grid_search_but_no_objective'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_learner_api_load_into_existing_instance'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_equality'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_mutually_exclusive_generate_predictions_args'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_merge_different_hashers'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_voting_learners_api_4.py', 'tests.test_voting_learners_api_4', '', 'test_cross_validate_with_continuous_labels'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_multi_class'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_merge_different_labels_same_ids'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_metrics.py', 'tests.test_custom_metrics', '', 'test_api_with_custom_prob_metric'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_learner.py', 'tests.test_custom_learner', '', 'test_logistic_custom_learner'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_mlp_classification'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_not_trained_with_probability'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_hashing_for_multinomialNB'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_console_bad_input_ext'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_multinomialnb_loading']]"
skll,https://github.com/EducationalTestingService/skll/tree/master/tests/utils.py,,test_multinomialnb_loading,"ids = [f'EXAMPLE_{n}' for n in range(1, num_examples + 1)]","
ids = []
for n in range(1, num_examples + 1):
    ids.append(f'EXAMPLE_{n}')
",1,"[['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_metrics.py', 'tests.test_custom_metrics', '', 'test_api_with_inverted_custom_metric'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_merge_missing_labels'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_iteration_without_dictvectorizer'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_skll_convert_libsvm_map'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_predict_labels_non_probabilistic'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_write_hashed_featureset'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_subtract'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_merge_different_vectorizers'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_label_index_order'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_output.py', 'tests.test_output', '', 'test_learning_curve_min_examples_check'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_filter_with_hashing'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_predict_labels_not_trained_with_probability'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_string_feature'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_non_probabilistic'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_empty_labels'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_learner.py', 'tests.test_custom_learner', '', 'test_custom_learner_model_loading'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_length'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_output.py', 'tests.test_output', '', 'test_learning_curve_min_examples_check_override'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_learner.py', 'tests.test_custom_learner', '', 'test_majority_class_custom_learner'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_sampling_for_multinomialNB'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_voting_learners_api_4.py', 'tests.test_voting_learners_api_4', '', 'test_cross_validate_grid_search_but_no_objective'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_learner_api_load_into_existing_instance'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_equality'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_mutually_exclusive_generate_predictions_args'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_merge_different_hashers'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_voting_learners_api_4.py', 'tests.test_voting_learners_api_4', '', 'test_cross_validate_with_continuous_labels'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_multi_class'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_merge_different_labels_same_ids'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_metrics.py', 'tests.test_custom_metrics', '', 'test_api_with_custom_prob_metric'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_learner.py', 'tests.test_custom_learner', '', 'test_logistic_custom_learner'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_mlp_classification'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_not_trained_with_probability'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_hashing_for_multinomialNB'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_console_bad_input_ext'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_multinomialnb_loading']]"
skll,https://github.com/EducationalTestingService/skll/tree/master/tests/utils.py,,test_multinomialnb_loading,"possible_values = [chr(x) for x in range(97, 97 + num_string_values)]","
possible_values = []
for x in range(97, 97 + num_string_values):
    possible_values.append(chr(x))
",1,"[['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_metrics.py', 'tests.test_custom_metrics', '', 'test_api_with_inverted_custom_metric'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_merge_missing_labels'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_iteration_without_dictvectorizer'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_skll_convert_libsvm_map'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_predict_labels_non_probabilistic'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_write_hashed_featureset'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_subtract'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_merge_different_vectorizers'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_label_index_order'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_output.py', 'tests.test_output', '', 'test_learning_curve_min_examples_check'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_filter_with_hashing'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_predict_labels_not_trained_with_probability'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_string_feature'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_non_probabilistic'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_empty_labels'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_learner.py', 'tests.test_custom_learner', '', 'test_custom_learner_model_loading'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_length'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_output.py', 'tests.test_output', '', 'test_learning_curve_min_examples_check_override'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_learner.py', 'tests.test_custom_learner', '', 'test_majority_class_custom_learner'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_sampling_for_multinomialNB'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_voting_learners_api_4.py', 'tests.test_voting_learners_api_4', '', 'test_cross_validate_grid_search_but_no_objective'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_learner_api_load_into_existing_instance'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_equality'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_mutually_exclusive_generate_predictions_args'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_merge_different_hashers'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_voting_learners_api_4.py', 'tests.test_voting_learners_api_4', '', 'test_cross_validate_with_continuous_labels'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_multi_class'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_merge_different_labels_same_ids'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_metrics.py', 'tests.test_custom_metrics', '', 'test_api_with_custom_prob_metric'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_learner.py', 'tests.test_custom_learner', '', 'test_logistic_custom_learner'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_mlp_classification'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_not_trained_with_probability'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_hashing_for_multinomialNB'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_console_bad_input_ext'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_multinomialnb_loading']]"
skll,https://github.com/EducationalTestingService/skll/tree/master/tests/utils.py,,test_multinomialnb_loading,string_feature_values = [possible_values[i] for i in random_indices],"
string_feature_values = []
for i in random_indices:
    string_feature_values.append(possible_values[i])
",1,"[['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_metrics.py', 'tests.test_custom_metrics', '', 'test_api_with_inverted_custom_metric'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_merge_missing_labels'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_iteration_without_dictvectorizer'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_skll_convert_libsvm_map'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_predict_labels_non_probabilistic'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_write_hashed_featureset'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_subtract'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_merge_different_vectorizers'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_label_index_order'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_output.py', 'tests.test_output', '', 'test_learning_curve_min_examples_check'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_filter_with_hashing'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_predict_labels_not_trained_with_probability'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_string_feature'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_non_probabilistic'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_empty_labels'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_learner.py', 'tests.test_custom_learner', '', 'test_custom_learner_model_loading'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_length'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_output.py', 'tests.test_output', '', 'test_learning_curve_min_examples_check_override'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_learner.py', 'tests.test_custom_learner', '', 'test_majority_class_custom_learner'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_sampling_for_multinomialNB'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_voting_learners_api_4.py', 'tests.test_voting_learners_api_4', '', 'test_cross_validate_grid_search_but_no_objective'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_learner_api_load_into_existing_instance'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_equality'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_mutually_exclusive_generate_predictions_args'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_merge_different_hashers'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_voting_learners_api_4.py', 'tests.test_voting_learners_api_4', '', 'test_cross_validate_with_continuous_labels'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_multi_class'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_merge_different_labels_same_ids'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_metrics.py', 'tests.test_custom_metrics', '', 'test_api_with_custom_prob_metric'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_learner.py', 'tests.test_custom_learner', '', 'test_logistic_custom_learner'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_mlp_classification'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_not_trained_with_probability'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_hashing_for_multinomialNB'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_console_bad_input_ext'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_multinomialnb_loading']]"
skll,https://github.com/EducationalTestingService/skll/tree/master/tests/utils.py,,test_multinomialnb_loading,"ids = [f'{n}' for n in range(1, num_examples + 1)]","
ids = []
for n in range(1, num_examples + 1):
    ids.append(f'{n}')
",1,"[['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_metrics.py', 'tests.test_custom_metrics', '', 'test_api_with_inverted_custom_metric'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_merge_missing_labels'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_iteration_without_dictvectorizer'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_skll_convert_libsvm_map'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_predict_labels_non_probabilistic'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_write_hashed_featureset'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_subtract'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_merge_different_vectorizers'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_label_index_order'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_output.py', 'tests.test_output', '', 'test_learning_curve_min_examples_check'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_filter_with_hashing'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_predict_labels_not_trained_with_probability'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_string_feature'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_non_probabilistic'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_empty_labels'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_learner.py', 'tests.test_custom_learner', '', 'test_custom_learner_model_loading'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_length'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_output.py', 'tests.test_output', '', 'test_learning_curve_min_examples_check_override'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_learner.py', 'tests.test_custom_learner', '', 'test_majority_class_custom_learner'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_sampling_for_multinomialNB'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_voting_learners_api_4.py', 'tests.test_voting_learners_api_4', '', 'test_cross_validate_grid_search_but_no_objective'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_learner_api_load_into_existing_instance'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_equality'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_mutually_exclusive_generate_predictions_args'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_merge_different_hashers'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_voting_learners_api_4.py', 'tests.test_voting_learners_api_4', '', 'test_cross_validate_with_continuous_labels'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_multi_class'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_merge_different_labels_same_ids'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_metrics.py', 'tests.test_custom_metrics', '', 'test_api_with_custom_prob_metric'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_learner.py', 'tests.test_custom_learner', '', 'test_logistic_custom_learner'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_mlp_classification'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_not_trained_with_probability'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_hashing_for_multinomialNB'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_console_bad_input_ext'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_multinomialnb_loading']]"
skll,https://github.com/EducationalTestingService/skll/tree/master/tests/utils.py,,test_multinomialnb_loading,"ids = [float(n) for n in range(1, num_examples + 1)]","
ids = []
for n in range(1, num_examples + 1):
    ids.append(float(n))
",1,"[['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_metrics.py', 'tests.test_custom_metrics', '', 'test_api_with_inverted_custom_metric'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_merge_missing_labels'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_iteration_without_dictvectorizer'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_skll_convert_libsvm_map'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_predict_labels_non_probabilistic'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_write_hashed_featureset'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_subtract'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_merge_different_vectorizers'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_label_index_order'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_output.py', 'tests.test_output', '', 'test_learning_curve_min_examples_check'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_filter_with_hashing'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_predict_labels_not_trained_with_probability'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_string_feature'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_non_probabilistic'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_empty_labels'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_learner.py', 'tests.test_custom_learner', '', 'test_custom_learner_model_loading'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_length'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_output.py', 'tests.test_output', '', 'test_learning_curve_min_examples_check_override'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_learner.py', 'tests.test_custom_learner', '', 'test_majority_class_custom_learner'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_sampling_for_multinomialNB'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_voting_learners_api_4.py', 'tests.test_voting_learners_api_4', '', 'test_cross_validate_grid_search_but_no_objective'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_learner_api_load_into_existing_instance'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_equality'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_mutually_exclusive_generate_predictions_args'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_merge_different_hashers'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_voting_learners_api_4.py', 'tests.test_voting_learners_api_4', '', 'test_cross_validate_with_continuous_labels'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_multi_class'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_merge_different_labels_same_ids'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_metrics.py', 'tests.test_custom_metrics', '', 'test_api_with_custom_prob_metric'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_learner.py', 'tests.test_custom_learner', '', 'test_logistic_custom_learner'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_mlp_classification'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_not_trained_with_probability'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_hashing_for_multinomialNB'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_console_bad_input_ext'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_multinomialnb_loading']]"
skll,https://github.com/EducationalTestingService/skll/tree/master/tests/utils.py,,test_feature_merging_order_invariance,"ids = [f'EXAMPLE_{n}' for n in range(1, num_examples + 1)]","
ids = []
for n in range(1, num_examples + 1):
    ids.append(f'EXAMPLE_{n}')
",1,"[['https://github.com/EducationalTestingService/skll/tree/master/tests/test_regression.py', 'tests.test_regression', '', 'test_additional_metrics'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_regression.py', 'tests.test_regression', '', 'test_fancy_output'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_feature_merging_order_invariance']]"
skll,https://github.com/EducationalTestingService/skll/tree/master/tests/utils.py,,test_feature_merging_order_invariance,"features = [dict(zip(feature_names, row)) for row in X]","
features = []
for row in X:
    features.append(dict(zip(feature_names, row)))
",1,"[['https://github.com/EducationalTestingService/skll/tree/master/tests/test_regression.py', 'tests.test_regression', '', 'test_additional_metrics'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_regression.py', 'tests.test_regression', '', 'test_fancy_output'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_feature_merging_order_invariance']]"
skll,https://github.com/EducationalTestingService/skll/tree/master/skll/metrics.py,,test_invalid_weighted_kappa,y_true = [y - min_rating for y in y_true],"tmp_ListComp0 = []
for y in y_true:
    tmp_ListComp0.append(y - min_rating)

y_true = tmp_ListComp0
",1,"[['https://github.com/EducationalTestingService/skll/tree/master/tests/test_metrics.py', 'tests.test_metrics', '', 'test_invalid_lists_kappa'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_metrics.py', 'tests.test_metrics', '', 'test_invalid_weighted_kappa']]"
skll,https://github.com/EducationalTestingService/skll/tree/master/skll/metrics.py,,test_invalid_weighted_kappa,y_pred = [y - min_rating for y in y_pred],"tmp_ListComp0 = []
for y in y_pred:
    tmp_ListComp0.append(y - min_rating)

y_pred = tmp_ListComp0
",1,"[['https://github.com/EducationalTestingService/skll/tree/master/tests/test_metrics.py', 'tests.test_metrics', '', 'test_invalid_lists_kappa'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_metrics.py', 'tests.test_metrics', '', 'test_invalid_weighted_kappa']]"
skll,https://github.com/EducationalTestingService/skll/tree/master/skll/metrics.py,,test_invalid_weighted_kappa,y_true = [int(np.round(float(y))) for y in y_true],"tmp_ListComp0 = []
for y in y_true:
    tmp_ListComp0.append(int(np.round(float(y))))

y_true = tmp_ListComp0
",1,"[['https://github.com/EducationalTestingService/skll/tree/master/tests/test_metrics.py', 'tests.test_metrics', '', 'test_invalid_lists_kappa'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_metrics.py', 'tests.test_metrics', '', 'test_invalid_weighted_kappa']]"
skll,https://github.com/EducationalTestingService/skll/tree/master/skll/metrics.py,,test_invalid_weighted_kappa,y_pred = [int(np.round(float(y))) for y in y_pred],"tmp_ListComp0 = []
for y in y_pred:
    tmp_ListComp0.append(int(np.round(float(y))))

y_pred = tmp_ListComp0
",1,"[['https://github.com/EducationalTestingService/skll/tree/master/tests/test_metrics.py', 'tests.test_metrics', '', 'test_invalid_lists_kappa'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_metrics.py', 'tests.test_metrics', '', 'test_invalid_weighted_kappa']]"
skll,https://github.com/EducationalTestingService/skll/tree/master/skll/utils/logging.py,,test_learning_curve_min_examples_check_override,need_file_handler = not any([is_file_handler(handler) for handler in logger.handlers]),"tmp_ListComp0 = []
for handler in logger.handlers:
    tmp_ListComp0.append(is_file_handler(handler))

need_file_handler = not any(tmp_ListComp0)
",1,"[['https://github.com/EducationalTestingService/skll/tree/master/tests/test_logging_utils.py', 'tests.test_logging_utils', '', 'test_get_skll_logger'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_output.py', 'tests.test_output', '', 'test_learning_curve_min_examples_check_override'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_logging_utils.py', 'tests.test_logging_utils', '', 'test_close_and_remove_logger_handlers'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_voting_learners_api_2.py', 'tests.test_voting_learners_api_2', '', 'test_learning_curve_min_examples_check_override']]"
skll,https://github.com/EducationalTestingService/skll/tree/master/skll/utils/commandline/skll_convert.py,,test_skll_convert_no_labels_with_label_col,feat_vectorizer.fit([{name: 1} for name in feat_map]),"tmp_ListComp0 = []
for name in feat_map:
    tmp_ListComp0.append({name: 1})

feat_vectorizer.fit(tmp_ListComp0)
",1,"[['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_skll_convert_libsvm_map'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_skll_convert_no_labels_with_label_col']]"
skll,https://github.com/EducationalTestingService/skll/tree/master/skll/utils/commandline/compute_eval_from_predictions.py,,test_compute_eval_from_predictions_random_choice,"best_classes = [classes[i] for (i, p) in enumerate(probabilities) if p == highest_p]","
best_classes = []
for (i, p) in enumerate(probabilities):
    if p == highest_p:
        best_classes.append(classes[i])
",1,"[['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_compute_eval_from_predictions_random_choice']]"
skll,https://github.com/EducationalTestingService/skll/tree/master/skll/utils/commandline/compute_eval_from_predictions.py,,test_compute_eval_from_predictions_random_choice,"exp_val = sum([classes[i] * prob for (i, prob) in enumerate(probabilities)])","tmp_ListComp0 = []
for (i, prob) in enumerate(probabilities):
    tmp_ListComp0.append(classes[i] * prob)

exp_val = sum(tmp_ListComp0)
",1,"[['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_compute_eval_from_predictions_random_choice']]"
skll,https://github.com/EducationalTestingService/skll/tree/master/skll/utils/commandline/filter_features.py,,test_filter_features_libsvm_output_argparse,converted_labels = [safe_float(label) for label in args.label],"
converted_labels = []
for label in args.label:
    converted_labels.append(safe_float(label))
",1,"[['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_filter_features_unknown_output_format'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_filter_features_with_replace_blanks_with_and_drop_blanks_raises_error'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_filter_features_libsvm_input_argparse'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_filter_features_with_replace_blanks_with'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_filter_features_with_drop_blanks'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_filter_features_unknown_input_format'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_filter_features_libsvm_output_argparse']]"
skll,https://github.com/EducationalTestingService/skll/tree/master/skll/utils/commandline/generate_predictions.py,,test_generate_predictions_threshold_multi_class,neg_label_str = [label for label in learner.label_list if label != pos_label_str][0],"tmp_ListComp0 = []
for label in learner.label_list:
    if label != pos_label_str:
        tmp_ListComp0.append(label)

neg_label_str = tmp_ListComp0[0]
",1,"[['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_predict_labels_not_trained_with_probability'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_non_probabilistic'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_predict_labels_non_probabilistic'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_not_trained_with_probability'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_mutually_exclusive_generate_predictions_args'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_multi_class']]"
skll,https://github.com/EducationalTestingService/skll/tree/master/skll/utils/commandline/generate_predictions.py,,test_generate_predictions_threshold_multi_class,pos_label_str = [label for label in learner.label_dict if learner.label_dict[label] == 1][0],"tmp_ListComp0 = []
for label in learner.label_dict:
    if learner.label_dict[label] == 1:
        tmp_ListComp0.append(label)

pos_label_str = tmp_ListComp0[0]
",1,"[['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_predict_labels_not_trained_with_probability'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_non_probabilistic'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_predict_labels_non_probabilistic'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_not_trained_with_probability'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_mutually_exclusive_generate_predictions_args'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_multi_class']]"
skll,https://github.com/EducationalTestingService/skll/tree/master/skll/utils/commandline/generate_predictions.py,,test_generate_predictions_threshold_multi_class,header = ['id'] + [str(x) for x in learner.label_list],"tmp_ListComp0 = []
for x in learner.label_list:
    tmp_ListComp0.append(str(x))

header = ['id'] + tmp_ListComp0
",1,"[['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_predict_labels_not_trained_with_probability'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_non_probabilistic'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_predict_labels_non_probabilistic'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_not_trained_with_probability'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_mutually_exclusive_generate_predictions_args'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_multi_class']]"
skll,https://github.com/EducationalTestingService/skll/tree/master/skll/utils/commandline/generate_predictions.py,,test_generate_predictions_threshold_multi_class,prediction_str = '\t'.join([str(p) for p in prediction]),"tmp_ListComp0 = []
for p in prediction:
    tmp_ListComp0.append(str(p))

prediction_str = '\t'.join(tmp_ListComp0)
",1,"[['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_predict_labels_not_trained_with_probability'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_non_probabilistic'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_predict_labels_non_probabilistic'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_not_trained_with_probability'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_mutually_exclusive_generate_predictions_args'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_multi_class']]"
skll,https://github.com/EducationalTestingService/skll/tree/master/skll/data/featureset.py,,test_reading_csv_and_tsv_with_fill_blanks,feature_columns = [column for column in df.columns if column != labels_column],"
feature_columns = []
for column in df.columns:
    if column != labels_column:
        feature_columns.append(column)
",1,"[['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_reading_csv_and_tsv_with_drop_blanks'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_reading_csv_and_tsv_with_fill_blanks_with_dictionary'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_reading_csv_and_tsv_with_fill_blanks']]"
skll,https://github.com/EducationalTestingService/skll/tree/master/skll/learner/utils.py,,test_learner_api_rescaling_classifier,"res = np.array([max(self.y_min, min(self.y_max, pred)) for pred in res])","tmp_ListComp0 = []
for pred in res:
    tmp_ListComp0.append(max(self.y_min, min(self.y_max, pred)))

res = np.array(tmp_ListComp0)
",1,"[['https://github.com/EducationalTestingService/skll/tree/master/tests/test_regression.py', 'tests.test_regression', '', 'test_learner_api_rescaling_classifier']]"
skll,https://github.com/EducationalTestingService/skll/tree/master/skll/learner/utils.py,,test_learner_api_rescaling_classifier,original_parameters = [p for p in init_signature.parameters.values() if p.name != 'self' and p.kind != p.VAR_KEYWORD],"
original_parameters = []
for p in init_signature.parameters.values():
    if p.name != 'self' and p.kind != p.VAR_KEYWORD:
        original_parameters.append(p)
",1,"[['https://github.com/EducationalTestingService/skll/tree/master/tests/test_regression.py', 'tests.test_regression', '', 'test_learner_api_rescaling_classifier']]"
skll,https://github.com/EducationalTestingService/skll/tree/master/skll/learner/voting.py,,test_evaluate_bad_output_metric,"estimators = list(zip(self._learner_names, [learner.pipeline for learner in self.learners]))","def my_comprehension_func(self):
    tmp_ListComp0 = []
    for learner in self.learners:
        tmp_ListComp0.append(learner.pipeline)
    return tmp_ListComp0

estimators = list(zip(self._learner_names, my_comprehension_func(self)))
",1,"[['https://github.com/EducationalTestingService/skll/tree/master/tests/test_voting_learners_api_1.py', 'tests.test_voting_learners_api_1', '', 'test_train_with_custom_path'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_voting_learners_api_2.py', 'tests.test_voting_learners_api_2', '', 'test_evaluate_bad_output_metric']]"
skll,https://github.com/EducationalTestingService/skll/tree/master/skll/learner/voting.py,,test_evaluate_bad_output_metric,y_train = [self.label_dict[label] for label in examples.labels],"
y_train = []
for label in examples.labels:
    y_train.append(self.label_dict[label])
",1,"[['https://github.com/EducationalTestingService/skll/tree/master/tests/test_voting_learners_api_1.py', 'tests.test_voting_learners_api_1', '', 'test_train_with_custom_path'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_voting_learners_api_2.py', 'tests.test_voting_learners_api_2', '', 'test_evaluate_bad_output_metric']]"
picard,https://github.com/metabrainz/picard/tree/master/picard/pluginmanager.py,TestPicardPluginManager,test_compatible_api_version,versions = [Version.from_string(v) for v in list(api_versions)],"
versions = []
for v in list(api_versions):
    versions.append(Version.from_string(v))
",1,"[['https://github.com/metabrainz/picard/tree/master/test/test_plugins.py', 'test.test_plugins', 'TestPicardPluginManager', 'test_compatible_api_version']]"
picard,https://github.com/metabrainz/picard/tree/master/picard/config_upgrade.py,TestPicardConfigUpgrades,test_upgrade_to_v2_2_0_dev_3,"tags = ['-' + e.strip().lower() for e in _s[old_opt].split(',')]","
tags = []
for e in _s[old_opt].split(','):
    tags.append('-' + e.strip().lower())
",1,"[['https://github.com/metabrainz/picard/tree/master/test/test_config_upgrade.py', 'test.test_config_upgrade', 'TestPicardConfigUpgrades', 'test_upgrade_to_v2_2_0_dev_3']]"
picard,https://github.com/metabrainz/picard/tree/master/picard/script/parser.py,ScriptParserTest,test_scriptfunction_unknown,args = [arg.eval(parser) for arg in self.args],"
args = []
for arg in self.args:
    args.append(arg.eval(parser))
",1,"[['https://github.com/metabrainz/picard/tree/master/test/test_script.py', 'test.test_script', 'ScriptParserTest', 'test_scriptfunction_unknown']]"
picard,https://github.com/metabrainz/picard/tree/master/picard/util/scripttofilename.py,ScriptToFilenameTest,test_script_to_filename_with_metadata,"new_metadata[name] = [sanitize_filename(str(v), win_compat=win_compat) for v in metadata.getall(name)]","tmp_ListComp0 = []
for v in metadata.getall(name):
    tmp_ListComp0.append(sanitize_filename(str(v), win_compat=win_compat))

new_metadata[name] = tmp_ListComp0
",1,"[['https://github.com/metabrainz/picard/tree/master/test/test_scripttofilename.py', 'test.test_scripttofilename', 'ScriptToFilenameTest', 'test_script_to_filename_with_metadata']]"
picard,https://github.com/metabrainz/picard/tree/master/picard/util/cdrom.py,LinuxParseCdromInfoTest,test_empty_string,drive_audio_caps = [v == '1' for v in line[len(CAN_PLAY_AUDIO):].split()],"
drive_audio_caps = []
for v in line[len(CAN_PLAY_AUDIO):].split():
    drive_audio_caps.append(v == '1')
",1,"[['https://github.com/metabrainz/picard/tree/master/test/test_util_cdrom.py', 'test.test_util_cdrom', 'LinuxParseCdromInfoTest', 'test_drives'], ['https://github.com/metabrainz/picard/tree/master/test/test_util_cdrom.py', 'test.test_util_cdrom', 'LinuxParseCdromInfoTest', 'test_empty'], ['https://github.com/metabrainz/picard/tree/master/test/test_util_cdrom.py', 'test.test_util_cdrom', 'LinuxParseCdromInfoTest', 'test_empty_string']]"
picard,https://github.com/metabrainz/picard/tree/master/picard/util/imagelist.py,RemoveMetadataImagesTest,test_remove_from_empty_track,sources = [s.metadata for s in state.sources],"
sources = []
for s in state.sources:
    sources.append(s.metadata)
",1,"[['https://github.com/metabrainz/picard/tree/master/test/test_imagelist.py', 'test.test_imagelist', 'RemoveMetadataImagesTest', 'test_remove_from_track'], ['https://github.com/metabrainz/picard/tree/master/test/test_imagelist.py', 'test.test_imagelist', 'RemoveMetadataImagesTest', 'test_remove_from_cluster'], ['https://github.com/metabrainz/picard/tree/master/test/test_imagelist.py', 'test.test_imagelist', 'RemoveMetadataImagesTest', 'test_remove_from_empty_album'], ['https://github.com/metabrainz/picard/tree/master/test/test_imagelist.py', 'test.test_imagelist', 'RemoveMetadataImagesTest', 'test_remove_from_empty_cluster'], ['https://github.com/metabrainz/picard/tree/master/test/test_imagelist.py', 'test.test_imagelist', 'RemoveMetadataImagesTest', 'test_remove_from_track_with_common_images'], ['https://github.com/metabrainz/picard/tree/master/test/test_imagelist.py', 'test.test_imagelist', 'RemoveMetadataImagesTest', 'test_remove_from_cluster_with_common_images'], ['https://github.com/metabrainz/picard/tree/master/test/test_imagelist.py', 'test.test_imagelist', 'RemoveMetadataImagesTest', 'test_remove_from_album'], ['https://github.com/metabrainz/picard/tree/master/test/test_imagelist.py', 'test.test_imagelist', 'RemoveMetadataImagesTest', 'test_remove_from_album_with_common_images'], ['https://github.com/metabrainz/picard/tree/master/test/test_imagelist.py', 'test.test_imagelist', 'RemoveMetadataImagesTest', 'test_remove_from_empty_track']]"
picard,https://github.com/metabrainz/picard/tree/master/picard/util/imagelist.py,RemoveMetadataImagesTest,test_remove_from_empty_track,"sources = [s.orig_metadata for s in state.sources if not isinstance(s, Track)]","
sources = []
for s in state.sources:
    if not isinstance(s, Track):
        sources.append(s.orig_metadata)
",1,"[['https://github.com/metabrainz/picard/tree/master/test/test_imagelist.py', 'test.test_imagelist', 'RemoveMetadataImagesTest', 'test_remove_from_track'], ['https://github.com/metabrainz/picard/tree/master/test/test_imagelist.py', 'test.test_imagelist', 'RemoveMetadataImagesTest', 'test_remove_from_cluster'], ['https://github.com/metabrainz/picard/tree/master/test/test_imagelist.py', 'test.test_imagelist', 'RemoveMetadataImagesTest', 'test_remove_from_empty_album'], ['https://github.com/metabrainz/picard/tree/master/test/test_imagelist.py', 'test.test_imagelist', 'RemoveMetadataImagesTest', 'test_remove_from_empty_cluster'], ['https://github.com/metabrainz/picard/tree/master/test/test_imagelist.py', 'test.test_imagelist', 'RemoveMetadataImagesTest', 'test_remove_from_track_with_common_images'], ['https://github.com/metabrainz/picard/tree/master/test/test_imagelist.py', 'test.test_imagelist', 'RemoveMetadataImagesTest', 'test_remove_from_cluster_with_common_images'], ['https://github.com/metabrainz/picard/tree/master/test/test_imagelist.py', 'test.test_imagelist', 'RemoveMetadataImagesTest', 'test_remove_from_album'], ['https://github.com/metabrainz/picard/tree/master/test/test_imagelist.py', 'test.test_imagelist', 'RemoveMetadataImagesTest', 'test_remove_from_album_with_common_images'], ['https://github.com/metabrainz/picard/tree/master/test/test_imagelist.py', 'test.test_imagelist', 'RemoveMetadataImagesTest', 'test_remove_from_empty_track']]"
term2048,https://github.com/bfontaine/term2048/tree/master/term2048/board.py,TestBoard,test_move_collapse_chain_col,"return [self.getCell(x, i) for i in self.__size_range]","tmp_ListComp0 = []
for i in self.__size_range:
    tmp_ListComp0.append(self.getCell(x, i))

return tmp_ListComp0
",1,"[['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_getCol'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_collapse_chain_col']]"
requests,https://github.com/psf/requests/tree/master/requests/sessions.py,TestRequests,test_non_prepared_request_error,history = [resp for resp in gen],"
history = []
for resp in gen:
    history.append(resp)
",1,"[['https://github.com/psf/requests/tree/master/tests/test_requests.py', 'tests.test_requests', 'TestRequests', 'test_non_prepared_request_error']]"
netaddr,https://github.com/netaddr/netaddr/tree/master/netaddr/fbsocket.py,,test_inet_pton_ipv6_exceptions,"values = [_pack('>H', int(i, 16)) for i in l_prefix] + ['\x00\x00'.encode() for i in range(gap_size)] + [_pack('>H', int(i, 16)) for i in l_suffix]","def my_comprehension_func(_pack, int):
    tmp_ListComp0 = []
    for i in l_suffix:
        tmp_ListComp0.append(_pack('>H', int(i, 16)))
    return tmp_ListComp0

values = [_pack('>H', int(i, 16)) for i in l_prefix] + ['\x00\x00'.encode() for i in range(gap_size)] + my_comprehension_func(_pack, int)
",1,"[['https://github.com/netaddr/netaddr/tree/master/netaddr/tests/ip/test_socket_module_fallback.py', 'netaddr.tests.ip.test_socket_module_fallback', '', 'test_inet_pton_ipv6_exceptions']]"
netaddr,https://github.com/netaddr/netaddr/tree/master/netaddr/fbsocket.py,,test_inet_pton_ipv6_exceptions,"values = [_pack('>H', i) for i in tokens]","
values = []
for i in tokens:
    values.append(_pack('>H', i))
",1,"[['https://github.com/netaddr/netaddr/tree/master/netaddr/tests/ip/test_socket_module_fallback.py', 'netaddr.tests.ip.test_socket_module_fallback', '', 'test_inet_pton_ipv6_exceptions']]"
netaddr,https://github.com/netaddr/netaddr/tree/master/netaddr/fbsocket.py,,test_inet_pton_ipv6_exceptions,"values = [_pack('>H', int(i, 16)) for i in tokens]","
values = []
for i in tokens:
    values.append(_pack('>H', int(i, 16)))
",1,"[['https://github.com/netaddr/netaddr/tree/master/netaddr/tests/ip/test_socket_module_fallback.py', 'netaddr.tests.ip.test_socket_module_fallback', '', 'test_inet_pton_ipv6_exceptions']]"
netaddr,https://github.com/netaddr/netaddr/tree/master/netaddr/fbsocket.py,,test_inet_pton_ipv6_exceptions,"tokens = [int(token, 16) for token in tokens]","tmp_ListComp0 = []
for token in tokens:
    tmp_ListComp0.append(int(token, 16))

tokens = tmp_ListComp0
",1,"[['https://github.com/netaddr/netaddr/tree/master/netaddr/tests/ip/test_socket_module_fallback.py', 'netaddr.tests.ip.test_socket_module_fallback', '', 'test_inet_pton_ipv6_exceptions']]"
netaddr,https://github.com/netaddr/netaddr/tree/master/netaddr/ip/rfc1924.py,,test_RFC_1924,encoded = ''.join([BASE_85[w] for w in reversed(remainder)]),"tmp_ListComp0 = []
for w in reversed(remainder):
    tmp_ListComp0.append(BASE_85[w])

encoded = ''.join(tmp_ListComp0)
",1,"[['https://github.com/netaddr/netaddr/tree/master/netaddr/tests/ip/test_ip_rfc1924.py', 'netaddr.tests.ip.test_ip_rfc1924', '', 'test_RFC_1924']]"
netaddr,https://github.com/netaddr/netaddr/tree/master/netaddr/strategy/eui48.py,,test_strategy_eui48,"int_val = int(''.join(['%.2x' % int(w, 16) for w in words]), 16)","def my_comprehension_func(int):
    tmp_ListComp0 = []
    for w in words:
        tmp_ListComp0.append('%.2x' % int(w, 16))
    return tmp_ListComp0

int_val = int(''.join(my_comprehension_func(int)), 16)
",1,"[['https://github.com/netaddr/netaddr/tree/master/netaddr/tests/strategy/test_eui48_strategy.py', 'netaddr.tests.strategy.test_eui48_strategy', '', 'test_strategy_eui48_alternate_dialect'], ['https://github.com/netaddr/netaddr/tree/master/netaddr/tests/strategy/test_eui48_strategy.py', 'netaddr.tests.strategy.test_eui48_strategy', '', 'test_strategy_eui48']]"
netaddr,https://github.com/netaddr/netaddr/tree/master/netaddr/strategy/eui48.py,,test_strategy_eui48,"int_val = int(''.join(['%.4x' % int(w, 16) for w in words]), 16)","def my_comprehension_func(int):
    tmp_ListComp0 = []
    for w in words:
        tmp_ListComp0.append('%.4x' % int(w, 16))
    return tmp_ListComp0

int_val = int(''.join(my_comprehension_func(int)), 16)
",1,"[['https://github.com/netaddr/netaddr/tree/master/netaddr/tests/strategy/test_eui48_strategy.py', 'netaddr.tests.strategy.test_eui48_strategy', '', 'test_strategy_eui48_alternate_dialect'], ['https://github.com/netaddr/netaddr/tree/master/netaddr/tests/strategy/test_eui48_strategy.py', 'netaddr.tests.strategy.test_eui48_strategy', '', 'test_strategy_eui48']]"
netaddr,https://github.com/netaddr/netaddr/tree/master/netaddr/strategy/eui48.py,,test_strategy_eui48,"int_val = int(''.join(['%.6x' % int(w, 16) for w in words]), 16)","def my_comprehension_func(int):
    tmp_ListComp0 = []
    for w in words:
        tmp_ListComp0.append('%.6x' % int(w, 16))
    return tmp_ListComp0

int_val = int(''.join(my_comprehension_func(int)), 16)
",1,"[['https://github.com/netaddr/netaddr/tree/master/netaddr/tests/strategy/test_eui48_strategy.py', 'netaddr.tests.strategy.test_eui48_strategy', '', 'test_strategy_eui48_alternate_dialect'], ['https://github.com/netaddr/netaddr/tree/master/netaddr/tests/strategy/test_eui48_strategy.py', 'netaddr.tests.strategy.test_eui48_strategy', '', 'test_strategy_eui48']]"
netaddr,https://github.com/netaddr/netaddr/tree/master/netaddr/strategy/eui48.py,,test_strategy_eui48,tokens = [dialect.word_fmt % i for i in words],"
tokens = []
for i in words:
    tokens.append(dialect.word_fmt % i)
",1,"[['https://github.com/netaddr/netaddr/tree/master/netaddr/tests/strategy/test_eui48_strategy.py', 'netaddr.tests.strategy.test_eui48_strategy', '', 'test_strategy_eui48_alternate_dialect'], ['https://github.com/netaddr/netaddr/tree/master/netaddr/tests/strategy/test_eui48_strategy.py', 'netaddr.tests.strategy.test_eui48_strategy', '', 'test_strategy_eui48']]"
netaddr,https://github.com/netaddr/netaddr/tree/master/netaddr/strategy/ipv4.py,,test_strategy_inet_aton_behaviour,addr = '.'.join(['%d' % int(i) for i in addr.split('.')]),"tmp_ListComp0 = []
for i in addr.split('.'):
    tmp_ListComp0.append('%d' % int(i))

addr = '.'.join(tmp_ListComp0)
",1,"[['https://github.com/netaddr/netaddr/tree/master/netaddr/tests/strategy/test_ipv4_strategy.py', 'netaddr.tests.strategy.test_ipv4_strategy', '', 'test_strategy_inet_pton_behaviour'], ['https://github.com/netaddr/netaddr/tree/master/netaddr/tests/strategy/test_ipv4_strategy.py', 'netaddr.tests.strategy.test_ipv4_strategy', '', 'test_strategy_inet_aton_behaviour']]"
netaddr,https://github.com/netaddr/netaddr/tree/master/netaddr/strategy/ipv4.py,,test_expand_partial_address,tokens = ['%d' % int(o) for o in addr.split('.')],"
tokens = []
for o in addr.split('.'):
    tokens.append('%d' % int(o))
",1,"[['https://github.com/netaddr/netaddr/tree/master/netaddr/tests/ip/test_old_specs.py', 'netaddr.tests.ip.test_old_specs', '', 'test_expand_partial_address']]"
netaddr,https://github.com/netaddr/netaddr/tree/master/netaddr/strategy/ipv6.py,,test_ip_behaviour_non_osx,tokens = [dialect.word_fmt % word for word in words],"
tokens = []
for word in words:
    tokens.append(dialect.word_fmt % word)
",1,"[['https://github.com/netaddr/netaddr/tree/master/netaddr/tests/strategy/test_ipv6_strategy.py', 'netaddr.tests.strategy.test_ipv6_strategy', '', 'test_strategy_ipv6'], ['https://github.com/netaddr/netaddr/tree/master/netaddr/tests/strategy/test_ipv6_strategy.py', 'netaddr.tests.strategy.test_ipv6_strategy', '', 'test_strategy_ipv6_mapped_and_compatible_ipv4_string_formatting'], ['https://github.com/netaddr/netaddr/tree/master/netaddr/tests/ip/test_platform_osx.py', 'netaddr.tests.ip.test_platform_osx', '', 'test_ip_behaviour_non_osx']]"
python-twitter,https://github.com/bear/python-twitter/tree/master/twitter/twitter_utils.py,ApiTest,test_parse_args,"return ','.join([str(item) for item in out])","tmp_ListComp0 = []
for item in out:
    tmp_ListComp0.append(str(item))

return ','.join(tmp_ListComp0)
",1,"[['https://github.com/bear/python-twitter/tree/master/tests/test_twitter_utils.py', 'tests.test_twitter_utils', 'ApiTest', 'test_parse_args']]"
python-twitter,https://github.com/bear/python-twitter/tree/master/twitter/api.py,,test_get_direct_messages,return [DirectMessage.NewFromJsonDict(x) for x in data],"tmp_ListComp0 = []
for x in data:
    tmp_ListComp0.append(DirectMessage.NewFromJsonDict(x))

return tmp_ListComp0
",1,"[['https://github.com/bear/python-twitter/tree/master/tests/test_direct_messages.py', 'tests.test_direct_messages', '', 'test_get_direct_messages']]"
python-twitter,https://github.com/bear/python-twitter/tree/master/twitter/models.py,ModelsTest,test_status_no_user,urls = [Url.NewFromJsonDict(u) for u in data['entities']['urls']],"
urls = []
for u in data['entities']['urls']:
    urls.append(Url.NewFromJsonDict(u))
",1,"[['https://github.com/bear/python-twitter/tree/master/tests/test_media.py', 'tests.test_media', 'MediaTest', 'test_media_info'], ['https://github.com/bear/python-twitter/tree/master/tests/test_models.py', 'tests.test_models', 'ModelsTest', 'test_status_quoted_tweet_with_media'], ['https://github.com/bear/python-twitter/tree/master/tests/test_streaming.py', 'tests.test_streaming', '', 'test_streaming_extended_tweet_media'], ['https://github.com/bear/python-twitter/tree/master/tests/test_streaming.py', 'tests.test_streaming', '', 'test_streaming_extended_tweet'], ['https://github.com/bear/python-twitter/tree/master/tests/test_models.py', 'tests.test_models', 'ModelsTest', 'test_status_quoted_tweet'], ['https://github.com/bear/python-twitter/tree/master/tests/test_tweet_changes.py', 'tests.test_tweet_changes', 'ModelsChangesTest', 'test_extended_in_compat_mode'], ['https://github.com/bear/python-twitter/tree/master/tests/test_models.py', 'tests.test_models', 'ModelsTest', 'test_status'], ['https://github.com/bear/python-twitter/tree/master/tests/test_tweet_changes.py', 'tests.test_tweet_changes', 'ModelsChangesTest', 'test_extended_in_extended_mode'], ['https://github.com/bear/python-twitter/tree/master/tests/test_models.py', 'tests.test_models', 'ModelsTest', 'test_status_no_user']]"
python-twitter,https://github.com/bear/python-twitter/tree/master/twitter/models.py,ModelsTest,test_status_no_user,user_mentions = [User.NewFromJsonDict(u) for u in data['entities']['user_mentions']],"
user_mentions = []
for u in data['entities']['user_mentions']:
    user_mentions.append(User.NewFromJsonDict(u))
",1,"[['https://github.com/bear/python-twitter/tree/master/tests/test_media.py', 'tests.test_media', 'MediaTest', 'test_media_info'], ['https://github.com/bear/python-twitter/tree/master/tests/test_models.py', 'tests.test_models', 'ModelsTest', 'test_status_quoted_tweet_with_media'], ['https://github.com/bear/python-twitter/tree/master/tests/test_streaming.py', 'tests.test_streaming', '', 'test_streaming_extended_tweet_media'], ['https://github.com/bear/python-twitter/tree/master/tests/test_streaming.py', 'tests.test_streaming', '', 'test_streaming_extended_tweet'], ['https://github.com/bear/python-twitter/tree/master/tests/test_models.py', 'tests.test_models', 'ModelsTest', 'test_status_quoted_tweet'], ['https://github.com/bear/python-twitter/tree/master/tests/test_tweet_changes.py', 'tests.test_tweet_changes', 'ModelsChangesTest', 'test_extended_in_compat_mode'], ['https://github.com/bear/python-twitter/tree/master/tests/test_models.py', 'tests.test_models', 'ModelsTest', 'test_status'], ['https://github.com/bear/python-twitter/tree/master/tests/test_tweet_changes.py', 'tests.test_tweet_changes', 'ModelsChangesTest', 'test_extended_in_extended_mode'], ['https://github.com/bear/python-twitter/tree/master/tests/test_models.py', 'tests.test_models', 'ModelsTest', 'test_status_no_user']]"
python-twitter,https://github.com/bear/python-twitter/tree/master/twitter/models.py,ModelsTest,test_status_no_user,hashtags = [Hashtag.NewFromJsonDict(h) for h in data['entities']['hashtags']],"
hashtags = []
for h in data['entities']['hashtags']:
    hashtags.append(Hashtag.NewFromJsonDict(h))
",1,"[['https://github.com/bear/python-twitter/tree/master/tests/test_media.py', 'tests.test_media', 'MediaTest', 'test_media_info'], ['https://github.com/bear/python-twitter/tree/master/tests/test_models.py', 'tests.test_models', 'ModelsTest', 'test_status_quoted_tweet_with_media'], ['https://github.com/bear/python-twitter/tree/master/tests/test_streaming.py', 'tests.test_streaming', '', 'test_streaming_extended_tweet_media'], ['https://github.com/bear/python-twitter/tree/master/tests/test_streaming.py', 'tests.test_streaming', '', 'test_streaming_extended_tweet'], ['https://github.com/bear/python-twitter/tree/master/tests/test_models.py', 'tests.test_models', 'ModelsTest', 'test_status_quoted_tweet'], ['https://github.com/bear/python-twitter/tree/master/tests/test_tweet_changes.py', 'tests.test_tweet_changes', 'ModelsChangesTest', 'test_extended_in_compat_mode'], ['https://github.com/bear/python-twitter/tree/master/tests/test_models.py', 'tests.test_models', 'ModelsTest', 'test_status'], ['https://github.com/bear/python-twitter/tree/master/tests/test_tweet_changes.py', 'tests.test_tweet_changes', 'ModelsChangesTest', 'test_extended_in_extended_mode'], ['https://github.com/bear/python-twitter/tree/master/tests/test_models.py', 'tests.test_models', 'ModelsTest', 'test_status_no_user']]"
python-twitter,https://github.com/bear/python-twitter/tree/master/twitter/models.py,ModelsTest,test_status_no_user,media = [Media.NewFromJsonDict(m) for m in data['entities']['media']],"
media = []
for m in data['entities']['media']:
    media.append(Media.NewFromJsonDict(m))
",1,"[['https://github.com/bear/python-twitter/tree/master/tests/test_media.py', 'tests.test_media', 'MediaTest', 'test_media_info'], ['https://github.com/bear/python-twitter/tree/master/tests/test_models.py', 'tests.test_models', 'ModelsTest', 'test_status_quoted_tweet_with_media'], ['https://github.com/bear/python-twitter/tree/master/tests/test_streaming.py', 'tests.test_streaming', '', 'test_streaming_extended_tweet_media'], ['https://github.com/bear/python-twitter/tree/master/tests/test_streaming.py', 'tests.test_streaming', '', 'test_streaming_extended_tweet'], ['https://github.com/bear/python-twitter/tree/master/tests/test_models.py', 'tests.test_models', 'ModelsTest', 'test_status_quoted_tweet'], ['https://github.com/bear/python-twitter/tree/master/tests/test_tweet_changes.py', 'tests.test_tweet_changes', 'ModelsChangesTest', 'test_extended_in_compat_mode'], ['https://github.com/bear/python-twitter/tree/master/tests/test_models.py', 'tests.test_models', 'ModelsTest', 'test_status'], ['https://github.com/bear/python-twitter/tree/master/tests/test_tweet_changes.py', 'tests.test_tweet_changes', 'ModelsChangesTest', 'test_extended_in_extended_mode'], ['https://github.com/bear/python-twitter/tree/master/tests/test_models.py', 'tests.test_models', 'ModelsTest', 'test_status_no_user']]"
python-twitter,https://github.com/bear/python-twitter/tree/master/twitter/models.py,ModelsTest,test_status_no_user,media = [Media.NewFromJsonDict(m) for m in data['extended_entities']['media']],"
media = []
for m in data['extended_entities']['media']:
    media.append(Media.NewFromJsonDict(m))
",1,"[['https://github.com/bear/python-twitter/tree/master/tests/test_media.py', 'tests.test_media', 'MediaTest', 'test_media_info'], ['https://github.com/bear/python-twitter/tree/master/tests/test_models.py', 'tests.test_models', 'ModelsTest', 'test_status_quoted_tweet_with_media'], ['https://github.com/bear/python-twitter/tree/master/tests/test_streaming.py', 'tests.test_streaming', '', 'test_streaming_extended_tweet_media'], ['https://github.com/bear/python-twitter/tree/master/tests/test_streaming.py', 'tests.test_streaming', '', 'test_streaming_extended_tweet'], ['https://github.com/bear/python-twitter/tree/master/tests/test_models.py', 'tests.test_models', 'ModelsTest', 'test_status_quoted_tweet'], ['https://github.com/bear/python-twitter/tree/master/tests/test_tweet_changes.py', 'tests.test_tweet_changes', 'ModelsChangesTest', 'test_extended_in_compat_mode'], ['https://github.com/bear/python-twitter/tree/master/tests/test_models.py', 'tests.test_models', 'ModelsTest', 'test_status'], ['https://github.com/bear/python-twitter/tree/master/tests/test_tweet_changes.py', 'tests.test_tweet_changes', 'ModelsChangesTest', 'test_extended_in_extended_mode'], ['https://github.com/bear/python-twitter/tree/master/tests/test_models.py', 'tests.test_models', 'ModelsTest', 'test_status_no_user']]"
spiderfoot,https://github.com/smicallef/spiderfoot/tree/master//sflib.py,TestSpiderFoot,test_domain_keywords_invalid_domainlist_should_return_a_set,return set([k for k in keywords if k]),"tmp_ListComp0 = []
for k in keywords:
    if k:
        tmp_ListComp0.append(k)

return set(tmp_ListComp0)
",1,"[['https://github.com/smicallef/spiderfoot/tree/master/test/unit/test_spiderfoot.py', 'test.unit.test_spiderfoot', 'TestSpiderFoot', 'test_domain_keywords_should_return_a_set'], ['https://github.com/smicallef/spiderfoot/tree/master/test/unit/test_spiderfoot.py', 'test.unit.test_spiderfoot', 'TestSpiderFoot', 'test_domain_keywords_invalid_domainlist_should_return_a_set']]"
glom,https://github.com/mahmoud/glom/tree/master/glom/core.py,,test_faulty_op_registration,"known_types = set(sum([list(m.keys()) for m in self._op_type_map.values()], []))","tmp_ListComp0 = []
for m in self._op_type_map.values():
    tmp_ListComp0.append(list(m.keys()))

known_types = set(sum(tmp_ListComp0, []))
",1,"[['https://github.com/mahmoud/glom/tree/master/glom/test/test_target_types.py', 'glom.test.test_target_types', '', 'test_faulty_op_registration']]"
markovify,https://github.com/jsvine/markovify/tree/master/markovify/utils.py,MarkovifyTest,test_mismatched_state_sizes,state_sizes = [len(list(md.keys())[0]) for md in model_dicts],"
state_sizes = []
for md in model_dicts:
    state_sizes.append(len(list(md.keys())[0]))
",1,"[['https://github.com/jsvine/markovify/tree/master/test/test_combine.py', 'test.test_combine', 'MarkovifyTest', 'test_combine_no_retain'], ['https://github.com/jsvine/markovify/tree/master/test/test_combine.py', 'test.test_combine', 'MarkovifyTest', 'test_bad_types'], ['https://github.com/jsvine/markovify/tree/master/test/test_combine.py', 'test.test_combine', 'MarkovifyTest', 'test_double_weighted'], ['https://github.com/jsvine/markovify/tree/master/test/test_combine.py', 'test.test_combine', 'MarkovifyTest', 'test_compiled_chain_fail'], ['https://github.com/jsvine/markovify/tree/master/test/test_combine.py', 'test.test_combine', 'MarkovifyTest', 'test_bad_weights'], ['https://github.com/jsvine/markovify/tree/master/test/test_itertext.py', 'test.test_itertext', 'MarkovifyTest', 'test_from_mult_files_without_retaining'], ['https://github.com/jsvine/markovify/tree/master/test/test_combine.py', 'test.test_combine', 'MarkovifyTest', 'test_combine_lists'], ['https://github.com/jsvine/markovify/tree/master/test/test_combine.py', 'test.test_combine', 'MarkovifyTest', 'test_mismatched_model_types'], ['https://github.com/jsvine/markovify/tree/master/test/test_combine.py', 'test.test_combine', 'MarkovifyTest', 'test_combine_chains'], ['https://github.com/jsvine/markovify/tree/master/test/test_combine.py', 'test.test_combine', 'MarkovifyTest', 'test_simple'], ['https://github.com/jsvine/markovify/tree/master/test/test_combine.py', 'test.test_combine', 'MarkovifyTest', 'test_combine_no_retain_on_retain'], ['https://github.com/jsvine/markovify/tree/master/test/test_combine.py', 'test.test_combine', 'MarkovifyTest', 'test_compiled_model_fail'], ['https://github.com/jsvine/markovify/tree/master/test/test_combine.py', 'test.test_combine', 'MarkovifyTest', 'test_combine_dicts'], ['https://github.com/jsvine/markovify/tree/master/test/test_combine.py', 'test.test_combine', 'MarkovifyTest', 'test_combine_retain_on_no_retain'], ['https://github.com/jsvine/markovify/tree/master/test/test_combine.py', 'test.test_combine', 'MarkovifyTest', 'test_mismatched_state_sizes']]"
markovify,https://github.com/jsvine/markovify/tree/master/markovify/utils.py,MarkovifyTest,test_mismatched_state_sizes,weights = [1 for _ in range(len(models))],"
weights = []
for _ in range(len(models)):
    weights.append(1)
",1,"[['https://github.com/jsvine/markovify/tree/master/test/test_combine.py', 'test.test_combine', 'MarkovifyTest', 'test_combine_no_retain'], ['https://github.com/jsvine/markovify/tree/master/test/test_combine.py', 'test.test_combine', 'MarkovifyTest', 'test_bad_types'], ['https://github.com/jsvine/markovify/tree/master/test/test_combine.py', 'test.test_combine', 'MarkovifyTest', 'test_double_weighted'], ['https://github.com/jsvine/markovify/tree/master/test/test_combine.py', 'test.test_combine', 'MarkovifyTest', 'test_compiled_chain_fail'], ['https://github.com/jsvine/markovify/tree/master/test/test_combine.py', 'test.test_combine', 'MarkovifyTest', 'test_bad_weights'], ['https://github.com/jsvine/markovify/tree/master/test/test_itertext.py', 'test.test_itertext', 'MarkovifyTest', 'test_from_mult_files_without_retaining'], ['https://github.com/jsvine/markovify/tree/master/test/test_combine.py', 'test.test_combine', 'MarkovifyTest', 'test_combine_lists'], ['https://github.com/jsvine/markovify/tree/master/test/test_combine.py', 'test.test_combine', 'MarkovifyTest', 'test_mismatched_model_types'], ['https://github.com/jsvine/markovify/tree/master/test/test_combine.py', 'test.test_combine', 'MarkovifyTest', 'test_combine_chains'], ['https://github.com/jsvine/markovify/tree/master/test/test_combine.py', 'test.test_combine', 'MarkovifyTest', 'test_simple'], ['https://github.com/jsvine/markovify/tree/master/test/test_combine.py', 'test.test_combine', 'MarkovifyTest', 'test_combine_no_retain_on_retain'], ['https://github.com/jsvine/markovify/tree/master/test/test_combine.py', 'test.test_combine', 'MarkovifyTest', 'test_compiled_model_fail'], ['https://github.com/jsvine/markovify/tree/master/test/test_combine.py', 'test.test_combine', 'MarkovifyTest', 'test_combine_dicts'], ['https://github.com/jsvine/markovify/tree/master/test/test_combine.py', 'test.test_combine', 'MarkovifyTest', 'test_combine_retain_on_no_retain'], ['https://github.com/jsvine/markovify/tree/master/test/test_combine.py', 'test.test_combine', 'MarkovifyTest', 'test_mismatched_state_sizes']]"
dtaidistance,https://github.com/wannesm/dtaidistance/tree/master/dtaidistance/dtw.py,,test_distance_matrix1_parallel_python,"dists = p.map(_distance_c_with_params, [(s[r], s[c], dist_opts) for (c, r) in zip(*idxs)])","tmp_ListComp0 = []
for (c, r) in zip(*idxs):
    tmp_ListComp0.append((s[r], s[c], dist_opts))

dists = p.map(_distance_c_with_params, tmp_ListComp0)
",1,"[['https://github.com/wannesm/dtaidistance/tree/master/tests/test_benchmark.py', 'tests.test_benchmark', '', 'test_distance_matrix1_serial_python'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_benchmark.py', 'tests.test_benchmark', '', 'test_distance_matrix1_parallel_python']]"
dtaidistance,https://github.com/wannesm/dtaidistance/tree/master/dtaidistance/dtw.py,,test_distance_matrix1_parallel_python,"dists = p.map(_distance_with_params, [(s[r], s[c], dist_opts) for (c, r) in zip(*idxs)])","tmp_ListComp0 = []
for (c, r) in zip(*idxs):
    tmp_ListComp0.append((s[r], s[c], dist_opts))

dists = p.map(_distance_with_params, tmp_ListComp0)
",1,"[['https://github.com/wannesm/dtaidistance/tree/master/tests/test_benchmark.py', 'tests.test_benchmark', '', 'test_distance_matrix1_serial_python'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_benchmark.py', 'tests.test_benchmark', '', 'test_distance_matrix1_parallel_python']]"
extruct,https://github.com/scrapinghub/extruct/tree/master/extruct/uniform.py,TestUniform,test_flatten,"element = [flatten_dict(o, schema_context, False) if isinstance(o, dict) else o for o in element]","tmp_ListComp0 = []
for o in element:
    if isinstance(o, dict):
        tmp_ListComp0.append(flatten_dict(o, schema_context, False))
    else:
        tmp_ListComp0.append(o)

element = tmp_ListComp0
",1,"[['https://github.com/scrapinghub/extruct/tree/master/tests/test_uniform.py', 'tests.test_uniform', 'TestUniform', 'test_flatten']]"
netutils-linux,https://github.com/strizhechenko/netutils-linux/tree/master/netutils_linux_monitoring/softnet_stat.py,SoftnetStatTests,test_delta,"row = [int('0x' + x, 16) for x in row.strip().split()]","tmp_ListComp0 = []
for x in row.strip().split():
    tmp_ListComp0.append(int('0x' + x, 16))

row = tmp_ListComp0
",1,"[['https://github.com/strizhechenko/netutils-linux/tree/master/netutils_linux_monitoring/test_softnet_stat.py', 'netutils_linux_monitoring.test_softnet_stat', 'SoftnetStatTests', 'test_delta']]"
netutils-linux,https://github.com/strizhechenko/netutils-linux/tree/master/netutils_linux_monitoring/softirqs.py,SoftirqsTest,test_file2data,metrics = [line.strip().split(':') for line in softirq_file.readlines() if ':' in line],"
metrics = []
for line in softirq_file.readlines():
    if ':' in line:
        metrics.append(line.strip().split(':'))
",1,"[['https://github.com/strizhechenko/netutils-linux/tree/master/netutils_linux_monitoring/test_softirqs.py', 'netutils_linux_monitoring.test_softirqs', 'SoftirqsTest', 'test_file2data']]"
netutils-linux,https://github.com/strizhechenko/netutils-linux/tree/master/netutils_linux_monitoring/softirqs.py,SoftirqsTest,test_file2data,"return dict(((k, [int(d) for d in v.strip().split()]) for (k, v) in metrics))","def my_comprehension_func(v):
    tmp_ListComp0 = []
    for d in v.strip().split():
        tmp_ListComp0.append(int(d))
    return tmp_ListComp0

return dict(((k, my_comprehension_func(v)) for (k, v) in metrics))
",1,"[['https://github.com/strizhechenko/netutils-linux/tree/master/netutils_linux_monitoring/test_softirqs.py', 'netutils_linux_monitoring.test_softirqs', 'SoftirqsTest', 'test_file2data']]"
colorful,https://github.com/timofurrer/colorful/tree/master/colorful/core.py,,test_colorful_direct_print,styled_objects = [self.format(o) for o in objects],"
styled_objects = []
for o in objects:
    styled_objects.append(self.format(o))
",1,"[['https://github.com/timofurrer/colorful/tree/master/tests/test_core.py', 'tests.test_core', '', 'test_colorful_print_wrong_argument'], ['https://github.com/timofurrer/colorful/tree/master/tests/test_core.py', 'tests.test_core', '', 'test_colorful_direct_print']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/convert.py,TestConvert,test_with_multiedges_self_loops,d[n] = [nbr for nbr in G.neighbors(n) if nbr in nodelist],"tmp_ListComp0 = []
for nbr in G.neighbors(n):
    if nbr in nodelist:
        tmp_ListComp0.append(nbr)

d[n] = tmp_ListComp0
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/tests/test_convert.py', 'networkx.tests.test_convert', 'TestConvert', 'test_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_convert.py', 'networkx.tests.test_convert', 'TestConvert', 'test_with_multiedges_self_loops']]"
gmplot,https://github.com/gmplot/gmplot/tree/master/gmplot/drawables/route.py,RouteTest,test_write,"[w.write('{location: %s, stopover: false},' % waypoint) for waypoint in self._waypoints]","tmp_ListComp0 = []
for waypoint in self._waypoints:
    tmp_ListComp0.append(w.write('{location: %s, stopover: false},' % waypoint))

tmp_ListComp0
",1,"[['https://github.com/gmplot/gmplot/tree/master/tests/test_gmplot.py', 'tests.test_gmplot', 'RouteTest', 'test_write_waypoints'], ['https://github.com/gmplot/gmplot/tree/master/tests/test_gmplot.py', 'tests.test_gmplot', 'RouteTest', 'test_write']]"
toolz,https://github.com/pytoolz/toolz/tree/master/toolz/_signatures.py,,test_for_coverage,"checks = [check_arity(n, sig) for sig in sigs]","
checks = []
for sig in sigs:
    checks.append(check_arity(n, sig))
",1,"[['https://github.com/pytoolz/toolz/tree/master/toolz/tests/test_signatures.py', 'toolz.tests.test_signatures', '', 'test_for_coverage']]"
toolz,https://github.com/pytoolz/toolz/tree/master/toolz/_signatures.py,,test_for_coverage,checks = [check_varargs(sig) for sig in sigs],"
checks = []
for sig in sigs:
    checks.append(check_varargs(sig))
",1,"[['https://github.com/pytoolz/toolz/tree/master/toolz/tests/test_signatures.py', 'toolz.tests.test_signatures', '', 'test_for_coverage']]"
toolz,https://github.com/pytoolz/toolz/tree/master/toolz/_signatures.py,,test_for_coverage,checks = [check_keywords(sig) for sig in sigs],"
checks = []
for sig in sigs:
    checks.append(check_keywords(sig))
",1,"[['https://github.com/pytoolz/toolz/tree/master/toolz/tests/test_signatures.py', 'toolz.tests.test_signatures', '', 'test_for_coverage']]"
toolz,https://github.com/pytoolz/toolz/tree/master/toolz/_signatures.py,,test_for_coverage,vals = [check_required_args(sig) for sig in sigs],"
vals = []
for sig in sigs:
    vals.append(check_required_args(sig))
",1,"[['https://github.com/pytoolz/toolz/tree/master/toolz/tests/test_signatures.py', 'toolz.tests.test_signatures', '', 'test_for_coverage']]"
docopt,https://github.com/docopt/docopt/tree/master//docopt.py,,test_pattern_either,return Either(*[Required(*e) for e in result]),"tmp_ListComp0 = []
for e in result:
    tmp_ListComp0.append(Required(*e))

return Either(*tmp_ListComp0)
",1,"[['https://github.com/docopt/docopt/tree/master//test_docopt.py', 'test_docopt', '', 'test_pattern_either']]"
docopt,https://github.com/docopt/docopt/tree/master//docopt.py,,test_pattern_either,child = [c for c in children if type(c) in parents][0],"tmp_ListComp0 = []
for c in children:
    if type(c) in parents:
        tmp_ListComp0.append(c)

child = tmp_ListComp0[0]
",1,"[['https://github.com/docopt/docopt/tree/master//test_docopt.py', 'test_docopt', '', 'test_pattern_either']]"
docopt,https://github.com/docopt/docopt/tree/master//docopt.py,,test_parse_argv,"return parsed + [Argument(None, v) for v in tokens]","tmp_ListComp0 = []
for v in tokens:
    tmp_ListComp0.append(Argument(None, v))

return parsed + tmp_ListComp0
",1,"[['https://github.com/docopt/docopt/tree/master//test_docopt.py', 'test_docopt', '', 'test_parse_argv']]"
docopt,https://github.com/docopt/docopt/tree/master//docopt.py,,test_parse_argv,"return parsed + [Argument(None, v) for v in tokens]","tmp_ListComp0 = []
for v in tokens:
    tmp_ListComp0.append(Argument(None, v))

return parsed + tmp_ListComp0
",1,"[['https://github.com/docopt/docopt/tree/master//test_docopt.py', 'test_docopt', '', 'test_parse_argv']]"
docopt,https://github.com/docopt/docopt/tree/master//docopt.py,,test_issue_126_defaults_not_parsed_correctly_when_tabs,"split = [s1 + s2 for (s1, s2) in zip(split[::2], split[1::2])]","tmp_ListComp0 = []
for (s1, s2) in zip(split[::2], split[1::2]):
    tmp_ListComp0.append(s1 + s2)

split = tmp_ListComp0
",1,"[['https://github.com/docopt/docopt/tree/master//test_docopt.py', 'test_docopt', '', 'test_issue_126_defaults_not_parsed_correctly_when_tabs']]"
docopt,https://github.com/docopt/docopt/tree/master//docopt.py,,test_issue_126_defaults_not_parsed_correctly_when_tabs,options = [Option.parse(s) for s in split if s.startswith('-')],"
options = []
for s in split:
    if s.startswith('-'):
        options.append(Option.parse(s))
",1,"[['https://github.com/docopt/docopt/tree/master//test_docopt.py', 'test_docopt', '', 'test_issue_126_defaults_not_parsed_correctly_when_tabs']]"
docopt,https://github.com/docopt/docopt/tree/master//docopt.py,,test_parse_section,return [s.strip() for s in pattern.findall(source)],"tmp_ListComp0 = []
for s in pattern.findall(source):
    tmp_ListComp0.append(s.strip())

return tmp_ListComp0
",1,"[['https://github.com/docopt/docopt/tree/master//test_docopt.py', 'test_docopt', '', 'test_formal_usage'], ['https://github.com/docopt/docopt/tree/master//test_docopt.py', 'test_docopt', '', 'test_parse_section']]"
textrank,https://github.com/summanlp/textrank/tree/master/summa/summarizer.py,TestSummarizer,test_reference_text_summarization,graph = _build_graph([sentence.token for sentence in sentences]),"tmp_ListComp0 = []
for sentence in sentences:
    tmp_ListComp0.append(sentence.token)

graph = _build_graph(tmp_ListComp0)
",1,"[['https://github.com/summanlp/textrank/tree/master/test/test_summarizer.py', 'test.test_summarizer', 'TestSummarizer', 'test_text_as_bytes_raises_exception'], ['https://github.com/summanlp/textrank/tree/master/test/test_summarizer.py', 'test.test_summarizer', 'TestSummarizer', 'test_text_summarization_on_single_input_sentence_is_empty_string'], ['https://github.com/summanlp/textrank/tree/master/test/test_summarizer.py', 'test.test_summarizer', 'TestSummarizer', 'test_few_distinct_words_summarization_wstopwords_is_empty_string'], ['https://github.com/summanlp/textrank/tree/master/test/test_summarizer.py', 'test.test_summarizer', 'TestSummarizer', 'test_few_distinct_words_summarization_with_split_is_empty_list'], ['https://github.com/summanlp/textrank/tree/master/test/test_summarizer.py', 'test.test_summarizer', 'TestSummarizer', 'test_reference_text_summarization_wstopwords'], ['https://github.com/summanlp/textrank/tree/master/test/test_summarizer.py', 'test.test_summarizer', 'TestSummarizer', 'test_corpus_summarization_ratio'], ['https://github.com/summanlp/textrank/tree/master/test/test_summarizer.py', 'test.test_summarizer', 'TestSummarizer', 'test_empty_text_summarization_is_empty_string'], ['https://github.com/summanlp/textrank/tree/master/test/test_summarizer.py', 'test.test_summarizer', 'TestSummarizer', 'test_text_summarization_on_short_input_text_with_split_is_not_empty_list'], ['https://github.com/summanlp/textrank/tree/master/test/test_summarizer.py', 'test.test_summarizer', 'TestSummarizer', 'test_spanish'], ['https://github.com/summanlp/textrank/tree/master/test/test_summarizer.py', 'test.test_summarizer', 'TestSummarizer', 'test_arabic'], ['https://github.com/summanlp/textrank/tree/master/test/test_summarizer.py', 'test.test_summarizer', 'TestSummarizer', 'test_text_summarization_on_short_input_text_is_not_empty_string'], ['https://github.com/summanlp/textrank/tree/master/test/test_summarizer.py', 'test.test_summarizer', 'TestSummarizer', 'test_reference_text_summarization_with_split'], ['https://github.com/summanlp/textrank/tree/master/test/test_summarizer.py', 'test.test_summarizer', 'TestSummarizer', 'test_text_summarization_on_single_input_sentence_with_split_is_empty_list'], ['https://github.com/summanlp/textrank/tree/master/test/test_summarizer.py', 'test.test_summarizer', 'TestSummarizer', 'test_polish'], ['https://github.com/summanlp/textrank/tree/master/test/test_summarizer.py', 'test.test_summarizer', 'TestSummarizer', 'test_summary_from_unrelated_sentences_and_split_is_not_empty_list'], ['https://github.com/summanlp/textrank/tree/master/test/test_summarizer.py', 'test.test_summarizer', 'TestSummarizer', 'test_empty_text_summarization_with_split_is_empty_list'], ['https://github.com/summanlp/textrank/tree/master/test/test_summarizer.py', 'test.test_summarizer', 'TestSummarizer', 'test_few_distinct_words_summarization_is_empty_string'], ['https://github.com/summanlp/textrank/tree/master/test/test_summarizer.py', 'test.test_summarizer', 'TestSummarizer', 'test_reference_text_summarization_wstopwords_with_split'], ['https://github.com/summanlp/textrank/tree/master/test/test_summarizer.py', 'test.test_summarizer', 'TestSummarizer', 'test_few_distinct_words_summarization_wstopwords_with_split_is_empty_list'], ['https://github.com/summanlp/textrank/tree/master/test/test_summarizer.py', 'test.test_summarizer', 'TestSummarizer', 'test_summary_from_unrelated_sentences_is_not_empty_string'], ['https://github.com/summanlp/textrank/tree/master/test/test_summarizer.py', 'test.test_summarizer', 'TestSummarizer', 'test_reference_text_summarization']]"
pinject,https://github.com/google/pinject/tree/master/pinject/decorators.py,GetProviderFnDecorationsTest,test_returns_defaults_for_undecorated_fn,"return [ProviderDecoration(default_arg_name, annotated_with=None, in_scope_id=scoping.DEFAULT_SCOPE) for default_arg_name in default_arg_names]","tmp_ListComp0 = []
for default_arg_name in default_arg_names:
    tmp_ListComp0.append(ProviderDecoration(default_arg_name, annotated_with=None, in_scope_id=scoping.DEFAULT_SCOPE))

return tmp_ListComp0
",1,"[['https://github.com/google/pinject/tree/master/tests/decorators_test.py', 'tests.decorators_test', 'GetProviderFnDecorationsTest', 'test_returns_defaults_if_no_values_set'], ['https://github.com/google/pinject/tree/master/tests/decorators_test.py', 'tests.decorators_test', 'GetProviderFnDecorationsTest', 'test_returns_set_values_if_set'], ['https://github.com/google/pinject/tree/master/tests/decorators_test.py', 'tests.decorators_test', 'GetProviderFnDecorationsTest', 'test_returns_defaults_for_undecorated_fn']]"
pinject,https://github.com/google/pinject/tree/master/pinject/decorators.py,GetProviderFnDecorationsTest,test_returns_defaults_for_undecorated_fn,"expanded_provider_decorations.extend([ProviderDecoration(default_arg_name, provider_decoration.annotated_with, provider_decoration.in_scope_id) for default_arg_name in default_arg_names])","tmp_ListComp0 = []
for default_arg_name in default_arg_names:
    tmp_ListComp0.append(ProviderDecoration(default_arg_name, provider_decoration.annotated_with, provider_decoration.in_scope_id))

expanded_provider_decorations.extend(tmp_ListComp0)
",1,"[['https://github.com/google/pinject/tree/master/tests/decorators_test.py', 'tests.decorators_test', 'GetProviderFnDecorationsTest', 'test_returns_defaults_if_no_values_set'], ['https://github.com/google/pinject/tree/master/tests/decorators_test.py', 'tests.decorators_test', 'GetProviderFnDecorationsTest', 'test_returns_set_values_if_set'], ['https://github.com/google/pinject/tree/master/tests/decorators_test.py', 'tests.decorators_test', 'GetProviderFnDecorationsTest', 'test_returns_defaults_for_undecorated_fn']]"
pinject,https://github.com/google/pinject/tree/master/pinject/bindings.py,ProvidesTest,test_multiple_provides_gives_multiple_bindings,"return [Binding(binding_keys.new(provider_decoration.arg_name, provider_decoration.annotated_with), Proviser, GetBindingTargetDescFn, provider_decoration.in_scope_id, lambda p_fn=provider_fn: locations.get_loc(p_fn)) for provider_decoration in provider_decorations]","tmp_ListComp0 = []
for provider_decoration in provider_decorations:
    tmp_ListComp0.append(Binding(binding_keys.new(provider_decoration.arg_name, provider_decoration.annotated_with), Proviser, GetBindingTargetDescFn, provider_decoration.in_scope_id, lambda p_fn=provider_fn: locations.get_loc(p_fn)))

return tmp_ListComp0
",1,"[['https://github.com/google/pinject/tree/master/tests/decorators_test.py', 'tests.decorators_test', 'ProvidesTest', 'test_uses_default_binding_when_arg_name_and_annotation_omitted'], ['https://github.com/google/pinject/tree/master/tests/decorators_test.py', 'tests.decorators_test', 'ProvidesTest', 'test_uses_default_scope_when_not_specified'], ['https://github.com/google/pinject/tree/master/tests/bindings_test.py', 'tests.bindings_test', 'GetProviderFnBindingsTest', 'test_proviser_calls_provider_fn'], ['https://github.com/google/pinject/tree/master/tests/decorators_test.py', 'tests.decorators_test', 'ProvidesTest', 'test_sets_arg_values'], ['https://github.com/google/pinject/tree/master/tests/decorators_test.py', 'tests.decorators_test', 'ProvidesTest', 'test_multiple_provides_gives_multiple_bindings']]"
pinject,https://github.com/google/pinject/tree/master/pinject/arg_binding_keys.py,GetUnboundArgNamesTest,test_all_arg_names_bound,bound_arg_names = [abk._arg_name for abk in arg_binding_keys],"
bound_arg_names = []
for abk in arg_binding_keys:
    bound_arg_names.append(abk._arg_name)
",1,"[['https://github.com/google/pinject/tree/master/tests/arg_binding_keys_test.py', 'tests.arg_binding_keys_test', 'GetUnboundArgNamesTest', 'test_some_arg_name_unbound'], ['https://github.com/google/pinject/tree/master/tests/arg_binding_keys_test.py', 'tests.arg_binding_keys_test', 'GetUnboundArgNamesTest', 'test_all_arg_names_bound']]"
pinject,https://github.com/google/pinject/tree/master/pinject/arg_binding_keys.py,GetUnboundArgNamesTest,test_all_arg_names_bound,return [arg_name for arg_name in arg_names if arg_name not in bound_arg_names],"tmp_ListComp0 = []
for arg_name in arg_names:
    if arg_name not in bound_arg_names:
        tmp_ListComp0.append(arg_name)

return tmp_ListComp0
",1,"[['https://github.com/google/pinject/tree/master/tests/arg_binding_keys_test.py', 'tests.arg_binding_keys_test', 'GetUnboundArgNamesTest', 'test_some_arg_name_unbound'], ['https://github.com/google/pinject/tree/master/tests/arg_binding_keys_test.py', 'tests.arg_binding_keys_test', 'GetUnboundArgNamesTest', 'test_all_arg_names_bound']]"
powerline,https://github.com/powerline/powerline/tree/master/powerline/commands/main.py,TestParser,test_main_normal,"args.config_path = [path for path in environ.get('POWERLINE_CONFIG_PATHS', '').split(':') if path] + (args.config_path or [])","tmp_ListComp0 = []
for path in environ.get('POWERLINE_CONFIG_PATHS', '').split(':'):
    if path:
        tmp_ListComp0.append(path)

args.config_path = tmp_ListComp0 + (args.config_path or [])
",1,"[['https://github.com/powerline/powerline/tree/master/tests/test_python/test_cmdline.py', 'tests.test_python.test_cmdline', 'TestParser', 'test_main_normal']]"
powerline,https://github.com/powerline/powerline/tree/master/powerline/segments/i3wm.py,TestI3WM,test_workspaces,output = [o.name for o in conn.get_outputs() if o.active],"
output = []
for o in conn.get_outputs():
    if o.active:
        output.append(o.name)
",1,"[['https://github.com/powerline/powerline/tree/master/tests/test_python/test_segments.py', 'tests.test_python.test_segments', 'TestI3WM', 'test_workspaces']]"
powerline,https://github.com/powerline/powerline/tree/master/powerline/segments/i3wm.py,TestI3WM,test_workspaces,return result + [w for w in ws if not w.name in priority_workspaces],"tmp_ListComp0 = []
for w in ws:
    if not w.name in priority_workspaces:
        tmp_ListComp0.append(w)

return result + tmp_ListComp0
",1,"[['https://github.com/powerline/powerline/tree/master/tests/test_python/test_segments.py', 'tests.test_python.test_segments', 'TestI3WM', 'test_workspaces']]"
powerline,https://github.com/powerline/powerline/tree/master/powerline/segments/i3wm.py,TestI3WM,test_workspaces,"res += [{'contents': format.format(name=w.name[min(len(w.name), strip):], stripped_name=format_name(w.name, strip=True), number=w.num, icon=get_icon(w, '', icons, False, ws_containers), multi_icon=get_icon(w, ' ', icons, True, ws_containers)), 'highlight_groups': workspace_groups(w)} for w in sort_ws(conn.get_workspaces()) if not only_show or any((getattr(w, tp) for tp in only_show)) if w.output == output[0] if not (hide_empty_workspaces and is_empty_workspace(w, ws_containers))]","tmp_ListComp0 = []
for w in sort_ws(conn.get_workspaces()):
    if not only_show or any((getattr(w, tp) for tp in only_show)):
        if w.output == output[0]:
            if not (hide_empty_workspaces and is_empty_workspace(w, ws_containers)):
                tmp_ListComp0.append({'contents': format.format(name=w.name[min(len(w.name), strip):], stripped_name=format_name(w.name, strip=True), number=w.num, icon=get_icon(w, '', icons, False, ws_containers), multi_icon=get_icon(w, ' ', icons, True, ws_containers)), 'highlight_groups': workspace_groups(w)})

res += tmp_ListComp0
",1,"[['https://github.com/powerline/powerline/tree/master/tests/test_python/test_segments.py', 'tests.test_python.test_segments', 'TestI3WM', 'test_workspaces']]"
powerline,https://github.com/powerline/powerline/tree/master/powerline/segments/i3wm.py,TestI3WM,test_workspaces,result += [w for w in ws if w.name == n],"tmp_ListComp0 = []
for w in ws:
    if w.name == n:
        tmp_ListComp0.append(w)

result += tmp_ListComp0
",1,"[['https://github.com/powerline/powerline/tree/master/tests/test_python/test_segments.py', 'tests.test_python.test_segments', 'TestI3WM', 'test_workspaces']]"
powerline,https://github.com/powerline/powerline/tree/master/powerline/segments/i3wm.py,TestI3WM,test_workspaces,"res += [{'contents': format.format(name=w.name[min(len(w.name), strip):], stripped_name=format_name(w.name, strip=True), number=w.num, icon=get_icon(w, '', icons, False, ws_containers), multi_icon=get_icon(w, ' ', icons, True, ws_containers)), 'highlight_groups': workspace_groups(w)} for w in sort_ws(conn.get_workspaces()) if not only_show or any((getattr(w, tp) for tp in only_show)) if w.output == n if not (hide_empty_workspaces and is_empty_workspace(w, ws_containers))]","tmp_ListComp0 = []
for w in sort_ws(conn.get_workspaces()):
    if not only_show or any((getattr(w, tp) for tp in only_show)):
        if w.output == n:
            if not (hide_empty_workspaces and is_empty_workspace(w, ws_containers)):
                tmp_ListComp0.append({'contents': format.format(name=w.name[min(len(w.name), strip):], stripped_name=format_name(w.name, strip=True), number=w.num, icon=get_icon(w, '', icons, False, ws_containers), multi_icon=get_icon(w, ' ', icons, True, ws_containers)), 'highlight_groups': workspace_groups(w)})

res += tmp_ListComp0
",1,"[['https://github.com/powerline/powerline/tree/master/tests/test_python/test_segments.py', 'tests.test_python.test_segments', 'TestI3WM', 'test_workspaces']]"
powerline,https://github.com/powerline/powerline/tree/master/powerline/segments/i3wm.py,TestI3WM,test_workspaces,"return [int(s) if s.isdigit() else s for s in re.split('(\\d+)', str)]","tmp_ListComp0 = []
for s in re.split('(\\d+)', str):
    if s.isdigit():
        tmp_ListComp0.append(int(s))
    else:
        tmp_ListComp0.append(s)

return tmp_ListComp0
",1,"[['https://github.com/powerline/powerline/tree/master/tests/test_python/test_segments.py', 'tests.test_python.test_segments', 'TestI3WM', 'test_workspaces']]"
powerline,https://github.com/powerline/powerline/tree/master/powerline/segments/shell.py,TestShell,test_last_pipe_status,"return [{'contents': exit_codes[status - 128] if signal_names and status - 128 in exit_codes else str(status), 'highlight_groups': ['exit_fail' if status else 'exit_success'], 'draw_inner_divider': True} for status in last_pipe_status]","tmp_ListComp0 = []
for status in last_pipe_status:
    tmp_ListComp0.append({'contents': exit_codes[status - 128] if signal_names and status - 128 in exit_codes else str(status), 'highlight_groups': ['exit_fail' if status else 'exit_success'], 'draw_inner_divider': True})

return tmp_ListComp0
",1,"[['https://github.com/powerline/powerline/tree/master/tests/test_python/test_segments.py', 'tests.test_python.test_segments', 'TestShell', 'test_last_pipe_status']]"
powerline,https://github.com/powerline/powerline/tree/master/powerline/segments/shell.py,TestShell,test_last_pipe_status,"return [{'contents': str(status), 'highlight_groups': ['exit_fail' if status else 'exit_success'], 'draw_inner_divider': True} for status in last_pipe_status]","tmp_ListComp0 = []
for status in last_pipe_status:
    tmp_ListComp0.append({'contents': str(status), 'highlight_groups': ['exit_fail' if status else 'exit_success'], 'draw_inner_divider': True})

return tmp_ListComp0
",1,"[['https://github.com/powerline/powerline/tree/master/tests/test_python/test_segments.py', 'tests.test_python.test_segments', 'TestShell', 'test_last_pipe_status']]"
bayespy,https://github.com/bayespy/bayespy/tree/master/bayespy/inference/vmp/nodes/node.py,TestNode,test_compute_message,shapes = [np.shape(array) for array in arrays],"
shapes = []
for array in arrays:
    shapes.append(np.shape(array))
",1,"[['https://github.com/bayespy/bayespy/tree/master/bayespy/inference/vmp/nodes/tests/test_node.py', 'bayespy.inference.vmp.nodes.tests.test_node', 'TestNode', 'test_compute_message']]"
bayespy,https://github.com/bayespy/bayespy/tree/master/bayespy/inference/vmp/nodes/node.py,TestNode,test_compute_message,out_plate_keys = [key for key in in_plate_keys if key < len(plates_to) and plates_to[-key - 1] != 1],"
out_plate_keys = []
for key in in_plate_keys:
    if key < len(plates_to) and plates_to[-key - 1] != 1:
        out_plate_keys.append(key)
",1,"[['https://github.com/bayespy/bayespy/tree/master/bayespy/inference/vmp/nodes/tests/test_node.py', 'bayespy.inference.vmp.nodes.tests.test_node', 'TestNode', 'test_compute_message']]"
bayespy,https://github.com/bayespy/bayespy/tree/master/bayespy/inference/vmp/nodes/node.py,TestNode,test_compute_message,"plates_result = [min(plates_to[ind], arrays_plates[ind]) for ind in range(-nplates_result, 0)]","
plates_result = []
for ind in range(-nplates_result, 0):
    plates_result.append(min(plates_to[ind], arrays_plates[ind]))
",1,"[['https://github.com/bayespy/bayespy/tree/master/bayespy/inference/vmp/nodes/tests/test_node.py', 'bayespy.inference.vmp.nodes.tests.test_node', 'TestNode', 'test_compute_message']]"
bayespy,https://github.com/bayespy/bayespy/tree/master/bayespy/inference/vmp/nodes/dot.py,TestSumMultiply,test_message_to_parent,"alphas = [u_parents[i][2] if not is_const else 1.0 for (i, is_const) in zip(range(len(u_parents)), self.is_constant) if i != index]","
alphas = []
for (i, is_const) in zip(range(len(u_parents)), self.is_constant):
    if i != index:
        if not is_const:
            alphas.append(u_parents[i][2])
        else:
            alphas.append(1.0)
",1,"[['https://github.com/bayespy/bayespy/tree/master/bayespy/inference/vmp/nodes/tests/test_dot.py', 'bayespy.inference.vmp.nodes.tests.test_dot', 'TestSumMultiply', 'test_message_to_parent']]"
bayespy,https://github.com/bayespy/bayespy/tree/master/bayespy/inference/vmp/nodes/dot.py,TestSumMultiply,test_message_to_parent,parent_dim_keys = [key + self.N_keys for key in self.in_keys[index]] + parent_dim_keys,"tmp_ListComp0 = []
for key in self.in_keys[index]:
    tmp_ListComp0.append(key + self.N_keys)

parent_dim_keys = tmp_ListComp0 + parent_dim_keys
",1,"[['https://github.com/bayespy/bayespy/tree/master/bayespy/inference/vmp/nodes/tests/test_dot.py', 'bayespy.inference.vmp.nodes.tests.test_dot', 'TestSumMultiply', 'test_message_to_parent']]"
bayespy,https://github.com/bayespy/bayespy/tree/master/bayespy/inference/vmp/nodes/dot.py,TestSumMultiply,test_message_to_parent,child_dim_keys = [key + self.N_keys for key in self.out_keys] + child_dim_keys,"tmp_ListComp0 = []
for key in self.out_keys:
    tmp_ListComp0.append(key + self.N_keys)

child_dim_keys = tmp_ListComp0 + child_dim_keys
",1,"[['https://github.com/bayespy/bayespy/tree/master/bayespy/inference/vmp/nodes/tests/test_dot.py', 'bayespy.inference.vmp.nodes.tests.test_dot', 'TestSumMultiply', 'test_message_to_parent']]"
bayespy,https://github.com/bayespy/bayespy/tree/master/bayespy/inference/vmp/nodes/dot.py,TestSumMultiply,test_message_to_parent,in_keys2 = [key + self.N_keys for key in self.in_keys[k]],"
in_keys2 = []
for key in self.in_keys[k]:
    in_keys2.append(key + self.N_keys)
",1,"[['https://github.com/bayespy/bayespy/tree/master/bayespy/inference/vmp/nodes/tests/test_dot.py', 'bayespy.inference.vmp.nodes.tests.test_dot', 'TestSumMultiply', 'test_message_to_parent']]"
XlsxWriter,https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/helperfunctions.py,TestAssembleWorksheet,test_assemble_xml_file,"elements = [s.replace('\r', '') for s in elements]","tmp_ListComp0 = []
for s in elements:
    tmp_ListComp0.append(s.replace('\r', ''))

elements = tmp_ListComp0
",1,"[['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/sharedstrings/test_sharedstrings01.py', 'xlsxwriter.test.sharedstrings.test_sharedstrings01', 'TestAssembleSharedStrings', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/vml/test_vml01.py', 'xlsxwriter.test.vml.test_vml01', 'TestAssembleVml', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/worksheet/test_cond_format17.py', 'xlsxwriter.test.worksheet.test_cond_format17', 'TestAssembleWorksheet', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/styles/test_styles08.py', 'xlsxwriter.test.styles.test_styles08', 'TestAssembleStyles', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/app/test_app02.py', 'xlsxwriter.test.app.test_app02', 'TestAssembleApp', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/vml/test_vml03.py', 'xlsxwriter.test.vml.test_vml03', 'TestAssembleVml', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/worksheet/test_merge_range02.py', 'xlsxwriter.test.worksheet.test_merge_range02', 'TestAssembleWorksheet', 'test_assemble_xml_file_write'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/worksheet/test_merge_range01.py', 'xlsxwriter.test.worksheet.test_merge_range01', 'TestAssembleWorksheet', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/worksheet/test_cond_format16.py', 'xlsxwriter.test.worksheet.test_cond_format16', 'TestAssembleWorksheet', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/worksheet/test_cond_format12.py', 'xlsxwriter.test.worksheet.test_cond_format12', 'TestAssembleWorksheet', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/worksheet/test_cond_format05.py', 'xlsxwriter.test.worksheet.test_cond_format05', 'TestAssembleWorksheet', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/styles/test_styles05.py', 'xlsxwriter.test.styles.test_styles05', 'TestAssembleStyles', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/drawing/test_drawing_chart01.py', 'xlsxwriter.test.drawing.test_drawing_chart01', 'TestAssembleDrawing', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/worksheet/test_worksheet05.py', 'xlsxwriter.test.worksheet.test_worksheet05', 'TestAssembleWorksheet', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/table/test_table07.py', 'xlsxwriter.test.table.test_table07', 'TestAssembleTable', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/vml/test_vml02.py', 'xlsxwriter.test.vml.test_vml02', 'TestAssembleVml', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/worksheet/test_cond_format01.py', 'xlsxwriter.test.worksheet.test_cond_format01', 'TestAssembleWorksheet', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/chartsheet/test_chartsheet01.py', 'xlsxwriter.test.chartsheet.test_chartsheet01', 'TestAssembleChartsheet', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/worksheet/test_cond_format13.py', 'xlsxwriter.test.worksheet.test_cond_format13', 'TestAssembleWorksheet', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/worksheet/test_sparkline07.py', 'xlsxwriter.test.worksheet.test_sparkline07', 'TestAssembleWorksheet', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/table/test_table01.py', 'xlsxwriter.test.table.test_table01', 'TestAssembleTable', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/worksheet/test_sparkline11.py', 'xlsxwriter.test.worksheet.test_sparkline11', 'TestAssembleWorksheet', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/worksheet/test_cond_format04.py', 'xlsxwriter.test.worksheet.test_cond_format04', 'TestAssembleWorksheet', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/table/test_table03.py', 'xlsxwriter.test.table.test_table03', 'TestAssembleTable', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/worksheet/test_cond_format14.py', 'xlsxwriter.test.worksheet.test_cond_format14', 'TestAssembleWorksheet', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/app/test_app01.py', 'xlsxwriter.test.app.test_app01', 'TestAssembleApp', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/styles/test_styles06.py', 'xlsxwriter.test.styles.test_styles06', 'TestAssembleStyles', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/table/test_table05.py', 'xlsxwriter.test.table.test_table05', 'TestAssembleTable', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/worksheet/test_data_bar06.py', 'xlsxwriter.test.worksheet.test_data_bar06', 'TestAssembleWorksheet', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/worksheet/test_cond_format07.py', 'xlsxwriter.test.worksheet.test_cond_format07', 'TestAssembleWorksheet', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/worksheet/test_cond_format02.py', 'xlsxwriter.test.worksheet.test_cond_format02', 'TestAssembleWorksheet', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/table/test_table10.py', 'xlsxwriter.test.table.test_table10', 'TestAssembleTable', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/styles/test_styles03.py', 'xlsxwriter.test.styles.test_styles03', 'TestAssembleStyles', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/worksheet/test_sparkline03.py', 'xlsxwriter.test.worksheet.test_sparkline03', 'TestAssembleWorksheet', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/worksheet/test_cond_format15.py', 'xlsxwriter.test.worksheet.test_cond_format15', 'TestAssembleWorksheet', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/worksheet/test_worksheet07.py', 'xlsxwriter.test.worksheet.test_worksheet07', 'TestAssembleWorksheet', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/relationships/test_relationships01.py', 'xlsxwriter.test.relationships.test_relationships01', 'TestAssembleRelationships', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/table/test_table08.py', 'xlsxwriter.test.table.test_table08', 'TestAssembleTable', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/styles/test_styles09.py', 'xlsxwriter.test.styles.test_styles09', 'TestAssembleStyles', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/table/test_table04.py', 'xlsxwriter.test.table.test_table04', 'TestAssembleTable', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/worksheet/test_cond_format03.py', 'xlsxwriter.test.worksheet.test_cond_format03', 'TestAssembleWorksheet', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/worksheet/test_sparkline12.py', 'xlsxwriter.test.worksheet.test_sparkline12', 'TestAssembleWorksheet', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/worksheet/test_merge_range02.py', 'xlsxwriter.test.worksheet.test_merge_range02', 'TestAssembleWorksheet', 'test_assemble_xml_file_A1'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/worksheet/test_cond_format09.py', 'xlsxwriter.test.worksheet.test_cond_format09', 'TestAssembleWorksheet', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/worksheet/test_cond_format19.py', 'xlsxwriter.test.worksheet.test_cond_format19', 'TestAssembleWorksheet', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/drawing/test_drawing_image01.py', 'xlsxwriter.test.drawing.test_drawing_image01', 'TestAssembleDrawing', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/workbook/test_workbook01.py', 'xlsxwriter.test.workbook.test_workbook01', 'TestAssembleWorkbook', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/worksheet/test_merge_range02.py', 'xlsxwriter.test.worksheet.test_merge_range02', 'TestAssembleWorksheet', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/table/test_table06.py', 'xlsxwriter.test.table.test_table06', 'TestAssembleTable', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/sharedstrings/test_sharedstrings02.py', 'xlsxwriter.test.sharedstrings.test_sharedstrings02', 'TestAssembleSharedStrings', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/workbook/test_workbook02.py', 'xlsxwriter.test.workbook.test_workbook02', 'TestAssembleWorkbook', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/workbook/test_workbook03.py', 'xlsxwriter.test.workbook.test_workbook03', 'TestAssembleWorkbook', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/worksheet/test_merge_range01.py', 'xlsxwriter.test.worksheet.test_merge_range01', 'TestAssembleWorksheet', 'test_assemble_xml_file_write'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/styles/test_styles04.py', 'xlsxwriter.test.styles.test_styles04', 'TestAssembleStyles', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/worksheet/test_cond_format10.py', 'xlsxwriter.test.worksheet.test_cond_format10', 'TestAssembleWorksheet', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/core/test_core01.py', 'xlsxwriter.test.core.test_core01', 'TestAssembleCore', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/styles/test_styles07.py', 'xlsxwriter.test.styles.test_styles07', 'TestAssembleStyles', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/core/test_core02.py', 'xlsxwriter.test.core.test_core02', 'TestAssembleCore', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/table/test_table09.py', 'xlsxwriter.test.table.test_table09', 'TestAssembleTable', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/styles/test_styles01.py', 'xlsxwriter.test.styles.test_styles01', 'TestAssembleStyles', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/worksheet/test_cond_format06.py', 'xlsxwriter.test.worksheet.test_cond_format06', 'TestAssembleWorksheet', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/worksheet/test_sparkline08.py', 'xlsxwriter.test.worksheet.test_sparkline08', 'TestAssembleWorksheet', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/worksheet/test_merge_range01.py', 'xlsxwriter.test.worksheet.test_merge_range01', 'TestAssembleWorksheet', 'test_assemble_xml_file_A1'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/app/test_app03.py', 'xlsxwriter.test.app.test_app03', 'TestAssembleApp', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/table/test_table02.py', 'xlsxwriter.test.table.test_table02', 'TestAssembleTable', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/table/test_table11.py', 'xlsxwriter.test.table.test_table11', 'TestAssembleTable', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/worksheet/test_cond_format20.py', 'xlsxwriter.test.worksheet.test_cond_format20', 'TestAssembleWorksheet', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/table/test_table12.py', 'xlsxwriter.test.table.test_table12', 'TestAssembleTable', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/drawing/test_drawing_image01.py', 'xlsxwriter.test.drawing.test_drawing_image01', 'TestAssembleDrawing', 'test_assemble_xml_file_with_url'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/styles/test_styles02.py', 'xlsxwriter.test.styles.test_styles02', 'TestAssembleStyles', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/worksheet/test_sparkline01.py', 'xlsxwriter.test.worksheet.test_sparkline01', 'TestAssembleWorksheet', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/worksheet/test_cond_format18.py', 'xlsxwriter.test.worksheet.test_cond_format18', 'TestAssembleWorksheet', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/worksheet/test_cond_format11.py', 'xlsxwriter.test.worksheet.test_cond_format11', 'TestAssembleWorksheet', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/worksheet/test_cond_format08.py', 'xlsxwriter.test.worksheet.test_cond_format08', 'TestAssembleWorksheet', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/worksheet/test_data_bar10.py', 'xlsxwriter.test.worksheet.test_data_bar10', 'TestAssembleWorksheet', 'test_assemble_xml_file']]"
caldera,https://github.com/mitre/caldera/tree/master/app/objects/c_operation.py,TestOperation,test_ran_ability_id,return ability_id in [link.ability.ability_id for link in self.chain if link.finish],"tmp_ListComp0 = []
for link in self.chain:
    if link.finish:
        tmp_ListComp0.append(link.ability.ability_id)

return ability_id in tmp_ListComp0
",1,"[['https://github.com/mitre/caldera/tree/master/tests/objects/test_operation.py', 'tests.objects.test_operation', 'TestOperation', 'test_ran_ability_id']]"
icalendar,https://github.com/collective/icalendar/tree/master/src/icalendar/cal.py,TestCalComponent,test_cal_Component_add,"value = [self._encode(name, v, parameters, encode) for v in value]","tmp_ListComp0 = []
for v in value:
    tmp_ListComp0.append(self._encode(name, v, parameters, encode))

value = tmp_ListComp0
",1,"[['https://github.com/collective/icalendar/tree/master/src/icalendar/tests/test_unit_cal.py', 'src.icalendar.tests.test_unit_cal', 'TestCalComponent', 'test_cal_Component_add_no_reencode'], ['https://github.com/collective/icalendar/tree/master/src/icalendar/tests/test_unit_cal.py', 'src.icalendar.tests.test_unit_cal', 'TestCalComponent', 'test_cal_Component'], ['https://github.com/collective/icalendar/tree/master/src/icalendar/tests/test_unit_cal.py', 'src.icalendar.tests.test_unit_cal', 'TestCalComponent', 'test_cal_Component_add_property_parameter'], ['https://github.com/collective/icalendar/tree/master/src/icalendar/tests/test_unit_cal.py', 'src.icalendar.tests.test_unit_cal', 'TestCalComponent', 'test_cal_Component_add']]"
icalendar,https://github.com/collective/icalendar/tree/master/src/icalendar/caselessdict.py,TestCaselessdict,test_caselessdict_canonsort_keys,head = [k for k in keys if k in canonical_map],"
head = []
for k in keys:
    if k in canonical_map:
        head.append(k)
",1,"[['https://github.com/collective/icalendar/tree/master/src/icalendar/tests/test_unit_caselessdict.py', 'src.icalendar.tests.test_unit_caselessdict', 'TestCaselessdict', 'test_caselessdict_canonsort_keys']]"
icalendar,https://github.com/collective/icalendar/tree/master/src/icalendar/caselessdict.py,TestCaselessdict,test_caselessdict_canonsort_keys,tail = [k for k in keys if k not in canonical_map],"
tail = []
for k in keys:
    if k not in canonical_map:
        tail.append(k)
",1,"[['https://github.com/collective/icalendar/tree/master/src/icalendar/tests/test_unit_caselessdict.py', 'src.icalendar.tests.test_unit_caselessdict', 'TestCaselessdict', 'test_caselessdict_canonsort_keys']]"
icalendar,https://github.com/collective/icalendar/tree/master/src/icalendar/prop.py,TestProp,test_prop_vCategory,"return b','.join([c.to_ical() for c in self.cats])","tmp_ListComp0 = []
for c in self.cats:
    tmp_ListComp0.append(c.to_ical())

return b','.join(tmp_ListComp0)
",1,"[['https://github.com/collective/icalendar/tree/master/src/icalendar/tests/test_unit_prop.py', 'src.icalendar.tests.test_unit_prop', 'TestProp', 'test_prop_vCategory']]"
altair,https://github.com/altair-viz/altair/tree/master/altair/utils/core.py,,test_infer_encoding_types_with_condition,"return [_wrap_in_channel_class(subobj, encoding) for subobj in obj]","tmp_ListComp0 = []
for subobj in obj:
    tmp_ListComp0.append(_wrap_in_channel_class(subobj, encoding))

return tmp_ListComp0
",1,"[['https://github.com/altair-viz/altair/tree/master/altair/utils/tests/test_core.py', 'altair.utils.tests.test_core', '', 'test_infer_encoding_types'], ['https://github.com/altair-viz/altair/tree/master/altair/utils/tests/test_core.py', 'altair.utils.tests.test_core', '', 'test_infer_encoding_types_with_condition']]"
gns3-server,https://github.com/GNS3/gns3-server/tree/master/gns3server/controller/topology.py,,test_load_newer_topology,topo['variables'] = [var for var in variables if var.get('name')],"
topo['variables'] = []
for var in variables:
    if var.get('name'):
        topo['variables'].append(var)
",1,"[['https://github.com/GNS3/gns3-server/tree/master/tests/controller/test_topology.py', 'tests.controller.test_topology', '', 'test_load_topology_file_error'], ['https://github.com/GNS3/gns3-server/tree/master/tests/controller/test_topology.py', 'tests.controller.test_topology', '', 'test_load_topology_with_variables'], ['https://github.com/GNS3/gns3-server/tree/master/tests/controller/test_topology.py', 'tests.controller.test_topology', '', 'test_load_topology_with_supplier'], ['https://github.com/GNS3/gns3-server/tree/master/tests/controller/test_topology.py', 'tests.controller.test_topology', '', 'test_load_topology_file_error_schema_error'], ['https://github.com/GNS3/gns3-server/tree/master/tests/controller/test_topology.py', 'tests.controller.test_topology', '', 'test_load_topology'], ['https://github.com/GNS3/gns3-server/tree/master/tests/controller/test_topology.py', 'tests.controller.test_topology', '', 'test_load_newer_topology']]"
gns3-server,https://github.com/GNS3/gns3-server/tree/master/gns3server/utils/images.py,,test_images_directories,return [force_unix_path(p) for p in paths if os.path.exists(p)],"tmp_ListComp0 = []
for p in paths:
    if os.path.exists(p):
        tmp_ListComp0.append(force_unix_path(p))

return tmp_ListComp0
",1,"[['https://github.com/GNS3/gns3-server/tree/master/tests/utils/test_images.py', 'tests.utils.test_images', '', 'test_images_directories']]"
sendgrid-python,https://github.com/sendgrid/sendgrid-python/tree/master/sendgrid/helpers/stats/stats.py,UnitTests,test_categoryStats,stats['categories'] = [category.get() for category in self.categories],"
stats['categories'] = []
for category in self.categories:
    stats['categories'].append(category.get())
",1,"[['https://github.com/sendgrid/sendgrid-python/tree/master/test/test_stats.py', 'test.test_stats', 'UnitTests', 'test_categoryStats']]"
sendgrid-python,https://github.com/sendgrid/sendgrid-python/tree/master/sendgrid/helpers/stats/stats.py,UnitTests,test_subuserStats,stats['subusers'] = [subuser.get() for subuser in self.subusers],"
stats['subusers'] = []
for subuser in self.subusers:
    stats['subusers'].append(subuser.get())
",1,"[['https://github.com/sendgrid/sendgrid-python/tree/master/test/test_stats.py', 'test.test_stats', 'UnitTests', 'test_subuserStats']]"
pycco,https://github.com/pycco-docs/pycco/tree/master/pycco/main.py,,test_flatten_sources,"_sources.extend([os.path.join(dirpath, f) for f in filenames])","tmp_ListComp0 = []
for f in filenames:
    tmp_ListComp0.append(os.path.join(dirpath, f))

_sources.extend(tmp_ListComp0)
",1,"[['https://github.com/pycco-docs/pycco/tree/master/tests/test_pycco.py', 'tests.test_pycco', '', 'test_flatten_sources']]"
tmuxomatic,https://github.com/oxidane/tmuxomatic/tree/master/windowgram/windowgram.py,Test_FlexCores,test_EdgeCore_SideSwipe,decrement_run = lambda run: [val - 1 for val in run],"def my_comprehension_func(run):
    tmp_ListComp0 = []
    for val in run:
        tmp_ListComp0.append(val - 1)
    return tmp_ListComp0

decrement_run = lambda run: my_comprehension_func(run)
",1,"[['https://github.com/oxidane/tmuxomatic/tree/master/windowgram/windowgram_test.py', 'windowgram.windowgram_test', 'Test_FlexCores', 'test_EdgeCore_SideSwipe']]"
tmuxomatic,https://github.com/oxidane/tmuxomatic/tree/master/windowgram/windowgram.py,Test_Windowgram_Convert,test_Windowgram_Convert_StringToLines,"return [linestrip(line) for line in list(filter(None, (windowgram + '\n').split('\n')))]","tmp_ListComp0 = []
for line in list(filter(None, (windowgram + '\n').split('\n'))):
    tmp_ListComp0.append(linestrip(line))

return tmp_ListComp0
",1,"[['https://github.com/oxidane/tmuxomatic/tree/master/windowgram/windowgram_test.py', 'windowgram.windowgram_test', 'Test_Windowgram_Convert', 'test_Windowgram_Convert_StringToLines']]"
tmuxomatic,https://github.com/oxidane/tmuxomatic/tree/master/windowgram/windowgram.py,Test_WindowgramGroup_Convert,test_WindowgramGroup_Convert_PatternToList,"windowgramgroup_list = ['\n'.join([l2 for l2 in l if l2]) + '\n' for (ix, l) in enumerate(windowgramgroup_list)]","tmp_ListComp0 = []
for (ix, l) in enumerate(windowgramgroup_list):
    tmp_ListComp0.append('\n'.join([l2 for l2 in l if l2]) + '\n')

windowgramgroup_list = tmp_ListComp0
",1,"[['https://github.com/oxidane/tmuxomatic/tree/master/windowgram/windowgram_test.py', 'windowgram.windowgram_test', 'Test_FlexCores', 'test_SmudgeCore_Basic'], ['https://github.com/oxidane/tmuxomatic/tree/master/windowgram/windowgram_test.py', 'windowgram.windowgram_test', 'Test_WindowgramGroup_Convert', 'test_WindowgramGroup_Convert_PatternToList']]"
tmuxomatic,https://github.com/oxidane/tmuxomatic/tree/master/windowgram/windowgram.py,Test_WindowgramGroup_Convert,test_WindowgramGroup_Convert_PatternToList,return [_ for _ in windowgramgroup_list if _ != '\n'],"tmp_ListComp0 = []
for _ in windowgramgroup_list:
    if _ != '\n':
        tmp_ListComp0.append(_)

return tmp_ListComp0
",1,"[['https://github.com/oxidane/tmuxomatic/tree/master/windowgram/windowgram_test.py', 'windowgram.windowgram_test', 'Test_FlexCores', 'test_SmudgeCore_Basic'], ['https://github.com/oxidane/tmuxomatic/tree/master/windowgram/windowgram_test.py', 'windowgram.windowgram_test', 'Test_WindowgramGroup_Convert', 'test_WindowgramGroup_Convert_PatternToList']]"
tmuxomatic,https://github.com/oxidane/tmuxomatic/tree/master/windowgram/windowgram.py,Test_WindowgramGroup_Convert,test_WindowgramGroup_Convert_PatternToList,"ix2 = [ix2 for (ix2, (_, col2)) in enumerate(first_linewithcol) if col2 == col1]","tmp_ListComp0 = []
for (ix2, (_, col2)) in enumerate(first_linewithcol):
    if col2 == col1:
        tmp_ListComp0.append(ix2)

ix2 = tmp_ListComp0
",1,"[['https://github.com/oxidane/tmuxomatic/tree/master/windowgram/windowgram_test.py', 'windowgram.windowgram_test', 'Test_FlexCores', 'test_SmudgeCore_Basic'], ['https://github.com/oxidane/tmuxomatic/tree/master/windowgram/windowgram_test.py', 'windowgram.windowgram_test', 'Test_WindowgramGroup_Convert', 'test_WindowgramGroup_Convert_PatternToList']]"
chalice,https://github.com/aws/chalice/tree/master/chalice/awsclient.py,TestGetApiMapping,test_api_mapping_does_not_exist,api_map = [api_map for api_map in result['Items'] if api_map['ApiMappingKey'] == api_map_key],"tmp_ListComp0 = []
for api_map in result['Items']:
    if api_map['ApiMappingKey'] == api_map_key:
        tmp_ListComp0.append(api_map)

api_map = tmp_ListComp0
",1,"[['https://github.com/aws/chalice/tree/master/tests/functional/test_awsclient.py', 'tests.functional.test_awsclient', 'TestGetApiMapping', 'test_api_mapping_not_exists'], ['https://github.com/aws/chalice/tree/master/tests/functional/test_awsclient.py', 'tests.functional.test_awsclient', 'TestGetApiMapping', 'test_api_mapping_exists'], ['https://github.com/aws/chalice/tree/master/tests/functional/test_awsclient.py', 'tests.functional.test_awsclient', 'TestGetApiMapping', 'test_api_mapping_does_not_exist']]"
chalice,https://github.com/aws/chalice/tree/master/chalice/config.py,,test_deployed_resource_exists,return [r['name'] for r in self._deployed_values],"tmp_ListComp0 = []
for r in self._deployed_values:
    tmp_ListComp0.append(r['name'])

return tmp_ListComp0
",1,"[['https://github.com/aws/chalice/tree/master/tests/unit/test_config.py', 'tests.unit.test_config', '', 'test_deployed_resource_exists']]"
falcon,https://github.com/falconry/falcon/tree/master/falcon/util/uri.py,TestFalconUtils,test_parse_query_string,additional_values = [decode(element) for element in v if element],"
additional_values = []
for element in v:
    if element:
        additional_values.append(decode(element))
",1,"[['https://github.com/falconry/falcon/tree/master/tests/test_utils.py', 'tests.test_utils', 'TestFalconUtils', 'test_parse_query_string']]"
falcon,https://github.com/falconry/falcon/tree/master/falcon/util/uri.py,TestFalconUtils,test_parse_query_string,additional_values = [decode(element) for element in v],"
additional_values = []
for element in v:
    additional_values.append(decode(element))
",1,"[['https://github.com/falconry/falcon/tree/master/tests/test_utils.py', 'tests.test_utils', 'TestFalconUtils', 'test_parse_query_string']]"
falcon,https://github.com/falconry/falcon/tree/master/falcon/util/uri.py,TestFalconUtils,test_parse_query_string,params[k] = [decode(element) for element in v if element],"
params[k] = []
for element in v:
    if element:
        params[k].append(decode(element))
",1,"[['https://github.com/falconry/falcon/tree/master/tests/test_utils.py', 'tests.test_utils', 'TestFalconUtils', 'test_parse_query_string']]"
falcon,https://github.com/falconry/falcon/tree/master/falcon/util/uri.py,TestFalconUtils,test_parse_query_string,params[k] = [decode(element) for element in v],"
params[k] = []
for element in v:
    params[k].append(decode(element))
",1,"[['https://github.com/falconry/falcon/tree/master/tests/test_utils.py', 'tests.test_utils', 'TestFalconUtils', 'test_parse_query_string']]"
falcon,https://github.com/falconry/falcon/tree/master/falcon/util/misc.py,,test_get_argnames,"args = [param.name for param in sig.parameters.values() if param.kind not in (inspect.Parameter.VAR_POSITIONAL, inspect.Parameter.VAR_KEYWORD)]","
args = []
for param in sig.parameters.values():
    if param.kind not in (inspect.Parameter.VAR_POSITIONAL, inspect.Parameter.VAR_KEYWORD):
        args.append(param.name)
",1,"[['https://github.com/falconry/falcon/tree/master/tests/test_utils.py', 'tests.test_utils', '', 'test_get_argnames']]"
falcon,https://github.com/falconry/falcon/tree/master/falcon/testing/helpers.py,TestWSGIServer,test_post_read_bounded_stream,"return ''.join([chr(int_gen(ord(' '), ord('~'))) for __ in range(string_length)])","tmp_ListComp0 = []
for __ in range(string_length):
    tmp_ListComp0.append(chr(int_gen(ord(' '), ord('~'))))

return ''.join(tmp_ListComp0)
",1,"[['https://github.com/falconry/falcon/tree/master/tests/test_wsgi.py', 'tests.test_wsgi', 'TestWSGIServer', 'test_post'], ['https://github.com/falconry/falcon/tree/master/tests/test_wsgi.py', 'tests.test_wsgi', 'TestWSGIServer', 'test_post_read_bounded_stream']]"
optopsy,https://github.com/michaelchu/optopsy/tree/master/optopsy/rules.py,,test_no_overlapping_strikes,"query = ' & '.join([f'strike_leg{leg + 1} > strike_leg{leg}' for leg in range(1, leg_count)])","tmp_ListComp0 = []
for leg in range(1, leg_count):
    tmp_ListComp0.append(f'strike_leg{leg + 1} > strike_leg{leg}')

query = ' & '.join(tmp_ListComp0)
",1,"[['https://github.com/michaelchu/optopsy/tree/master/tests/test_rules.py', 'tests.test_rules', '', 'test_no_overlapping_strikes']]"
python-nubia,https://github.com/facebookincubator/python-nubia/tree/master/nubia/internal/helpers.py,HelpersTest,test_find_approx,"return [k for (k, _) in sorted(levenshtein_suggestions.items(), key=lambda i: (i[1], i[0]))]","tmp_ListComp0 = []
for (k, _) in sorted(levenshtein_suggestions.items(), key=lambda i: (i[1], i[0])):
    tmp_ListComp0.append(k)

return tmp_ListComp0
",1,"[['https://github.com/facebookincubator/python-nubia/tree/master/tests/helpers_test.py', 'tests.helpers_test', 'HelpersTest', 'test_find_approx']]"
openstack-ansible,https://github.com/openstack/openstack-ansible/tree/master/osa_toolkit/ip.py,TestIPManager,test_loading_network_excludes,initial_ips = [str(i) for i in list(net)],"
initial_ips = []
for i in list(net):
    initial_ips.append(str(i))
",1,"[['https://github.com/openstack/openstack-ansible/tree/master/tests/test_ip.py', 'tests.test_ip', 'TestIPManager', 'test_loaded_randomly'], ['https://github.com/openstack/openstack-ansible/tree/master/tests/test_ip.py', 'tests.test_ip', 'TestIPManager', 'test_loading_used_ips'], ['https://github.com/openstack/openstack-ansible/tree/master/tests/test_ip.py', 'tests.test_ip', 'TestIPManager', 'test_loading_queue'], ['https://github.com/openstack/openstack-ansible/tree/master/tests/test_ip.py', 'tests.test_ip', 'TestIPManager', 'test_load_creates_networks'], ['https://github.com/openstack/openstack-ansible/tree/master/tests/test_ip.py', 'tests.test_ip', 'TestIPManager', 'test_loading_network_excludes']]"
openstack-ansible,https://github.com/openstack/openstack-ansible/tree/master/osa_toolkit/ip.py,TestIPManager,test_loading_network_excludes,all_ips = [ip for ip in initial_ips if ip not in self._used_ips],"
all_ips = []
for ip in initial_ips:
    if ip not in self._used_ips:
        all_ips.append(ip)
",1,"[['https://github.com/openstack/openstack-ansible/tree/master/tests/test_ip.py', 'tests.test_ip', 'TestIPManager', 'test_loaded_randomly'], ['https://github.com/openstack/openstack-ansible/tree/master/tests/test_ip.py', 'tests.test_ip', 'TestIPManager', 'test_loading_used_ips'], ['https://github.com/openstack/openstack-ansible/tree/master/tests/test_ip.py', 'tests.test_ip', 'TestIPManager', 'test_loading_queue'], ['https://github.com/openstack/openstack-ansible/tree/master/tests/test_ip.py', 'tests.test_ip', 'TestIPManager', 'test_load_creates_networks'], ['https://github.com/openstack/openstack-ansible/tree/master/tests/test_ip.py', 'tests.test_ip', 'TestIPManager', 'test_loading_network_excludes']]"
openstack-ansible,https://github.com/openstack/openstack-ansible/tree/master/osa_toolkit/generate.py,TestConfigMatchesEnvironment,test_confirm_exclusions,config_groups = [k for k in config.keys() if k not in excludes],"
config_groups = []
for k in config.keys():
    if k not in excludes:
        config_groups.append(k)
",1,"[['https://github.com/openstack/openstack-ansible/tree/master/tests/test_inventory.py', 'tests.test_inventory', 'TestConfigMatchesEnvironment', 'test_multiple_extra_keys'], ['https://github.com/openstack/openstack-ansible/tree/master/tests/test_inventory.py', 'tests.test_inventory', 'TestConfigMatchesEnvironment', 'test_failed_match'], ['https://github.com/openstack/openstack-ansible/tree/master/tests/test_inventory.py', 'tests.test_inventory', 'TestConfigMatchesEnvironment', 'test_extra_config_key_warning'], ['https://github.com/openstack/openstack-ansible/tree/master/tests/test_inventory.py', 'tests.test_inventory', 'TestConfigMatchesEnvironment', 'test_matching_keys'], ['https://github.com/openstack/openstack-ansible/tree/master/tests/test_inventory.py', 'tests.test_inventory', 'TestConfigMatchesEnvironment', 'test_confirm_exclusions']]"
openstack-ansible,https://github.com/openstack/openstack-ansible/tree/master/osa_toolkit/filesystem.py,TestMultipleRuns,test_creating_backup_file,members = [i.name for i in tar.getmembers()],"
members = []
for i in tar.getmembers():
    members.append(i.name)
",1,"[['https://github.com/openstack/openstack-ansible/tree/master/tests/test_filesystem.py', 'tests.test_filesystem', 'TestMultipleRuns', 'test_creating_backup_file']]"
libact,https://github.com/ntucllab/libact/tree/master/libact/labelers/ideal_labeler.py,TestDatasetMethods,test_label,"yy = self.y[np.where([np.array_equal(x, feature) for x in self.X])[0]]","def my_comprehension_func(self, np):
    tmp_ListComp0 = []
    for x in self.X:
        tmp_ListComp0.append(np.array_equal(x, feature))
    return tmp_ListComp0

yy = self.y[np.where(my_comprehension_func(self, np))[0]]
",1,"[['https://github.com/ntucllab/libact/tree/master/libact/labelers/tests/test_labelers.py', 'libact.labelers.tests.test_labelers', 'TestDatasetMethods', 'test_mlc_label'], ['https://github.com/ntucllab/libact/tree/master/libact/labelers/tests/test_labelers.py', 'libact.labelers.tests.test_labelers', 'TestDatasetMethods', 'test_label']]"
netmiko,https://github.com/ktbyers/netmiko/tree/master/netmiko/utilities.py,,test_find_cfg_file,search_paths = [path for path in search_paths if path],"tmp_ListComp0 = []
for path in search_paths:
    if path:
        tmp_ListComp0.append(path)

search_paths = tmp_ListComp0
",1,"[['https://github.com/ktbyers/netmiko/tree/master/tests/unit/test_utilities.py', 'tests.unit.test_utilities', '', 'test_find_cfg_file']]"
PMapper,https://github.com/nccgroup/PMapper/tree/master/principalmapper/common/nodes.py,LocalQueryingTests,test_local_mfa_handling,"return {'arn': self.arn, 'id_value': self.id_value, 'attached_policies': [{'arn': policy.arn, 'name': policy.name} for policy in self.attached_policies], 'group_memberships': [group.arn for group in self.group_memberships], 'trust_policy': self.trust_policy, 'instance_profile': self.instance_profile, 'active_password': self.active_password, 'access_keys': self.access_keys, 'is_admin': self.is_admin, 'permissions_boundary': _pb, 'has_mfa': self.has_mfa, 'tags': self.tags}","def my_comprehension_func(self):
    tmp_ListComp0 = []
    for policy in self.attached_policies:
        tmp_ListComp0.append({'arn': policy.arn, 'name': policy.name})
    return tmp_ListComp0

return {'arn': self.arn, 'id_value': self.id_value, 'attached_policies': my_comprehension_func(self), 'group_memberships': [group.arn for group in self.group_memberships], 'trust_policy': self.trust_policy, 'instance_profile': self.instance_profile, 'active_password': self.active_password, 'access_keys': self.access_keys, 'is_admin': self.is_admin, 'permissions_boundary': _pb, 'has_mfa': self.has_mfa, 'tags': self.tags}
",1,"[['https://github.com/nccgroup/PMapper/tree/master/tests/test_local_querying.py', 'tests.test_local_querying', 'LocalQueryingTests', 'test_local_mfa_handling']]"
maigret,https://github.com/soxoj/maigret/tree/master/maigret/sites.py,,test_ranked_sites_dict_disabled,filtered_list = [s for s in self.sites if filter_fun(s)],"
filtered_list = []
for s in self.sites:
    if filter_fun(s):
        filtered_list.append(s)
",1,"[['https://github.com/soxoj/maigret/tree/master/tests/test_sites.py', 'tests.test_sites', '', 'test_ranked_sites_dict_names'], ['https://github.com/soxoj/maigret/tree/master/tests/test_sites.py', 'tests.test_sites', '', 'test_ranked_sites_dict'], ['https://github.com/soxoj/maigret/tree/master/tests/test_sites.py', 'tests.test_sites', '', 'test_ranked_sites_dict_id_type'], ['https://github.com/soxoj/maigret/tree/master/tests/test_sites.py', 'tests.test_sites', '', 'test_ranked_sites_dict_disabled']]"
capirca,https://github.com/google/capirca/tree/master/tools/cgrep.py,CgrepTest,test_group_diff_identical,group1 = [x[0] for x in nested_rvals[0]],"
group1 = []
for x in nested_rvals[0]:
    group1.append(x[0])
",1,"[['https://github.com/google/capirca/tree/master/tests/lib/cgrep_test.py', 'tests.lib.cgrep_test', 'CgrepTest', 'test_group_diff'], ['https://github.com/google/capirca/tree/master/tests/lib/cgrep_test.py', 'tests.lib.cgrep_test', 'CgrepTest', 'test_group_diff_identical']]"
capirca,https://github.com/google/capirca/tree/master/tools/cgrep.py,CgrepTest,test_group_diff_identical,group2 = [x[0] for x in nested_rvals[1]],"
group2 = []
for x in nested_rvals[1]:
    group2.append(x[0])
",1,"[['https://github.com/google/capirca/tree/master/tests/lib/cgrep_test.py', 'tests.lib.cgrep_test', 'CgrepTest', 'test_group_diff'], ['https://github.com/google/capirca/tree/master/tests/lib/cgrep_test.py', 'tests.lib.cgrep_test', 'CgrepTest', 'test_group_diff_identical']]"
pdfplumber,https://github.com/jsvine/pdfplumber/tree/master/pdfplumber/utils.py,Test,test_parse,return [[x] for x in sorted(xs)],"tmp_ListComp0 = []
for x in sorted(xs):
    tmp_ListComp0.append([x])

return tmp_ListComp0
",1,"[['https://github.com/jsvine/pdfplumber/tree/master/tests/test_utils.py', 'tests.test_utils', 'Test', 'test_cluster_list'], ['https://github.com/jsvine/pdfplumber/tree/master/tests/test_ca_warn_report.py', 'tests.test_ca_warn_report', 'Test', 'test_parse']]"
pdfplumber,https://github.com/jsvine/pdfplumber/tree/master/pdfplumber/utils.py,Test,test_parse,return [[x] for x in sorted(xs)],"tmp_ListComp0 = []
for x in sorted(xs):
    tmp_ListComp0.append([x])

return tmp_ListComp0
",1,"[['https://github.com/jsvine/pdfplumber/tree/master/tests/test_utils.py', 'tests.test_utils', 'Test', 'test_cluster_list'], ['https://github.com/jsvine/pdfplumber/tree/master/tests/test_ca_warn_report.py', 'tests.test_ca_warn_report', 'Test', 'test_parse']]"
pdfplumber,https://github.com/jsvine/pdfplumber/tree/master/pdfplumber/table.py,Test,test_text_without_words,"edges = [{'x0': min_x0, 'x1': max_x1, 'top': r['top'], 'bottom': r['top'], 'width': max_x1 - min_x0, 'orientation': 'h'} for r in rects] + [{'x0': min_x0, 'x1': max_x1, 'top': max_bottom, 'bottom': max_bottom, 'width': max_x1 - min_x0, 'orientation': 'h'}]","def my_comprehension_func(max_x1, min_x0):
    tmp_ListComp0 = []
    for r in rects:
        tmp_ListComp0.append({'x0': min_x0, 'x1': max_x1, 'top': r['top'], 'bottom': r['top'], 'width': max_x1 - min_x0, 'orientation': 'h'})
    return tmp_ListComp0

edges = my_comprehension_func(max_x1, min_x0) + [{'x0': min_x0, 'x1': max_x1, 'top': max_bottom, 'bottom': max_bottom, 'width': max_x1 - min_x0, 'orientation': 'h'}]
",1,"[['https://github.com/jsvine/pdfplumber/tree/master/tests/test_table.py', 'tests.test_table', 'Test', 'test_text_without_words']]"
pyti,https://github.com/kylejusticemagnuson/pyti/tree/master/pyti/linear_weighted_moving_average.py,TestLinearWeightedMovingAverage,test_lwma_period_10,"lwma = [sum([i * idx_period[data[idx - (period - 1):idx + 1].index(i)] for i in data[idx - (period - 1):idx + 1]]) / sum(range(1, len(data[idx + 1 - period:idx + 1]) + 1)) for idx in range(period - 1, len(data))]","
lwma = []
for idx in range(period - 1, len(data)):
    lwma.append(sum([i * idx_period[data[idx - (period - 1):idx + 1].index(i)] for i in data[idx - (period - 1):idx + 1]]) / sum(range(1, len(data[idx + 1 - period:idx + 1]) + 1)))
",1,"[['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_linear_weighted_moving_average.py', 'tests.test_linear_weighted_moving_average', 'TestLinearWeightedMovingAverage', 'test_lwma_period_6'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_linear_weighted_moving_average.py', 'tests.test_linear_weighted_moving_average', 'TestLinearWeightedMovingAverage', 'test_lwma_period_8'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_linear_weighted_moving_average.py', 'tests.test_linear_weighted_moving_average', 'TestLinearWeightedMovingAverage', 'test_lwma_invalid_period'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_linear_weighted_moving_average.py', 'tests.test_linear_weighted_moving_average', 'TestLinearWeightedMovingAverage', 'test_lwma_period_10']]"
pyti,https://github.com/kylejusticemagnuson/pyti/tree/master/pyti/detrended_price_oscillator.py,TestDetrendedPriceOscillator,test_dop_period_6,"dop = [data[idx] - np.mean(data[idx + 1 - (int(period / 2) + 1):idx + 1]) for idx in range(period - 1, len(data))]","
dop = []
for idx in range(period - 1, len(data)):
    dop.append(data[idx] - np.mean(data[idx + 1 - (int(period / 2) + 1):idx + 1]))
",1,"[['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_detrended_price_oscillator.py', 'tests.test_detrended_price_oscillator', 'TestDetrendedPriceOscillator', 'test_dop_invalid_period'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_detrended_price_oscillator.py', 'tests.test_detrended_price_oscillator', 'TestDetrendedPriceOscillator', 'test_dop_period_10'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_detrended_price_oscillator.py', 'tests.test_detrended_price_oscillator', 'TestDetrendedPriceOscillator', 'test_dop_period_8'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_detrended_price_oscillator.py', 'tests.test_detrended_price_oscillator', 'TestDetrendedPriceOscillator', 'test_dop_period_6']]"
pyti,https://github.com/kylejusticemagnuson/pyti/tree/master/pyti/williams_percent_r.py,TestWilliamsPercentR,test_wpr,wr = [(highest_high - close) / (highest_high - lowest_low) * -100 for close in close_data],"
wr = []
for close in close_data:
    wr.append((highest_high - close) / (highest_high - lowest_low) * -100)
",1,"[['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_williams_percent_r.py', 'tests.test_williams_percent_r', 'TestWilliamsPercentR', 'test_wpr']]"
pyti,https://github.com/kylejusticemagnuson/pyti/tree/master/pyti/relative_strength_index.py,TestRelativeStrengthIndex,test_relative_strength_index_period_10,"changes = [data_tup[1] - data_tup[0] for data_tup in zip(data[::1], data[1::1])]","
changes = []
for data_tup in zip(data[::1], data[1::1]):
    changes.append(data_tup[1] - data_tup[0])
",1,"[['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_relative_strength_index.py', 'tests.test_relative_strength_index', 'TestRelativeStrengthIndex', 'test_relative_strength_index_invalid_period'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_relative_strength_index.py', 'tests.test_relative_strength_index', 'TestRelativeStrengthIndex', 'test_relative_strength_index_period_6'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_relative_strength_index.py', 'tests.test_relative_strength_index', 'TestRelativeStrengthIndex', 'test_relative_strength_index_period_8'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_relative_strength_index.py', 'tests.test_relative_strength_index', 'TestRelativeStrengthIndex', 'test_relative_strength_index_period_10']]"
pyti,https://github.com/kylejusticemagnuson/pyti/tree/master/pyti/relative_strength_index.py,TestRelativeStrengthIndex,test_relative_strength_index_period_10,filtered_gain = [val < 0 for val in changes],"
filtered_gain = []
for val in changes:
    filtered_gain.append(val < 0)
",1,"[['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_relative_strength_index.py', 'tests.test_relative_strength_index', 'TestRelativeStrengthIndex', 'test_relative_strength_index_invalid_period'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_relative_strength_index.py', 'tests.test_relative_strength_index', 'TestRelativeStrengthIndex', 'test_relative_strength_index_period_6'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_relative_strength_index.py', 'tests.test_relative_strength_index', 'TestRelativeStrengthIndex', 'test_relative_strength_index_period_8'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_relative_strength_index.py', 'tests.test_relative_strength_index', 'TestRelativeStrengthIndex', 'test_relative_strength_index_period_10']]"
pyti,https://github.com/kylejusticemagnuson/pyti/tree/master/pyti/relative_strength_index.py,TestRelativeStrengthIndex,test_relative_strength_index_period_10,"gains = [0 if filtered_gain[idx] is True else changes[idx] for idx in range(0, len(filtered_gain))]","
gains = []
for idx in range(0, len(filtered_gain)):
    if filtered_gain[idx] is True:
        gains.append(0)
    else:
        gains.append(changes[idx])
",1,"[['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_relative_strength_index.py', 'tests.test_relative_strength_index', 'TestRelativeStrengthIndex', 'test_relative_strength_index_invalid_period'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_relative_strength_index.py', 'tests.test_relative_strength_index', 'TestRelativeStrengthIndex', 'test_relative_strength_index_period_6'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_relative_strength_index.py', 'tests.test_relative_strength_index', 'TestRelativeStrengthIndex', 'test_relative_strength_index_period_8'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_relative_strength_index.py', 'tests.test_relative_strength_index', 'TestRelativeStrengthIndex', 'test_relative_strength_index_period_10']]"
pyti,https://github.com/kylejusticemagnuson/pyti/tree/master/pyti/relative_strength_index.py,TestRelativeStrengthIndex,test_relative_strength_index_period_10,filtered_loss = [val > 0 for val in changes],"
filtered_loss = []
for val in changes:
    filtered_loss.append(val > 0)
",1,"[['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_relative_strength_index.py', 'tests.test_relative_strength_index', 'TestRelativeStrengthIndex', 'test_relative_strength_index_invalid_period'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_relative_strength_index.py', 'tests.test_relative_strength_index', 'TestRelativeStrengthIndex', 'test_relative_strength_index_period_6'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_relative_strength_index.py', 'tests.test_relative_strength_index', 'TestRelativeStrengthIndex', 'test_relative_strength_index_period_8'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_relative_strength_index.py', 'tests.test_relative_strength_index', 'TestRelativeStrengthIndex', 'test_relative_strength_index_period_10']]"
pyti,https://github.com/kylejusticemagnuson/pyti/tree/master/pyti/relative_strength_index.py,TestRelativeStrengthIndex,test_relative_strength_index_period_10,"losses = [0 if filtered_loss[idx] is True else abs(changes[idx]) for idx in range(0, len(filtered_loss))]","
losses = []
for idx in range(0, len(filtered_loss)):
    if filtered_loss[idx] is True:
        losses.append(0)
    else:
        losses.append(abs(changes[idx]))
",1,"[['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_relative_strength_index.py', 'tests.test_relative_strength_index', 'TestRelativeStrengthIndex', 'test_relative_strength_index_invalid_period'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_relative_strength_index.py', 'tests.test_relative_strength_index', 'TestRelativeStrengthIndex', 'test_relative_strength_index_period_6'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_relative_strength_index.py', 'tests.test_relative_strength_index', 'TestRelativeStrengthIndex', 'test_relative_strength_index_period_8'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_relative_strength_index.py', 'tests.test_relative_strength_index', 'TestRelativeStrengthIndex', 'test_relative_strength_index_period_10']]"
pyti,https://github.com/kylejusticemagnuson/pyti/tree/master/pyti/momentum.py,TestMomentum,test_momentum_period_8,"momentum = [data[idx] - data[idx + 1 - period] for idx in range(period - 1, len(data))]","
momentum = []
for idx in range(period - 1, len(data)):
    momentum.append(data[idx] - data[idx + 1 - period])
",1,"[['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_momentum.py', 'tests.test_momentum', 'TestMomentum', 'test_momentum_period_10'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_momentum.py', 'tests.test_momentum', 'TestMomentum', 'test_momentum_period_6'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_momentum.py', 'tests.test_momentum', 'TestMomentum', 'test_momentum_invalid_period'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_momentum.py', 'tests.test_momentum', 'TestMomentum', 'test_momentum_period_8']]"
pyti,https://github.com/kylejusticemagnuson/pyti/tree/master/pyti/weighted_moving_average.py,TestWeightedMovingAverage,test_wma_period_8,"product = [data[idx + period_idx] * (period_idx + 1) for period_idx in range(0, period)]","
product = []
for period_idx in range(0, period):
    product.append(data[idx + period_idx] * (period_idx + 1))
",1,"[['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_weighted_moving_average.py', 'tests.test_weighted_moving_average', 'TestWeightedMovingAverage', 'test_wma_period_10'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_weighted_moving_average.py', 'tests.test_weighted_moving_average', 'TestWeightedMovingAverage', 'test_weighted_moving_average'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_weighted_moving_average.py', 'tests.test_weighted_moving_average', 'TestWeightedMovingAverage', 'test_wma_invalid_period'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_weighted_moving_average.py', 'tests.test_weighted_moving_average', 'TestWeightedMovingAverage', 'test_wma_period_8']]"
pyti,https://github.com/kylejusticemagnuson/pyti/tree/master/pyti/stochastic.py,TestStochastic,test_percent_k_invalid_period,"percent_k = [(data[idx] - np.min(data[idx + 1 - period:idx + 1])) / (np.max(data[idx + 1 - period:idx + 1]) - np.min(data[idx + 1 - period:idx + 1])) for idx in range(period - 1, len(data))]","
percent_k = []
for idx in range(period - 1, len(data)):
    percent_k.append((data[idx] - np.min(data[idx + 1 - period:idx + 1])) / (np.max(data[idx + 1 - period:idx + 1]) - np.min(data[idx + 1 - period:idx + 1])))
",1,"[['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_stochastic.py', 'tests.test_stochastic', 'TestStochastic', 'test_percent_k_period_6'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_stochastic.py', 'tests.test_stochastic', 'TestStochastic', 'test_percent_k_period_10'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_stochastic.py', 'tests.test_stochastic', 'TestStochastic', 'test_percent_k_period_8'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_stochastic.py', 'tests.test_stochastic', 'TestStochastic', 'test_percent_k_invalid_period']]"
pyti,https://github.com/kylejusticemagnuson/pyti/tree/master/pyti/exponential_moving_average.py,TestExponentialMovingAverage,test_exponential_moving_average_period_8,"emas = [exponential_moving_average_helper(data[idx - period + 1:idx + 1], period) for idx in range(period - 1, len(data))]","
emas = []
for idx in range(period - 1, len(data)):
    emas.append(exponential_moving_average_helper(data[idx - period + 1:idx + 1], period))
",1,"[['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_exponential_moving_average.py', 'tests.test_exponential_moving_average', 'TestExponentialMovingAverage', 'test_exponential_moving_average_period_10'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_exponential_moving_average.py', 'tests.test_exponential_moving_average', 'TestExponentialMovingAverage', 'test_exponential_moving_average_invalid_period'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_exponential_moving_average.py', 'tests.test_exponential_moving_average', 'TestExponentialMovingAverage', 'test_exponential_moving_average_period_6'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_exponential_moving_average.py', 'tests.test_exponential_moving_average', 'TestExponentialMovingAverage', 'test_exponential_moving_average_period_8']]"
pyti,https://github.com/kylejusticemagnuson/pyti/tree/master/pyti/volume_adjusted_moving_average.py,TestVolumeAdjustedMovingAverage,test_vama_invalid_period,vol_ratio = [val / vol_incr for val in volume],"
vol_ratio = []
for val in volume:
    vol_ratio.append(val / vol_incr)
",1,"[['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_volume_adjusted_moving_average.py', 'tests.test_volume_adjusted_moving_average', 'TestVolumeAdjustedMovingAverage', 'test_vama_period_8'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_volume_adjusted_moving_average.py', 'tests.test_volume_adjusted_moving_average', 'TestVolumeAdjustedMovingAverage', 'test_vama_period_10'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_volume_adjusted_moving_average.py', 'tests.test_volume_adjusted_moving_average', 'TestVolumeAdjustedMovingAverage', 'test_vama_period_6'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_volume_adjusted_moving_average.py', 'tests.test_volume_adjusted_moving_average', 'TestVolumeAdjustedMovingAverage', 'test_vama_invalid_data'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_volume_adjusted_moving_average.py', 'tests.test_volume_adjusted_moving_average', 'TestVolumeAdjustedMovingAverage', 'test_vama_invalid_period']]"
pyti,https://github.com/kylejusticemagnuson/pyti/tree/master/pyti/volume_adjusted_moving_average.py,TestVolumeAdjustedMovingAverage,test_vama_invalid_period,"vama = [sum(close_vol[idx + 1 - period:idx + 1]) / period for idx in range(period - 1, len(close_data))]","
vama = []
for idx in range(period - 1, len(close_data)):
    vama.append(sum(close_vol[idx + 1 - period:idx + 1]) / period)
",1,"[['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_volume_adjusted_moving_average.py', 'tests.test_volume_adjusted_moving_average', 'TestVolumeAdjustedMovingAverage', 'test_vama_period_8'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_volume_adjusted_moving_average.py', 'tests.test_volume_adjusted_moving_average', 'TestVolumeAdjustedMovingAverage', 'test_vama_period_10'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_volume_adjusted_moving_average.py', 'tests.test_volume_adjusted_moving_average', 'TestVolumeAdjustedMovingAverage', 'test_vama_period_6'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_volume_adjusted_moving_average.py', 'tests.test_volume_adjusted_moving_average', 'TestVolumeAdjustedMovingAverage', 'test_vama_invalid_data'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_volume_adjusted_moving_average.py', 'tests.test_volume_adjusted_moving_average', 'TestVolumeAdjustedMovingAverage', 'test_vama_invalid_period']]"
pyti,https://github.com/kylejusticemagnuson/pyti/tree/master/pyti/true_range.py,TestTrueRange,test_true_range_period_6,"tr = [np.max([np.max(close_data[idx + 1 - period:idx + 1]) - np.min(close_data[idx + 1 - period:idx + 1]), abs(np.max(close_data[idx + 1 - period:idx + 1]) - close_data[idx - 1]), abs(np.min(close_data[idx + 1 - period:idx + 1]) - close_data[idx - 1])]) for idx in range(period - 1, len(close_data))]","
tr = []
for idx in range(period - 1, len(close_data)):
    tr.append(np.max([np.max(close_data[idx + 1 - period:idx + 1]) - np.min(close_data[idx + 1 - period:idx + 1]), abs(np.max(close_data[idx + 1 - period:idx + 1]) - close_data[idx - 1]), abs(np.min(close_data[idx + 1 - period:idx + 1]) - close_data[idx - 1])]))
",1,"[['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_true_range.py', 'tests.test_true_range', 'TestTrueRange', 'test_true_range_period_8'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_true_range.py', 'tests.test_true_range', 'TestTrueRange', 'test_true_range_period_10'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_true_range.py', 'tests.test_true_range', 'TestTrueRange', 'test_true_range_invalid_period'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_true_range.py', 'tests.test_true_range', 'TestTrueRange', 'test_true_range_period_6']]"
pyti,https://github.com/kylejusticemagnuson/pyti/tree/master/pyti/double_smoothed_stochastic.py,TestDoubleSmoothedStochastic,test_double_smoothed_stochastic_period_6,"lows = [data[idx] - np.min(data[idx + 1 - period:idx + 1]) for idx in range(period - 1, len(data))]","
lows = []
for idx in range(period - 1, len(data)):
    lows.append(data[idx] - np.min(data[idx + 1 - period:idx + 1]))
",1,"[['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_double_smoothed_stochastic.py', 'tests.test_double_smoothed_stochastic', 'TestDoubleSmoothedStochastic', 'test_double_smoothed_stochastic_period_8'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_double_smoothed_stochastic.py', 'tests.test_double_smoothed_stochastic', 'TestDoubleSmoothedStochastic', 'test_double_smoothed_stochastic_period_10'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_double_smoothed_stochastic.py', 'tests.test_double_smoothed_stochastic', 'TestDoubleSmoothedStochastic', 'test_dss_invalid_period'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_double_smoothed_stochastic.py', 'tests.test_double_smoothed_stochastic', 'TestDoubleSmoothedStochastic', 'test_double_smoothed_stochastic_period_6']]"
pyti,https://github.com/kylejusticemagnuson/pyti/tree/master/pyti/double_smoothed_stochastic.py,TestDoubleSmoothedStochastic,test_double_smoothed_stochastic_period_6,"highs = [np.max(data[idx + 1 - period:idx + 1]) - np.min(data[idx + 1 - period:idx + 1]) for idx in range(period - 1, len(data))]","
highs = []
for idx in range(period - 1, len(data)):
    highs.append(np.max(data[idx + 1 - period:idx + 1]) - np.min(data[idx + 1 - period:idx + 1]))
",1,"[['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_double_smoothed_stochastic.py', 'tests.test_double_smoothed_stochastic', 'TestDoubleSmoothedStochastic', 'test_double_smoothed_stochastic_period_8'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_double_smoothed_stochastic.py', 'tests.test_double_smoothed_stochastic', 'TestDoubleSmoothedStochastic', 'test_double_smoothed_stochastic_period_10'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_double_smoothed_stochastic.py', 'tests.test_double_smoothed_stochastic', 'TestDoubleSmoothedStochastic', 'test_dss_invalid_period'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_double_smoothed_stochastic.py', 'tests.test_double_smoothed_stochastic', 'TestDoubleSmoothedStochastic', 'test_double_smoothed_stochastic_period_6']]"
pyti,https://github.com/kylejusticemagnuson/pyti/tree/master/pyti/chande_momentum_oscillator.py,TestChandeMomentumOscillator,test_cmo_invalid_period,"moving_period_diffs = [[close_data[idx + 1 - period:idx + 1][i] - close_data[idx + 1 - period:idx + 1][i - 1] for i in range(1, len(close_data[idx + 1 - period:idx + 1]))] for idx in range(0, len(close_data))]","
moving_period_diffs = []
for idx in range(0, len(close_data)):
    moving_period_diffs1 = []
    for i in range(1, len(close_data[idx + 1 - period:idx + 1])):
        moving_period_diffs1.append(close_data[idx + 1 - period:idx + 1][i] - close_data[idx + 1 - period:idx + 1][i - 1])
    moving_period_diffs.append(moving_period_diffs1)
",1,"[['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_chande_momentum_oscillator.py', 'tests.test_chande_momentum_oscillator', 'TestChandeMomentumOscillator', 'test_cmo_period_6'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_chande_momentum_oscillator.py', 'tests.test_chande_momentum_oscillator', 'TestChandeMomentumOscillator', 'test_cmo_period_10'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_chande_momentum_oscillator.py', 'tests.test_chande_momentum_oscillator', 'TestChandeMomentumOscillator', 'test_cmo_period_8'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_chande_momentum_oscillator.py', 'tests.test_chande_momentum_oscillator', 'TestChandeMomentumOscillator', 'test_cmo_invalid_period']]"
pyti,https://github.com/kylejusticemagnuson/pyti/tree/master/pyti/chande_momentum_oscillator.py,TestChandeMomentumOscillator,test_cmo_invalid_period,ups = [val if val > 0 else 0 for val in period_diffs],"
ups = []
for val in period_diffs:
    if val > 0:
        ups.append(val)
    else:
        ups.append(0)
",1,"[['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_chande_momentum_oscillator.py', 'tests.test_chande_momentum_oscillator', 'TestChandeMomentumOscillator', 'test_cmo_period_6'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_chande_momentum_oscillator.py', 'tests.test_chande_momentum_oscillator', 'TestChandeMomentumOscillator', 'test_cmo_period_10'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_chande_momentum_oscillator.py', 'tests.test_chande_momentum_oscillator', 'TestChandeMomentumOscillator', 'test_cmo_period_8'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_chande_momentum_oscillator.py', 'tests.test_chande_momentum_oscillator', 'TestChandeMomentumOscillator', 'test_cmo_invalid_period']]"
pyti,https://github.com/kylejusticemagnuson/pyti/tree/master/pyti/chande_momentum_oscillator.py,TestChandeMomentumOscillator,test_cmo_invalid_period,downs = [abs(val) if val < 0 else 0 for val in period_diffs],"
downs = []
for val in period_diffs:
    if val < 0:
        downs.append(abs(val))
    else:
        downs.append(0)
",1,"[['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_chande_momentum_oscillator.py', 'tests.test_chande_momentum_oscillator', 'TestChandeMomentumOscillator', 'test_cmo_period_6'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_chande_momentum_oscillator.py', 'tests.test_chande_momentum_oscillator', 'TestChandeMomentumOscillator', 'test_cmo_period_10'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_chande_momentum_oscillator.py', 'tests.test_chande_momentum_oscillator', 'TestChandeMomentumOscillator', 'test_cmo_period_8'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_chande_momentum_oscillator.py', 'tests.test_chande_momentum_oscillator', 'TestChandeMomentumOscillator', 'test_cmo_invalid_period']]"
pyti,https://github.com/kylejusticemagnuson/pyti/tree/master/pyti/standard_variance.py,TestStandardVariance,test_standard_variance_period_8,"sv = [np.var(data[idx + 1 - period:idx + 1], ddof=1) for idx in range(period - 1, len(data))]","
sv = []
for idx in range(period - 1, len(data)):
    sv.append(np.var(data[idx + 1 - period:idx + 1], ddof=1))
",1,"[['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_standard_variance.py', 'tests.test_standard_variance', 'TestStandardVariance', 'test_standard_variance_period_10'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_standard_variance.py', 'tests.test_standard_variance', 'TestStandardVariance', 'test_standard_variance_invalid_period'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_standard_variance.py', 'tests.test_standard_variance', 'TestStandardVariance', 'test_standard_variance_period_6'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_standard_variance.py', 'tests.test_standard_variance', 'TestStandardVariance', 'test_standard_variance_period_8']]"
pyti,https://github.com/kylejusticemagnuson/pyti/tree/master/pyti/stochrsi.py,TestStochRSI,test_stochrsi_period_8,"stochrsi = [100 * ((rsi[idx] - np.min(rsi[idx + 1 - period:idx + 1])) / (np.max(rsi[idx + 1 - period:idx + 1]) - np.min(rsi[idx + 1 - period:idx + 1]))) for idx in range(period - 1, len(rsi))]","
stochrsi = []
for idx in range(period - 1, len(rsi)):
    stochrsi.append(100 * ((rsi[idx] - np.min(rsi[idx + 1 - period:idx + 1])) / (np.max(rsi[idx + 1 - period:idx + 1]) - np.min(rsi[idx + 1 - period:idx + 1]))))
",1,"[['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_stochrsi.py', 'tests.test_stochrsi', 'TestStochRSI', 'test_stochrsi_period_10'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_stochrsi.py', 'tests.test_stochrsi', 'TestStochRSI', 'test_stochrsi_invalid_period'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_stochrsi.py', 'tests.test_stochrsi', 'TestStochRSI', 'test_stochrsi_period_6'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_stochrsi.py', 'tests.test_stochrsi', 'TestStochRSI', 'test_stochrsi_period_8']]"
pyti,https://github.com/kylejusticemagnuson/pyti/tree/master/pyti/money_flow_index.py,TestMoneyFlow,test_money_flow_index_invalid_period,"flow = [tp[idx] > tp[idx - 1] for idx in range(1, len(tp))]","
flow = []
for idx in range(1, len(tp)):
    flow.append(tp[idx] > tp[idx - 1])
",1,"[['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_money_flow_index.py', 'tests.test_money_flow_index', 'TestMoneyFlow', 'test_money_flow_index_period_8'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_money_flow_index.py', 'tests.test_money_flow_index', 'TestMoneyFlow', 'test_money_flow_index_period_10'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_money_flow_index.py', 'tests.test_money_flow_index', 'TestMoneyFlow', 'test_money_flow_index_invalid_data'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_money_flow_index.py', 'tests.test_money_flow_index', 'TestMoneyFlow', 'test_money_flow_index_period_6'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_money_flow_index.py', 'tests.test_money_flow_index', 'TestMoneyFlow', 'test_money_flow_index_invalid_period']]"
pyti,https://github.com/kylejusticemagnuson/pyti/tree/master/pyti/money_flow_index.py,TestMoneyFlow,test_money_flow_index_invalid_period,"pf = [mf[idx] if flow[idx] else 0 for idx in range(0, len(flow))]","
pf = []
for idx in range(0, len(flow)):
    if flow[idx]:
        pf.append(mf[idx])
    else:
        pf.append(0)
",1,"[['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_money_flow_index.py', 'tests.test_money_flow_index', 'TestMoneyFlow', 'test_money_flow_index_period_8'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_money_flow_index.py', 'tests.test_money_flow_index', 'TestMoneyFlow', 'test_money_flow_index_period_10'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_money_flow_index.py', 'tests.test_money_flow_index', 'TestMoneyFlow', 'test_money_flow_index_invalid_data'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_money_flow_index.py', 'tests.test_money_flow_index', 'TestMoneyFlow', 'test_money_flow_index_period_6'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_money_flow_index.py', 'tests.test_money_flow_index', 'TestMoneyFlow', 'test_money_flow_index_invalid_period']]"
pyti,https://github.com/kylejusticemagnuson/pyti/tree/master/pyti/money_flow_index.py,TestMoneyFlow,test_money_flow_index_invalid_period,"nf = [mf[idx] if not flow[idx] else 0 for idx in range(0, len(flow))]","
nf = []
for idx in range(0, len(flow)):
    if not flow[idx]:
        nf.append(mf[idx])
    else:
        nf.append(0)
",1,"[['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_money_flow_index.py', 'tests.test_money_flow_index', 'TestMoneyFlow', 'test_money_flow_index_period_8'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_money_flow_index.py', 'tests.test_money_flow_index', 'TestMoneyFlow', 'test_money_flow_index_period_10'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_money_flow_index.py', 'tests.test_money_flow_index', 'TestMoneyFlow', 'test_money_flow_index_invalid_data'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_money_flow_index.py', 'tests.test_money_flow_index', 'TestMoneyFlow', 'test_money_flow_index_period_6'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_money_flow_index.py', 'tests.test_money_flow_index', 'TestMoneyFlow', 'test_money_flow_index_invalid_period']]"
pyti,https://github.com/kylejusticemagnuson/pyti/tree/master/pyti/money_flow_index.py,TestMoneyFlow,test_money_flow_index_invalid_period,"pmf = [sum(pf[idx + 1 - period:idx + 1]) for idx in range(period - 1, len(pf))]","
pmf = []
for idx in range(period - 1, len(pf)):
    pmf.append(sum(pf[idx + 1 - period:idx + 1]))
",1,"[['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_money_flow_index.py', 'tests.test_money_flow_index', 'TestMoneyFlow', 'test_money_flow_index_period_8'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_money_flow_index.py', 'tests.test_money_flow_index', 'TestMoneyFlow', 'test_money_flow_index_period_10'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_money_flow_index.py', 'tests.test_money_flow_index', 'TestMoneyFlow', 'test_money_flow_index_invalid_data'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_money_flow_index.py', 'tests.test_money_flow_index', 'TestMoneyFlow', 'test_money_flow_index_period_6'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_money_flow_index.py', 'tests.test_money_flow_index', 'TestMoneyFlow', 'test_money_flow_index_invalid_period']]"
pyti,https://github.com/kylejusticemagnuson/pyti/tree/master/pyti/money_flow_index.py,TestMoneyFlow,test_money_flow_index_invalid_period,"nmf = [sum(nf[idx + 1 - period:idx + 1]) for idx in range(period - 1, len(nf))]","
nmf = []
for idx in range(period - 1, len(nf)):
    nmf.append(sum(nf[idx + 1 - period:idx + 1]))
",1,"[['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_money_flow_index.py', 'tests.test_money_flow_index', 'TestMoneyFlow', 'test_money_flow_index_period_8'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_money_flow_index.py', 'tests.test_money_flow_index', 'TestMoneyFlow', 'test_money_flow_index_period_10'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_money_flow_index.py', 'tests.test_money_flow_index', 'TestMoneyFlow', 'test_money_flow_index_invalid_data'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_money_flow_index.py', 'tests.test_money_flow_index', 'TestMoneyFlow', 'test_money_flow_index_period_6'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_money_flow_index.py', 'tests.test_money_flow_index', 'TestMoneyFlow', 'test_money_flow_index_invalid_period']]"
pyti,https://github.com/kylejusticemagnuson/pyti/tree/master/pyti/ultimate_oscillator.py,TestUltimateOscillator,test_buying_pressure,"bp = [close_data[idx] - np.min([low_data[idx], close_data[idx - 1]]) for idx in range(1, len(close_data))]","
bp = []
for idx in range(1, len(close_data)):
    bp.append(close_data[idx] - np.min([low_data[idx], close_data[idx - 1]]))
",1,"[['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_ultimate_oscillator.py', 'tests.test_ultimate_oscillator', 'TestUltimateOscillator', 'test_buying_pressure']]"
pyti,https://github.com/kylejusticemagnuson/pyti/tree/master/pyti/chaikin_money_flow.py,TestChaikinMoneyFlow,test_cmf_invalid_data,"cmf = [sum((close_data[idx + 1 - period:idx + 1] - low_data[idx + 1 - period:idx + 1] - (high_data[idx + 1 - period:idx + 1] - close_data[idx + 1 - period:idx + 1])) / (high_data[idx + 1 - period:idx + 1] - low_data[idx + 1 - period:idx + 1]) * volume[idx + 1 - period:idx + 1]) / sum(volume[idx + 1 - period:idx + 1]) for idx in range(period - 1, len(close_data))]","
cmf = []
for idx in range(period - 1, len(close_data)):
    cmf.append(sum((close_data[idx + 1 - period:idx + 1] - low_data[idx + 1 - period:idx + 1] - (high_data[idx + 1 - period:idx + 1] - close_data[idx + 1 - period:idx + 1])) / (high_data[idx + 1 - period:idx + 1] - low_data[idx + 1 - period:idx + 1]) * volume[idx + 1 - period:idx + 1]) / sum(volume[idx + 1 - period:idx + 1]))
",1,"[['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_chaikin_money_flow.py', 'tests.test_chaikin_money_flow', 'TestChaikinMoneyFlow', 'test_cmf_period_10'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_chaikin_money_flow.py', 'tests.test_chaikin_money_flow', 'TestChaikinMoneyFlow', 'test_cmf_period_6'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_chaikin_money_flow.py', 'tests.test_chaikin_money_flow', 'TestChaikinMoneyFlow', 'test_cmf_period_8'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_chaikin_money_flow.py', 'tests.test_chaikin_money_flow', 'TestChaikinMoneyFlow', 'test_cmf_invalid_period'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_chaikin_money_flow.py', 'tests.test_chaikin_money_flow', 'TestChaikinMoneyFlow', 'test_cmf_invalid_data']]"
pyti,https://github.com/kylejusticemagnuson/pyti/tree/master/pyti/price_channels.py,TestPriceChannels,test_upc_invalid_period,upper_channel = [val * (1 + float(upper_percent) / 100) for val in emas],"
upper_channel = []
for val in emas:
    upper_channel.append(val * (1 + float(upper_percent) / 100))
",1,"[['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_price_channels.py', 'tests.test_price_channels', 'TestPriceChannels', 'test_upc_period_8_upper_percent_3'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_price_channels.py', 'tests.test_price_channels', 'TestPriceChannels', 'test_upc_period_6_upper_percent_6'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_price_channels.py', 'tests.test_price_channels', 'TestPriceChannels', 'test_upc_invalid_period']]"
pyti,https://github.com/kylejusticemagnuson/pyti/tree/master/pyti/moving_average_envelope.py,TestMovingAverageEnvelope,test_upper_band_invalid_period,ub = [val * (1 + float(env_percentage)) for val in cb],"
ub = []
for val in cb:
    ub.append(val * (1 + float(env_percentage)))
",1,"[['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_moving_average_envelope.py', 'tests.test_moving_average_envelope', 'TestMovingAverageEnvelope', 'test_upper_band_period_6'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_moving_average_envelope.py', 'tests.test_moving_average_envelope', 'TestMovingAverageEnvelope', 'test_upper_band_invalid_period']]"
pyti,https://github.com/kylejusticemagnuson/pyti/tree/master/pyti/typical_price.py,TestTypicalPrice,test_typical_price,"tp = [(high_data[idx] + low_data[idx] + close_data[idx]) / 3 for idx in range(0, len(close_data))]","
tp = []
for idx in range(0, len(close_data)):
    tp.append((high_data[idx] + low_data[idx] + close_data[idx]) / 3)
",1,"[['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_typical_price.py', 'tests.test_typical_price', 'TestTypicalPrice', 'test_typical_price_invalid_data'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_typical_price.py', 'tests.test_typical_price', 'TestTypicalPrice', 'test_typical_price']]"
pyti,https://github.com/kylejusticemagnuson/pyti/tree/master/pyti/aroon.py,TestAroon,test_aroon_up_invalid_period,"a_up = [(period - list(reversed(data[idx + 1 - period:idx + 1])).index(np.max(data[idx + 1 - period:idx + 1]))) / float(period) * 100 for idx in range(period - 1, len(data))]","
a_up = []
for idx in range(period - 1, len(data)):
    a_up.append((period - list(reversed(data[idx + 1 - period:idx + 1])).index(np.max(data[idx + 1 - period:idx + 1]))) / float(period) * 100)
",1,"[['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_aroon.py', 'tests.test_aroon', 'TestAroon', 'test_aroon_up'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_aroon.py', 'tests.test_aroon', 'TestAroon', 'test_aroon_up_invalid_period']]"
pyti,https://github.com/kylejusticemagnuson/pyti/tree/master/pyti/rate_of_change.py,TestRateOfChange,test_roc_period_10,"rocs = [(data[idx] - data[idx - (period - 1)]) / data[idx - (period - 1)] * 100 for idx in range(period - 1, len(data))]","
rocs = []
for idx in range(period - 1, len(data)):
    rocs.append((data[idx] - data[idx - (period - 1)]) / data[idx - (period - 1)] * 100)
",1,"[['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_rate_of_change.py', 'tests.test_rate_of_change', 'TestRateOfChange', 'test_roc_period_8'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_rate_of_change.py', 'tests.test_rate_of_change', 'TestRateOfChange', 'test_roc_invalid_period'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_rate_of_change.py', 'tests.test_rate_of_change', 'TestRateOfChange', 'test_roc_period_6'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_rate_of_change.py', 'tests.test_rate_of_change', 'TestRateOfChange', 'test_roc_period_10']]"
pyti,https://github.com/kylejusticemagnuson/pyti/tree/master/pyti/standard_deviation.py,TestStandardDeviation,test_standard_deviation_period_6,"stds = [np.std(data[idx + 1 - period:idx + 1], ddof=1) for idx in range(period - 1, len(data))]","
stds = []
for idx in range(period - 1, len(data)):
    stds.append(np.std(data[idx + 1 - period:idx + 1], ddof=1))
",1,"[['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_standard_deviation.py', 'tests.test_standard_deviation', 'TestStandardDeviation', 'test_standard_deviation_period_8'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_standard_deviation.py', 'tests.test_standard_deviation', 'TestStandardDeviation', 'test_standard_deviation_invalid_period'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_standard_deviation.py', 'tests.test_standard_deviation', 'TestStandardDeviation', 'test_standard_deviation_period_10'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_standard_deviation.py', 'tests.test_standard_deviation', 'TestStandardDeviation', 'test_standard_deviation_period_6']]"
pyti,https://github.com/kylejusticemagnuson/pyti/tree/master/pyti/vertical_horizontal_filter.py,TestVerticalHorizontalFilter,test_vertical_horizontal_filter_period_8,"vhf = [abs(np.max(data[idx + 1 - period:idx + 1]) - np.min(data[idx + 1 - period:idx + 1])) / sum([abs(data[idx + 1 - period:idx + 1][i] - data[idx + 1 - period:idx + 1][i - 1]) for i in range(0, len(data[idx + 1 - period:idx + 1]))]) for idx in range(period - 1, len(data))]","
vhf = []
for idx in range(period - 1, len(data)):
    vhf.append(abs(np.max(data[idx + 1 - period:idx + 1]) - np.min(data[idx + 1 - period:idx + 1])) / sum([abs(data[idx + 1 - period:idx + 1][i] - data[idx + 1 - period:idx + 1][i - 1]) for i in range(0, len(data[idx + 1 - period:idx + 1]))]))
",1,"[['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_vertical_horizontal_filter.py', 'tests.test_vertical_horizontal_filter', 'TestVerticalHorizontalFilter', 'test_vertical_horizontal_filter_period_6'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_vertical_horizontal_filter.py', 'tests.test_vertical_horizontal_filter', 'TestVerticalHorizontalFilter', 'test_vertical_horizontal_filter_invalid_period'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_vertical_horizontal_filter.py', 'tests.test_vertical_horizontal_filter', 'TestVerticalHorizontalFilter', 'test_vertical_horizontal_filter_period_10'], ['https://github.com/kylejusticemagnuson/pyti/tree/master/tests/test_vertical_horizontal_filter.py', 'tests.test_vertical_horizontal_filter', 'TestVerticalHorizontalFilter', 'test_vertical_horizontal_filter_period_8']]"
gitfs,https://github.com/presslabs/gitfs/tree/master/gitfs/views/commit.py,TestCommitView,test_readdir_without_tree_name,"dir_entries = ['.', '..'] + [entry.name for entry in dir_tree]","tmp_ListComp0 = []
for entry in dir_tree:
    tmp_ListComp0.append(entry.name)

dir_entries = ['.', '..'] + tmp_ListComp0
",1,"[['https://github.com/presslabs/gitfs/tree/master/tests/views/test_commit.py', 'tests.views.test_commit', 'TestCommitView', 'test_readdir_with_tree_name'], ['https://github.com/presslabs/gitfs/tree/master/tests/views/test_commit.py', 'tests.views.test_commit', 'TestCommitView', 'test_readdir_without_tree_name']]"
dfply,https://github.com/kieferk/dfply/tree/master/dfply/transform.py,,test_group_transmute,columns = [k for k in kwargs.keys()] + list(keep_cols),"tmp_ListComp0 = []
for k in kwargs.keys():
    tmp_ListComp0.append(k)

columns = tmp_ListComp0 + list(keep_cols)
",1,"[['https://github.com/kieferk/dfply/tree/master/test/test_transform.py', 'test.test_transform', '', 'test_transmute'], ['https://github.com/kieferk/dfply/tree/master/test/test_transform.py', 'test.test_transform', '', 'test_group_transmute']]"
dfply,https://github.com/kieferk/dfply/tree/master/dfply/vector.py,,test_order_series_by,sorter_columns = ['_sorter' + str(i) for i in range(len(order_series))],"
sorter_columns = []
for i in range(len(order_series)):
    sorter_columns.append('_sorter' + str(i))
",1,"[['https://github.com/kieferk/dfply/tree/master/test/test_vector.py', 'test.test_vector', '', 'test_order_series_by']]"
dfply,https://github.com/kieferk/dfply/tree/master/dfply/vector.py,,test_coalesce,series = [pd.Series(s) for s in series],"tmp_ListComp0 = []
for s in series:
    tmp_ListComp0.append(pd.Series(s))

series = tmp_ListComp0
",1,"[['https://github.com/kieferk/dfply/tree/master/test/test_vector.py', 'test.test_vector', '', 'test_coalesce']]"
dfply,https://github.com/kieferk/dfply/tree/master/dfply/vector.py,,test_coalesce,min_nonna = [coalescer.columns[i] for i in min_nonna],"tmp_ListComp0 = []
for i in min_nonna:
    tmp_ListComp0.append(coalescer.columns[i])

min_nonna = tmp_ListComp0
",1,"[['https://github.com/kieferk/dfply/tree/master/test/test_vector.py', 'test.test_vector', '', 'test_coalesce']]"
dfply,https://github.com/kieferk/dfply/tree/master/dfply/vector.py,,test_if_else,"output = np.array([when_true[i] if c else otherwise[i] for (i, c) in enumerate(condition)])","tmp_ListComp0 = []
for (i, c) in enumerate(condition):
    if c:
        tmp_ListComp0.append(when_true[i])
    else:
        tmp_ListComp0.append(otherwise[i])

output = np.array(tmp_ListComp0)
",1,"[['https://github.com/kieferk/dfply/tree/master/test/test_vector.py', 'test.test_vector', '', 'test_if_else']]"
dfply,https://github.com/kieferk/dfply/tree/master/dfply/join.py,,test_semi_join,right_on = [col_name for col_name in df.columns.values.tolist() if col_name in other.columns.values.tolist()],"
right_on = []
for col_name in df.columns.values.tolist():
    if col_name in other.columns.values.tolist():
        right_on.append(col_name)
",1,"[['https://github.com/kieferk/dfply/tree/master/test/test_join.py', 'test.test_join', '', 'test_semi_join']]"
dfply,https://github.com/kieferk/dfply/tree/master/dfply/join.py,,test_anti_join,right_on = [col_name for col_name in df.columns.values.tolist() if col_name in other.columns.values.tolist()],"
right_on = []
for col_name in df.columns.values.tolist():
    if col_name in other.columns.values.tolist():
        right_on.append(col_name)
",1,"[['https://github.com/kieferk/dfply/tree/master/test/test_join.py', 'test.test_join', '', 'test_anti_join']]"
dfply,https://github.com/kieferk/dfply/tree/master/dfply/set_ops.py,,test_union,index_cols = [col for col in stacked_reset_indexes.columns if col not in df.columns],"
index_cols = []
for col in stacked_reset_indexes.columns:
    if col not in df.columns:
        index_cols.append(col)
",1,"[['https://github.com/kieferk/dfply/tree/master/test/test_join.py', 'test.test_join', '', 'test_union']]"
dfply,https://github.com/kieferk/dfply/tree/master/dfply/set_ops.py,,test_intersect,index_cols = [col for col in df_reset_index.columns if col not in df.columns],"
index_cols = []
for col in df_reset_index.columns:
    if col not in df.columns:
        index_cols.append(col)
",1,"[['https://github.com/kieferk/dfply/tree/master/test/test_join.py', 'test.test_join', '', 'test_intersect']]"
dfply,https://github.com/kieferk/dfply/tree/master/dfply/set_ops.py,,test_set_diff,index_cols = [col for col in df_reset_index.columns if col not in df.columns],"
index_cols = []
for col in df_reset_index.columns:
    if col not in df.columns:
        index_cols.append(col)
",1,"[['https://github.com/kieferk/dfply/tree/master/test/test_join.py', 'test.test_join', '', 'test_set_diff']]"
dfply,https://github.com/kieferk/dfply/tree/master/dfply/select.py,,test_desc,ordering = [c for c in ordering if c in df.columns],"tmp_ListComp0 = []
for c in ordering:
    if c in df.columns:
        tmp_ListComp0.append(c)

ordering = tmp_ListComp0
",1,"[['https://github.com/kieferk/dfply/tree/master/test/test_vector.py', 'test.test_vector', '', 'test_desc']]"
rdflib,https://github.com/RDFLib/rdflib/tree/master/rdflib/util.py,TestUtilMisc,test_util_list2set,return [x for x in seq if x not in seen and (not seen.add(x))],"tmp_ListComp0 = []
for x in seq:
    if x not in seen and (not seen.add(x)):
        tmp_ListComp0.append(x)

return tmp_ListComp0
",1,"[['https://github.com/RDFLib/rdflib/tree/master/test/test_util.py', 'test.test_util', 'TestUtilMisc', 'test_util_list2set']]"
tavern,https://github.com/taverntesting/tavern/tree/master/tavern/util/strict_util.py,,test_nothing_returned_fails,return cls.from_options([i + ':on' for i in valid_keys]),"tmp_ListComp0 = []
for i in valid_keys:
    tmp_ListComp0.append(i + ':on')

return cls.from_options(tmp_ListComp0)
",1,"[['https://github.com/taverntesting/tavern/tree/master/tests/unit/response/test_mqtt_response.py', 'tests.unit.response.test_mqtt_response', '', 'test_nothing_returned_fails']]"
tavern,https://github.com/taverntesting/tavern/tree/master/tavern/util/dict_util.py,TestFormatKeys,test_format_missing_raises,"formatted = [format_keys(item, box_vars) for item in val]","
formatted = []
for item in val:
    formatted.append(format_keys(item, box_vars))
",1,"[['https://github.com/taverntesting/tavern/tree/master/tests/unit/response/test_rest.py', 'tests.unit.response.test_rest', 'TestFull', 'test_saved_value_in_validate'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_utilities.py', 'tests.unit.test_utilities', 'TestFormatKeys', 'test_format_success'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_utilities.py', 'tests.unit.test_utilities', 'TestFormatKeys', 'test_no_double_format_failure'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_utilities.py', 'tests.unit.test_utilities', 'TestFormatKeys', 'test_format_missing_raises']]"
tavern,https://github.com/taverntesting/tavern/tree/master/tavern/_plugins/rest/request.py,TestRequestArgs,test_array_substitution,in_request = [c for c in content_keys if c in rspec],"
in_request = []
for c in content_keys:
    if c in rspec:
        in_request.append(c)
",1,"[['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_request.py', 'tests.unit.test_request', 'TestRequestArgs', 'test_no_override_method'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_request.py', 'tests.unit.test_request', 'TestRequestArgs', 'test_file_and_data_succeeds'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_request.py', 'tests.unit.test_request', 'TestRequestArgs', 'test_no_override_content_type'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_request.py', 'tests.unit.test_request', 'TestRequestArgs', 'test_file_and_json_fails'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_request.py', 'tests.unit.test_request', 'TestRequestArgs', 'test_default_method'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_request.py', 'tests.unit.test_request', 'TestFileBody', 'test_file_body'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_request.py', 'tests.unit.test_request', 'TestRequestArgs', 'test_cannot_send_data_and_json'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_request.py', 'tests.unit.test_request', 'TestRequestArgs', 'test_no_set_content_type'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_request.py', 'tests.unit.test_request', 'TestRequestArgs', 'test_no_override_content_type_case_insensitive'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_request.py', 'tests.unit.test_request', 'TestRequestArgs', 'test_nested_params_encoded'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_request.py', 'tests.unit.test_request', 'TestRequestArgs', 'test_array_substitution']]"
tavern,https://github.com/taverntesting/tavern/tree/master/tavern/_plugins/rest/request.py,TestRequestArgs,test_array_substitution,has_content_header = 'content-type' in [h.lower() for h in headers.keys()],"tmp_ListComp0 = []
for h in headers.keys():
    tmp_ListComp0.append(h.lower())

has_content_header = 'content-type' in tmp_ListComp0
",1,"[['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_request.py', 'tests.unit.test_request', 'TestRequestArgs', 'test_no_override_method'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_request.py', 'tests.unit.test_request', 'TestRequestArgs', 'test_file_and_data_succeeds'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_request.py', 'tests.unit.test_request', 'TestRequestArgs', 'test_no_override_content_type'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_request.py', 'tests.unit.test_request', 'TestRequestArgs', 'test_file_and_json_fails'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_request.py', 'tests.unit.test_request', 'TestRequestArgs', 'test_default_method'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_request.py', 'tests.unit.test_request', 'TestFileBody', 'test_file_body'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_request.py', 'tests.unit.test_request', 'TestRequestArgs', 'test_cannot_send_data_and_json'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_request.py', 'tests.unit.test_request', 'TestRequestArgs', 'test_no_set_content_type'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_request.py', 'tests.unit.test_request', 'TestRequestArgs', 'test_no_override_content_type_case_insensitive'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_request.py', 'tests.unit.test_request', 'TestRequestArgs', 'test_nested_params_encoded'], ['https://github.com/taverntesting/tavern/tree/master/tests/unit/test_request.py', 'tests.unit.test_request', 'TestRequestArgs', 'test_array_substitution']]"
Growler,https://github.com/pyGrowler/Growler/tree/master/growler/routing.py,,test_sinatra_passes_regex,regex = ['(?P<{}>\\w+)'.format(segment[1:]) if cls.sinatra_param_regex.match(segment) else segment for segment in path.split('/')],"
regex = []
for segment in path.split('/'):
    if cls.sinatra_param_regex.match(segment):
        regex.append('(?P<{}>\\w+)'.format(segment[1:]))
    else:
        regex.append(segment)
",1,"[['https://github.com/pyGrowler/Growler/tree/master/tests/test_router.py', 'tests.test_router', '', 'test_sinatra_passes_regex']]"
Growler,https://github.com/pyGrowler/Growler/tree/master/growler/http/response.py,,test_links,"s = ['<{}>; rel=""{}""'.format(link, rel) for (link, rel) in links.items()]","
s = []
for (link, rel) in links.items():
    s.append('<{}>; rel=""{}""'.format(link, rel))
",1,"[['https://github.com/pyGrowler/Growler/tree/master/tests/test_http_response.py', 'tests.test_http_response', '', 'test_links']]"
Box,https://github.com/cdgriffith/Box/tree/master/box/box.py,TestBox,test_item_view,"return [(k, self[k]) for k in self.keys(dotted=True)]","tmp_ListComp0 = []
for k in self.keys(dotted=True):
    tmp_ListComp0.append((k, self[k]))

return tmp_ListComp0
",1,"[['https://github.com/cdgriffith/Box/tree/master/test/test_box.py', 'test.test_box', 'TestBox', 'test_items'], ['https://github.com/cdgriffith/Box/tree/master/test/test_box.py', 'test.test_box', 'TestBox', 'test_item_view']]"
opytimizer,https://github.com/gugarosa/opytimizer/tree/master/opytimizer/math/general.py,,test_kmeans,"dists = np.squeeze(np.array([np.linalg.norm(x - c, axis=1) for c in centroids]))","def my_comprehension_func(np):
    tmp_ListComp0 = []
    for c in centroids:
        tmp_ListComp0.append(np.linalg.norm(x - c, axis=1))
    return tmp_ListComp0

dists = np.squeeze(np.array(my_comprehension_func(np)))
",1,"[['https://github.com/gugarosa/opytimizer/tree/master/tests/opytimizer/math/test_general.py', 'tests.opytimizer.math.test_general', '', 'test_kmeans']]"
opytimizer,https://github.com/gugarosa/opytimizer/tree/master/opytimizer/math/general.py,,test_tournament_selection,step = [np.random.choice(fitness) for _ in range(size)],"
step = []
for _ in range(size):
    step.append(np.random.choice(fitness))
",1,"[['https://github.com/gugarosa/opytimizer/tree/master/tests/opytimizer/math/test_general.py', 'tests.opytimizer.math.test_general', '', 'test_tournament_selection']]"
fuzzowski,https://github.com/nccgroup/fuzzowski/tree/master/fuzzowski/mutants/primitives/string.py,,test_string_filename,self._file_mutations.extend([l.strip() for l in _file_handle.readlines() if len(l) > 1]),"tmp_ListComp0 = []
for l in _file_handle.readlines():
    if len(l) > 1:
        tmp_ListComp0.append(l.strip())

self._file_mutations.extend(tmp_ListComp0)
",1,"[['https://github.com/nccgroup/fuzzowski/tree/master/tests/test_primitives_string.py', 'tests.test_primitives_string', '', 'test_string_filename']]"
html5lib-python,https://github.com/html5lib/html5lib-python/tree/master/html5lib/_inputstream.py,,test_newlines2,encodings = [x for x in kwargs if x.endswith('_encoding')],"
encodings = []
for x in kwargs:
    if x.endswith('_encoding'):
        encodings.append(x)
",1,"[['https://github.com/html5lib/html5lib-python/tree/master/html5lib/tests/test_stream.py', 'html5lib.tests.test_stream', '', 'test_bom'], ['https://github.com/html5lib/html5lib-python/tree/master/html5lib/tests/test_stream.py', 'html5lib.tests.test_stream', '', 'test_char_utf8'], ['https://github.com/html5lib/html5lib-python/tree/master/html5lib/tests/test_stream.py', 'html5lib.tests.test_stream', '', 'test_char_ascii'], ['https://github.com/html5lib/html5lib-python/tree/master/html5lib/tests/test_stream.py', 'html5lib.tests.test_stream', '', 'test_python_issue_20007'], ['https://github.com/html5lib/html5lib-python/tree/master/html5lib/tests/test_stream.py', 'html5lib.tests.test_stream', '', 'test_python_issue_20007_b'], ['https://github.com/html5lib/html5lib-python/tree/master/html5lib/tests/test_stream.py', 'html5lib.tests.test_stream', '', 'test_utf_16'], ['https://github.com/html5lib/html5lib-python/tree/master/html5lib/tests/test_stream.py', 'html5lib.tests.test_stream', '', 'test_char_win1252'], ['https://github.com/html5lib/html5lib-python/tree/master/html5lib/tests/test_stream.py', 'html5lib.tests.test_stream', '', 'test_newlines2']]"
html5lib-python,https://github.com/html5lib/html5lib-python/tree/master/html5lib/_inputstream.py,,test_newlines2,regex = ''.join(['\\x%02x' % ord(c) for c in characters]),"tmp_ListComp0 = []
for c in characters:
    tmp_ListComp0.append('\\x%02x' % ord(c))

regex = ''.join(tmp_ListComp0)
",1,"[['https://github.com/html5lib/html5lib-python/tree/master/html5lib/tests/test_stream.py', 'html5lib.tests.test_stream', '', 'test_newlines'], ['https://github.com/html5lib/html5lib-python/tree/master/html5lib/tests/test_stream.py', 'html5lib.tests.test_stream', '', 'test_position'], ['https://github.com/html5lib/html5lib-python/tree/master/html5lib/tests/test_stream.py', 'html5lib.tests.test_stream', '', 'test_python_issue_20007'], ['https://github.com/html5lib/html5lib-python/tree/master/html5lib/tests/test_stream.py', 'html5lib.tests.test_stream', '', 'test_python_issue_20007_b'], ['https://github.com/html5lib/html5lib-python/tree/master/html5lib/tests/test_stream.py', 'html5lib.tests.test_stream', '', 'test_utf_16'], ['https://github.com/html5lib/html5lib-python/tree/master/html5lib/tests/test_stream.py', 'html5lib.tests.test_stream', '', 'test_newlines2']]"
xonsh,https://github.com/xonsh/xonsh/tree/master/xonsh/wizard.py,,test_tuple_store_and_write,ex = [{} for _ in range(i)],"
ex = []
for _ in range(i):
    ex.append({})
",1,"[['https://github.com/xonsh/xonsh/tree/master/tests/test_wizard.py', 'tests.test_wizard', '', 'test_state_visitor_store'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_wizard.py', 'tests.test_wizard', '', 'test_tuple_store_and_write']]"
xonsh,https://github.com/xonsh/xonsh/tree/master/xonsh/wizard.py,,test_tuple_store_and_write,ex = [[] for _ in range(i)],"
ex = []
for _ in range(i):
    ex.append([])
",1,"[['https://github.com/xonsh/xonsh/tree/master/tests/test_wizard.py', 'tests.test_wizard', '', 'test_state_visitor_store'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_wizard.py', 'tests.test_wizard', '', 'test_tuple_store_and_write']]"
xonsh,https://github.com/xonsh/xonsh/tree/master/xonsh/main.py,,test_python_rc,"env.update([x.split('=', 1) for x in args.defines])","tmp_ListComp0 = []
for x in args.defines:
    tmp_ListComp0.append(x.split('=', 1))

env.update(tmp_ListComp0)
",1,"[['https://github.com/xonsh/xonsh/tree/master/tests/test_main.py', 'tests.test_main', '', 'test_rc_with_failing_module'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_main.py', 'tests.test_main', '', 'test_rcdir_cli'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_main.py', 'tests.test_main', '', 'test_no_rc_with_script'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_main.py', 'tests.test_main', '', 'test_rcdir_ignored_with_rc'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_main.py', 'tests.test_main', '', 'test_premain_interactive'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_main.py', 'tests.test_main', '', 'test_rcdir_empty'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_main.py', 'tests.test_main', '', 'test_premain_timings_arg'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_main.py', 'tests.test_main', '', 'test_force_interactive_custom_rc_with_script'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_main.py', 'tests.test_main', '', 'test_premain_interactive__with_file_argument'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_main.py', 'tests.test_main', '', 'test_premain_no_rc'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_main.py', 'tests.test_main', '', 'test_premain_login_command'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_main.py', 'tests.test_main', '', 'test_force_interactive_rc_with_script'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_main.py', 'tests.test_main', '', 'test_custom_rc_with_script'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_main.py', 'tests.test_main', '', 'test_premain_custom_rc'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_main.py', 'tests.test_main', '', 'test_rc_with_modules'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_main.py', 'tests.test_main', '', 'test_premain_D'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_main.py', 'tests.test_main', '', 'test_premain_no_arg'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_main.py', 'tests.test_main', '', 'test_premain_login'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_main.py', 'tests.test_main', '', 'test_rc_with_modified_path'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_main.py', 'tests.test_main', '', 'test_rcdir'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_main.py', 'tests.test_main', '', 'test_python_rc']]"
xonsh,https://github.com/xonsh/xonsh/tree/master/xonsh/foreign_shells.py,,test_parse_aliases,"items = [line.split('=', 1) for line in g1.splitlines() if line.startswith('alias ') and '=' in line]","
items = []
for line in g1.splitlines():
    if line.startswith('alias ') and '=' in line:
        items.append(line.split('=', 1))
",1,"[['https://github.com/xonsh/xonsh/tree/master/tests/test_foreign_shells.py', 'tests.test_foreign_shells', '', 'test_parse_aliases']]"
CTCDecoder,https://github.com/githubharald/CTCDecoder/tree/master/ctc_decoder/token_passing.py,,test_token_passing,"label_words = [common.word_to_label_seq(w, chars) for w in words]","
label_words = []
for w in words:
    label_words.append(common.word_to_label_seq(w, chars))
",1,"[['https://github.com/githubharald/CTCDecoder/tree/master/tests/test_mini_example.py', 'tests.test_mini_example', '', 'test_token_passing']]"
CTCDecoder,https://github.com/githubharald/CTCDecoder/tree/master/ctc_decoder/token_passing.py,,test_token_passing,"prime_words = [common.extend_by_blanks(w, blank_idx) for w in label_words]","
prime_words = []
for w in label_words:
    prime_words.append(common.extend_by_blanks(w, blank_idx))
",1,"[['https://github.com/githubharald/CTCDecoder/tree/master/tests/test_mini_example.py', 'tests.test_mini_example', '', 'test_token_passing']]"
CTCDecoder,https://github.com/githubharald/CTCDecoder/tree/master/ctc_decoder/token_passing.py,,test_token_passing,"return str(' ').join([words[i] for i in toks.get(best_w_idx, end, max_T).history])","tmp_ListComp0 = []
for i in toks.get(best_w_idx, end, max_T).history:
    tmp_ListComp0.append(words[i])

return str(' ').join(tmp_ListComp0)
",1,"[['https://github.com/githubharald/CTCDecoder/tree/master/tests/test_mini_example.py', 'tests.test_mini_example', '', 'test_token_passing']]"
CTCDecoder,https://github.com/githubharald/CTCDecoder/tree/master/ctc_decoder/best_path.py,,test_best_path,"best_chars_collapsed = [chars[k] for (k, _) in groupby(best_path_indices) if k != blank_idx]","
best_chars_collapsed = []
for (k, _) in groupby(best_path_indices):
    if k != blank_idx:
        best_chars_collapsed.append(chars[k])
",1,"[['https://github.com/githubharald/CTCDecoder/tree/master/tests/test_mini_example.py', 'tests.test_mini_example', '', 'test_best_path']]"
CTCDecoder,https://github.com/githubharald/CTCDecoder/tree/master/ctc_decoder/beam_search.py,,test_beam_search,res = ''.join([chars[label] for label in best_labeling]),"tmp_ListComp0 = []
for label in best_labeling:
    tmp_ListComp0.append(chars[label])

res = ''.join(tmp_ListComp0)
",1,"[['https://github.com/githubharald/CTCDecoder/tree/master/tests/test_mini_example.py', 'tests.test_mini_example', '', 'test_beam_search']]"
not-youtube-dl,https://github.com/scastillo/not-youtube-dl/tree/master/youtube_dl/utils.py,TestUtil,test_xpath_with_ns,components = [c.split(':') for c in path.split('/')],"
components = []
for c in path.split('/'):
    components.append(c.split(':'))
",1,"[['https://github.com/scastillo/not-youtube-dl/tree/master/test/test_utils.py', 'test.test_utils', 'TestUtil', 'test_xpath_with_ns']]"
not-youtube-dl,https://github.com/scastillo/not-youtube-dl/tree/master/youtube_dl/compat.py,TestCompat,test_compat_urllib_parse_urlencode,return [encode_elem(e) for e in l],"tmp_ListComp0 = []
for e in l:
    tmp_ListComp0.append(encode_elem(e))

return tmp_ListComp0
",1,"[['https://github.com/scastillo/not-youtube-dl/tree/master/test/test_compat.py', 'test.test_compat', 'TestCompat', 'test_compat_urllib_parse_urlencode']]"
appdirs,https://github.com/ActiveState/appdirs/tree/master//appdirs.py,Test_AppDir,test_helpers,pathlist = [os.path.expanduser(x.rstrip(os.sep)) for x in path.split(os.pathsep)],"
pathlist = []
for x in path.split(os.pathsep):
    pathlist.append(os.path.expanduser(x.rstrip(os.sep)))
",1,"[['https://github.com/ActiveState/appdirs/tree/master/test/test_api.py', 'test.test_api', 'Test_AppDir', 'test_helpers']]"
appdirs,https://github.com/ActiveState/appdirs/tree/master//appdirs.py,Test_AppDir,test_helpers,"pathlist = [os.sep.join([x, appname]) for x in pathlist]","tmp_ListComp0 = []
for x in pathlist:
    tmp_ListComp0.append(os.sep.join([x, appname]))

pathlist = tmp_ListComp0
",1,"[['https://github.com/ActiveState/appdirs/tree/master/test/test_api.py', 'test.test_api', 'Test_AppDir', 'test_helpers']]"
