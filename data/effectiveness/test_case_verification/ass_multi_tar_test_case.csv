repo_name,file_html,cl,me,old_code,new_code,flag_pass,test_html_list
gunicorn,https://github.com/benoitc/gunicorn/tree/master/gunicorn/util.py,,test_parse_address_invalid,"(host, port) = (netloc, default_port)","
host = netloc
port = default_port
",1,"[['https://github.com/benoitc/gunicorn/tree/master/tests/test_util.py', 'tests.test_util', '', 'test_parse_fd_invalid'], ['https://github.com/benoitc/gunicorn/tree/master/tests/test_util.py', 'tests.test_util', '', 'test_parse_address_invalid']]"
gunicorn,https://github.com/benoitc/gunicorn/tree/master/gunicorn/util.py,,test_parse_address_invalid,"(host, port) = (netloc.split(':') + [default_port])[:2]","
tmp_fun_0 = (netloc.split(':') + [default_port])[:2]
host = tmp_fun_0[0]
port = tmp_fun_0[1]
",1,"[['https://github.com/benoitc/gunicorn/tree/master/tests/test_util.py', 'tests.test_util', '', 'test_parse_fd_invalid'], ['https://github.com/benoitc/gunicorn/tree/master/tests/test_util.py', 'tests.test_util', '', 'test_parse_address_invalid']]"
gunicorn,https://github.com/benoitc/gunicorn/tree/master/gunicorn/util.py,,test_parse_address_invalid,"(host, port) = ('0.0.0.0', default_port)","
host = '0.0.0.0'
port = default_port
",1,"[['https://github.com/benoitc/gunicorn/tree/master/tests/test_util.py', 'tests.test_util', '', 'test_parse_fd_invalid'], ['https://github.com/benoitc/gunicorn/tree/master/tests/test_util.py', 'tests.test_util', '', 'test_parse_address_invalid']]"
gunicorn,https://github.com/benoitc/gunicorn/tree/master/gunicorn/util.py,,test_import_app_py_ext,"(module, obj) = (parts[0], parts[1])","
module = parts[0]
obj = parts[1]
",1,"[['https://github.com/benoitc/gunicorn/tree/master/tests/test_util.py', 'tests.test_util', '', 'test_import_app_py_ext']]"
gunicorn,https://github.com/benoitc/gunicorn/tree/master/gunicorn/util.py,,test_import_app_py_ext,args = kwargs = None,"
tmp_value = None
args = tmp_value
kwargs = tmp_value
",1,"[['https://github.com/benoitc/gunicorn/tree/master/tests/test_util.py', 'tests.test_util', '', 'test_import_app_py_ext']]"
gunicorn,https://github.com/benoitc/gunicorn/tree/master/gunicorn/http/body.py,,test_eof_reader_read_invalid_size,"(ret, rest) = (data[:size], data[size:])","
ret = data[:size]
rest = data[size:]
",1,"[['https://github.com/benoitc/gunicorn/tree/master/tests/test_http.py', 'tests.test_http', '', 'test_length_reader_read'], ['https://github.com/benoitc/gunicorn/tree/master/tests/test_http.py', 'tests.test_http', '', 'test_eof_reader_read'], ['https://github.com/benoitc/gunicorn/tree/master/tests/test_http.py', 'tests.test_http', '', 'test_length_reader_read_invalid_size'], ['https://github.com/benoitc/gunicorn/tree/master/tests/test_http.py', 'tests.test_http', '', 'test_eof_reader_read_invalid_size']]"
gunicorn,https://github.com/benoitc/gunicorn/tree/master/gunicorn/http/body.py,,test_eof_reader_read_invalid_size,"(ret, rest) = (data[:size], data[size:])","
ret = data[:size]
rest = data[size:]
",1,"[['https://github.com/benoitc/gunicorn/tree/master/tests/test_http.py', 'tests.test_http', '', 'test_length_reader_read'], ['https://github.com/benoitc/gunicorn/tree/master/tests/test_http.py', 'tests.test_http', '', 'test_eof_reader_read'], ['https://github.com/benoitc/gunicorn/tree/master/tests/test_http.py', 'tests.test_http', '', 'test_length_reader_read_invalid_size'], ['https://github.com/benoitc/gunicorn/tree/master/tests/test_http.py', 'tests.test_http', '', 'test_eof_reader_read_invalid_size']]"
feature_engine,https://github.com/feature-engine/feature_engine/tree/master/feature_engine/selection/target_mean_selection.py,,test_error_if_input_not_df,"(X_train, X_test) = (X.iloc[train_index], X.iloc[test_index])","
X_train = X.iloc[train_index]
X_test = X.iloc[test_index]
",1,"[['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_target_mean_selection.py', 'tests.test_selection.test_target_mean_selection', '', 'test_df_cat_and_num_variables_r2'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_target_mean_selection.py', 'tests.test_selection.test_target_mean_selection', '', 'test_error_if_fit_input_not_dataframe'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_target_mean_selection.py', 'tests.test_selection.test_target_mean_selection', '', 'test_df_cat_and_num_variables_roc_auc'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_target_mean_selection.py', 'tests.test_selection.test_target_mean_selection', '', 'test_error_if_y_not_passed'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_target_mean_selection.py', 'tests.test_selection.test_target_mean_selection', '', 'test_categorical_variables_roc_auc'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_target_mean_selection.py', 'tests.test_selection.test_target_mean_selection', '', 'test_numerical_variables_roc_auc'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_target_mean_selection.py', 'tests.test_selection.test_target_mean_selection', '', 'test_error_if_input_not_df']]"
feature_engine,https://github.com/feature-engine/feature_engine/tree/master/feature_engine/selection/target_mean_selection.py,,test_error_if_input_not_df,"(y_train, y_test) = (y.iloc[train_index], y.iloc[test_index])","
y_train = y.iloc[train_index]
y_test = y.iloc[test_index]
",1,"[['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_target_mean_selection.py', 'tests.test_selection.test_target_mean_selection', '', 'test_df_cat_and_num_variables_r2'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_target_mean_selection.py', 'tests.test_selection.test_target_mean_selection', '', 'test_error_if_fit_input_not_dataframe'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_target_mean_selection.py', 'tests.test_selection.test_target_mean_selection', '', 'test_df_cat_and_num_variables_roc_auc'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_target_mean_selection.py', 'tests.test_selection.test_target_mean_selection', '', 'test_error_if_y_not_passed'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_target_mean_selection.py', 'tests.test_selection.test_target_mean_selection', '', 'test_categorical_variables_roc_auc'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_target_mean_selection.py', 'tests.test_selection.test_target_mean_selection', '', 'test_numerical_variables_roc_auc'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_target_mean_selection.py', 'tests.test_selection.test_target_mean_selection', '', 'test_error_if_input_not_df']]"
feature_engine,https://github.com/feature-engine/feature_engine/tree/master/feature_engine/selection/drop_psi_features.py,,test_raise_error_if_na_in_df,"(basis_df, test_df) = self._split_dataframe(X)","
tmp_fun_0 = self._split_dataframe(X)
basis_df = tmp_fun_0[0]
test_df = tmp_fun_0[1]
",1,"[['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_drop_high_psi_features.py', 'tests.test_selection.test_drop_high_psi_features', '', 'test_raise_error_if_inf_in_df'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_drop_high_psi_features.py', 'tests.test_selection.test_drop_high_psi_features', '', 'test_transform_feature_to_drop_not_present'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_drop_high_psi_features.py', 'tests.test_selection.test_drop_high_psi_features', '', 'test_transform_standard'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_drop_high_psi_features.py', 'tests.test_selection.test_drop_high_psi_features', '', 'test_switch'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_drop_high_psi_features.py', 'tests.test_selection.test_drop_high_psi_features', '', 'test_split_col_not_included_in_variables'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_drop_high_psi_features.py', 'tests.test_selection.test_drop_high_psi_features', '', 'test_transform_different_number_of_columns'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_drop_high_psi_features.py', 'tests.test_selection.test_drop_high_psi_features', '', 'test_raise_error_if_na_in_df']]"
feature_engine,https://github.com/feature-engine/feature_engine/tree/master/feature_engine/selection/drop_psi_features.py,,test_raise_error_if_na_in_df,"(test_df, basis_df) = (basis_df, test_df)","
tmp0 = test_df
test_df = basis_df
basis_df = tmp0
",1,"[['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_drop_high_psi_features.py', 'tests.test_selection.test_drop_high_psi_features', '', 'test_raise_error_if_inf_in_df'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_drop_high_psi_features.py', 'tests.test_selection.test_drop_high_psi_features', '', 'test_transform_feature_to_drop_not_present'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_drop_high_psi_features.py', 'tests.test_selection.test_drop_high_psi_features', '', 'test_transform_standard'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_drop_high_psi_features.py', 'tests.test_selection.test_drop_high_psi_features', '', 'test_switch'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_drop_high_psi_features.py', 'tests.test_selection.test_drop_high_psi_features', '', 'test_split_col_not_included_in_variables'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_drop_high_psi_features.py', 'tests.test_selection.test_drop_high_psi_features', '', 'test_transform_different_number_of_columns'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_drop_high_psi_features.py', 'tests.test_selection.test_drop_high_psi_features', '', 'test_raise_error_if_na_in_df']]"
feature_engine,https://github.com/feature-engine/feature_engine/tree/master/feature_engine/selection/drop_psi_features.py,,test_raise_error_if_na_in_df,"(basis_distrib, test_distrib) = self._observation_frequency_per_bin(basis_discrete, test_discrete)","
tmp_fun_0 = self._observation_frequency_per_bin(basis_discrete, test_discrete)
basis_distrib = tmp_fun_0[0]
test_distrib = tmp_fun_0[1]
",1,"[['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_drop_high_psi_features.py', 'tests.test_selection.test_drop_high_psi_features', '', 'test_raise_error_if_inf_in_df'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_drop_high_psi_features.py', 'tests.test_selection.test_drop_high_psi_features', '', 'test_transform_feature_to_drop_not_present'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_drop_high_psi_features.py', 'tests.test_selection.test_drop_high_psi_features', '', 'test_transform_standard'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_drop_high_psi_features.py', 'tests.test_selection.test_drop_high_psi_features', '', 'test_switch'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_drop_high_psi_features.py', 'tests.test_selection.test_drop_high_psi_features', '', 'test_split_col_not_included_in_variables'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_drop_high_psi_features.py', 'tests.test_selection.test_drop_high_psi_features', '', 'test_transform_different_number_of_columns'], ['https://github.com/feature-engine/feature_engine/tree/master/tests/test_selection/test_drop_high_psi_features.py', 'tests.test_selection.test_drop_high_psi_features', '', 'test_raise_error_if_na_in_df']]"
nox,https://github.com/theacodes/nox/tree/master/nox/command.py,,test_run_env_unicode,"(cmd, args) = (args[0], args[1:])","
cmd = args[0]
args = args[1:]
",1,"[['https://github.com/theacodes/nox/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_custom_stderr_failed_command'], ['https://github.com/theacodes/nox/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_custom_stdout_silent_flag'], ['https://github.com/theacodes/nox/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_run_external_warns'], ['https://github.com/theacodes/nox/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_interrupt_handled'], ['https://github.com/theacodes/nox/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_run_external_silences'], ['https://github.com/theacodes/nox/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_run_path_existent'], ['https://github.com/theacodes/nox/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_exit_codes'], ['https://github.com/theacodes/nox/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_run_path_nonexistent'], ['https://github.com/theacodes/nox/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_run_defaults'], ['https://github.com/theacodes/nox/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_run_env_systemroot'], ['https://github.com/theacodes/nox/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_run_external_raises'], ['https://github.com/theacodes/nox/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_custom_stderr'], ['https://github.com/theacodes/nox/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_run_silent'], ['https://github.com/theacodes/nox/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_custom_stdout'], ['https://github.com/theacodes/nox/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_run_verbosity'], ['https://github.com/theacodes/nox/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_run_not_found'], ['https://github.com/theacodes/nox/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_run_verbosity_failed_command'], ['https://github.com/theacodes/nox/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_fail_with_silent'], ['https://github.com/theacodes/nox/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_custom_stdout_failed_command'], ['https://github.com/theacodes/nox/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_run_env_unicode']]"
nox,https://github.com/theacodes/nox/tree/master/nox/command.py,,test_run_env_unicode,"(return_code, output) = popen([cmd_path] + list(args), silent=silent, env=env, **popen_kws)","
tmp_fun_0 = popen([cmd_path] + list(args), silent=silent, env=env, **popen_kws)
return_code = tmp_fun_0[0]
output = tmp_fun_0[1]
",1,"[['https://github.com/theacodes/nox/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_custom_stderr_failed_command'], ['https://github.com/theacodes/nox/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_custom_stdout_silent_flag'], ['https://github.com/theacodes/nox/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_run_external_warns'], ['https://github.com/theacodes/nox/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_interrupt_handled'], ['https://github.com/theacodes/nox/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_run_external_silences'], ['https://github.com/theacodes/nox/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_run_path_existent'], ['https://github.com/theacodes/nox/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_exit_codes'], ['https://github.com/theacodes/nox/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_run_path_nonexistent'], ['https://github.com/theacodes/nox/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_run_defaults'], ['https://github.com/theacodes/nox/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_run_env_systemroot'], ['https://github.com/theacodes/nox/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_run_external_raises'], ['https://github.com/theacodes/nox/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_custom_stderr'], ['https://github.com/theacodes/nox/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_run_silent'], ['https://github.com/theacodes/nox/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_custom_stdout'], ['https://github.com/theacodes/nox/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_run_verbosity'], ['https://github.com/theacodes/nox/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_run_not_found'], ['https://github.com/theacodes/nox/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_run_verbosity_failed_command'], ['https://github.com/theacodes/nox/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_fail_with_silent'], ['https://github.com/theacodes/nox/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_custom_stdout_failed_command'], ['https://github.com/theacodes/nox/tree/master/tests/test_command.py', 'tests.test_command', '', 'test_run_env_unicode']]"
udocker,https://github.com/indigo-dc/udocker/tree/master/udocker/cli.py,UdockerCLITestCase,test_25_do_ps,mod_h = size_h = '',"
tmp_value = ''
mod_h = tmp_value
size_h = tmp_value
",1,"[['https://github.com/indigo-dc/udocker/tree/master/tests/unit/test_cli.py', 'tests.unit.test_cli', 'UdockerCLITestCase', 'test_25_do_ps']]"
udocker,https://github.com/indigo-dc/udocker/tree/master/udocker/cli.py,UdockerCLITestCase,test_25_do_ps,mod_l = size_l = '%0s',"
tmp_value = '%0s'
mod_l = tmp_value
size_l = tmp_value
",1,"[['https://github.com/indigo-dc/udocker/tree/master/tests/unit/test_cli.py', 'tests.unit.test_cli', 'UdockerCLITestCase', 'test_25_do_ps']]"
udocker,https://github.com/indigo-dc/udocker/tree/master/udocker/engine/base.py,ExecutionEngineCommonTestCase,test_18__setup_container_user,"(passwd, group) = self._select_auth_files()","
tmp_fun_0 = self._select_auth_files()
passwd = tmp_fun_0[0]
group = tmp_fun_0[1]
",1,"[['https://github.com/indigo-dc/udocker/tree/master/tests/unit/test_execenginecommon.py', 'tests.unit.test_execenginecommon', 'ExecutionEngineCommonTestCase', 'test_18__setup_container_user']]"
udocker,https://github.com/indigo-dc/udocker/tree/master/udocker/engine/base.py,ExecutionEngineCommonTestCase,test_18__setup_container_user,"(valid_user, user_id) = self._user_from_str(user, host_auth, container_auth)","
tmp_fun_0 = self._user_from_str(user, host_auth, container_auth)
valid_user = tmp_fun_0[0]
user_id = tmp_fun_0[1]
",1,"[['https://github.com/indigo-dc/udocker/tree/master/tests/unit/test_execenginecommon.py', 'tests.unit.test_execenginecommon', 'ExecutionEngineCommonTestCase', 'test_18__setup_container_user']]"
udocker,https://github.com/indigo-dc/udocker/tree/master/udocker/engine/base.py,ExecutionEngineCommonTestCase,test_18__setup_container_user,self.opt['hostauth'] = self.opt['containerauth'] = False,"
tmp_value = False
self.opt['hostauth'] = tmp_value
self.opt['containerauth'] = tmp_value
",1,"[['https://github.com/indigo-dc/udocker/tree/master/tests/unit/test_execenginecommon.py', 'tests.unit.test_execenginecommon', 'ExecutionEngineCommonTestCase', 'test_18__setup_container_user']]"
tfc,https://github.com/maqp/tfc/tree/master/src/receiver/commands.py,TestChMasterKey,test_master_key_change,new_master_key = master_key.master_key = master_key.new_master_key(replace=False),"
tmp_value = master_key.new_master_key(replace=False)
new_master_key = tmp_value
master_key.master_key = tmp_value
",1,"[['https://github.com/maqp/tfc/tree/master/tests/receiver/test_commands.py', 'tests.receiver.test_commands', 'TestChMasterKey', 'test_master_key_change']]"
business-rules,https://github.com/venmo/business-rules/tree/master/business_rules/engine.py,EngineTests,test_run_that_triggers_rule,"(conditions, actions) = (rule['conditions'], rule['actions'])","
conditions = rule['conditions']
actions = rule['actions']
",1,"[['https://github.com/venmo/business-rules/tree/master/tests/test_engine_logic.py', 'tests.test_engine_logic', 'EngineTests', 'test_run_that_doesnt_trigger_rule'], ['https://github.com/venmo/business-rules/tree/master/tests/test_engine_logic.py', 'tests.test_engine_logic', 'EngineTests', 'test_run_that_triggers_rule']]"
satellite,https://github.com/Blockstream/satellite/tree/master/blocksatcli/tsp.py,TestTsp,test_file_save_prompt,"self.cmd = cmd = ['tsp', '--realtime', '--buffer-size-mb', str(args.tsp_buffer_size_mb), '--max-flushed-packets', str(args.tsp_max_flushed_packets), '--max-input-packets', str(args.tsp_max_input_packets)]","
tmp_value = ['tsp', '--realtime', '--buffer-size-mb', str(args.tsp_buffer_size_mb), '--max-flushed-packets', str(args.tsp_max_flushed_packets), '--max-input-packets', str(args.tsp_max_input_packets)]
self.cmd = tmp_value
cmd = tmp_value
",1,"[['https://github.com/Blockstream/satellite/tree/master/blocksatcli/test_tsp.py', 'blocksatcli.test_tsp', 'TestTsp', 'test_non_prompting_opts'], ['https://github.com/Blockstream/satellite/tree/master/blocksatcli/test_tsp.py', 'blocksatcli.test_tsp', 'TestTsp', 'test_file_save_prompt']]"
profiling,https://github.com/what-studio/profiling/tree/master/profiling/stats.py,,test_flatten,flat_stats = flat_children[key] = cls(*key),"
tmp_value = cls(*key)
flat_stats = tmp_value
flat_children[key] = tmp_value
",1,"[['https://github.com/what-studio/profiling/tree/master/test/test_stats.py', 'test.test_stats', '', 'test_flatten']]"
betago,https://github.com/maxpumperla/betago/tree/master/betago/gtp/command.py,CommandTestCase,test_parse_with_sequence_number,"(name, args) = (pieces[0], pieces[1:])","
name = pieces[0]
args = pieces[1:]
",1,"[['https://github.com/maxpumperla/betago/tree/master/tests/gtp/command_test.py', 'tests.gtp.command_test', 'CommandTestCase', 'test_parse'], ['https://github.com/maxpumperla/betago/tree/master/tests/gtp/command_test.py', 'tests.gtp.command_test', 'CommandTestCase', 'test_parse_with_sequence_number']]"
betago,https://github.com/maxpumperla/betago/tree/master/betago/gtp/board.py,GTPCoordinateTest,test_gtp_position_to_coords,"(col_str, row_str) = (gtp_position[0], gtp_position[1:])","
col_str = gtp_position[0]
row_str = gtp_position[1:]
",1,"[['https://github.com/maxpumperla/betago/tree/master/tests/gtp/board_test.py', 'tests.gtp.board_test', 'GTPCoordinateTest', 'test_gtp_position_to_coords']]"
in-toto,https://github.com/in-toto/in-toto/tree/master/in_toto/verifylib.py,TestRunAllInspections,test_inspection_persistence_false,material_list = product_list = ['.'],"
tmp_value = ['.']
material_list = tmp_value
product_list = tmp_value
",1,"[['https://github.com/in-toto/in-toto/tree/master/tests/test_verifylib.py', 'tests.test_verifylib', 'TestRunAllInspections', 'test_inspeciton_persistence_true'], ['https://github.com/in-toto/in-toto/tree/master/tests/test_verifylib.py', 'tests.test_verifylib', 'TestRunAllInspections', 'test_inspection_fail_with_non_zero_retval'], ['https://github.com/in-toto/in-toto/tree/master/tests/test_verifylib.py', 'tests.test_verifylib', 'TestRunAllInspections', 'test_inspection_persistence_false']]"
in-toto,https://github.com/in-toto/in-toto/tree/master/in_toto/runlib.py,TestLinkCmdExecTimeoutSetting,test_timeout_setting,"(return_code, stdout_str, stderr_str) = securesystemslib.process.run_duplicate_streams(link_cmd_args, timeout=float(in_toto.settings.LINK_CMD_EXEC_TIMEOUT))","
tmp_fun_0 = securesystemslib.process.run_duplicate_streams(link_cmd_args, timeout=float(in_toto.settings.LINK_CMD_EXEC_TIMEOUT))
return_code = tmp_fun_0[0]
stdout_str = tmp_fun_0[1]
stderr_str = tmp_fun_0[2]
",1,"[['https://github.com/in-toto/in-toto/tree/master/tests/test_runlib.py', 'tests.test_runlib', 'TestLinkCmdExecTimeoutSetting', 'test_timeout_setting']]"
in-toto,https://github.com/in-toto/in-toto/tree/master/in_toto/runlib.py,TestLinkCmdExecTimeoutSetting,test_timeout_setting,stdout_str = stderr_str = '',"
tmp_value = ''
stdout_str = tmp_value
stderr_str = tmp_value
",1,"[['https://github.com/in-toto/in-toto/tree/master/tests/test_runlib.py', 'tests.test_runlib', 'TestLinkCmdExecTimeoutSetting', 'test_timeout_setting']]"
python-slack-sdk,https://github.com/slackapi/python-slack-sdk/tree/master/slack_sdk/aiohttp_version_checker.py,TestAiohttpVersionChecker,test_not_recommended_versions,"(major, minor, patch) = (int(elements[0]), int(elements[1]), elements[2])","
major = int(elements[0])
minor = int(elements[1])
patch = elements[2]
",1,"[['https://github.com/slackapi/python-slack-sdk/tree/master/tests/test_aiohttp_version_checker.py', 'tests.test_aiohttp_version_checker', 'TestAiohttpVersionChecker', 'test_recommended_versions'], ['https://github.com/slackapi/python-slack-sdk/tree/master/tests/test_aiohttp_version_checker.py', 'tests.test_aiohttp_version_checker', 'TestAiohttpVersionChecker', 'test_not_recommended_versions']]"
python-slack-sdk,https://github.com/slackapi/python-slack-sdk/tree/master/slack_sdk/socket_mode/builtin/internals.py,TestBuiltin,test_parse_test_server_response_1,"(b1, b2) = (remaining_bytes[0], remaining_bytes[1])","
b1 = remaining_bytes[0]
b2 = remaining_bytes[1]
",1,"[['https://github.com/slackapi/python-slack-sdk/tree/master/tests/slack_sdk/socket_mode/test_builtin_message_parser.py', 'tests.slack_sdk.socket_mode.test_builtin_message_parser', 'TestBuiltin', 'test_parse_test_server_response_2'], ['https://github.com/slackapi/python-slack-sdk/tree/master/tests/slack_sdk/socket_mode/test_builtin_message_parser.py', 'tests.slack_sdk.socket_mode.test_builtin_message_parser', 'TestBuiltin', 'test_parse_test_server_response_1']]"
python-slack-sdk,https://github.com/slackapi/python-slack-sdk/tree/master/slack_sdk/socket_mode/builtin/internals.py,TestBuiltin,test_parse_test_server_response_1,"(start, end) = (idx_after_length_part, idx_after_length_part + current_data_length)","
start = idx_after_length_part
end = idx_after_length_part + current_data_length
",1,"[['https://github.com/slackapi/python-slack-sdk/tree/master/tests/slack_sdk/socket_mode/test_builtin_message_parser.py', 'tests.slack_sdk.socket_mode.test_builtin_message_parser', 'TestBuiltin', 'test_parse_test_server_response_2'], ['https://github.com/slackapi/python-slack-sdk/tree/master/tests/slack_sdk/socket_mode/test_builtin_message_parser.py', 'tests.slack_sdk.socket_mode.test_builtin_message_parser', 'TestBuiltin', 'test_parse_test_server_response_1']]"
python-slack-sdk,https://github.com/slackapi/python-slack-sdk/tree/master/slack_sdk/socket_mode/builtin/internals.py,TestBuiltin,test_parse_test_server_response_1,"(idx1, idx2) = (idx_after_length_part, idx_after_length_part + 4)","
idx1 = idx_after_length_part
idx2 = idx_after_length_part + 4
",1,"[['https://github.com/slackapi/python-slack-sdk/tree/master/tests/slack_sdk/socket_mode/test_builtin_message_parser.py', 'tests.slack_sdk.socket_mode.test_builtin_message_parser', 'TestBuiltin', 'test_parse_test_server_response_2'], ['https://github.com/slackapi/python-slack-sdk/tree/master/tests/slack_sdk/socket_mode/test_builtin_message_parser.py', 'tests.slack_sdk.socket_mode.test_builtin_message_parser', 'TestBuiltin', 'test_parse_test_server_response_1']]"
kafka-python,https://github.com/dpkp/kafka-python/tree/master/kafka/protocol/types.py,,test_unsigned_varint_serde,"(value, i) = (0, 0)","
value = 0
i = 0
",1,"[['https://github.com/dpkp/kafka-python/tree/master/test/test_protocol.py', 'test.test_protocol', '', 'test_unsigned_varint_serde']]"
aws-cli,https://github.com/aws/aws-cli/tree/master/awscli/customizations/s3/filegenerator.py,TestListFilesLocally,test_list_local_files_with_unicode_chars,"(join, isdir, isfile) = (os.path.join, os.path.isdir, os.path.isfile)","
join = os.path.join
isdir = os.path.isdir
isfile = os.path.isfile
",1,"[['https://github.com/aws/aws-cli/tree/master/tests/unit/customizations/s3/test_filegenerator.py', 'tests.unit.customizations.s3.test_filegenerator', 'TestListFilesLocally', 'test_error_raised_on_decoding_error'], ['https://github.com/aws/aws-cli/tree/master/tests/unit/customizations/s3/test_filegenerator.py', 'tests.unit.customizations.s3.test_filegenerator', 'TestListFilesLocally', 'test_list_files_with_invalid_timestamp'], ['https://github.com/aws/aws-cli/tree/master/tests/unit/customizations/s3/test_filegenerator.py', 'tests.unit.customizations.s3.test_filegenerator', 'TestListFilesLocally', 'test_list_files_is_in_sorted_order'], ['https://github.com/aws/aws-cli/tree/master/tests/unit/customizations/s3/test_filegenerator.py', 'tests.unit.customizations.s3.test_filegenerator', 'TestListFilesLocally', 'test_list_local_files_with_unicode_chars']]"
aws-cli,https://github.com/aws/aws-cli/tree/master/awscli/customizations/s3/filegenerator.py,TestListFilesLocally,test_list_local_files_with_unicode_chars,"(error, listdir) = (os.error, os.listdir)","
error = os.error
listdir = os.listdir
",1,"[['https://github.com/aws/aws-cli/tree/master/tests/unit/customizations/s3/test_filegenerator.py', 'tests.unit.customizations.s3.test_filegenerator', 'TestListFilesLocally', 'test_error_raised_on_decoding_error'], ['https://github.com/aws/aws-cli/tree/master/tests/unit/customizations/s3/test_filegenerator.py', 'tests.unit.customizations.s3.test_filegenerator', 'TestListFilesLocally', 'test_list_files_with_invalid_timestamp'], ['https://github.com/aws/aws-cli/tree/master/tests/unit/customizations/s3/test_filegenerator.py', 'tests.unit.customizations.s3.test_filegenerator', 'TestListFilesLocally', 'test_list_files_is_in_sorted_order'], ['https://github.com/aws/aws-cli/tree/master/tests/unit/customizations/s3/test_filegenerator.py', 'tests.unit.customizations.s3.test_filegenerator', 'TestListFilesLocally', 'test_list_local_files_with_unicode_chars']]"
funcy,https://github.com/Suor/funcy/tree/master/funcy/seqs.py,,test_takewhile,"(pred, seq) = (bool, pred)","
tmp0 = pred
pred = bool
seq = tmp0
",1,"[['https://github.com/Suor/funcy/tree/master/tests/test_seqs.py', 'tests.test_seqs', '', 'test_takewhile']]"
funcy,https://github.com/Suor/funcy/tree/master/funcy/seqs.py,,test_split,"(yes, no) = (deque(), deque())","
yes = deque()
no = deque()
",1,"[['https://github.com/Suor/funcy/tree/master/tests/test_seqs.py', 'tests.test_seqs', '', 'test_split']]"
funcy,https://github.com/Suor/funcy/tree/master/funcy/seqs.py,,test_lsplit,"(yes, no) = ([], [])","
yes = []
no = []
",1,"[['https://github.com/Suor/funcy/tree/master/tests/test_seqs.py', 'tests.test_seqs', '', 'test_lsplit']]"
funcy,https://github.com/Suor/funcy/tree/master/funcy/flow.py,,test_once_per,"(done, add) = (done_set, done_set.add)","
done = done_set
add = done_set.add
",1,"[['https://github.com/Suor/funcy/tree/master/tests/test_flow.py', 'tests.test_flow', '', 'test_once_per']]"
funcy,https://github.com/Suor/funcy/tree/master/funcy/flow.py,,test_once_per,"(done, add) = (done_list, done_list.append)","
done = done_list
add = done_list.append
",1,"[['https://github.com/Suor/funcy/tree/master/tests/test_flow.py', 'tests.test_flow', '', 'test_once_per']]"
micropython-lib,https://github.com/micropython/micropython-lib/tree/master/python-stdlib/quopri/quopri.py,QuopriTestCase,test_decode,"(i, n) = (0, len(line))","
i = 0
n = len(line)
",1,"[['https://github.com/micropython/micropython-lib/tree/master/python-stdlib/quopri/test_quopri.py', 'python-stdlib.quopri.test_quopri', 'QuopriTestCase', 'test_decode']]"
micropython-lib,https://github.com/micropython/micropython-lib/tree/master/python-stdlib/urllib.parse/urllib/parse.py,UrlParseTestCase,test_attributes_without_netloc,"(url, scheme, _coerce_result) = _coerce_args(url, scheme)","
tmp_fun_0 = _coerce_args(url, scheme)
url = tmp_fun_0[0]
scheme = tmp_fun_0[1]
_coerce_result = tmp_fun_0[2]
",1,"[['https://github.com/micropython/micropython-lib/tree/master/python-stdlib/urllib.parse/test_urlparse.py', 'python-stdlib.urllib.parse.test_urlparse', 'UrlParseTestCase', 'test_issue14072'], ['https://github.com/micropython/micropython-lib/tree/master/python-stdlib/urllib.parse/test_urlparse.py', 'python-stdlib.urllib.parse.test_urlparse', 'UrlParseTestCase', 'test_attributes_bad_port'], ['https://github.com/micropython/micropython-lib/tree/master/python-stdlib/urllib.parse/test_urlparse.py', 'python-stdlib.urllib.parse.test_urlparse', 'UrlParseTestCase', 'test_unparse_parse'], ['https://github.com/micropython/micropython-lib/tree/master/python-stdlib/urllib.parse/test_urlparse.py', 'python-stdlib.urllib.parse.test_urlparse', 'UrlParseTestCase', 'test_attributes_without_netloc']]"
micropython-lib,https://github.com/micropython/micropython-lib/tree/master/python-stdlib/urllib.parse/urllib/parse.py,UrlParseTestCase,test_attributes_without_netloc,"(scheme, netloc, url, query, fragment) = splitresult","
scheme = splitresult[0]
netloc = splitresult[1]
url = splitresult[2]
query = splitresult[3]
fragment = splitresult[4]
",1,"[['https://github.com/micropython/micropython-lib/tree/master/python-stdlib/urllib.parse/test_urlparse.py', 'python-stdlib.urllib.parse.test_urlparse', 'UrlParseTestCase', 'test_issue14072'], ['https://github.com/micropython/micropython-lib/tree/master/python-stdlib/urllib.parse/test_urlparse.py', 'python-stdlib.urllib.parse.test_urlparse', 'UrlParseTestCase', 'test_attributes_bad_port'], ['https://github.com/micropython/micropython-lib/tree/master/python-stdlib/urllib.parse/test_urlparse.py', 'python-stdlib.urllib.parse.test_urlparse', 'UrlParseTestCase', 'test_unparse_parse'], ['https://github.com/micropython/micropython-lib/tree/master/python-stdlib/urllib.parse/test_urlparse.py', 'python-stdlib.urllib.parse.test_urlparse', 'UrlParseTestCase', 'test_attributes_without_netloc']]"
micropython-lib,https://github.com/micropython/micropython-lib/tree/master/python-stdlib/urllib.parse/urllib/parse.py,UrlParseTestCase,test_attributes_without_netloc,"(url, params) = _splitparams(url)","
tmp_fun_0 = _splitparams(url)
url = tmp_fun_0[0]
params = tmp_fun_0[1]
",1,"[['https://github.com/micropython/micropython-lib/tree/master/python-stdlib/urllib.parse/test_urlparse.py', 'python-stdlib.urllib.parse.test_urlparse', 'UrlParseTestCase', 'test_issue14072'], ['https://github.com/micropython/micropython-lib/tree/master/python-stdlib/urllib.parse/test_urlparse.py', 'python-stdlib.urllib.parse.test_urlparse', 'UrlParseTestCase', 'test_attributes_bad_port'], ['https://github.com/micropython/micropython-lib/tree/master/python-stdlib/urllib.parse/test_urlparse.py', 'python-stdlib.urllib.parse.test_urlparse', 'UrlParseTestCase', 'test_unparse_parse'], ['https://github.com/micropython/micropython-lib/tree/master/python-stdlib/urllib.parse/test_urlparse.py', 'python-stdlib.urllib.parse.test_urlparse', 'UrlParseTestCase', 'test_attributes_without_netloc']]"
bottle,https://github.com/bottlepy/bottle/tree/master//bottle.py,TestSendFile,test_range,headers['Content-Length'] = clen = stats.st_size,"
tmp_value = stats.st_size
headers['Content-Length'] = tmp_value
clen = tmp_value
",1,"[['https://github.com/bottlepy/bottle/tree/master/test/test_sendfile.py', 'test.test_sendfile', 'TestSendFile', 'test_custom_headers'], ['https://github.com/bottlepy/bottle/tree/master/test/test_sendfile.py', 'test.test_sendfile', 'TestSendFile', 'test_valid'], ['https://github.com/bottlepy/bottle/tree/master/test/test_sendfile.py', 'test.test_sendfile', 'TestSendFile', 'test_mime'], ['https://github.com/bottlepy/bottle/tree/master/test/test_sendfile.py', 'test.test_sendfile', 'TestSendFile', 'test_file_not_readable'], ['https://github.com/bottlepy/bottle/tree/master/test/test_sendfile.py', 'test.test_sendfile', 'TestSendFile', 'test_etag'], ['https://github.com/bottlepy/bottle/tree/master/test/test_sendfile.py', 'test.test_sendfile', 'TestSendFile', 'test_download'], ['https://github.com/bottlepy/bottle/tree/master/test/test_sendfile.py', 'test.test_sendfile', 'TestSendFile', 'test_ims'], ['https://github.com/bottlepy/bottle/tree/master/test/test_sendfile.py', 'test.test_sendfile', 'TestSendFile', 'test_invalid'], ['https://github.com/bottlepy/bottle/tree/master/test/test_sendfile.py', 'test.test_sendfile', 'TestSendFile', 'test_range']]"
bottle,https://github.com/bottlepy/bottle/tree/master//bottle.py,TestSendFile,test_range,"(offset, end) = ranges[0]","
offset = ranges[0][0]
end = ranges[0][1]
",1,"[['https://github.com/bottlepy/bottle/tree/master/test/test_sendfile.py', 'test.test_sendfile', 'TestSendFile', 'test_custom_headers'], ['https://github.com/bottlepy/bottle/tree/master/test/test_sendfile.py', 'test.test_sendfile', 'TestSendFile', 'test_valid'], ['https://github.com/bottlepy/bottle/tree/master/test/test_sendfile.py', 'test.test_sendfile', 'TestSendFile', 'test_mime'], ['https://github.com/bottlepy/bottle/tree/master/test/test_sendfile.py', 'test.test_sendfile', 'TestSendFile', 'test_file_not_readable'], ['https://github.com/bottlepy/bottle/tree/master/test/test_sendfile.py', 'test.test_sendfile', 'TestSendFile', 'test_etag'], ['https://github.com/bottlepy/bottle/tree/master/test/test_sendfile.py', 'test.test_sendfile', 'TestSendFile', 'test_download'], ['https://github.com/bottlepy/bottle/tree/master/test/test_sendfile.py', 'test.test_sendfile', 'TestSendFile', 'test_ims'], ['https://github.com/bottlepy/bottle/tree/master/test/test_sendfile.py', 'test.test_sendfile', 'TestSendFile', 'test_invalid'], ['https://github.com/bottlepy/bottle/tree/master/test/test_sendfile.py', 'test.test_sendfile', 'TestSendFile', 'test_range']]"
bottle,https://github.com/bottlepy/bottle/tree/master//bottle.py,TestSendFile,test_range,"(mimetype, encoding) = mimetypes.guess_type(download)","
tmp_fun_0 = mimetypes.guess_type(download)
mimetype = tmp_fun_0[0]
encoding = tmp_fun_0[1]
",1,"[['https://github.com/bottlepy/bottle/tree/master/test/test_sendfile.py', 'test.test_sendfile', 'TestSendFile', 'test_custom_headers'], ['https://github.com/bottlepy/bottle/tree/master/test/test_sendfile.py', 'test.test_sendfile', 'TestSendFile', 'test_valid'], ['https://github.com/bottlepy/bottle/tree/master/test/test_sendfile.py', 'test.test_sendfile', 'TestSendFile', 'test_mime'], ['https://github.com/bottlepy/bottle/tree/master/test/test_sendfile.py', 'test.test_sendfile', 'TestSendFile', 'test_file_not_readable'], ['https://github.com/bottlepy/bottle/tree/master/test/test_sendfile.py', 'test.test_sendfile', 'TestSendFile', 'test_etag'], ['https://github.com/bottlepy/bottle/tree/master/test/test_sendfile.py', 'test.test_sendfile', 'TestSendFile', 'test_download'], ['https://github.com/bottlepy/bottle/tree/master/test/test_sendfile.py', 'test.test_sendfile', 'TestSendFile', 'test_ims'], ['https://github.com/bottlepy/bottle/tree/master/test/test_sendfile.py', 'test.test_sendfile', 'TestSendFile', 'test_invalid'], ['https://github.com/bottlepy/bottle/tree/master/test/test_sendfile.py', 'test.test_sendfile', 'TestSendFile', 'test_range']]"
bottle,https://github.com/bottlepy/bottle/tree/master//bottle.py,TestSendFile,test_range,"(mimetype, encoding) = mimetypes.guess_type(filename)","
tmp_fun_0 = mimetypes.guess_type(filename)
mimetype = tmp_fun_0[0]
encoding = tmp_fun_0[1]
",1,"[['https://github.com/bottlepy/bottle/tree/master/test/test_sendfile.py', 'test.test_sendfile', 'TestSendFile', 'test_custom_headers'], ['https://github.com/bottlepy/bottle/tree/master/test/test_sendfile.py', 'test.test_sendfile', 'TestSendFile', 'test_valid'], ['https://github.com/bottlepy/bottle/tree/master/test/test_sendfile.py', 'test.test_sendfile', 'TestSendFile', 'test_mime'], ['https://github.com/bottlepy/bottle/tree/master/test/test_sendfile.py', 'test.test_sendfile', 'TestSendFile', 'test_file_not_readable'], ['https://github.com/bottlepy/bottle/tree/master/test/test_sendfile.py', 'test.test_sendfile', 'TestSendFile', 'test_etag'], ['https://github.com/bottlepy/bottle/tree/master/test/test_sendfile.py', 'test.test_sendfile', 'TestSendFile', 'test_download'], ['https://github.com/bottlepy/bottle/tree/master/test/test_sendfile.py', 'test.test_sendfile', 'TestSendFile', 'test_ims'], ['https://github.com/bottlepy/bottle/tree/master/test/test_sendfile.py', 'test.test_sendfile', 'TestSendFile', 'test_invalid'], ['https://github.com/bottlepy/bottle/tree/master/test/test_sendfile.py', 'test.test_sendfile', 'TestSendFile', 'test_range']]"
pygorithm,https://github.com/OmkarPathak/pygorithm/tree/master/pygorithm/data_structures/queue.py,TestQueue,test_queue,self.front = self.rear = 0,"
tmp_value = 0
self.front = tmp_value
self.rear = tmp_value
",1,"[['https://github.com/OmkarPathak/pygorithm/tree/master/tests/test_data_structure.py', 'tests.test_data_structure', 'TestQueue', 'test_queue']]"
pygorithm,https://github.com/OmkarPathak/pygorithm/tree/master/pygorithm/data_structures/graph.py,TestKruskal,test_minimum_spanning_tree_2,"(u_set, v_set) = (self._set_of(u), self._set_of(v))","
u_set = self._set_of(u)
v_set = self._set_of(v)
",1,"[['https://github.com/OmkarPathak/pygorithm/tree/master/tests/test_data_structure.py', 'tests.test_data_structure', 'TestKruskal', 'test_minimum_spanning_tree'], ['https://github.com/OmkarPathak/pygorithm/tree/master/tests/test_data_structure.py', 'tests.test_data_structure', 'TestKruskal', 'test_minimum_spanning_tree_2']]"
pygorithm,https://github.com/OmkarPathak/pygorithm/tree/master/pygorithm/strings/manacher_algorithm.py,TestManacherAlgorithm,test_manacher_algorithm,center = right = 0,"
tmp_value = 0
center = tmp_value
right = tmp_value
",1,"[['https://github.com/OmkarPathak/pygorithm/tree/master/tests/test_string.py', 'tests.test_string', 'TestManacherAlgorithm', 'test_manacher_algorithm']]"
pygorithm,https://github.com/OmkarPathak/pygorithm/tree/master/pygorithm/strings/manacher_algorithm.py,TestManacherAlgorithm,test_manacher_algorithm,"(maxLen, centerIndex) = max(((n, i) for (i, n) in enumerate(P)))","
tmp_fun_0 = max(((n, i) for (i, n) in enumerate(P)))
maxLen = tmp_fun_0[0]
centerIndex = tmp_fun_0[1]
",1,"[['https://github.com/OmkarPathak/pygorithm/tree/master/tests/test_string.py', 'tests.test_string', 'TestManacherAlgorithm', 'test_manacher_algorithm']]"
pygorithm,https://github.com/OmkarPathak/pygorithm/tree/master/pygorithm/strings/manacher_algorithm.py,TestManacherAlgorithm,test_manacher_algorithm,"(center, right) = (i, i + P[i])","
center = i
right = i + P[i]
",1,"[['https://github.com/OmkarPathak/pygorithm/tree/master/tests/test_string.py', 'tests.test_string', 'TestManacherAlgorithm', 'test_manacher_algorithm']]"
pygorithm,https://github.com/OmkarPathak/pygorithm/tree/master/pygorithm/searching/breadth_first_search.py,TestBFSSearch,test_bfs,"(visited, queue) = (set(), [start_vertex])","
visited = set()
queue = [start_vertex]
",1,"[['https://github.com/OmkarPathak/pygorithm/tree/master/tests/test_searching.py', 'tests.test_searching', 'TestBFSSearch', 'test_bfs']]"
pygorithm,https://github.com/OmkarPathak/pygorithm/tree/master/pygorithm/greedy_algorithm/fractional_knapsack.py,TestFractionalKnapsack,test_fractional_knapsack,"(fractional_weights[i], fractional_weights[maximum]) = (fractional_weights[maximum], fractional_weights[i])","
tmp0 = fractional_weights[i]
fractional_weights[i] = fractional_weights[maximum]
fractional_weights[maximum] = tmp0
",1,"[['https://github.com/OmkarPathak/pygorithm/tree/master/tests/test_greedy_algorithm.py', 'tests.test_greedy_algorithm', 'TestFractionalKnapsack', 'test_fractional_knapsack']]"
pygorithm,https://github.com/OmkarPathak/pygorithm/tree/master/pygorithm/greedy_algorithm/fractional_knapsack.py,TestFractionalKnapsack,test_fractional_knapsack,"(item_values[i], item_values[maximum]) = (item_values[maximum], item_values[i])","
tmp0 = item_values[i]
item_values[i] = item_values[maximum]
item_values[maximum] = tmp0
",1,"[['https://github.com/OmkarPathak/pygorithm/tree/master/tests/test_greedy_algorithm.py', 'tests.test_greedy_algorithm', 'TestFractionalKnapsack', 'test_fractional_knapsack']]"
pygorithm,https://github.com/OmkarPathak/pygorithm/tree/master/pygorithm/greedy_algorithm/fractional_knapsack.py,TestFractionalKnapsack,test_fractional_knapsack,"(item_weights[i], item_weights[maximum]) = (item_weights[maximum], item_weights[i])","
tmp0 = item_weights[i]
item_weights[i] = item_weights[maximum]
item_weights[maximum] = tmp0
",1,"[['https://github.com/OmkarPathak/pygorithm/tree/master/tests/test_greedy_algorithm.py', 'tests.test_greedy_algorithm', 'TestFractionalKnapsack', 'test_fractional_knapsack']]"
yt-dlp,https://github.com/yt-dlp/yt-dlp/tree/master/yt_dlp/utils.py,TestUtil,test_parse_codecs,"(vcodec, acodec, hdr) = (None, None, None)","
vcodec = None
acodec = None
hdr = None
",1,"[['https://github.com/yt-dlp/yt-dlp/tree/master/test/test_utils.py', 'test.test_utils', 'TestUtil', 'test_parse_codecs']]"
pydicom,https://github.com/pydicom/pydicom/tree/master/pydicom/pixel_data_handlers/numpy_handler.py,TestNumpy_GetPixelData,test_missing_padding_warns,"(out[1::6], out[4::6]) = (arr[2::4], arr[2::4])","
out[1::6] = arr[2::4]
out[4::6] = arr[2::4]
",1,"[['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_numpy_pixel_data.py', 'pydicom.tests.test_numpy_pixel_data', 'TestNumpy_GetPixelData', 'test_array_read_only'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_numpy_pixel_data.py', 'pydicom.tests.test_numpy_pixel_data', 'TestNumpy_GetPixelData', 'test_missing_required_elem_pixel_data_color'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_numpy_pixel_data.py', 'pydicom.tests.test_numpy_pixel_data', 'TestNumpy_GetPixelData', 'test_no_pixel_data_raises'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_numpy_pixel_data.py', 'pydicom.tests.test_numpy_pixel_data', 'TestNumpy_GetPixelData', 'test_change_photometric_interpretation'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_numpy_pixel_data.py', 'pydicom.tests.test_numpy_pixel_data', 'TestNumpy_GetPixelData', 'test_double_float_pixel_data'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_numpy_pixel_data.py', 'pydicom.tests.test_numpy_pixel_data', 'TestNumpy_GetPixelData', 'test_missing_conditionally_required_elem_pixel_data_color'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_numpy_pixel_data.py', 'pydicom.tests.test_numpy_pixel_data', 'TestNumpy_GetPixelData', 'test_float_pixel_data'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_numpy_pixel_data.py', 'pydicom.tests.test_numpy_pixel_data', 'TestNumpy_GetPixelData', 'test_missing_required_elem_pixel_data_monochrome'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_numpy_pixel_data.py', 'pydicom.tests.test_numpy_pixel_data', 'TestNumpy_GetPixelData', 'test_unsupported_syntaxes_raises'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_numpy_pixel_data.py', 'pydicom.tests.test_numpy_pixel_data', 'TestNumpy_GetPixelData', 'test_bad_length_raises'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_numpy_pixel_data.py', 'pydicom.tests.test_numpy_pixel_data', 'TestNumpy_GetPixelData', 'test_missing_required_elem_float_pixel_data_monochrome'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_numpy_pixel_data.py', 'pydicom.tests.test_numpy_pixel_data', 'TestNumpy_GetPixelData', 'test_unknown_pixel_representation_raises'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_numpy_pixel_data.py', 'pydicom.tests.test_numpy_pixel_data', 'TestNumpy_GetPixelData', 'test_array_read_only_bit_packed'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_numpy_pixel_data.py', 'pydicom.tests.test_numpy_pixel_data', 'TestNumpy_GetPixelData', 'test_missing_padding_warns']]"
pydicom,https://github.com/pydicom/pydicom/tree/master/pydicom/pixel_data_handlers/numpy_handler.py,TestNumpy_GetPixelData,test_missing_padding_warns,"(out[2::6], out[5::6]) = (arr[3::4], arr[3::4])","
out[2::6] = arr[3::4]
out[5::6] = arr[3::4]
",1,"[['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_numpy_pixel_data.py', 'pydicom.tests.test_numpy_pixel_data', 'TestNumpy_GetPixelData', 'test_array_read_only'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_numpy_pixel_data.py', 'pydicom.tests.test_numpy_pixel_data', 'TestNumpy_GetPixelData', 'test_missing_required_elem_pixel_data_color'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_numpy_pixel_data.py', 'pydicom.tests.test_numpy_pixel_data', 'TestNumpy_GetPixelData', 'test_no_pixel_data_raises'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_numpy_pixel_data.py', 'pydicom.tests.test_numpy_pixel_data', 'TestNumpy_GetPixelData', 'test_change_photometric_interpretation'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_numpy_pixel_data.py', 'pydicom.tests.test_numpy_pixel_data', 'TestNumpy_GetPixelData', 'test_double_float_pixel_data'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_numpy_pixel_data.py', 'pydicom.tests.test_numpy_pixel_data', 'TestNumpy_GetPixelData', 'test_missing_conditionally_required_elem_pixel_data_color'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_numpy_pixel_data.py', 'pydicom.tests.test_numpy_pixel_data', 'TestNumpy_GetPixelData', 'test_float_pixel_data'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_numpy_pixel_data.py', 'pydicom.tests.test_numpy_pixel_data', 'TestNumpy_GetPixelData', 'test_missing_required_elem_pixel_data_monochrome'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_numpy_pixel_data.py', 'pydicom.tests.test_numpy_pixel_data', 'TestNumpy_GetPixelData', 'test_unsupported_syntaxes_raises'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_numpy_pixel_data.py', 'pydicom.tests.test_numpy_pixel_data', 'TestNumpy_GetPixelData', 'test_bad_length_raises'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_numpy_pixel_data.py', 'pydicom.tests.test_numpy_pixel_data', 'TestNumpy_GetPixelData', 'test_missing_required_elem_float_pixel_data_monochrome'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_numpy_pixel_data.py', 'pydicom.tests.test_numpy_pixel_data', 'TestNumpy_GetPixelData', 'test_unknown_pixel_representation_raises'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_numpy_pixel_data.py', 'pydicom.tests.test_numpy_pixel_data', 'TestNumpy_GetPixelData', 'test_array_read_only_bit_packed'], ['https://github.com/pydicom/pydicom/tree/master/pydicom/tests/test_numpy_pixel_data.py', 'pydicom.tests.test_numpy_pixel_data', 'TestNumpy_GetPixelData', 'test_missing_padding_warns']]"
BrachioGraph,https://github.com/evildmp/BrachioGraph/tree/master//brachiograph.py,,test_report,"(pw_1, pw_2) = self.get_pulse_widths()","
tmp_fun_0 = self.get_pulse_widths()
pw_1 = tmp_fun_0[0]
pw_2 = tmp_fun_0[1]
",1,"[['https://github.com/evildmp/BrachioGraph/tree/master//test_brachiograph.py', 'test_brachiograph', '', 'test_report']]"
BrachioGraph,https://github.com/evildmp/BrachioGraph/tree/master//brachiograph.py,,test_report,"(angle_1, angle_2) = (self.angle_1, self.angle_2)","
angle_1 = self.angle_1
angle_2 = self.angle_2
",1,"[['https://github.com/evildmp/BrachioGraph/tree/master//test_brachiograph.py', 'test_brachiograph', '', 'test_report']]"
langdetect,https://github.com/Mimino666/langdetect/tree/master/langdetect/utils/unicode_block.py,UnicodeBlockTest,test_unicode_block,"(be, en) = (0, NUM_BLOCKS - 1)","
be = 0
en = NUM_BLOCKS - 1
",1,"[['https://github.com/Mimino666/langdetect/tree/master/langdetect/tests/utils/test_unicode_block.py', 'langdetect.tests.utils.test_unicode_block', 'UnicodeBlockTest', 'test_unicode_block']]"
langdetect,https://github.com/Mimino666/langdetect/tree/master/langdetect/utils/unicode_block.py,UnicodeBlockTest,test_unicode_block,"(name, start, end) = _unicode_blocks[mid]","
name = _unicode_blocks[mid][0]
start = _unicode_blocks[mid][1]
end = _unicode_blocks[mid][2]
",1,"[['https://github.com/Mimino666/langdetect/tree/master/langdetect/tests/utils/test_unicode_block.py', 'langdetect.tests.utils.test_unicode_block', 'UnicodeBlockTest', 'test_unicode_block']]"
webpy,https://github.com/webpy/webpy/tree/master/web/webapi.py,ApplicationTest,test_setcookie,"(name, value) = (safestr(name), safestr(value))","
name = safestr(name)
value = safestr(value)
",1,"[['https://github.com/webpy/webpy/tree/master/tests/test_application.py', 'tests.test_application', 'ApplicationTest', 'test_setcookie']]"
evalml,https://github.com/alteryx/evalml/tree/master/evalml/model_understanding/decision_boundary.py,,test_find_confusion_matrix_values,"(num_fn, num_tn) = (0, 0)","
num_fn = 0
num_tn = 0
",1,"[['https://github.com/alteryx/evalml/tree/master/evalml/tests/model_understanding_tests/test_decision_boundary.py', 'evalml.tests.model_understanding_tests.test_decision_boundary', '', 'test_find_confusion_matrix_values']]"
evalml,https://github.com/alteryx/evalml/tree/master/evalml/model_understanding/decision_boundary.py,,test_find_confusion_matrix_values,"(total_pos, total_neg) = (sum(pos_skew), sum(neg_skew))","
total_pos = sum(pos_skew)
total_neg = sum(neg_skew)
",1,"[['https://github.com/alteryx/evalml/tree/master/evalml/tests/model_understanding_tests/test_decision_boundary.py', 'evalml.tests.model_understanding_tests.test_decision_boundary', '', 'test_find_confusion_matrix_values']]"
evalml,https://github.com/alteryx/evalml/tree/master/evalml/model_understanding/decision_boundary.py,,test_find_confusion_matrix_per_threshold_errors,"(neg_class, pos_class) = (0, 1)","
neg_class = 0
pos_class = 1
",1,"[['https://github.com/alteryx/evalml/tree/master/evalml/tests/model_understanding_tests/test_decision_boundary.py', 'evalml.tests.model_understanding_tests.test_decision_boundary', '', 'test_find_confusion_matrix_per_threshold_args_pass_through'], ['https://github.com/alteryx/evalml/tree/master/evalml/tests/model_understanding_tests/test_decision_boundary.py', 'evalml.tests.model_understanding_tests.test_decision_boundary', '', 'test_find_confusion_matrix_per_threshold_errors']]"
evalml,https://github.com/alteryx/evalml/tree/master/evalml/model_understanding/decision_boundary.py,,test_find_confusion_matrix_per_threshold_errors,"(pos_skew, _) = np.histogram(true_pos_preds, bins=bins)","
tmp_fun_0 = np.histogram(true_pos_preds, bins=bins)
pos_skew = tmp_fun_0[0]
_ = tmp_fun_0[1]
",1,"[['https://github.com/alteryx/evalml/tree/master/evalml/tests/model_understanding_tests/test_decision_boundary.py', 'evalml.tests.model_understanding_tests.test_decision_boundary', '', 'test_find_confusion_matrix_per_threshold_args_pass_through'], ['https://github.com/alteryx/evalml/tree/master/evalml/tests/model_understanding_tests/test_decision_boundary.py', 'evalml.tests.model_understanding_tests.test_decision_boundary', '', 'test_find_confusion_matrix_per_threshold_errors']]"
evalml,https://github.com/alteryx/evalml/tree/master/evalml/model_understanding/decision_boundary.py,,test_find_confusion_matrix_per_threshold_errors,"(neg_skew, _) = np.histogram(true_neg_preds, bins=bins)","
tmp_fun_0 = np.histogram(true_neg_preds, bins=bins)
neg_skew = tmp_fun_0[0]
_ = tmp_fun_0[1]
",1,"[['https://github.com/alteryx/evalml/tree/master/evalml/tests/model_understanding_tests/test_decision_boundary.py', 'evalml.tests.model_understanding_tests.test_decision_boundary', '', 'test_find_confusion_matrix_per_threshold_args_pass_through'], ['https://github.com/alteryx/evalml/tree/master/evalml/tests/model_understanding_tests/test_decision_boundary.py', 'evalml.tests.model_understanding_tests.test_decision_boundary', '', 'test_find_confusion_matrix_per_threshold_errors']]"
evalml,https://github.com/alteryx/evalml/tree/master/evalml/model_understanding/decision_boundary.py,,test_find_confusion_matrix_per_threshold_errors,"(conf_matrix_list, objective_dict) = _find_confusion_matrix_objective_threshold(pos_skew, neg_skew, bins)","
tmp_fun_0 = _find_confusion_matrix_objective_threshold(pos_skew, neg_skew, bins)
conf_matrix_list = tmp_fun_0[0]
objective_dict = tmp_fun_0[1]
",1,"[['https://github.com/alteryx/evalml/tree/master/evalml/tests/model_understanding_tests/test_decision_boundary.py', 'evalml.tests.model_understanding_tests.test_decision_boundary', '', 'test_find_confusion_matrix_per_threshold_args_pass_through'], ['https://github.com/alteryx/evalml/tree/master/evalml/tests/model_understanding_tests/test_decision_boundary.py', 'evalml.tests.model_understanding_tests.test_decision_boundary', '', 'test_find_confusion_matrix_per_threshold_errors']]"
beartype,https://github.com/beartype/beartype/tree/master/beartype/_decor/_code/_pep/_pephint.py,,test_pep_code_check_hint,"(hint_curr_expr, hint_forwardrefs_class_basename) = express_func_scope_type_forwardref(forwardref=hint_curr, forwardrefs_class_basename=hint_forwardrefs_class_basename, func_scope=func_wrapper_locals, exception_prefix=_EXCEPTION_PREFIX)","
tmp_fun_0 = express_func_scope_type_forwardref(forwardref=hint_curr, forwardrefs_class_basename=hint_forwardrefs_class_basename, func_scope=func_wrapper_locals, exception_prefix=_EXCEPTION_PREFIX)
hint_curr_expr = tmp_fun_0[0]
hint_forwardrefs_class_basename = tmp_fun_0[1]
",1,"[['https://github.com/beartype/beartype/tree/master/beartype_test/a00_unit/a90_decor/code/pep/test_codepephint.py', 'beartype_test.a00_unit.a90_decor.code.pep.test_codepephint', '', 'test_pep_code_check_hint']]"
beartype,https://github.com/beartype/beartype/tree/master/beartype/_decor/_code/_pep/_pephint.py,,test_pep_code_check_hint,pith_curr_assign_expr = pith_curr_var_name = pith_curr_expr,"
tmp_value = pith_curr_expr
pith_curr_assign_expr = tmp_value
pith_curr_var_name = tmp_value
",1,"[['https://github.com/beartype/beartype/tree/master/beartype_test/a00_unit/a90_decor/code/pep/test_codepephint.py', 'beartype_test.a00_unit.a90_decor.code.pep.test_codepephint', '', 'test_pep_code_check_hint']]"
beartype,https://github.com/beartype/beartype/tree/master/beartype/_decor/_code/_pep/_pephint.py,,test_pep_code_check_hint,"(hint_curr_expr, hint_forwardrefs_class_basename) = express_func_scope_type_forwardref(forwardref=hint_child, forwardrefs_class_basename=hint_forwardrefs_class_basename, func_scope=func_wrapper_locals, exception_prefix=_EXCEPTION_PREFIX)","
tmp_fun_0 = express_func_scope_type_forwardref(forwardref=hint_child, forwardrefs_class_basename=hint_forwardrefs_class_basename, func_scope=func_wrapper_locals, exception_prefix=_EXCEPTION_PREFIX)
hint_curr_expr = tmp_fun_0[0]
hint_forwardrefs_class_basename = tmp_fun_0[1]
",1,"[['https://github.com/beartype/beartype/tree/master/beartype_test/a00_unit/a90_decor/code/pep/test_codepephint.py', 'beartype_test.a00_unit.a90_decor.code.pep.test_codepephint', '', 'test_pep_code_check_hint']]"
graphite-api,https://github.com/brutasse/graphite-api/tree/master/graphite_api/functions.py,FunctionsTest,test_lcm_10_5,"(a, b) = (b, a)","
tmp0 = a
a = b
b = tmp0
",1,"[['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_lcm_None_None'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_lcm_5_None'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_lcm_0_10'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_lcm_5_0'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_lcm_10_5']]"
graphite-api,https://github.com/brutasse/graphite-api/tree/master/graphite_api/render/attime.py,FunctionsTest,test_time_shift,"(ref, offset) = s.split('+', 1)","
tmp_fun_0 = s.split('+', 1)
ref = tmp_fun_0[0]
offset = tmp_fun_0[1]
",1,"[['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_linear_regression'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_identity'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_attime.py', 'tests.test_attime', 'AtTestCase', 'test_parse'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_hitcount'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_aggregate_line'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_integral_by_interval'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_apply_by_node'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_use_series_above'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_smart_summarize'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_constant_line'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_time_stack'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_threshold'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_random_walk'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_attime.py', 'tests.test_attime', 'AtTestCase', 'test_absolute_time'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_time_shift']]"
graphite-api,https://github.com/brutasse/graphite-api/tree/master/graphite_api/render/attime.py,FunctionsTest,test_time_shift,"(ref, offset) = s.split('-', 1)","
tmp_fun_0 = s.split('-', 1)
ref = tmp_fun_0[0]
offset = tmp_fun_0[1]
",1,"[['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_linear_regression'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_identity'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_attime.py', 'tests.test_attime', 'AtTestCase', 'test_parse'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_hitcount'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_aggregate_line'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_integral_by_interval'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_apply_by_node'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_use_series_above'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_smart_summarize'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_constant_line'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_time_stack'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_threshold'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_random_walk'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_attime.py', 'tests.test_attime', 'AtTestCase', 'test_absolute_time'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_time_shift']]"
graphite-api,https://github.com/brutasse/graphite-api/tree/master/graphite_api/render/attime.py,FunctionsTest,test_time_shift,"(ref, offset) = (s, '')","
ref = s
offset = ''
",1,"[['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_linear_regression'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_identity'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_attime.py', 'tests.test_attime', 'AtTestCase', 'test_parse'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_hitcount'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_aggregate_line'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_integral_by_interval'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_apply_by_node'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_use_series_above'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_smart_summarize'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_constant_line'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_time_stack'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_threshold'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_random_walk'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_attime.py', 'tests.test_attime', 'AtTestCase', 'test_absolute_time'], ['https://github.com/brutasse/graphite-api/tree/master/tests/test_functions.py', 'tests.test_functions', 'FunctionsTest', 'test_time_shift']]"
pegasus,https://github.com/google-research/pegasus/tree/master/pegasus/eval/extractive/extractive_scorer.py,ExtractiveScorerTest,test_extractive_fragments,i = j = 0,"
tmp_value = 0
i = tmp_value
j = tmp_value
",1,"[['https://github.com/google-research/pegasus/tree/master/pegasus/eval/extractive/extractive_scorer_test.py', 'pegasus.eval.extractive.extractive_scorer_test', 'ExtractiveScorerTest', 'test_extractive_fragments']]"
pegasus,https://github.com/google-research/pegasus/tree/master/pegasus/eval/extractive/extractive_scorer.py,ExtractiveScorerTest,test_extractive_fragments,"(i, j) = (i + max(len(f), 1), 0)","
i = i + max(len(f), 1)
j = 0
",1,"[['https://github.com/google-research/pegasus/tree/master/pegasus/eval/extractive/extractive_scorer_test.py', 'pegasus.eval.extractive.extractive_scorer_test', 'ExtractiveScorerTest', 'test_extractive_fragments']]"
pegasus,https://github.com/google-research/pegasus/tree/master/pegasus/eval/extractive/extractive_scorer.py,ExtractiveScorerTest,test_extractive_fragments,"(ii, jj) = (i, j)","
ii = i
jj = j
",1,"[['https://github.com/google-research/pegasus/tree/master/pegasus/eval/extractive/extractive_scorer_test.py', 'pegasus.eval.extractive.extractive_scorer_test', 'ExtractiveScorerTest', 'test_extractive_fragments']]"
pegasus,https://github.com/google-research/pegasus/tree/master/pegasus/eval/extractive/extractive_scorer.py,ExtractiveScorerTest,test_extractive_fragments,"(ii, jj) = (ii + 1, jj + 1)","
ii = ii + 1
jj = jj + 1
",1,"[['https://github.com/google-research/pegasus/tree/master/pegasus/eval/extractive/extractive_scorer_test.py', 'pegasus.eval.extractive.extractive_scorer_test', 'ExtractiveScorerTest', 'test_extractive_fragments']]"
mlens,https://github.com/flennerhag/mlens/tree/master/mlens/index/subsemble.py,,test_temp_index_is_fitted,self.n_samples = self.n_test_samples = n,"
tmp_value = n
self.n_samples = tmp_value
self.n_test_samples = tmp_value
",1,"[['https://github.com/flennerhag/mlens/tree/master/mlens/index/tests/test_base.py', 'mlens.index.tests.test_base', '', 'test_full_index_is_fitted'], ['https://github.com/flennerhag/mlens/tree/master/mlens/index/tests/test_base.py', 'mlens.index.tests.test_base', '', 'test_blend_index_is_fitted'], ['https://github.com/flennerhag/mlens/tree/master/mlens/index/tests/test_base.py', 'mlens.index.tests.test_base', '', 'test_subset_index_is_fitted'], ['https://github.com/flennerhag/mlens/tree/master/mlens/index/tests/test_base.py', 'mlens.index.tests.test_base', '', 'test_temp_index_is_fitted']]"
mlens,https://github.com/flennerhag/mlens/tree/master/mlens/utils/utils.py,,test_recorder,t = t0 = time(),"
tmp_value = time()
t = tmp_value
t0 = tmp_value
",1,"[['https://github.com/flennerhag/mlens/tree/master/mlens/utils/tests/test_utils.py', 'mlens.utils.tests.test_utils', '', 'test_recorder']]"
mlens,https://github.com/flennerhag/mlens/tree/master/mlens/utils/utils.py,,test_cm,"(t0, i) = (time(), 0)","
t0 = time()
i = 0
",1,"[['https://github.com/flennerhag/mlens/tree/master/mlens/utils/tests/test_utils.py', 'mlens.utils.tests.test_utils', '', 'test_cm_exception'], ['https://github.com/flennerhag/mlens/tree/master/mlens/utils/tests/test_utils.py', 'mlens.utils.tests.test_utils', '', 'test_cm']]"
mlens,https://github.com/flennerhag/mlens/tree/master/mlens/utils/utils.py,,test_cm,"(cpu, rss, vms) = ([], [], [])","
cpu = []
rss = []
vms = []
",1,"[['https://github.com/flennerhag/mlens/tree/master/mlens/utils/tests/test_utils.py', 'mlens.utils.tests.test_utils', '', 'test_cm_exception'], ['https://github.com/flennerhag/mlens/tree/master/mlens/utils/tests/test_utils.py', 'mlens.utils.tests.test_utils', '', 'test_cm']]"
mlens,https://github.com/flennerhag/mlens/tree/master/mlens/utils/utils.py,,test_cm,"(c, r, v) = line.split(',')","
tmp_fun_0 = line.split(',')
c = tmp_fun_0[0]
r = tmp_fun_0[1]
v = tmp_fun_0[2]
",1,"[['https://github.com/flennerhag/mlens/tree/master/mlens/utils/tests/test_utils.py', 'mlens.utils.tests.test_utils', '', 'test_cm_exception'], ['https://github.com/flennerhag/mlens/tree/master/mlens/utils/tests/test_utils.py', 'mlens.utils.tests.test_utils', '', 'test_cm']]"
TensorNetwork,https://github.com/google/TensorNetwork/tree/master/tensornetwork/block_sparse/blocksparsetensor.py,,test_repr,"(data, charges, flows, order) = _data_initializer(_random, lambda charges, flows: np.prod([c.dim for c in charges]), indices, dtype=dtype)","
tmp_fun_0 = _data_initializer(_random, lambda charges, flows: np.prod([c.dim for c in charges]), indices, dtype=dtype)
data = tmp_fun_0[0]
charges = tmp_fun_0[1]
flows = tmp_fun_0[2]
order = tmp_fun_0[3]
",1,"[['https://github.com/google/TensorNetwork/tree/master/tensornetwork/block_sparse/blocksparsetensor_test.py', 'tensornetwork.block_sparse.blocksparsetensor_test', '', 'test_repr']]"
TensorNetwork,https://github.com/google/TensorNetwork/tree/master/tensornetwork/block_sparse/blocksparsetensor.py,,test_tensordot_single_arg,"(data, charges, flows, order) = _data_initializer(_random, compute_num_nonzero, indices, dtype=dtype, boundaries=boundaries)","
tmp_fun_0 = _data_initializer(_random, compute_num_nonzero, indices, dtype=dtype, boundaries=boundaries)
data = tmp_fun_0[0]
charges = tmp_fun_0[1]
flows = tmp_fun_0[2]
order = tmp_fun_0[3]
",1,"[['https://github.com/google/TensorNetwork/tree/master/tensornetwork/block_sparse/tensordot_test.py', 'tensornetwork.block_sparse.tensordot_test', '', 'test_tensordot_raises'], ['https://github.com/google/TensorNetwork/tree/master/tensornetwork/block_sparse/tensordot_test.py', 'tensornetwork.block_sparse.tensordot_test', '', 'test_tensordot_single_arg']]"
TensorNetwork,https://github.com/google/TensorNetwork/tree/master/tensornetwork/block_sparse/blocksparsetensor.py,,test_repr,"(flat_charges_1, flat_flows_1) = (tensor1._charges, tensor1._flows)","
flat_charges_1 = tensor1._charges
flat_flows_1 = tensor1._flows
",1,"[['https://github.com/google/TensorNetwork/tree/master/tensornetwork/block_sparse/tensordot_test.py', 'tensornetwork.block_sparse.tensordot_test', '', 'test_tensordot_raises'], ['https://github.com/google/TensorNetwork/tree/master/tensornetwork/block_sparse/tensordot_test.py', 'tensornetwork.block_sparse.tensordot_test', '', 'test_tensordot_single_arg'], ['https://github.com/google/TensorNetwork/tree/master/tensornetwork/block_sparse/blocksparsetensor_test.py', 'tensornetwork.block_sparse.blocksparsetensor_test', '', 'test_repr']]"
TensorNetwork,https://github.com/google/TensorNetwork/tree/master/tensornetwork/block_sparse/blocksparsetensor.py,,test_repr,"(flat_charges_2, flat_flows_2) = (tensor2._charges, tensor2._flows)","
flat_charges_2 = tensor2._charges
flat_flows_2 = tensor2._flows
",1,"[['https://github.com/google/TensorNetwork/tree/master/tensornetwork/block_sparse/tensordot_test.py', 'tensornetwork.block_sparse.tensordot_test', '', 'test_tensordot_raises'], ['https://github.com/google/TensorNetwork/tree/master/tensornetwork/block_sparse/tensordot_test.py', 'tensornetwork.block_sparse.tensordot_test', '', 'test_tensordot_single_arg'], ['https://github.com/google/TensorNetwork/tree/master/tensornetwork/block_sparse/blocksparsetensor_test.py', 'tensornetwork.block_sparse.blocksparsetensor_test', '', 'test_repr']]"
TensorNetwork,https://github.com/google/TensorNetwork/tree/master/tensornetwork/block_sparse/blocksparsetensor.py,,test_repr,"(tr_sparse_blocks_1, charges1, shapes_1) = _find_transposed_diagonal_sparse_blocks(flat_charges_1, flat_flows_1, len(left_charges), flat_order_1)","
tmp_fun_0 = _find_transposed_diagonal_sparse_blocks(flat_charges_1, flat_flows_1, len(left_charges), flat_order_1)
tr_sparse_blocks_1 = tmp_fun_0[0]
charges1 = tmp_fun_0[1]
shapes_1 = tmp_fun_0[2]
",1,"[['https://github.com/google/TensorNetwork/tree/master/tensornetwork/block_sparse/tensordot_test.py', 'tensornetwork.block_sparse.tensordot_test', '', 'test_tensordot_raises'], ['https://github.com/google/TensorNetwork/tree/master/tensornetwork/block_sparse/tensordot_test.py', 'tensornetwork.block_sparse.tensordot_test', '', 'test_tensordot_single_arg'], ['https://github.com/google/TensorNetwork/tree/master/tensornetwork/block_sparse/blocksparsetensor_test.py', 'tensornetwork.block_sparse.blocksparsetensor_test', '', 'test_repr']]"
TensorNetwork,https://github.com/google/TensorNetwork/tree/master/tensornetwork/block_sparse/blocksparsetensor.py,,test_repr,"(tr_sparse_blocks_2, charges2, shapes_2) = _find_transposed_diagonal_sparse_blocks(flat_charges_2, flat_flows_2, len(contr_charges_2), flat_order_2)","
tmp_fun_0 = _find_transposed_diagonal_sparse_blocks(flat_charges_2, flat_flows_2, len(contr_charges_2), flat_order_2)
tr_sparse_blocks_2 = tmp_fun_0[0]
charges2 = tmp_fun_0[1]
shapes_2 = tmp_fun_0[2]
",1,"[['https://github.com/google/TensorNetwork/tree/master/tensornetwork/block_sparse/tensordot_test.py', 'tensornetwork.block_sparse.tensordot_test', '', 'test_tensordot_raises'], ['https://github.com/google/TensorNetwork/tree/master/tensornetwork/block_sparse/tensordot_test.py', 'tensornetwork.block_sparse.tensordot_test', '', 'test_tensordot_single_arg'], ['https://github.com/google/TensorNetwork/tree/master/tensornetwork/block_sparse/blocksparsetensor_test.py', 'tensornetwork.block_sparse.blocksparsetensor_test', '', 'test_repr']]"
TensorNetwork,https://github.com/google/TensorNetwork/tree/master/tensornetwork/block_sparse/blocksparsetensor.py,,test_repr,"(common_charges, label_to_common_1, label_to_common_2) = intersect(charges1.unique_charges, charges2.unique_charges, axis=0, return_indices=True)","
tmp_fun_0 = intersect(charges1.unique_charges, charges2.unique_charges, axis=0, return_indices=True)
common_charges = tmp_fun_0[0]
label_to_common_1 = tmp_fun_0[1]
label_to_common_2 = tmp_fun_0[2]
",1,"[['https://github.com/google/TensorNetwork/tree/master/tensornetwork/block_sparse/tensordot_test.py', 'tensornetwork.block_sparse.tensordot_test', '', 'test_tensordot_raises'], ['https://github.com/google/TensorNetwork/tree/master/tensornetwork/block_sparse/tensordot_test.py', 'tensornetwork.block_sparse.tensordot_test', '', 'test_tensordot_single_arg'], ['https://github.com/google/TensorNetwork/tree/master/tensornetwork/block_sparse/blocksparsetensor_test.py', 'tensornetwork.block_sparse.blocksparsetensor_test', '', 'test_repr']]"
TensorNetwork,https://github.com/google/TensorNetwork/tree/master/tensornetwork/block_sparse/blocksparsetensor.py,,test_repr,"(sparse_blocks, cs, _) = _find_transposed_diagonal_sparse_blocks(charges, flows, len(left_charges), list(range(len(charges))))","
tmp_fun_0 = _find_transposed_diagonal_sparse_blocks(charges, flows, len(left_charges), list(range(len(charges))))
sparse_blocks = tmp_fun_0[0]
cs = tmp_fun_0[1]
_ = tmp_fun_0[2]
",1,"[['https://github.com/google/TensorNetwork/tree/master/tensornetwork/block_sparse/tensordot_test.py', 'tensornetwork.block_sparse.tensordot_test', '', 'test_tensordot_raises'], ['https://github.com/google/TensorNetwork/tree/master/tensornetwork/block_sparse/tensordot_test.py', 'tensornetwork.block_sparse.tensordot_test', '', 'test_tensordot_single_arg'], ['https://github.com/google/TensorNetwork/tree/master/tensornetwork/block_sparse/blocksparsetensor_test.py', 'tensornetwork.block_sparse.blocksparsetensor_test', '', 'test_repr']]"
fairlearn,https://github.com/fairlearn/fairlearn/tree/master/fairlearn/postprocessing/_tradeoff_curve_utilities.py,,test_calculate_tradeoff_points,"(scores, labels, n, n_positive, n_negative) = _get_scores_labels_and_counts(data)","
tmp_fun_0 = _get_scores_labels_and_counts(data)
scores = tmp_fun_0[0]
labels = tmp_fun_0[1]
n = tmp_fun_0[2]
n_positive = tmp_fun_0[3]
n_negative = tmp_fun_0[4]
",1,"[['https://github.com/fairlearn/fairlearn/tree/master/test/unit/postprocessing/test_curve_utilities.py', 'test.unit.postprocessing.test_curve_utilities', '', 'test_calculate_tradeoff_points']]"
fairlearn,https://github.com/fairlearn/fairlearn/tree/master/fairlearn/postprocessing/_tradeoff_curve_utilities.py,,test_calculate_tradeoff_points,"(x_list, y_list, operation_list) = ([], [], [])","
x_list = []
y_list = []
operation_list = []
",1,"[['https://github.com/fairlearn/fairlearn/tree/master/test/unit/postprocessing/test_curve_utilities.py', 'test.unit.postprocessing.test_curve_utilities', '', 'test_calculate_tradeoff_points']]"
xlrd,https://github.com/python-excel/xlrd/tree/master/xlrd/xldate.py,TestXLDate,test_time_as_tuple,hour = minute = second = 0,"
tmp_value = 0
hour = tmp_value
minute = tmp_value
second = tmp_value
",1,"[['https://github.com/python-excel/xlrd/tree/master/tests/test_xldate.py', 'tests.test_xldate', 'TestXLDate', 'test_date_as_tuple'], ['https://github.com/python-excel/xlrd/tree/master/tests/test_xldate.py', 'tests.test_xldate', 'TestXLDate', 'test_time_as_tuple']]"
xlrd,https://github.com/python-excel/xlrd/tree/master/xlrd/xldate.py,TestXLDate,test_time_as_tuple,"(minutes, second) = divmod(seconds, 60)","
tmp_fun_0 = divmod(seconds, 60)
minutes = tmp_fun_0[0]
second = tmp_fun_0[1]
",1,"[['https://github.com/python-excel/xlrd/tree/master/tests/test_xldate.py', 'tests.test_xldate', 'TestXLDate', 'test_date_as_tuple'], ['https://github.com/python-excel/xlrd/tree/master/tests/test_xldate.py', 'tests.test_xldate', 'TestXLDate', 'test_time_as_tuple']]"
xlrd,https://github.com/python-excel/xlrd/tree/master/xlrd/xldate.py,TestXLDate,test_time_as_tuple,"(hour, minute) = divmod(minutes, 60)","
tmp_fun_0 = divmod(minutes, 60)
hour = tmp_fun_0[0]
minute = tmp_fun_0[1]
",1,"[['https://github.com/python-excel/xlrd/tree/master/tests/test_xldate.py', 'tests.test_xldate', 'TestXLDate', 'test_date_as_tuple'], ['https://github.com/python-excel/xlrd/tree/master/tests/test_xldate.py', 'tests.test_xldate', 'TestXLDate', 'test_time_as_tuple']]"
google-maps-services-python,https://github.com/googlemaps/google-maps-services-python/tree/master/googlemaps/convert.py,ConvertTest,test_polyline_decode,index = lat = lng = 0,"
tmp_value = 0
index = tmp_value
lat = tmp_value
lng = tmp_value
",1,"[['https://github.com/googlemaps/google-maps-services-python/tree/master/tests/test_convert.py', 'tests.test_convert', 'ConvertTest', 'test_polyline_round_trip'], ['https://github.com/googlemaps/google-maps-services-python/tree/master/tests/test_convert.py', 'tests.test_convert', 'ConvertTest', 'test_polyline_decode']]"
ecs,https://github.com/elastic/ecs/tree/master/scripts/schema/finalizer.py,TestSchemaFinalizer,test_field_group_at_path_find_nested_destination,nesting = field['fields'] = {},"
tmp_value = {}
nesting = tmp_value
field['fields'] = tmp_value
",1,"[['https://github.com/elastic/ecs/tree/master/scripts/tests/unit/test_schema_finalizer.py', 'scripts.tests.unit.test_schema_finalizer', 'TestSchemaFinalizer', 'test_field_group_at_path_missing_nested_path'], ['https://github.com/elastic/ecs/tree/master/scripts/tests/unit/test_schema_finalizer.py', 'scripts.tests.unit.test_schema_finalizer', 'TestSchemaFinalizer', 'test_field_group_at_path_for_leaf_object_field_creates_the_section'], ['https://github.com/elastic/ecs/tree/master/scripts/tests/unit/test_schema_finalizer.py', 'scripts.tests.unit.test_schema_finalizer', 'TestSchemaFinalizer', 'test_field_group_at_path_leaf_field_not_field_group'], ['https://github.com/elastic/ecs/tree/master/scripts/tests/unit/test_schema_finalizer.py', 'scripts.tests.unit.test_schema_finalizer', 'TestSchemaFinalizer', 'test_field_group_at_path_root_destination'], ['https://github.com/elastic/ecs/tree/master/scripts/tests/unit/test_schema_finalizer.py', 'scripts.tests.unit.test_schema_finalizer', 'TestSchemaFinalizer', 'test_field_group_at_path_find_nested_destination']]"
pycoin,https://github.com/richardkiss/pycoin/tree/master/pycoin/encoding/b58.py,EncodingTestCase,test_to_from_hashed_base58,"(data, the_hash) = (data[:-4], data[-4:])","
tmp0 = data[-4:]
data = data[:-4]
the_hash = tmp0
",1,"[['https://github.com/richardkiss/pycoin/tree/master/tests/encoding_test.py', 'tests.encoding_test', 'EncodingTestCase', 'test_to_from_hashed_base58']]"
pattern,https://github.com/clips/pattern/tree/master/pattern/metrics.py,TestProfiling,test_confustion_matrix,TN = TP = FN = FP = 0,"
tmp_value = 0
TN = tmp_value
TP = tmp_value
FN = tmp_value
FP = tmp_value
",1,"[['https://github.com/clips/pattern/tree/master/test/test_metrics.py', 'test.test_metrics', 'TestProfiling', 'test_confustion_matrix']]"
joblib,https://github.com/joblib/joblib/tree/master/joblib/testing.py,,test_check_subprocess_call_non_matching_regex,"(stdout, stderr) = proc.communicate()","
tmp_fun_0 = proc.communicate()
stdout = tmp_fun_0[0]
stderr = tmp_fun_0[1]
",1,"[['https://github.com/joblib/joblib/tree/master/joblib/test/test_testing.py', 'joblib.test.test_testing', '', 'test_check_subprocess_call'], ['https://github.com/joblib/joblib/tree/master/joblib/test/test_testing.py', 'joblib.test.test_testing', '', 'test_check_subprocess_call_wrong_command'], ['https://github.com/joblib/joblib/tree/master/joblib/test/test_module.py', 'joblib.test.test_module', '', 'test_no_start_method_side_effect_on_import'], ['https://github.com/joblib/joblib/tree/master/joblib/test/test_module.py', 'joblib.test.test_module', '', 'test_no_semaphore_tracker_on_import'], ['https://github.com/joblib/joblib/tree/master/joblib/test/test_testing.py', 'joblib.test.test_testing', '', 'test_check_subprocess_call_non_zero_return_code'], ['https://github.com/joblib/joblib/tree/master/joblib/test/test_parallel.py', 'joblib.test.test_parallel', '', 'test_parallel_with_interactively_defined_bound_method'], ['https://github.com/joblib/joblib/tree/master/joblib/test/test_testing.py', 'joblib.test.test_testing', '', 'test_check_subprocess_call_timeout'], ['https://github.com/joblib/joblib/tree/master/joblib/test/test_module.py', 'joblib.test.test_module', '', 'test_no_resource_tracker_on_import'], ['https://github.com/joblib/joblib/tree/master/joblib/test/test_parallel.py', 'joblib.test.test_parallel', '', 'test_parallel_with_interactively_defined_functions_default_backend'], ['https://github.com/joblib/joblib/tree/master/joblib/test/test_testing.py', 'joblib.test.test_testing', '', 'test_check_subprocess_call_non_matching_regex']]"
joblib,https://github.com/joblib/joblib/tree/master/joblib/testing.py,,test_check_subprocess_call_non_matching_regex,"(stdout, stderr) = (stdout.decode(), stderr.decode())","
stdout = stdout.decode()
stderr = stderr.decode()
",1,"[['https://github.com/joblib/joblib/tree/master/joblib/test/test_testing.py', 'joblib.test.test_testing', '', 'test_check_subprocess_call'], ['https://github.com/joblib/joblib/tree/master/joblib/test/test_testing.py', 'joblib.test.test_testing', '', 'test_check_subprocess_call_wrong_command'], ['https://github.com/joblib/joblib/tree/master/joblib/test/test_module.py', 'joblib.test.test_module', '', 'test_no_start_method_side_effect_on_import'], ['https://github.com/joblib/joblib/tree/master/joblib/test/test_module.py', 'joblib.test.test_module', '', 'test_no_semaphore_tracker_on_import'], ['https://github.com/joblib/joblib/tree/master/joblib/test/test_testing.py', 'joblib.test.test_testing', '', 'test_check_subprocess_call_non_zero_return_code'], ['https://github.com/joblib/joblib/tree/master/joblib/test/test_parallel.py', 'joblib.test.test_parallel', '', 'test_parallel_with_interactively_defined_bound_method'], ['https://github.com/joblib/joblib/tree/master/joblib/test/test_testing.py', 'joblib.test.test_testing', '', 'test_check_subprocess_call_timeout'], ['https://github.com/joblib/joblib/tree/master/joblib/test/test_module.py', 'joblib.test.test_module', '', 'test_no_resource_tracker_on_import'], ['https://github.com/joblib/joblib/tree/master/joblib/test/test_parallel.py', 'joblib.test.test_parallel', '', 'test_parallel_with_interactively_defined_functions_default_backend'], ['https://github.com/joblib/joblib/tree/master/joblib/test/test_testing.py', 'joblib.test.test_testing', '', 'test_check_subprocess_call_non_matching_regex']]"
pydantic,https://github.com/samuelcolvin/pydantic/tree/master/benchmarks/profile.py,,test_async,"(count, pass_count) = (0, 0)","
count = 0
pass_count = 0
",1,"[['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_decorator.py', 'tests.test_decorator', '', 'test_async']]"
pydantic,https://github.com/samuelcolvin/pydantic/tree/master/benchmarks/profile.py,,test_async,"(passed, result) = test.validate(case)","
tmp_fun_0 = test.validate(case)
passed = tmp_fun_0[0]
result = tmp_fun_0[1]
",1,"[['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_decorator.py', 'tests.test_decorator', '', 'test_async']]"
pydantic,https://github.com/samuelcolvin/pydantic/tree/master/tests/conftest.py,,test_postponed_annotations_optional,"(module_name, filename) = _create_module_file(source_code, tmp_path, request.node.name)","
tmp_fun_0 = _create_module_file(source_code, tmp_path, request.node.name)
module_name = tmp_fun_0[0]
filename = tmp_fun_0[1]
",1,"[['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_forward_ref.py', 'tests.test_forward_ref', '', 'test_postponed_annotations'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_forward_ref.py', 'tests.test_forward_ref', '', 'test_self_reference_json_schema_with_future_annotations'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_schema.py', 'tests.test_schema', '', 'test_multiple_enums_with_same_name'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_forward_ref.py', 'tests.test_forward_ref', '', 'test_circular_reference_json_schema_with_future_annotations'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_forward_ref.py', 'tests.test_forward_ref', '', 'test_forward_ref_dataclass_with_future_annotations'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_forward_ref.py', 'tests.test_forward_ref', '', 'test_forward_ref_optional'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_schema.py', 'tests.test_schema', '', 'test_multiple_models_with_same_name'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_dataclasses.py', 'tests.test_dataclasses', '', 'test_pickle_overriden_builtin_dataclass'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_forward_ref.py', 'tests.test_forward_ref', '', 'test_resolve_forward_ref_dataclass'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_forward_ref.py', 'tests.test_forward_ref', '', 'test_class_var_as_string'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_forward_ref.py', 'tests.test_forward_ref', '', 'test_postponed_annotations_optional']]"
pydantic,https://github.com/samuelcolvin/pydantic/tree/master/tests/conftest.py,,test_postponed_annotations_optional,sys.modules[module_name] = module = importlib.util.module_from_spec(spec),"
tmp_value = importlib.util.module_from_spec(spec)
sys.modules[module_name] = tmp_value
module = tmp_value
",1,"[['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_forward_ref.py', 'tests.test_forward_ref', '', 'test_postponed_annotations'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_forward_ref.py', 'tests.test_forward_ref', '', 'test_self_reference_json_schema_with_future_annotations'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_schema.py', 'tests.test_schema', '', 'test_multiple_enums_with_same_name'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_forward_ref.py', 'tests.test_forward_ref', '', 'test_circular_reference_json_schema_with_future_annotations'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_forward_ref.py', 'tests.test_forward_ref', '', 'test_forward_ref_dataclass_with_future_annotations'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_forward_ref.py', 'tests.test_forward_ref', '', 'test_forward_ref_optional'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_schema.py', 'tests.test_schema', '', 'test_multiple_models_with_same_name'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_dataclasses.py', 'tests.test_dataclasses', '', 'test_pickle_overriden_builtin_dataclass'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_forward_ref.py', 'tests.test_forward_ref', '', 'test_resolve_forward_ref_dataclass'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_forward_ref.py', 'tests.test_forward_ref', '', 'test_class_var_as_string'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_forward_ref.py', 'tests.test_forward_ref', '', 'test_postponed_annotations_optional']]"
pydantic,https://github.com/samuelcolvin/pydantic/tree/master/tests/conftest.py,,test_async,"(module_name, filename) = _create_module_file(source_code, tmp_path, request.node.name)","
tmp_fun_0 = _create_module_file(source_code, tmp_path, request.node.name)
module_name = tmp_fun_0[0]
filename = tmp_fun_0[1]
",1,"[['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_decorator.py', 'tests.test_decorator', '', 'test_async']]"
pydantic,https://github.com/samuelcolvin/pydantic/tree/master/tests/conftest.py,,test_async,sys.modules[module_name] = module = importlib.util.module_from_spec(spec),"
tmp_value = importlib.util.module_from_spec(spec)
sys.modules[module_name] = tmp_value
module = tmp_value
",1,"[['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_decorator.py', 'tests.test_decorator', '', 'test_async']]"
pydantic,https://github.com/samuelcolvin/pydantic/tree/master/pydantic/schema.py,,test_multiple_models_with_same_name,"(m_schema, m_definitions, m_nested_models) = model_process_schema(model, by_alias=by_alias, model_name_map=model_name_map, ref_prefix=ref_prefix, ref_template=ref_template)","
tmp_fun_0 = model_process_schema(model, by_alias=by_alias, model_name_map=model_name_map, ref_prefix=ref_prefix, ref_template=ref_template)
m_schema = tmp_fun_0[0]
m_definitions = tmp_fun_0[1]
m_nested_models = tmp_fun_0[2]
",1,"[['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_schema.py', 'tests.test_schema', '', 'test_multiple_models_with_same_name']]"
pydantic,https://github.com/samuelcolvin/pydantic/tree/master/pydantic/main.py,,test_create_model_pickle,"(f_annotation, f_value) = (None, f_def)","
f_annotation = None
f_value = f_def
",1,"[['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_create_model.py', 'tests.test_create_model', '', 'test_repeat_base_usage'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_create_model.py', 'tests.test_create_model', '', 'test_inheritance_validators'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_create_model.py', 'tests.test_create_model', '', 'test_custom_config'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_create_model.py', 'tests.test_create_model', '', 'test_dynamic_and_static'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_create_model.py', 'tests.test_create_model', '', 'test_inheritance_validators_always'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_create_model.py', 'tests.test_create_model', '', 'test_field_wrong_tuple'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_forward_ref.py', 'tests.test_forward_ref', '', 'test_forward_ref_with_create_model'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_create_model.py', 'tests.test_create_model', '', 'test_invalid_name'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_create_model.py', 'tests.test_create_model', '', 'test_config_and_base'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_model_signature.py', 'tests.test_model_signature', '', 'test_invalid_identifiers_signature'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_create_model.py', 'tests.test_create_model', '', 'test_custom_config_inherits'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_create_model.py', 'tests.test_create_model', '', 'test_create_model'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_create_model.py', 'tests.test_create_model', '', 'test_custom_config_extras'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_create_model.py', 'tests.test_create_model', '', 'test_config_field_info_create_model'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_create_model.py', 'tests.test_create_model', '', 'test_inheritance_validators_all'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_create_model.py', 'tests.test_create_model', '', 'test_create_model_usage'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_create_model.py', 'tests.test_create_model', '', 'test_funky_name'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_create_model.py', 'tests.test_create_model', '', 'test_inheritance'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_create_model.py', 'tests.test_create_model', '', 'test_create_model_pickle']]"
pydantic,https://github.com/samuelcolvin/pydantic/tree/master/pydantic/main.py,,test_field_wrong_tuple,"(f_annotation, f_value) = f_def","
f_annotation = f_def[0]
f_value = f_def[1]
",0,"[['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_create_model.py', 'tests.test_create_model', '', 'test_repeat_base_usage'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_create_model.py', 'tests.test_create_model', '', 'test_inheritance_validators'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_create_model.py', 'tests.test_create_model', '', 'test_custom_config'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_create_model.py', 'tests.test_create_model', '', 'test_dynamic_and_static'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_create_model.py', 'tests.test_create_model', '', 'test_inheritance_validators_always'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_create_model.py', 'tests.test_create_model', '', 'test_field_wrong_tuple'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_forward_ref.py', 'tests.test_forward_ref', '', 'test_forward_ref_with_create_model'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_create_model.py', 'tests.test_create_model', '', 'test_invalid_name'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_create_model.py', 'tests.test_create_model', '', 'test_config_and_base'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_model_signature.py', 'tests.test_model_signature', '', 'test_invalid_identifiers_signature'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_create_model.py', 'tests.test_create_model', '', 'test_custom_config_inherits'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_create_model.py', 'tests.test_create_model', '', 'test_create_model'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_create_model.py', 'tests.test_create_model', '', 'test_custom_config_extras'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_create_model.py', 'tests.test_create_model', '', 'test_config_field_info_create_model'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_create_model.py', 'tests.test_create_model', '', 'test_inheritance_validators_all'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_create_model.py', 'tests.test_create_model', '', 'test_create_model_usage'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_create_model.py', 'tests.test_create_model', '', 'test_funky_name'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_create_model.py', 'tests.test_create_model', '', 'test_inheritance'], ['https://github.com/samuelcolvin/pydantic/tree/master/tests/test_create_model.py', 'tests.test_create_model', '', 'test_create_model_pickle']]"
dulwich,https://github.com/dulwich/dulwich/tree/master/dulwich/client.py,DefaultUrllib3ManagerTest,test_config_no_verify_ssl,proxy_server = user_agent = None,"
tmp_value = None
proxy_server = tmp_value
user_agent = tmp_value
",1,"[['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_client.py', 'dulwich.tests.test_client', 'DefaultUrllib3ManagerTest', 'test_config_no_proxy_custom_cls'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_client.py', 'dulwich.tests.test_client', 'DefaultUrllib3ManagerTest', 'test_no_config'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_client.py', 'dulwich.tests.test_client', 'DefaultUrllib3ManagerTest', 'test_config_proxy_custom_cls'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_client.py', 'dulwich.tests.test_client', 'DefaultUrllib3ManagerTest', 'test_environment_proxy'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_client.py', 'dulwich.tests.test_client', 'DefaultUrllib3ManagerTest', 'test_config_ssl'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_client.py', 'dulwich.tests.test_client', 'DefaultUrllib3ManagerTest', 'test_config_proxy'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_client.py', 'dulwich.tests.test_client', 'DefaultUrllib3ManagerTest', 'test_config_no_ssl'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_client.py', 'dulwich.tests.test_client', 'DefaultUrllib3ManagerTest', 'test_config_no_proxy'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_client.py', 'dulwich.tests.test_client', 'DefaultUrllib3ManagerTest', 'test_config_no_verify_ssl']]"
dulwich,https://github.com/dulwich/dulwich/tree/master/dulwich/client.py,DefaultUrllib3ManagerTest,test_config_no_verify_ssl,ca_certs = ssl_verify = None,"
tmp_value = None
ca_certs = tmp_value
ssl_verify = tmp_value
",1,"[['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_client.py', 'dulwich.tests.test_client', 'DefaultUrllib3ManagerTest', 'test_config_no_proxy_custom_cls'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_client.py', 'dulwich.tests.test_client', 'DefaultUrllib3ManagerTest', 'test_no_config'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_client.py', 'dulwich.tests.test_client', 'DefaultUrllib3ManagerTest', 'test_config_proxy_custom_cls'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_client.py', 'dulwich.tests.test_client', 'DefaultUrllib3ManagerTest', 'test_environment_proxy'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_client.py', 'dulwich.tests.test_client', 'DefaultUrllib3ManagerTest', 'test_config_ssl'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_client.py', 'dulwich.tests.test_client', 'DefaultUrllib3ManagerTest', 'test_config_proxy'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_client.py', 'dulwich.tests.test_client', 'DefaultUrllib3ManagerTest', 'test_config_no_ssl'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_client.py', 'dulwich.tests.test_client', 'DefaultUrllib3ManagerTest', 'test_config_no_proxy'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_client.py', 'dulwich.tests.test_client', 'DefaultUrllib3ManagerTest', 'test_config_no_verify_ssl']]"
dulwich,https://github.com/dulwich/dulwich/tree/master/dulwich/objects.py,FsckTests,test_git_dir,"(name, mode) = (mode, name)","
tmp0 = name
name = mode
mode = tmp0
",1,"[['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_objects.py', 'dulwich.tests.test_objects', 'TagParseTests', 'test_tree_copy_after_update'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_patch.py', 'dulwich.tests.test_patch', 'DiffTests', 'test_tree_diff_submodule'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_fastexport.py', 'dulwich.tests.test_fastexport', 'GitFastExporterTests', 'test_emit_commit'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'ShowTests', 'test_commit_with_change'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_objects.py', 'dulwich.tests.test_objects', 'CommitSerializationTests', 'test_full_tree'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'ShowTests', 'test_tag'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_patch.py', 'dulwich.tests.test_patch', 'DiffTests', 'test_tree_diff'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'ShowTests', 'test_commit_no_parent'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'CommitTreeTests', 'test_simple'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'FsckTests', 'test_git_dir']]"
dulwich,https://github.com/dulwich/dulwich/tree/master/dulwich/objectspec.py,ParseReftupleTests,test_no_right_ref,"(lh, rh) = refspec.split(b':')","
tmp_fun_0 = refspec.split(b':')
lh = tmp_fun_0[0]
rh = tmp_fun_0[1]
",1,"[['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_objectspec.py', 'dulwich.tests.test_objectspec', 'ParseReftupleTests', 'test_no_left_ref'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_objectspec.py', 'dulwich.tests.test_objectspec', 'ParseReftupleTests', 'test_full'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_objectspec.py', 'dulwich.tests.test_objectspec', 'ParseReftupleTests', 'test_head'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_objectspec.py', 'dulwich.tests.test_objectspec', 'ParseReftupleTests', 'test_default_with_string'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_objectspec.py', 'dulwich.tests.test_objectspec', 'ParseReftupleTests', 'test_no_right_ref']]"
dulwich,https://github.com/dulwich/dulwich/tree/master/dulwich/objectspec.py,ParseReftupleTests,test_no_right_ref,lh = rh = refspec,"
tmp_value = refspec
lh = tmp_value
rh = tmp_value
",1,"[['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_objectspec.py', 'dulwich.tests.test_objectspec', 'ParseReftupleTests', 'test_no_left_ref'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_objectspec.py', 'dulwich.tests.test_objectspec', 'ParseReftupleTests', 'test_full'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_objectspec.py', 'dulwich.tests.test_objectspec', 'ParseReftupleTests', 'test_head'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_objectspec.py', 'dulwich.tests.test_objectspec', 'ParseReftupleTests', 'test_default_with_string'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_objectspec.py', 'dulwich.tests.test_objectspec', 'ParseReftupleTests', 'test_no_right_ref']]"
dulwich,https://github.com/dulwich/dulwich/tree/master/dulwich/config.py,DefaultUrllib3ManagerTest,test_config_proxy,"(section, name) = self._check_section_and_name(section, name)","
tmp_fun_0 = self._check_section_and_name(section, name)
section = tmp_fun_0[0]
name = tmp_fun_0[1]
",1,"[['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_client.py', 'dulwich.tests.test_client', 'DefaultUrllib3ManagerTest', 'test_config_no_ssl'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_client.py', 'dulwich.tests.test_client', 'DefaultUrllib3ManagerTest', 'test_config_proxy_custom_cls'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_client.py', 'dulwich.tests.test_client', 'DefaultUrllib3ManagerTest', 'test_config_ssl'], ['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_client.py', 'dulwich.tests.test_client', 'DefaultUrllib3ManagerTest', 'test_config_proxy']]"
dulwich,https://github.com/dulwich/dulwich/tree/master/dulwich/mailmap.py,MailmapTests,test_lookup,"(canonical_name, canonical_email) = canonical_identity","
canonical_name = canonical_identity[0]
canonical_email = canonical_identity[1]
",1,"[['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_mailmap.py', 'dulwich.tests.test_mailmap', 'MailmapTests', 'test_lookup']]"
dulwich,https://github.com/dulwich/dulwich/tree/master/dulwich/mailmap.py,MailmapTests,test_lookup,"(from_name, from_email) = (None, None)","
from_name = None
from_email = None
",1,"[['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_mailmap.py', 'dulwich.tests.test_mailmap', 'MailmapTests', 'test_lookup']]"
dulwich,https://github.com/dulwich/dulwich/tree/master/dulwich/mailmap.py,MailmapTests,test_lookup,"(from_name, from_email) = from_identity","
from_name = from_identity[0]
from_email = from_identity[1]
",1,"[['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_mailmap.py', 'dulwich.tests.test_mailmap', 'MailmapTests', 'test_lookup']]"
dulwich,https://github.com/dulwich/dulwich/tree/master/dulwich/tests/utils.py,CommitTreeTests,test_simple,"(path, blob, mode) = entry","
path = entry[0]
blob = entry[1]
mode = entry[2]
",1,"[['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'CommitTreeTests', 'test_simple']]"
dulwich,https://github.com/dulwich/dulwich/tree/master/dulwich/tests/utils.py,CommitTreeTests,test_simple,"(path, blob) = entry","
path = entry[0]
blob = entry[1]
",1,"[['https://github.com/dulwich/dulwich/tree/master/dulwich/tests/test_porcelain.py', 'dulwich.tests.test_porcelain', 'CommitTreeTests', 'test_simple']]"
docker-py,https://github.com/docker/docker-py/tree/master/docker/utils/proxy.py,ProxyConfigTest,test_environment,env['http_proxy'] = env['HTTP_PROXY'] = self.http,"
tmp_value = self.http
env['http_proxy'] = tmp_value
env['HTTP_PROXY'] = tmp_value
",1,"[['https://github.com/docker/docker-py/tree/master/tests/unit/utils_proxy_test.py', 'tests.unit.utils_proxy_test', 'ProxyConfigTest', 'test_environment']]"
docker-py,https://github.com/docker/docker-py/tree/master/docker/utils/proxy.py,ProxyConfigTest,test_environment,env['https_proxy'] = env['HTTPS_PROXY'] = self.https,"
tmp_value = self.https
env['https_proxy'] = tmp_value
env['HTTPS_PROXY'] = tmp_value
",1,"[['https://github.com/docker/docker-py/tree/master/tests/unit/utils_proxy_test.py', 'tests.unit.utils_proxy_test', 'ProxyConfigTest', 'test_environment']]"
docker-py,https://github.com/docker/docker-py/tree/master/docker/utils/proxy.py,ProxyConfigTest,test_environment,env['ftp_proxy'] = env['FTP_PROXY'] = self.ftp,"
tmp_value = self.ftp
env['ftp_proxy'] = tmp_value
env['FTP_PROXY'] = tmp_value
",1,"[['https://github.com/docker/docker-py/tree/master/tests/unit/utils_proxy_test.py', 'tests.unit.utils_proxy_test', 'ProxyConfigTest', 'test_environment']]"
docker-py,https://github.com/docker/docker-py/tree/master/docker/utils/proxy.py,ProxyConfigTest,test_environment,env['no_proxy'] = env['NO_PROXY'] = self.no_proxy,"
tmp_value = self.no_proxy
env['no_proxy'] = tmp_value
env['NO_PROXY'] = tmp_value
",1,"[['https://github.com/docker/docker-py/tree/master/tests/unit/utils_proxy_test.py', 'tests.unit.utils_proxy_test', 'ProxyConfigTest', 'test_environment']]"
backoff,https://github.com/litl/backoff/tree/master/backoff/_wait_gen.py,,test_fibo_max_value,"(a, b) = (b, a + b)","
tmp0 = a + b
a = b
b = tmp0
",1,"[['https://github.com/litl/backoff/tree/master/tests/test_wait_gen.py', 'tests.test_wait_gen', '', 'test_fibo'], ['https://github.com/litl/backoff/tree/master/tests/test_wait_gen.py', 'tests.test_wait_gen', '', 'test_fibo_max_value']]"
finta,https://github.com/peerchemist/finta/tree/master/finta/finta.py,,test_rsi,"(up, down) = (delta.copy(), delta.copy())","
up = delta.copy()
down = delta.copy()
",1,"[['https://github.com/peerchemist/finta/tree/master/tests/test_unit.py', 'tests.test_unit', '', 'test_rsi']]"
fuck-coding-interviews,https://github.com/vinta/fuck-coding-interviews/tree/master/problems/reverse_only_alphabetical.py,,test_reverse_only_alpha,"(s_list[left], s_list[right]) = (s_list[right], s_list[left])","
tmp0 = s_list[left]
s_list[left] = s_list[right]
s_list[right] = tmp0
",1,"[['https://github.com/vinta/fuck-coding-interviews/tree/master/problems/tests/test_reverse_only_alphabetical.py', 'problems.tests.test_reverse_only_alphabetical', '', 'test_reverse_only_alpha']]"
asv,https://github.com/airspeed-velocity/asv/tree/master/asv/step_detect.py,,test_weighted,"(right, values, dists, gamma) = solve_potts_autogamma(y_filtered, w=w_filtered)","
tmp_fun_0 = solve_potts_autogamma(y_filtered, w=w_filtered)
right = tmp_fun_0[0]
values = tmp_fun_0[1]
dists = tmp_fun_0[2]
gamma = tmp_fun_0[3]
",1,"[['https://github.com/airspeed-velocity/asv/tree/master/test/test_step_detect.py', 'test.test_step_detect', '', 'test_weighted']]"
asv,https://github.com/airspeed-velocity/asv/tree/master/asv/step_detect.py,,test_weighted,"(mu, dist) = (mu_dist.mu, mu_dist.dist)","
mu = mu_dist.mu
dist = mu_dist.dist
",1,"[['https://github.com/airspeed-velocity/asv/tree/master/test/test_step_detect.py', 'test.test_step_detect', '', 'test_solve_potts_approx_bug'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_step_detect.py', 'test.test_step_detect', '', 'test_weighted']]"
asv,https://github.com/airspeed-velocity/asv/tree/master/asv/step_detect.py,,test_autocorrelated,"(mu, dist) = (mu_dist.mu, mu_dist.dist)","
mu = mu_dist.mu
dist = mu_dist.dist
",1,"[['https://github.com/airspeed-velocity/asv/tree/master/test/test_step_detect.py', 'test.test_step_detect', '', 'test_zero_variance'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_step_detect.py', 'test.test_step_detect', '', 'test_autocorrelated']]"
asv,https://github.com/airspeed-velocity/asv/tree/master/asv/step_detect.py,,test_autocorrelated,"(r, v, d) = solve_potts_approx(y, w, gamma=gamma, mu_dist=mu_dist, **kw)","
tmp_fun_0 = solve_potts_approx(y, w, gamma=gamma, mu_dist=mu_dist, **kw)
r = tmp_fun_0[0]
v = tmp_fun_0[1]
d = tmp_fun_0[2]
",1,"[['https://github.com/airspeed-velocity/asv/tree/master/test/test_step_detect.py', 'test.test_step_detect', '', 'test_zero_variance'], ['https://github.com/airspeed-velocity/asv/tree/master/test/test_step_detect.py', 'test.test_step_detect', '', 'test_autocorrelated']]"
asv,https://github.com/airspeed-velocity/asv/tree/master/asv/step_detect.py,,test_solve_potts_approx_bug,"(right, values, dists) = solve_potts(y, w, gamma, min_size=min_size, max_size=max_size, **kw)","
tmp_fun_0 = solve_potts(y, w, gamma, min_size=min_size, max_size=max_size, **kw)
right = tmp_fun_0[0]
values = tmp_fun_0[1]
dists = tmp_fun_0[2]
",1,"[['https://github.com/airspeed-velocity/asv/tree/master/test/test_step_detect.py', 'test.test_step_detect', '', 'test_solve_potts_approx_bug']]"
asv,https://github.com/airspeed-velocity/asv/tree/master/asv/step_detect.py,,test_solve_potts_approx_bug,"(mu, dist) = (mu_dist.mu, mu_dist.dist)","
mu = mu_dist.mu
dist = mu_dist.dist
",1,"[['https://github.com/airspeed-velocity/asv/tree/master/test/test_step_detect.py', 'test.test_step_detect', '', 'test_solve_potts_approx_bug']]"
asv,https://github.com/airspeed-velocity/asv/tree/master/asv/statistics.py,,test_compute_stats,"(y_50, ci_50) = quantile_ci(Y, 0.5, alpha_min=0.99)","
tmp_fun_0 = quantile_ci(Y, 0.5, alpha_min=0.99)
y_50 = tmp_fun_0[0]
ci_50 = tmp_fun_0[1]
",1,"[['https://github.com/airspeed-velocity/asv/tree/master/test/test_statistics.py', 'test.test_statistics', '', 'test_compute_stats']]"
asv,https://github.com/airspeed-velocity/asv/tree/master/asv/statistics.py,,test_compute_stats,"(a, b) = ci_50","
a = ci_50[0]
b = ci_50[1]
",1,"[['https://github.com/airspeed-velocity/asv/tree/master/test/test_statistics.py', 'test.test_statistics', '', 'test_compute_stats']]"
asv,https://github.com/airspeed-velocity/asv/tree/master/asv/statistics.py,,test_compute_stats,"(a, b) = (stats['q_25'], stats['q_75'])","
a = stats['q_25']
b = stats['q_75']
",1,"[['https://github.com/airspeed-velocity/asv/tree/master/test/test_statistics.py', 'test.test_statistics', '', 'test_compute_stats']]"
Axelrod,https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/fingerprint.py,TestTransitiveFingerprint,test_analyse_cooperation_ratio,"(opponent_index, player_history) = (row['Opponent index'], row['Actions'])","
opponent_index = row['Opponent index']
player_history = row['Actions']
",1,"[['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_fingerprint.py', 'axelrod.tests.unit.test_fingerprint', 'TestTransitiveFingerprint', 'test_analyse_cooperation_ratio']]"
Axelrod,https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/history.py,TestLimitedHistory,test_memory_depth,"(first_play, first_coplay) = (self._plays.pop(0), self._coplays.pop(0))","
first_play = self._plays.pop(0)
first_coplay = self._coplays.pop(0)
",1,"[['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_history.py', 'axelrod.tests.unit.test_history', 'TestHistory', 'test_reset'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_history.py', 'axelrod.tests.unit.test_history', 'TestHistory', 'test_str_list_repr'], ['https://github.com/Axelrod-Python/Axelrod/tree/master/axelrod/tests/unit/test_history.py', 'axelrod.tests.unit.test_history', 'TestLimitedHistory', 'test_memory_depth']]"
nimporter,https://github.com/Pebaz/nimporter/tree/master//nimporter.py,,test_invoke_compiler,"(out, err) = (process.stdout, process.stderr)","
out = process.stdout
err = process.stderr
",1,"[['https://github.com/Pebaz/nimporter/tree/master/tests/test_build.py', 'tests.test_build', '', 'test_invoke_compiler']]"
nmigen,https://github.com/m-labs/nmigen/tree/master/nmigen/hdl/dsl.py,DSLTestCase,test_FSM_basic,"(_outer_case, self._statements) = (self._statements, [])","
_outer_case = self._statements
self._statements = []
",1,"[['https://github.com/m-labs/nmigen/tree/master/tests/test_hdl_dsl.py', 'tests.test_hdl_dsl', 'DSLTestCase', 'test_If_signed_suspicious'], ['https://github.com/m-labs/nmigen/tree/master/tests/test_hdl_dsl.py', 'tests.test_hdl_dsl', 'DSLTestCase', 'test_If_If'], ['https://github.com/m-labs/nmigen/tree/master/tests/test_hdl_dsl.py', 'tests.test_hdl_dsl', 'DSLTestCase', 'test_If_nested_If'], ['https://github.com/m-labs/nmigen/tree/master/tests/test_hdl_dsl.py', 'tests.test_hdl_dsl', 'DSLTestCase', 'test_Else_wrong_nested'], ['https://github.com/m-labs/nmigen/tree/master/tests/test_hdl_dsl.py', 'tests.test_hdl_dsl', 'DSLTestCase', 'test_if_If_Elif_Else'], ['https://github.com/m-labs/nmigen/tree/master/tests/test_hdl_dsl.py', 'tests.test_hdl_dsl', 'DSLTestCase', 'test_If_inside_Switch_wrong'], ['https://github.com/m-labs/nmigen/tree/master/tests/test_hdl_dsl.py', 'tests.test_hdl_dsl', 'DSLTestCase', 'test_If_Elif'], ['https://github.com/m-labs/nmigen/tree/master/tests/test_hdl_dsl.py', 'tests.test_hdl_dsl', 'DSLTestCase', 'test_Elif_Elif_wrong_nested'], ['https://github.com/m-labs/nmigen/tree/master/tests/test_hdl_dsl.py', 'tests.test_hdl_dsl', 'DSLTestCase', 'test_If_Elif_Else'], ['https://github.com/m-labs/nmigen/tree/master/tests/test_hdl_dsl.py', 'tests.test_hdl_dsl', 'DSLTestCase', 'test_Elif_signed_suspicious'], ['https://github.com/m-labs/nmigen/tree/master/tests/test_hdl_dsl.py', 'tests.test_hdl_dsl', 'DSLTestCase', 'test_auto_pop_ctrl'], ['https://github.com/m-labs/nmigen/tree/master/tests/test_hdl_dsl.py', 'tests.test_hdl_dsl', 'DSLTestCase', 'test_Elif_wrong_nested'], ['https://github.com/m-labs/nmigen/tree/master/tests/test_hdl_dsl.py', 'tests.test_hdl_dsl', 'DSLTestCase', 'test_Else_Else_wrong_nested'], ['https://github.com/m-labs/nmigen/tree/master/tests/test_hdl_dsl.py', 'tests.test_hdl_dsl', 'DSLTestCase', 'test_If_dangling_Else'], ['https://github.com/m-labs/nmigen/tree/master/tests/test_hdl_dsl.py', 'tests.test_hdl_dsl', 'DSLTestCase', 'test_If_wide'], ['https://github.com/m-labs/nmigen/tree/master/tests/test_hdl_dsl.py', 'tests.test_hdl_dsl', 'DSLTestCase', 'test_If_inside_FSM_wrong'], ['https://github.com/m-labs/nmigen/tree/master/tests/test_hdl_dsl.py', 'tests.test_hdl_dsl', 'DSLTestCase', 'test_If'], ['https://github.com/m-labs/nmigen/tree/master/tests/test_hdl_dsl.py', 'tests.test_hdl_dsl', 'DSLTestCase', 'test_FSM_basic']]"
nmigen,https://github.com/m-labs/nmigen/tree/master/nmigen/hdl/ir.py,FragmentPortsTestCase,test_output_from_subfragment,"(fragu, fragv) = (fragv, fragu)","
tmp0 = fragu
fragu = fragv
fragv = tmp0
",1,"[['https://github.com/m-labs/nmigen/tree/master/tests/test_hdl_ir.py', 'tests.test_hdl_ir', 'FragmentPortsTestCase', 'test_output_input_sibling'], ['https://github.com/m-labs/nmigen/tree/master/tests/test_hdl_ir.py', 'tests.test_hdl_ir', 'FragmentPortsTestCase', 'test_input_only_in_subfragment'], ['https://github.com/m-labs/nmigen/tree/master/tests/test_hdl_ir.py', 'tests.test_hdl_ir', 'FragmentPortsTestCase', 'test_output_from_subfragment_2'], ['https://github.com/m-labs/nmigen/tree/master/tests/test_hdl_ir.py', 'tests.test_hdl_ir', 'FragmentPortsTestCase', 'test_input_output_sibling'], ['https://github.com/m-labs/nmigen/tree/master/tests/test_hdl_ir.py', 'tests.test_hdl_ir', 'FragmentPortsTestCase', 'test_input_in_subfragment'], ['https://github.com/m-labs/nmigen/tree/master/tests/test_hdl_ir.py', 'tests.test_hdl_ir', 'FragmentPortsTestCase', 'test_inout'], ['https://github.com/m-labs/nmigen/tree/master/tests/test_hdl_ir.py', 'tests.test_hdl_ir', 'FragmentPortsTestCase', 'test_in_out_same_signal'], ['https://github.com/m-labs/nmigen/tree/master/tests/test_hdl_ir.py', 'tests.test_hdl_ir', 'FragmentPortsTestCase', 'test_output_from_subfragment']]"
nibabel,https://github.com/nipy/nibabel/tree/master/nibabel/affines.py,,test_against_spm_resample,"(nin, nout) = matrix.shape","
nin = matrix.shape[0]
nout = matrix.shape[1]
",1,"[['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_processing.py', 'nibabel.tests.test_processing', '', 'test_resample_from_to'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_orientations.py', 'nibabel.tests.test_orientations', '', 'test_io_orientation'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_processing.py', 'nibabel.tests.test_processing', '', 'test_against_spm_resample']]"
nibabel,https://github.com/nipy/nibabel/tree/master/nibabel/affines.py,,test_append_diag,"(old_n_out, old_n_in) = (aff.shape[0] - 1, aff.shape[1] - 1)","
old_n_out = aff.shape[0] - 1
old_n_in = aff.shape[1] - 1
",1,"[['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_affines.py', 'nibabel.tests.test_affines', '', 'test_append_diag']]"
nibabel,https://github.com/nipy/nibabel/tree/master/nibabel/orientations.py,,test_io_orientation,"(q, p) = (affine.shape[0] - 1, affine.shape[1] - 1)","
q = affine.shape[0] - 1
p = affine.shape[1] - 1
",1,"[['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_orientations.py', 'nibabel.tests.test_orientations', '', 'test_io_orientation']]"
nibabel,https://github.com/nipy/nibabel/tree/master/nibabel/orientations.py,,test_io_orientation,"(P, S, Qs) = npl.svd(RS, full_matrices=False)","
tmp_fun_0 = npl.svd(RS, full_matrices=False)
P = tmp_fun_0[0]
S = tmp_fun_0[1]
Qs = tmp_fun_0[2]
",1,"[['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_orientations.py', 'nibabel.tests.test_orientations', '', 'test_io_orientation']]"
nibabel,https://github.com/nipy/nibabel/tree/master/nibabel/casting.py,,test_a2f_upscale,"(nmant, nexp) = (info.nmant, info.nexp)","
nmant = info.nmant
nexp = info.nexp
",1,"[['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_arraywriters.py', 'nibabel.tests.test_arraywriters', '', 'test_nan2zero_scaling'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_floating.py', 'nibabel.tests.test_floating', '', 'test_int_to_float'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_nifti1.py', 'nibabel.tests.test_nifti1', 'TestNifti1PairHeader', 'test_big_scaling'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_best_write_scale_ftype'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_nifti1.py', 'nibabel.tests.test_nifti1', 'TestNifti1General', 'test_float_int_min_max'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_round_trip.py', 'nibabel.tests.test_round_trip', '', 'test_big_bad_ulp'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_apply_scaling'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_arraywriters.py', 'nibabel.tests.test_arraywriters', '', 'test_to_float'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_big_scalers'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_arraywriters.py', 'nibabel.tests.test_arraywriters', '', 'test_io_scaling'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_floating.py', 'nibabel.tests.test_floating', '', 'test_type_info'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_floating.py', 'nibabel.tests.test_floating', '', 'test_as_int'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_floating.py', 'nibabel.tests.test_floating', '', 'test_check_nmant_nexp'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_floating.py', 'nibabel.tests.test_floating', '', 'test_nmant'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_arraywriters.py', 'nibabel.tests.test_arraywriters', '', 'test_float_int_min_max'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_floating.py', 'nibabel.tests.test_floating', '', 'test_floor_exact'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_upscale']]"
nibabel,https://github.com/nipy/nibabel/tree/master/nibabel/volumeutils.py,,test_a2f_upscale,"(slope, inter) = [np.atleast_1d(v) for v in (divslope, intercept)]","
tmp_fun_0 = [np.atleast_1d(v) for v in (divslope, intercept)]
slope = tmp_fun_0[0]
inter = tmp_fun_0[1]
",1,"[['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_zeros'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_scaling.py', 'nibabel.tests.test_scaling', '', 'test_a2f_nan2zero'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_offset'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_array_to_file'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_dtype_default'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_scaled_unscaled'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_big_scalers'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_bad_scaling'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_upscale']]"
nibabel,https://github.com/nipy/nibabel/tree/master/nibabel/volumeutils.py,,test_a2f_upscale,"(slope, inter) = [v.astype(_matching_float(v.dtype)) for v in (slope, inter)]","
tmp_fun_0 = [v.astype(_matching_float(v.dtype)) for v in (slope, inter)]
slope = tmp_fun_0[0]
inter = tmp_fun_0[1]
",1,"[['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_zeros'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_scaling.py', 'nibabel.tests.test_scaling', '', 'test_a2f_nan2zero'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_offset'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_array_to_file'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_dtype_default'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_scaled_unscaled'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_big_scalers'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_bad_scaling'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_upscale']]"
nibabel,https://github.com/nipy/nibabel/tree/master/nibabel/volumeutils.py,,test_a2f_upscale,"(slope, inter) = [v.astype(w_type) for v in (slope, inter)]","
tmp_fun_0 = [v.astype(w_type) for v in (slope, inter)]
slope = tmp_fun_0[0]
inter = tmp_fun_0[1]
",1,"[['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_zeros'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_scaling.py', 'nibabel.tests.test_scaling', '', 'test_a2f_nan2zero'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_offset'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_array_to_file'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_dtype_default'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_scaled_unscaled'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_big_scalers'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_bad_scaling'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_upscale']]"
nibabel,https://github.com/nipy/nibabel/tree/master/nibabel/volumeutils.py,,test_a2f_upscale,"(post_mn, post_mx, nan_fill) = np.rint(specials)","
tmp_fun_0 = np.rint(specials)
post_mn = tmp_fun_0[0]
post_mx = tmp_fun_0[1]
nan_fill = tmp_fun_0[2]
",1,"[['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_zeros'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_scaling.py', 'nibabel.tests.test_scaling', '', 'test_a2f_nan2zero'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_offset'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_array_to_file'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_dtype_default'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_scaled_unscaled'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_big_scalers'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_bad_scaling'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_upscale']]"
nibabel,https://github.com/nipy/nibabel/tree/master/nibabel/volumeutils.py,,test_a2f_upscale,"(both_mn, both_mx) = shared_range(w_type, out_dtype)","
tmp_fun_0 = shared_range(w_type, out_dtype)
both_mn = tmp_fun_0[0]
both_mx = tmp_fun_0[1]
",1,"[['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_zeros'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_scaling.py', 'nibabel.tests.test_scaling', '', 'test_a2f_nan2zero'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_offset'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_array_to_file'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_dtype_default'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_scaled_unscaled'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_big_scalers'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_bad_scaling'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_upscale']]"
nibabel,https://github.com/nipy/nibabel/tree/master/nibabel/volumeutils.py,,test_a2f_upscale,"(post_mn, post_mx) = (post_mx, post_mn)","
tmp0 = post_mn
post_mn = post_mx
post_mx = tmp0
",1,"[['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_zeros'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_scaling.py', 'nibabel.tests.test_scaling', '', 'test_a2f_nan2zero'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_offset'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_array_to_file'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_dtype_default'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_scaled_unscaled'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_big_scalers'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_bad_scaling'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_upscale']]"
nibabel,https://github.com/nipy/nibabel/tree/master/nibabel/volumeutils.py,,test_a2f_upscale,"(mn, mx) = _dt_min_max(in_dtype, mn, mx)","
tmp_fun_0 = _dt_min_max(in_dtype, mn, mx)
mn = tmp_fun_0[0]
mx = tmp_fun_0[1]
",1,"[['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_zeros'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_scaling.py', 'nibabel.tests.test_scaling', '', 'test_a2f_nan2zero'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_offset'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_array_to_file'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_dtype_default'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_scaled_unscaled'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_big_scalers'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_bad_scaling'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_upscale']]"
nibabel,https://github.com/nipy/nibabel/tree/master/nibabel/volumeutils.py,,test_a2f_upscale,"(mn_out, mx_out) = _dt_min_max(out_dtype)","
tmp_fun_0 = _dt_min_max(out_dtype)
mn_out = tmp_fun_0[0]
mx_out = tmp_fun_0[1]
",1,"[['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_zeros'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_scaling.py', 'nibabel.tests.test_scaling', '', 'test_a2f_nan2zero'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_offset'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_array_to_file'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_dtype_default'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_scaled_unscaled'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_big_scalers'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_bad_scaling'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_upscale']]"
nibabel,https://github.com/nipy/nibabel/tree/master/nibabel/volumeutils.py,,test_a2f_scaled_unscaled,"(dt_mn, dt_mx) = (-np.inf, np.inf)","
dt_mn = -np.inf
dt_mx = np.inf
",1,"[['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_arraywriters.py', 'nibabel.tests.test_arraywriters', '', 'test_no_scaling'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_scaled_unscaled']]"
nibabel,https://github.com/nipy/nibabel/tree/master/nibabel/volumeutils.py,,test_a2f_scaled_unscaled,"(dt_mn, dt_mx) = (info.min, info.max)","
dt_mn = info.min
dt_mx = info.max
",1,"[['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_arraywriters.py', 'nibabel.tests.test_arraywriters', '', 'test_no_scaling'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_scaled_unscaled']]"
nibabel,https://github.com/nipy/nibabel/tree/master/nibabel/volumeutils.py,,test_apply_scaling,"(arr, slope, inter) = [np.atleast_1d(v) for v in (arr, slope, inter)]","
tmp_fun_0 = [np.atleast_1d(v) for v in (arr, slope, inter)]
arr = tmp_fun_0[0]
slope = tmp_fun_0[1]
inter = tmp_fun_0[2]
",1,"[['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_a2f_upscale'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_arraywriters.py', 'nibabel.tests.test_arraywriters', '', 'test_io_scaling'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_volumeutils.py', 'nibabel.tests.test_volumeutils', '', 'test_apply_scaling']]"
nibabel,https://github.com/nipy/nibabel/tree/master/nibabel/filename_parser.py,,test_splitext_addext,"(root, ext) = (filename, '')","
root = filename
ext = ''
",1,"[['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_filename_parser.py', 'nibabel.tests.test_filename_parser', '', 'test_splitext_addext']]"
nibabel,https://github.com/nipy/nibabel/tree/master/nibabel/filename_parser.py,,test_splitext_addext,"(root, ext) = (filename[:extpos], filename[extpos:])","
root = filename[:extpos]
ext = filename[extpos:]
",1,"[['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_filename_parser.py', 'nibabel.tests.test_filename_parser', '', 'test_splitext_addext']]"
nibabel,https://github.com/nipy/nibabel/tree/master/nibabel/filename_parser.py,,test_splitext_addext,"(filename, addext) = (filename[:extpos], filename[extpos:])","
tmp0 = filename[extpos:]
filename = filename[:extpos]
addext = tmp0
",1,"[['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_filename_parser.py', 'nibabel.tests.test_filename_parser', '', 'test_splitext_addext']]"
nibabel,https://github.com/nipy/nibabel/tree/master/nibabel/processing.py,,test_against_spm_resample,"(rzs, trans) = to_matvec(to_vox2from_vox)","
tmp_fun_0 = to_matvec(to_vox2from_vox)
rzs = tmp_fun_0[0]
trans = tmp_fun_0[1]
",1,"[['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_processing.py', 'nibabel.tests.test_processing', '', 'test_spatial_axes_check'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_processing.py', 'nibabel.tests.test_processing', '', 'test_resample_from_to'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_processing.py', 'nibabel.tests.test_processing', '', 'test_against_spm_resample']]"
nibabel,https://github.com/nipy/nibabel/tree/master/nibabel/processing.py,,test_against_spm_resample,"(to_shape, to_affine) = (to_vox_map.shape, to_vox_map.affine)","
to_shape = to_vox_map.shape
to_affine = to_vox_map.affine
",1,"[['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_processing.py', 'nibabel.tests.test_processing', '', 'test_spatial_axes_check'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_processing.py', 'nibabel.tests.test_processing', '', 'test_resample_from_to'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_processing.py', 'nibabel.tests.test_processing', '', 'test_against_spm_resample']]"
nibabel,https://github.com/nipy/nibabel/tree/master/nibabel/processing.py,,test_against_spm_resample,"(to_shape, to_affine) = to_vox_map","
to_shape = to_vox_map[0]
to_affine = to_vox_map[1]
",1,"[['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_processing.py', 'nibabel.tests.test_processing', '', 'test_spatial_axes_check'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_processing.py', 'nibabel.tests.test_processing', '', 'test_resample_from_to'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_processing.py', 'nibabel.tests.test_processing', '', 'test_against_spm_resample']]"
nibabel,https://github.com/nipy/nibabel/tree/master/nibabel/viewers.py,,test_viewer,"(xax, yax) = [[1, 2], [0, 2], [0, 1]][ii]","
xax = [[1, 2], [0, 2], [0, 1]][ii][0]
yax = [[1, 2], [0, 2], [0, 1]][ii][1]
",1,"[['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_viewers.py', 'nibabel.tests.test_viewers', '', 'test_viewer']]"
nibabel,https://github.com/nipy/nibabel/tree/master/nibabel/viewers.py,,test_viewer,"(x, y) = (event.xdata, event.ydata)","
x = event.xdata
y = event.ydata
",1,"[['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_viewers.py', 'nibabel.tests.test_viewers', '', 'test_viewer']]"
nibabel,https://github.com/nipy/nibabel/tree/master/nibabel/fileslice.py,,test_fill_slicer,"(start, stop, step) = (slicer.start, slicer.stop, slicer.step)","
start = slicer.start
stop = slicer.stop
step = slicer.step
",1,"[['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_fileslice.py', 'nibabel.tests.test_fileslice', '', 'test_fill_slicer']]"
nibabel,https://github.com/nipy/nibabel/tree/master/nibabel/fileslice.py,,test__positive_slice,"(start, stop, step) = (slicer.start, slicer.stop, slicer.step)","
start = slicer.start
stop = slicer.stop
step = slicer.step
",1,"[['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_fileslice.py', 'nibabel.tests.test_fileslice', '', 'test__positive_slice']]"
nibabel,https://github.com/nipy/nibabel/tree/master/nibabel/fileslice.py,,test_threshold_heuristic,"(start, stop) = (slicer.start, slicer.stop)","
start = slicer.start
stop = slicer.stop
",1,"[['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_fileslice.py', 'nibabel.tests.test_fileslice', '', 'test_threshold_heuristic']]"
nibabel,https://github.com/nipy/nibabel/tree/master/nibabel/loadsave.py,,test_against_spm_resample,"(matches, msg) = _signature_matches_extension(filename, sniff)","
tmp_fun_0 = _signature_matches_extension(filename, sniff)
matches = tmp_fun_0[0]
msg = tmp_fun_0[1]
",1,"[['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_processing.py', 'nibabel.tests.test_processing', '', 'test_spatial_axes_check'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_processing.py', 'nibabel.tests.test_processing', '', 'test_against_spm_resample']]"
nibabel,https://github.com/nipy/nibabel/tree/master/nibabel/loadsave.py,,test_against_spm_resample,"(is_valid, sniff) = image_klass.path_maybe_image(filename, sniff)","
tmp_fun_0 = image_klass.path_maybe_image(filename, sniff)
is_valid = tmp_fun_0[0]
sniff = tmp_fun_0[1]
",1,"[['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_processing.py', 'nibabel.tests.test_processing', '', 'test_spatial_axes_check'], ['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_processing.py', 'nibabel.tests.test_processing', '', 'test_against_spm_resample']]"
nibabel,https://github.com/nipy/nibabel/tree/master/nibabel/spaces.py,,test_vox2out_vox,"(in_shape, in_affine) = (mapped_voxels.shape, mapped_voxels.affine)","
in_shape = mapped_voxels.shape
in_affine = mapped_voxels.affine
",1,"[['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_spaces.py', 'nibabel.tests.test_spaces', '', 'test_vox2out_vox']]"
nibabel,https://github.com/nipy/nibabel/tree/master/nibabel/spaces.py,,test_vox2out_vox,"(in_shape, in_affine) = mapped_voxels","
in_shape = mapped_voxels[0]
in_affine = mapped_voxels[1]
",0,"[['https://github.com/nipy/nibabel/tree/master/nibabel/tests/test_spaces.py', 'nibabel.tests.test_spaces', '', 'test_vox2out_vox']]"
nibabel,https://github.com/nipy/nibabel/tree/master/nibabel/nicom/utils.py,,test_find_private_section_real,"(grpno, elno) = (element.tag.group, element.tag.elem)","
grpno = element.tag.group
elno = element.tag.elem
",1,"[['https://github.com/nipy/nibabel/tree/master/nibabel/nicom/tests/test_utils.py', 'nibabel.nicom.tests.test_utils', '', 'test_find_private_section_real']]"
nibabel,https://github.com/nipy/nibabel/tree/master/nibabel/cmdline/utils.py,,test_table2string,"(nspacesl, nspacesr) = (0, nspacesl + nspacesr)","
tmp0 = nspacesl + nspacesr
nspacesl = 0
nspacesr = tmp0
",1,"[['https://github.com/nipy/nibabel/tree/master/nibabel/cmdline/tests/test_utils.py', 'nibabel.cmdline.tests.test_utils', '', 'test_table2string']]"
nibabel,https://github.com/nipy/nibabel/tree/master/nibabel/cmdline/utils.py,,test_table2string,"(nspacesl, nspacesr) = (nspacesl + nspacesr, 0)","
nspacesl = nspacesl + nspacesr
nspacesr = 0
",1,"[['https://github.com/nipy/nibabel/tree/master/nibabel/cmdline/tests/test_utils.py', 'nibabel.cmdline.tests.test_utils', '', 'test_table2string']]"
nibabel,https://github.com/nipy/nibabel/tree/master/nibabel/externals/netcdf.py,,test_ticket_1720,"(typecode, size) = (type.char, type.itemsize)","
typecode = type.char
size = type.itemsize
",1,"[['https://github.com/nipy/nibabel/tree/master/nibabel/externals/tests/test_netcdf.py', 'nibabel.externals.tests.test_netcdf', '', 'test_write_invalid_dtype'], ['https://github.com/nipy/nibabel/tree/master/nibabel/externals/tests/test_netcdf.py', 'nibabel.externals.tests.test_netcdf', '', 'test_flush_rewind'], ['https://github.com/nipy/nibabel/tree/master/nibabel/externals/tests/test_netcdf.py', 'nibabel.externals.tests.test_netcdf', '', 'test_dtype_specifiers'], ['https://github.com/nipy/nibabel/tree/master/nibabel/externals/tests/test_netcdf.py', 'nibabel.externals.tests.test_netcdf', '', 'test_ticket_1720']]"
cleanlab,https://github.com/cleanlab/cleanlab/tree/master/cleanlab/polyplex.py,,test_polyplex,"(x0, y0) = point1","
x0 = point1[0]
y0 = point1[1]
",1,"[['https://github.com/cleanlab/cleanlab/tree/master/tests/test_polyplex.py', 'tests.test_polyplex', '', 'test_polyplex']]"
cleanlab,https://github.com/cleanlab/cleanlab/tree/master/cleanlab/polyplex.py,,test_polyplex,"(x1, y1) = point2","
x1 = point2[0]
y1 = point2[1]
",1,"[['https://github.com/cleanlab/cleanlab/tree/master/tests/test_polyplex.py', 'tests.test_polyplex', '', 'test_polyplex']]"
cleanlab,https://github.com/cleanlab/cleanlab/tree/master/cleanlab/polyplex.py,,test_polyplex,"(joint_trace_min, total) = ([1], 1)","
joint_trace_min = [1]
total = 1
",1,"[['https://github.com/cleanlab/cleanlab/tree/master/tests/test_polyplex.py', 'tests.test_polyplex', '', 'test_polyplex']]"
cleanlab,https://github.com/cleanlab/cleanlab/tree/master/cleanlab/polyplex.py,,test_polyplex,"(_, y_mins, y_maxs) = joint_bounds(py)","
tmp_fun_0 = joint_bounds(py)
_ = tmp_fun_0[0]
y_mins = tmp_fun_0[1]
y_maxs = tmp_fun_0[2]
",1,"[['https://github.com/cleanlab/cleanlab/tree/master/tests/test_polyplex.py', 'tests.test_polyplex', '', 'test_polyplex']]"
luminaire,https://github.com/zillow/luminaire/tree/master/luminaire/exploration/data_exploration.py,TestDataExploration,test_data_change_detection,"(l_x, r_x) = (np.arange(l_window_length), np.arange(r_window_length))","
l_x = np.arange(l_window_length)
r_x = np.arange(r_window_length)
",1,"[['https://github.com/zillow/luminaire/tree/master/luminaire/tests/test_exploration.py', 'luminaire.tests.test_exploration', 'TestDataExploration', 'test_data_change_detection']]"
luminaire,https://github.com/zillow/luminaire/tree/master/luminaire/exploration/data_exploration.py,TestDataExploration,test_data_change_detection,"(l_slope, l_intercept, l_r_value, l_p_value, l_std_err) = stats.linregress(l_x, l_window)","
tmp_fun_0 = stats.linregress(l_x, l_window)
l_slope = tmp_fun_0[0]
l_intercept = tmp_fun_0[1]
l_r_value = tmp_fun_0[2]
l_p_value = tmp_fun_0[3]
l_std_err = tmp_fun_0[4]
",1,"[['https://github.com/zillow/luminaire/tree/master/luminaire/tests/test_exploration.py', 'luminaire.tests.test_exploration', 'TestDataExploration', 'test_data_change_detection']]"
luminaire,https://github.com/zillow/luminaire/tree/master/luminaire/exploration/data_exploration.py,TestDataExploration,test_data_change_detection,"(r_slope, r_intercept, r_r_value, r_p_value, r_std_err) = stats.linregress(r_x, r_window)","
tmp_fun_0 = stats.linregress(r_x, r_window)
r_slope = tmp_fun_0[0]
r_intercept = tmp_fun_0[1]
r_r_value = tmp_fun_0[2]
r_p_value = tmp_fun_0[3]
r_std_err = tmp_fun_0[4]
",1,"[['https://github.com/zillow/luminaire/tree/master/luminaire/tests/test_exploration.py', 'luminaire.tests.test_exploration', 'TestDataExploration', 'test_data_change_detection']]"
errbot,https://github.com/errbotio/errbot/tree/master/errbot/plugin_manager.py,,test_errbot_version_check,"(name, min_version, max_version) = (plugin_info.name, plugin_info.errbot_minversion, plugin_info.errbot_maxversion)","
name = plugin_info.name
min_version = plugin_info.errbot_minversion
max_version = plugin_info.errbot_maxversion
",1,"[['https://github.com/errbotio/errbot/tree/master/tests/plugin_management_test.py', 'tests.plugin_management_test', '', 'test_errbot_version_check']]"
meta-dataset,https://github.com/google-research/meta-dataset/tree/master/meta_dataset/data/imagenet_specification.py,SplitCreationTest,test_toy_root_proposer,"(valid_candidates, test_candidates) = ([], [])","
valid_candidates = []
test_candidates = []
",1,"[['https://github.com/google-research/meta-dataset/tree/master/meta_dataset/data/imagenet_specification_test.py', 'meta_dataset.data.imagenet_specification_test', 'SplitCreationTest', 'test_toy_root_proposer']]"
meta-dataset,https://github.com/google-research/meta-dataset/tree/master/meta_dataset/data/imagenet_specification.py,SplitCreationTest,test_toy_root_proposer,"(synset, leaves) = synset_and_leaves","
synset = synset_and_leaves[0]
leaves = synset_and_leaves[1]
",1,"[['https://github.com/google-research/meta-dataset/tree/master/meta_dataset/data/imagenet_specification_test.py', 'meta_dataset.data.imagenet_specification_test', 'SplitCreationTest', 'test_toy_root_proposer']]"
mechanize,https://github.com/python-mechanize/mechanize/tree/master/mechanize/_http.py,HandlerTests,test_refresh,"(code, msg, hdrs) = (response.code, response.msg, response.info())","
code = response.code
msg = response.msg
hdrs = response.info()
",1,"[['https://github.com/python-mechanize/mechanize/tree/master/test/test_urllib2.py', 'test.test_urllib2', 'HandlerTests', 'test_cookies'], ['https://github.com/python-mechanize/mechanize/tree/master/test/test_urllib2.py', 'test.test_urllib2', 'HandlerTests', 'test_errors'], ['https://github.com/python-mechanize/mechanize/tree/master/test/test_urllib2.py', 'test.test_urllib2', 'HandlerTests', 'test_http_equiv'], ['https://github.com/python-mechanize/mechanize/tree/master/test/test_urllib2.py', 'test.test_urllib2', 'HandlerTests', 'test_refresh_bad_uri'], ['https://github.com/python-mechanize/mechanize/tree/master/test/test_urllib2.py', 'test.test_urllib2', 'HandlerTests', 'test_referer'], ['https://github.com/python-mechanize/mechanize/tree/master/test/test_urllib2.py', 'test.test_urllib2', 'HandlerTests', 'test_refresh']]"
mechanize,https://github.com/python-mechanize/mechanize/tree/master/mechanize/_http.py,HandlerTests,test_refresh,"(pause, newurl) = parse_refresh_header(refresh)","
tmp_fun_0 = parse_refresh_header(refresh)
pause = tmp_fun_0[0]
newurl = tmp_fun_0[1]
",1,"[['https://github.com/python-mechanize/mechanize/tree/master/test/test_urllib2.py', 'test.test_urllib2', 'HandlerTests', 'test_cookies'], ['https://github.com/python-mechanize/mechanize/tree/master/test/test_urllib2.py', 'test.test_urllib2', 'HandlerTests', 'test_errors'], ['https://github.com/python-mechanize/mechanize/tree/master/test/test_urllib2.py', 'test.test_urllib2', 'HandlerTests', 'test_http_equiv'], ['https://github.com/python-mechanize/mechanize/tree/master/test/test_urllib2.py', 'test.test_urllib2', 'HandlerTests', 'test_refresh_bad_uri'], ['https://github.com/python-mechanize/mechanize/tree/master/test/test_urllib2.py', 'test.test_urllib2', 'HandlerTests', 'test_referer'], ['https://github.com/python-mechanize/mechanize/tree/master/test/test_urllib2.py', 'test.test_urllib2', 'HandlerTests', 'test_refresh']]"
mechanize,https://github.com/python-mechanize/mechanize/tree/master/mechanize/_html.py,MiscTests,test_link_parsing,self._current_forms = self._current_links = self._current_title = lazy,"
tmp_value = lazy
self._current_forms = tmp_value
self._current_links = tmp_value
self._current_title = tmp_value
",1,"[['https://github.com/python-mechanize/mechanize/tree/master/test/test_html.py', 'test.test_html', 'MiscTests', 'test_title_parsing'], ['https://github.com/python-mechanize/mechanize/tree/master/test/test_html.py', 'test.test_html', 'MiscTests', 'test_link_parsing']]"
mechanize,https://github.com/python-mechanize/mechanize/tree/master/mechanize/_html.py,MiscTests,test_link_parsing,self._current_global_form = self._root = lazy,"
tmp_value = lazy
self._current_global_form = tmp_value
self._root = tmp_value
",1,"[['https://github.com/python-mechanize/mechanize/tree/master/test/test_html.py', 'test.test_html', 'MiscTests', 'test_title_parsing'], ['https://github.com/python-mechanize/mechanize/tree/master/test/test_html.py', 'test.test_html', 'MiscTests', 'test_link_parsing']]"
mechanize,https://github.com/python-mechanize/mechanize/tree/master/mechanize/_urllib2_fork.py,TrivialTests,test_parse_http_list,escape = quote = False,"
tmp_value = False
escape = tmp_value
quote = tmp_value
",1,"[['https://github.com/python-mechanize/mechanize/tree/master/test/test_urllib2.py', 'test.test_urllib2', 'TrivialTests', 'test_parse_http_list']]"
mechanize,https://github.com/python-mechanize/mechanize/tree/master/mechanize/_headersutil.py,HeaderTests,test_parse_ns_headers_version,"(k, v) = (param, None)","
k = param
v = None
",1,"[['https://github.com/python-mechanize/mechanize/tree/master/test/test_headers.py', 'test.test_headers', 'HeaderTests', 'test_parse_ns_headers_expires'], ['https://github.com/python-mechanize/mechanize/tree/master/test/test_headers.py', 'test.test_headers', 'HeaderTests', 'test_parse_ns_headers_special_names'], ['https://github.com/python-mechanize/mechanize/tree/master/test/test_cookies.py', 'test.test_cookies', 'CookieTests', 'test_parse_ns_headers'], ['https://github.com/python-mechanize/mechanize/tree/master/test/test_headers.py', 'test.test_headers', 'HeaderTests', 'test_parse_ns_headers_version']]"
mechanize,https://github.com/python-mechanize/mechanize/tree/master/mechanize/_headersutil.py,HeaderTests,test_parse_ns_headers_version,"(k, v) = re.split('\\s*=\\s*', param, 1)","
tmp_fun_0 = re.split('\\s*=\\s*', param, 1)
k = tmp_fun_0[0]
v = tmp_fun_0[1]
",1,"[['https://github.com/python-mechanize/mechanize/tree/master/test/test_headers.py', 'test.test_headers', 'HeaderTests', 'test_parse_ns_headers_expires'], ['https://github.com/python-mechanize/mechanize/tree/master/test/test_headers.py', 'test.test_headers', 'HeaderTests', 'test_parse_ns_headers_special_names'], ['https://github.com/python-mechanize/mechanize/tree/master/test/test_cookies.py', 'test.test_cookies', 'CookieTests', 'test_parse_ns_headers'], ['https://github.com/python-mechanize/mechanize/tree/master/test/test_headers.py', 'test.test_headers', 'HeaderTests', 'test_parse_ns_headers_version']]"
DataProfiler,https://github.com/capitalone/DataProfiler/tree/master/dataprofiler/profilers/utils.py,TestShuffleInChunks,test_uneven_chunk_sample,"(indices[j], indices[k]) = (indices[k], indices[j])","
tmp0 = indices[j]
indices[j] = indices[k]
indices[k] = tmp0
",1,"[['https://github.com/capitalone/DataProfiler/tree/master/dataprofiler/tests/profilers/test_utils.py', 'dataprofiler.tests.profilers.test_utils', 'TestShuffleInChunks', 'test_full_sample'], ['https://github.com/capitalone/DataProfiler/tree/master/dataprofiler/tests/profilers/test_utils.py', 'dataprofiler.tests.profilers.test_utils', 'TestShuffleInChunks', 'test_even_chunk_sample'], ['https://github.com/capitalone/DataProfiler/tree/master/dataprofiler/tests/profilers/test_utils.py', 'dataprofiler.tests.profilers.test_utils', 'TestShuffleInChunks', 'test_uneven_chunk_sample']]"
DataProfiler,https://github.com/capitalone/DataProfiler/tree/master/dataprofiler/profilers/profile_builder.py,TestStructuredColProfilerClass,test_clean_data_and_get_base_stats,min_id = max_id = None,"
tmp_value = None
min_id = tmp_value
max_id = tmp_value
",1,"[['https://github.com/capitalone/DataProfiler/tree/master/dataprofiler/tests/profilers/test_profile_builder.py', 'dataprofiler.tests.profilers.test_profile_builder', 'TestStructuredColProfilerClass', 'test_clean_data_and_get_base_stats']]"
DataProfiler,https://github.com/capitalone/DataProfiler/tree/master/dataprofiler/data_readers/data_utils.py,TestDataReadingWriting,test_nth_loc_detection,idx = id_count = -1,"
tmp_value = -1
idx = tmp_value
id_count = tmp_value
",1,"[['https://github.com/capitalone/DataProfiler/tree/master/dataprofiler/tests/data_readers/test_data_utils.py', 'dataprofiler.tests.data_readers.test_data_utils', 'TestDataReadingWriting', 'test_nth_loc_detection']]"
filterpy,https://github.com/rlabbe/filterpy/tree/master/filterpy/common/kinematic.py,,test_kinematic_filter,"(ix, iy) = (i // dim_x * dim, i % dim_x * dim)","
ix = i // dim_x * dim
iy = i % dim_x * dim
",1,"[['https://github.com/rlabbe/filterpy/tree/master/filterpy/common/tests/test_discretization.py', 'filterpy.common.tests.test_discretization', '', 'test_kinematic'], ['https://github.com/rlabbe/filterpy/tree/master/filterpy/common/tests/test_helpers.py', 'filterpy.common.tests.test_helpers', '', 'test_saver_kf'], ['https://github.com/rlabbe/filterpy/tree/master/filterpy/common/tests/test_helpers.py', 'filterpy.common.tests.test_helpers', '', 'test_kinematic_filter']]"
pyte,https://github.com/selectel/pyte/tree/master/pyte/screens.py,,test_restore_cursor_out_of_bounds,"(self.lines, self.columns) = (lines, columns)","
self.lines = lines
self.columns = columns
",1,"[['https://github.com/selectel/pyte/tree/master/tests/test_screen.py', 'tests.test_screen', '', 'test_resize_same'], ['https://github.com/selectel/pyte/tree/master/tests/test_diff.py', 'tests.test_diff', '', 'test_mark_whole_screen'], ['https://github.com/selectel/pyte/tree/master/tests/test_screen.py', 'tests.test_screen', '', 'test_resize'], ['https://github.com/selectel/pyte/tree/master/tests/test_screen.py', 'tests.test_screen', '', 'test_restore_cursor_out_of_bounds']]"
python-string-similarity,https://github.com/luozhouyang/python-string-similarity/tree/master/strsimpy/longest_common_subsequence.py,LongestCommonSubsequenceTest,test_longest_common_subsequence,"(s0_len, s1_len) = (len(s0), len(s1))","
s0_len = len(s0)
s1_len = len(s1)
",1,"[['https://github.com/luozhouyang/python-string-similarity/tree/master/strsimpy/longest_common_subsequence_test.py', 'strsimpy.longest_common_subsequence_test', 'LongestCommonSubsequenceTest', 'test_longest_common_subsequence']]"
python-string-similarity,https://github.com/luozhouyang/python-string-similarity/tree/master/strsimpy/longest_common_subsequence.py,LongestCommonSubsequenceTest,test_longest_common_subsequence,"(x, y) = (s0[:], s1[:])","
x = s0[:]
y = s1[:]
",1,"[['https://github.com/luozhouyang/python-string-similarity/tree/master/strsimpy/longest_common_subsequence_test.py', 'strsimpy.longest_common_subsequence_test', 'LongestCommonSubsequenceTest', 'test_longest_common_subsequence']]"
python-string-similarity,https://github.com/luozhouyang/python-string-similarity/tree/master/strsimpy/sorensen_dice.py,TestSorensenDice,test_sorensen_dice,"(profile0, profile1) = (self.get_profile(s0), self.get_profile(s1))","
profile0 = self.get_profile(s0)
profile1 = self.get_profile(s1)
",1,"[['https://github.com/luozhouyang/python-string-similarity/tree/master/strsimpy/sorensen_dice_test.py', 'strsimpy.sorensen_dice_test', 'TestSorensenDice', 'test_sorensen_dice']]"
python-string-similarity,https://github.com/luozhouyang/python-string-similarity/tree/master/strsimpy/weighted_levenshtein.py,TestWeightedLevenshtein,test_weighted_levenshtein,"(v0, v1) = ([0.0] * (len(s1) + 1), [0.0] * (len(s1) + 1))","
v0 = [0.0] * (len(s1) + 1)
v1 = [0.0] * (len(s1) + 1)
",1,"[['https://github.com/luozhouyang/python-string-similarity/tree/master/strsimpy/weighted_levenshtein_test.py', 'strsimpy.weighted_levenshtein_test', 'TestWeightedLevenshtein', 'test_weighted_levenshtein']]"
python-string-similarity,https://github.com/luozhouyang/python-string-similarity/tree/master/strsimpy/weighted_levenshtein.py,TestWeightedLevenshtein,test_weighted_levenshtein,"(v0, v1) = (v1, v0)","
tmp0 = v0
v0 = v1
v1 = tmp0
",1,"[['https://github.com/luozhouyang/python-string-similarity/tree/master/strsimpy/weighted_levenshtein_test.py', 'strsimpy.weighted_levenshtein_test', 'TestWeightedLevenshtein', 'test_weighted_levenshtein']]"
python-string-similarity,https://github.com/luozhouyang/python-string-similarity/tree/master/strsimpy/optimal_string_alignment.py,TestOptimalStringAlignment,test_optimal_string_alignment,"(n, m) = (len(s0), len(s1))","
n = len(s0)
m = len(s1)
",1,"[['https://github.com/luozhouyang/python-string-similarity/tree/master/strsimpy/optimal_string_alignment_test.py', 'strsimpy.optimal_string_alignment_test', 'TestOptimalStringAlignment', 'test_optimal_string_alignment']]"
python-string-similarity,https://github.com/luozhouyang/python-string-similarity/tree/master/strsimpy/overlap_coefficient.py,TestOverlapCoefficient,test_overlap_coefficient_onestringissubset_return1,"(profile0, profile1) = (self.get_profile(s0), self.get_profile(s1))","
profile0 = self.get_profile(s0)
profile1 = self.get_profile(s1)
",1,"[['https://github.com/luozhouyang/python-string-similarity/tree/master/strsimpy/overlap_coefficient_test.py', 'strsimpy.overlap_coefficient_test', 'TestOverlapCoefficient', 'test_overlap_coefficient_onestringissubsetofother_return1'], ['https://github.com/luozhouyang/python-string-similarity/tree/master/strsimpy/overlap_coefficient_test.py', 'strsimpy.overlap_coefficient_test', 'TestOverlapCoefficient', 'test_overlap_coefficient_halfsimilar_return1'], ['https://github.com/luozhouyang/python-string-similarity/tree/master/strsimpy/overlap_coefficient_test.py', 'strsimpy.overlap_coefficient_test', 'TestOverlapCoefficient', 'test_overlap_coefficient_onestringissubset_return1']]"
python-string-similarity,https://github.com/luozhouyang/python-string-similarity/tree/master/strsimpy/levenshtein.py,TestLevenshtein,test_levenshtein,"(v0, v1) = (v1, v0)","
tmp0 = v0
v0 = v1
v1 = tmp0
",1,"[['https://github.com/luozhouyang/python-string-similarity/tree/master/strsimpy/levenshtein_test.py', 'strsimpy.levenshtein_test', 'TestLevenshtein', 'test_levenshtein']]"
python-string-similarity,https://github.com/luozhouyang/python-string-similarity/tree/master/strsimpy/ngram.py,TestNGram,test_ngram,"(p, d) = (d, p)","
tmp0 = p
p = d
d = tmp0
",1,"[['https://github.com/luozhouyang/python-string-similarity/tree/master/strsimpy/ngram_test.py', 'strsimpy.ngram_test', 'TestNGram', 'test_ngram']]"
yt-dlc,https://github.com/blackjack4494/yt-dlc/tree/master/youtube_dlc/utils.py,TestUtil,test_parse_codecs,"(vcodec, acodec) = (None, None)","
vcodec = None
acodec = None
",1,"[['https://github.com/blackjack4494/yt-dlc/tree/master/test/test_utils.py', 'test.test_utils', 'TestUtil', 'test_parse_codecs']]"
cubes,https://github.com/DataBrewery/cubes/tree/master/cubes/sql/query.py,SchemaUtilitiesTestCase,test_to_join,"(table, column) = obj","
table = obj[0]
column = obj[1]
",1,"[['https://github.com/DataBrewery/cubes/tree/master/tests/sql/test_query.py', 'tests.sql.test_query', 'SchemaUtilitiesTestCase', 'test_to_join']]"
cubes,https://github.com/DataBrewery/cubes/tree/master/cubes/sql/query.py,SchemaUtilitiesTestCase,test_to_join,"(schema, table, column) = obj","
schema = obj[0]
table = obj[1]
column = obj[2]
",1,"[['https://github.com/DataBrewery/cubes/tree/master/tests/sql/test_query.py', 'tests.sql.test_query', 'SchemaUtilitiesTestCase', 'test_to_join']]"
pyannotate,https://github.com/dropbox/pyannotate/tree/master/example/gcd.py,,test_gcd,"(a, b) = (b, a % b)","
tmp0 = a % b
a = b
b = tmp0
",1,"[['https://github.com/dropbox/pyannotate/tree/master/example/test_gcd.py', 'example.test_gcd', '', 'test_gcd']]"
more-itertools,https://github.com/more-itertools/more-itertools/tree/master/more_itertools/recipes.py,GrouperTests,test_legacy_order,"(n, iterable) = (iterable, n)","
tmp0 = n
n = iterable
iterable = tmp0
",1,"[['https://github.com/more-itertools/more-itertools/tree/master/tests/test_recipes.py', 'tests.test_recipes', 'GrouperTests', 'test_even'], ['https://github.com/more-itertools/more-itertools/tree/master/tests/test_recipes.py', 'tests.test_recipes', 'GrouperTests', 'test_fill_value'], ['https://github.com/more-itertools/more-itertools/tree/master/tests/test_recipes.py', 'tests.test_recipes', 'GrouperTests', 'test_odd'], ['https://github.com/more-itertools/more-itertools/tree/master/tests/test_recipes.py', 'tests.test_recipes', 'GrouperTests', 'test_legacy_order']]"
more-itertools,https://github.com/more-itertools/more-itertools/tree/master/more_itertools/more.py,DistinctPermutationsTests,test_distinct_permutations,"(head, tail) = (A[:r], A[r:])","
head = A[:r]
tail = A[r:]
",1,"[['https://github.com/more-itertools/more-itertools/tree/master/tests/test_more.py', 'tests.test_more', 'DistinctPermutationsTests', 'test_r'], ['https://github.com/more-itertools/more-itertools/tree/master/tests/test_more.py', 'tests.test_more', 'DistinctPermutationsTests', 'test_other_iterables'], ['https://github.com/more-itertools/more-itertools/tree/master/tests/test_more.py', 'tests.test_more', 'DistinctPermutationsTests', 'test_distinct_permutations']]"
more-itertools,https://github.com/more-itertools/more-itertools/tree/master/more_itertools/more.py,DistinctPermutationsTests,test_distinct_permutations,"(A[i], A[j]) = (A[j], A[i])","
tmp0 = A[i]
A[i] = A[j]
A[j] = tmp0
",1,"[['https://github.com/more-itertools/more-itertools/tree/master/tests/test_more.py', 'tests.test_more', 'DistinctPermutationsTests', 'test_r'], ['https://github.com/more-itertools/more-itertools/tree/master/tests/test_more.py', 'tests.test_more', 'DistinctPermutationsTests', 'test_other_iterables'], ['https://github.com/more-itertools/more-itertools/tree/master/tests/test_more.py', 'tests.test_more', 'DistinctPermutationsTests', 'test_distinct_permutations']]"
more-itertools,https://github.com/more-itertools/more-itertools/tree/master/more_itertools/more.py,DistinctPermutationsTests,test_distinct_permutations,"(head[i:], tail[:]) = (tail[:r - i], tail[r - i:])","
head[i:] = tail[:r - i]
tail[:] = tail[r - i:]
",1,"[['https://github.com/more-itertools/more-itertools/tree/master/tests/test_more.py', 'tests.test_more', 'DistinctPermutationsTests', 'test_r'], ['https://github.com/more-itertools/more-itertools/tree/master/tests/test_more.py', 'tests.test_more', 'DistinctPermutationsTests', 'test_other_iterables'], ['https://github.com/more-itertools/more-itertools/tree/master/tests/test_more.py', 'tests.test_more', 'DistinctPermutationsTests', 'test_distinct_permutations']]"
more-itertools,https://github.com/more-itertools/more-itertools/tree/master/more_itertools/more.py,DistinctPermutationsTests,test_distinct_permutations,"(head[i], tail[j]) = (tail[j], head[i])","
tmp0 = head[i]
head[i] = tail[j]
tail[j] = tmp0
",1,"[['https://github.com/more-itertools/more-itertools/tree/master/tests/test_more.py', 'tests.test_more', 'DistinctPermutationsTests', 'test_r'], ['https://github.com/more-itertools/more-itertools/tree/master/tests/test_more.py', 'tests.test_more', 'DistinctPermutationsTests', 'test_other_iterables'], ['https://github.com/more-itertools/more-itertools/tree/master/tests/test_more.py', 'tests.test_more', 'DistinctPermutationsTests', 'test_distinct_permutations']]"
more-itertools,https://github.com/more-itertools/more-itertools/tree/master/more_itertools/more.py,DistinctPermutationsTests,test_distinct_permutations,"(head[i], head[j]) = (head[j], head[i])","
tmp0 = head[i]
head[i] = head[j]
head[j] = tmp0
",1,"[['https://github.com/more-itertools/more-itertools/tree/master/tests/test_more.py', 'tests.test_more', 'DistinctPermutationsTests', 'test_r'], ['https://github.com/more-itertools/more-itertools/tree/master/tests/test_more.py', 'tests.test_more', 'DistinctPermutationsTests', 'test_other_iterables'], ['https://github.com/more-itertools/more-itertools/tree/master/tests/test_more.py', 'tests.test_more', 'DistinctPermutationsTests', 'test_distinct_permutations']]"
backtrader,https://github.com/mementum/backtrader/tree/master/backtrader/position.py,,test_run,"(opened, closed) = (0, size)","
opened = 0
closed = size
",1,"[['https://github.com/mementum/backtrader/tree/master/tests/test_position.py', 'tests.test_position', '', 'test_run']]"
backtrader,https://github.com/mementum/backtrader/tree/master/backtrader/position.py,,test_run,"(opened, closed) = (size, 0)","
opened = size
closed = 0
",1,"[['https://github.com/mementum/backtrader/tree/master/tests/test_position.py', 'tests.test_position', '', 'test_run']]"
backtrader,https://github.com/mementum/backtrader/tree/master/backtrader/position.py,,test_run,"(opened, closed) = (size, 0)","
opened = size
closed = 0
",1,"[['https://github.com/mementum/backtrader/tree/master/tests/test_position.py', 'tests.test_position', '', 'test_run']]"
backtrader,https://github.com/mementum/backtrader/tree/master/backtrader/position.py,,test_run,"(opened, closed) = (size, 0)","
opened = size
closed = 0
",1,"[['https://github.com/mementum/backtrader/tree/master/tests/test_position.py', 'tests.test_position', '', 'test_run']]"
backtrader,https://github.com/mementum/backtrader/tree/master/backtrader/position.py,,test_run,"(opened, closed) = (0, size)","
opened = 0
closed = size
",1,"[['https://github.com/mementum/backtrader/tree/master/tests/test_position.py', 'tests.test_position', '', 'test_run']]"
backtrader,https://github.com/mementum/backtrader/tree/master/backtrader/position.py,,test_run,"(opened, closed) = (self.size, -oldsize)","
opened = self.size
closed = -oldsize
",1,"[['https://github.com/mementum/backtrader/tree/master/tests/test_position.py', 'tests.test_position', '', 'test_run']]"
backtrader,https://github.com/mementum/backtrader/tree/master/backtrader/position.py,,test_run,"(opened, closed) = (0, size)","
opened = 0
closed = size
",1,"[['https://github.com/mementum/backtrader/tree/master/tests/test_position.py', 'tests.test_position', '', 'test_run']]"
backtrader,https://github.com/mementum/backtrader/tree/master/backtrader/position.py,,test_run,"(opened, closed) = (self.size, -oldsize)","
opened = self.size
closed = -oldsize
",1,"[['https://github.com/mementum/backtrader/tree/master/tests/test_position.py', 'tests.test_position', '', 'test_run']]"
apprise,https://github.com/caronc/apprise/tree/master/apprise/config/ConfigBase.py,,test_yaml_vs_text_tagging,"(url, config) = (result.group('url'), result.group('config'))","
url = result.group('url')
config = result.group('config')
",1,"[['https://github.com/caronc/apprise/tree/master/test/test_config_base.py', 'test.test_config_base', '', 'test_config_base_config_parse_text'], ['https://github.com/caronc/apprise/tree/master/test/test_config_base.py', 'test.test_config_base', '', 'test_yaml_vs_text_tagging']]"
deepdiff,https://github.com/seperman/deepdiff/tree/master/deepdiff/model.py,TestDiffLevel,test_path_when_both_children_empty,result = parent = param = '',"
tmp_value = ''
result = tmp_value
parent = tmp_value
param = tmp_value
",1,"[['https://github.com/seperman/deepdiff/tree/master/tests/test_model.py', 'tests.test_model', 'TestDiffLevel', 'test_path_when_both_children_empty']]"
deepdiff,https://github.com/seperman/deepdiff/tree/master/deepdiff/model.py,TestDiffLevel,test_path_when_both_children_empty,"(parent, param, result) = cached","
parent = cached[0]
param = cached[1]
result = cached[2]
",1,"[['https://github.com/seperman/deepdiff/tree/master/tests/test_model.py', 'tests.test_model', 'TestDiffLevel', 'test_path_when_both_children_empty']]"
gaft,https://github.com/PytLab/gaft/tree/master/gaft/operators/crossover/uniform_crossover.py,UniformCrossoverTest,test_cross,"(child1, child2) = (father.clone(), father.clone())","
child1 = father.clone()
child2 = father.clone()
",1,"[['https://github.com/PytLab/gaft/tree/master/gaft/tests/uniform_crossover_test.py', 'gaft.tests.uniform_crossover_test', 'UniformCrossoverTest', 'test_cross']]"
gaft,https://github.com/PytLab/gaft/tree/master/gaft/operators/crossover/uniform_crossover.py,UniformCrossoverTest,test_cross,"(chrom1[i], chrom2[i]) = (g2, g1)","
chrom1[i] = g2
chrom2[i] = g1
",1,"[['https://github.com/PytLab/gaft/tree/master/gaft/tests/uniform_crossover_test.py', 'gaft.tests.uniform_crossover_test', 'UniformCrossoverTest', 'test_cross']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/fontBuilder.py,,test_setupNameTable_no_mac,nameTable = self.font['name'] = newTable('name'),"
tmp_value = newTable('name')
nameTable = tmp_value
self.font['name'] = tmp_value
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/fontBuilder/fontBuilder_test.py', 'Tests.fontBuilder.fontBuilder_test', '', 'test_setupNameTable_no_windows'], ['https://github.com/fonttools/fonttools/tree/master/Tests/subset/subset_test.py', 'Tests.subset.subset_test', '', 'test_subset_single_pos_format'], ['https://github.com/fonttools/fonttools/tree/master/Tests/fontBuilder/fontBuilder_test.py', 'Tests.fontBuilder.fontBuilder_test', '', 'test_build_otf'], ['https://github.com/fonttools/fonttools/tree/master/Tests/fontBuilder/fontBuilder_test.py', 'Tests.fontBuilder.fontBuilder_test', '', 'test_build_var'], ['https://github.com/fonttools/fonttools/tree/master/Tests/fontBuilder/fontBuilder_test.py', 'Tests.fontBuilder.fontBuilder_test', '', 'test_build_cff2'], ['https://github.com/fonttools/fonttools/tree/master/Tests/fontBuilder/fontBuilder_test.py', 'Tests.fontBuilder.fontBuilder_test', '', 'test_build_ttf'], ['https://github.com/fonttools/fonttools/tree/master/Tests/subset/subset_test.py', 'Tests.subset.subset_test', '', 'test_subset_keep_size_drop_empty_stylistic_set'], ['https://github.com/fonttools/fonttools/tree/master/Tests/fontBuilder/fontBuilder_test.py', 'Tests.fontBuilder.fontBuilder_test', '', 'test_unicodeVariationSequences'], ['https://github.com/fonttools/fonttools/tree/master/Tests/fontBuilder/fontBuilder_test.py', 'Tests.fontBuilder.fontBuilder_test', '', 'test_setupNameTable_no_mac']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/otlLib/builder.py,,test_splitMarkBasePos,"(self.XCoordinate, self.YCoordinate) = (x, y)","
self.XCoordinate = x
self.YCoordinate = y
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/otlLib/builder_test.py', 'Tests.otlLib.builder_test', 'BuilderTest', 'test_buildAnchor_format3'], ['https://github.com/fonttools/fonttools/tree/master/Tests/otlLib/builder_test.py', 'Tests.otlLib.builder_test', 'BuilderTest', 'test_buildAnchor_format1'], ['https://github.com/fonttools/fonttools/tree/master/Tests/otlLib/builder_test.py', 'Tests.otlLib.builder_test', 'BuilderTest', 'test_buildMarkRecord'], ['https://github.com/fonttools/fonttools/tree/master/Tests/otlLib/builder_test.py', 'Tests.otlLib.builder_test', 'BuilderTest', 'test_buildMarkArray'], ['https://github.com/fonttools/fonttools/tree/master/Tests/otlLib/builder_test.py', 'Tests.otlLib.builder_test', 'BuilderTest', 'test_buildAnchor_format2'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/otTables_test.py', 'Tests.ttLib.tables.otTables_test', '', 'test_splitMarkBasePos']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/otlLib/builder.py,BuilderTest,test_getSinglePosValueKey,self.StartSize = startSize = min(keys),"
tmp_value = min(keys)
self.StartSize = tmp_value
startSize = tmp_value
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/otlLib/builder_test.py', 'Tests.otlLib.builder_test', 'BuilderTest', 'test_buildAnchor_format3'], ['https://github.com/fonttools/fonttools/tree/master/Tests/otlLib/builder_test.py', 'Tests.otlLib.builder_test', 'BuilderTest', 'test_buildDevice_format2'], ['https://github.com/fonttools/fonttools/tree/master/Tests/otlLib/builder_test.py', 'Tests.otlLib.builder_test', 'BuilderTest', 'test_buildDevice_format3'], ['https://github.com/fonttools/fonttools/tree/master/Tests/otlLib/builder_test.py', 'Tests.otlLib.builder_test', 'BuilderTest', 'test_buildDevice_format1'], ['https://github.com/fonttools/fonttools/tree/master/Tests/otlLib/builder_test.py', 'Tests.otlLib.builder_test', 'BuilderTest', 'test_getSinglePosValueKey']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/otlLib/builder.py,BuilderTest,test_getSinglePosValueKey,self.EndSize = endSize = max(keys),"
tmp_value = max(keys)
self.EndSize = tmp_value
endSize = tmp_value
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/otlLib/builder_test.py', 'Tests.otlLib.builder_test', 'BuilderTest', 'test_buildAnchor_format3'], ['https://github.com/fonttools/fonttools/tree/master/Tests/otlLib/builder_test.py', 'Tests.otlLib.builder_test', 'BuilderTest', 'test_buildDevice_format2'], ['https://github.com/fonttools/fonttools/tree/master/Tests/otlLib/builder_test.py', 'Tests.otlLib.builder_test', 'BuilderTest', 'test_buildDevice_format3'], ['https://github.com/fonttools/fonttools/tree/master/Tests/otlLib/builder_test.py', 'Tests.otlLib.builder_test', 'BuilderTest', 'test_buildDevice_format1'], ['https://github.com/fonttools/fonttools/tree/master/Tests/otlLib/builder_test.py', 'Tests.otlLib.builder_test', 'BuilderTest', 'test_getSinglePosValueKey']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/otlLib/builder.py,BuilderTest,test_getSinglePosValueKey,"self.DeltaValue = deltaValues = [deltas.get(size, 0) for size in range(startSize, endSize + 1)]","
tmp_value = [deltas.get(size, 0) for size in range(startSize, endSize + 1)]
self.DeltaValue = tmp_value
deltaValues = tmp_value
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/otlLib/builder_test.py', 'Tests.otlLib.builder_test', 'BuilderTest', 'test_buildAnchor_format3'], ['https://github.com/fonttools/fonttools/tree/master/Tests/otlLib/builder_test.py', 'Tests.otlLib.builder_test', 'BuilderTest', 'test_buildDevice_format2'], ['https://github.com/fonttools/fonttools/tree/master/Tests/otlLib/builder_test.py', 'Tests.otlLib.builder_test', 'BuilderTest', 'test_buildDevice_format3'], ['https://github.com/fonttools/fonttools/tree/master/Tests/otlLib/builder_test.py', 'Tests.otlLib.builder_test', 'BuilderTest', 'test_buildDevice_format1'], ['https://github.com/fonttools/fonttools/tree/master/Tests/otlLib/builder_test.py', 'Tests.otlLib.builder_test', 'BuilderTest', 'test_getSinglePosValueKey']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/feaLib/ast.py,AstTest,test_glyphname_escape,"(x, y) = (self.xPlacement, self.yPlacement)","
x = self.xPlacement
y = self.yPlacement
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/feaLib/ast_test.py', 'Tests.feaLib.ast_test', 'AstTest', 'test_valuerecord_none'], ['https://github.com/fonttools/fonttools/tree/master/Tests/feaLib/ast_test.py', 'Tests.feaLib.ast_test', 'AstTest', 'test_glyphname_escape']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/feaLib/ast.py,AstTest,test_glyphname_escape,"(xAdvance, yAdvance) = (self.xAdvance, self.yAdvance)","
xAdvance = self.xAdvance
yAdvance = self.yAdvance
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/feaLib/ast_test.py', 'Tests.feaLib.ast_test', 'AstTest', 'test_valuerecord_none'], ['https://github.com/fonttools/fonttools/tree/master/Tests/feaLib/ast_test.py', 'Tests.feaLib.ast_test', 'AstTest', 'test_glyphname_escape']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/feaLib/ast.py,AstTest,test_glyphname_escape,"(xPlaDevice, yPlaDevice) = (self.xPlaDevice, self.yPlaDevice)","
xPlaDevice = self.xPlaDevice
yPlaDevice = self.yPlaDevice
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/feaLib/ast_test.py', 'Tests.feaLib.ast_test', 'AstTest', 'test_valuerecord_none'], ['https://github.com/fonttools/fonttools/tree/master/Tests/feaLib/ast_test.py', 'Tests.feaLib.ast_test', 'AstTest', 'test_glyphname_escape']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/feaLib/ast.py,AstTest,test_glyphname_escape,"(xAdvDevice, yAdvDevice) = (self.xAdvDevice, self.yAdvDevice)","
xAdvDevice = self.xAdvDevice
yAdvDevice = self.yAdvDevice
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/feaLib/ast_test.py', 'Tests.feaLib.ast_test', 'AstTest', 'test_valuerecord_none'], ['https://github.com/fonttools/fonttools/tree/master/Tests/feaLib/ast_test.py', 'Tests.feaLib.ast_test', 'AstTest', 'test_glyphname_escape']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/misc/arrayTools.py,,test_sectRect,"(xMin1, yMin1, xMax1, yMax1) = rect1","
xMin1 = rect1[0]
yMin1 = rect1[1]
xMax1 = rect1[2]
yMax1 = rect1[3]
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/misc/arrayTools_test.py', 'Tests.misc.arrayTools_test', '', 'test_sectRect']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/misc/arrayTools.py,,test_sectRect,"(xMin2, yMin2, xMax2, yMax2) = rect2","
xMin2 = rect2[0]
yMin2 = rect2[1]
xMax2 = rect2[2]
yMax2 = rect2[3]
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/misc/arrayTools_test.py', 'Tests.misc.arrayTools_test', '', 'test_sectRect']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/misc/arrayTools.py,,test_sectRect,"(xMin, yMin, xMax, yMax) = (max(xMin1, xMin2), max(yMin1, yMin2), min(xMax1, xMax2), min(yMax1, yMax2))","
xMin = max(xMin1, xMin2)
yMin = max(yMin1, yMin2)
xMax = min(xMax1, xMax2)
yMax = min(yMax1, yMax2)
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/misc/arrayTools_test.py', 'Tests.misc.arrayTools_test', '', 'test_sectRect']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/misc/arrayTools.py,,test_unionRect,"(xMin1, yMin1, xMax1, yMax1) = rect1","
xMin1 = rect1[0]
yMin1 = rect1[1]
xMax1 = rect1[2]
yMax1 = rect1[3]
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/misc/arrayTools_test.py', 'Tests.misc.arrayTools_test', '', 'test_unionRect']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/misc/arrayTools.py,,test_unionRect,"(xMin2, yMin2, xMax2, yMax2) = rect2","
xMin2 = rect2[0]
yMin2 = rect2[1]
xMax2 = rect2[2]
yMax2 = rect2[3]
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/misc/arrayTools_test.py', 'Tests.misc.arrayTools_test', '', 'test_unionRect']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/misc/arrayTools.py,,test_unionRect,"(xMin, yMin, xMax, yMax) = (min(xMin1, xMin2), min(yMin1, yMin2), max(xMax1, xMax2), max(yMax1, yMax2))","
xMin = min(xMin1, xMin2)
yMin = min(yMin1, yMin2)
xMax = max(xMax1, xMax2)
yMax = max(yMax1, yMax2)
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/misc/arrayTools_test.py', 'Tests.misc.arrayTools_test', '', 'test_unionRect']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/misc/transform.py,TransformTest,test_inverse,"(x, y) = p","
x = p[0]
y = p[1]
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/misc/transform_test.py', 'Tests.misc.transform_test', 'TransformTest', 'test_inverse']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/misc/transform.py,TransformTest,test_inverse,"(xx, xy, yx, yy, dx, dy) = self","
xx = self[0]
xy = self[1]
yx = self[2]
yy = self[3]
dx = self[4]
dy = self[5]
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/misc/transform_test.py', 'Tests.misc.transform_test', 'TransformTest', 'test_inverse']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/misc/bezierTools.py,,test_solveCubic,"(x0, x1, x2) = sorted([x0, x1, x2])","
tmp_fun_0 = sorted([x0, x1, x2])
x0 = tmp_fun_0[0]
x1 = tmp_fun_0[1]
x2 = tmp_fun_0[2]
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/misc/bezierTools_test.py', 'Tests.misc.bezierTools_test', '', 'test_solveCubic']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/misc/bezierTools.py,,test_solveCubic,"x0 = x1 = x2 = round((x0 + x1 + x2) / 3.0, epsilonDigits)","
tmp_value = round((x0 + x1 + x2) / 3.0, epsilonDigits)
x0 = tmp_value
x1 = tmp_value
x2 = tmp_value
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/misc/bezierTools_test.py', 'Tests.misc.bezierTools_test', '', 'test_solveCubic']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/misc/bezierTools.py,,test_solveCubic,"x0 = x1 = round((x0 + x1) / 2.0, epsilonDigits)","
tmp_value = round((x0 + x1) / 2.0, epsilonDigits)
x0 = tmp_value
x1 = tmp_value
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/misc/bezierTools_test.py', 'Tests.misc.bezierTools_test', '', 'test_solveCubic']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/misc/bezierTools.py,,test_solveCubic,"x1 = x2 = round((x1 + x2) / 2.0, epsilonDigits)","
tmp_value = round((x1 + x2) / 2.0, epsilonDigits)
x1 = tmp_value
x2 = tmp_value
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/misc/bezierTools_test.py', 'Tests.misc.bezierTools_test', '', 'test_solveCubic']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/ufoLib/glifLib.py,ReadWriteFuncTest,test_read_allow_format_versions,"(validFormatVersions, invalidFormatVersions) = (set(), set())","
validFormatVersions = set()
invalidFormatVersions = set()
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/ufoLib/glifLib_test.py', 'Tests.ufoLib.glifLib_test', 'ReadWriteFuncTest', 'test_roundtrip'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ufoLib/glifLib_test.py', 'Tests.ufoLib.glifLib_test', 'ReadWriteFuncTest', 'test_parse_xml_remove_comments'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ufoLib/glifLib_test.py', 'Tests.ufoLib.glifLib_test', 'ReadWriteFuncTest', 'test_read_ensure_x_y'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ufoLib/glifLib_test.py', 'Tests.ufoLib.glifLib_test', 'ReadWriteFuncTest', 'test_read_unsupported_format_version'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ufoLib/glifLib_test.py', 'Tests.ufoLib.glifLib_test', 'ReadWriteFuncTest', 'test_read_allow_format_versions']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/pens/cu2quPen.py,TestCu2QuPointPen,test__flushContour_restore_starting_point,"(on_curve, smooth, name, kwargs) = sub_points[-1]","
on_curve = sub_points[-1][0]
smooth = sub_points[-1][1]
name = sub_points[-1][2]
kwargs = sub_points[-1][3]
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/pens/cu2quPen_test.py', 'Tests.pens.cu2quPen_test', 'TestCu2QuPointPen', 'test__flushContour_restore_starting_point']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/pens/cu2quPen.py,TestCu2QuPointPen,test__flushContour_restore_starting_point,"(bcp1, bcp2) = (sub_points[0][0], sub_points[1][0])","
bcp1 = sub_points[0][0]
bcp2 = sub_points[1][0]
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/pens/cu2quPen_test.py', 'Tests.pens.cu2quPen_test', 'TestCu2QuPointPen', 'test__flushContour_restore_starting_point']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/ttLib/woff2.py,WOFF2GlyfTableTest,test_reconstruct_glyf_missing_glyphOrder,"(dummy, data) = sstruct.unpack2(woff2GlyfTableFormat, data, self)","
tmp_fun_0 = sstruct.unpack2(woff2GlyfTableFormat, data, self)
dummy = tmp_fun_0[0]
data = tmp_fun_0[1]
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/woff2_test.py', 'Tests.ttLib.woff2_test', 'WOFF2GlyfTableTest', 'test_reconstruct_loca_padded_2'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/woff2_test.py', 'Tests.ttLib.woff2_test', 'WOFF2GlyfTableTest', 'test_reconstruct_glyf_incorrect_glyphOrder'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/woff2_test.py', 'Tests.ttLib.woff2_test', 'WOFF2GlyfTableTest', 'test_reconstruct_glyf_padded_2'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/woff2_test.py', 'Tests.ttLib.woff2_test', 'WOFF2GlyfTableTest', 'test_reconstruct_glyf_padded_4'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/woff2_test.py', 'Tests.ttLib.woff2_test', 'WOFF2GlyfTableTest', 'test_reconstruct_glyf_unpadded'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/woff2_test.py', 'Tests.ttLib.woff2_test', 'WOFF2GlyfTableTest', 'test_roundtrip_glyf_transform_and_reconstruct'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/woff2_test.py', 'Tests.ttLib.woff2_test', 'WOFF2GlyfTableTest', 'test_reconstruct_loca_unpadded'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/woff2_test.py', 'Tests.ttLib.woff2_test', 'WOFF2GlyfTableTest', 'test_roundtrip_glyf_reconstruct_and_transform'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/woff2_test.py', 'Tests.ttLib.woff2_test', 'WOFF2GlyfTableTest', 'test_reconstruct_loca_padded_4'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/woff2_test.py', 'Tests.ttLib.woff2_test', 'WOFF2GlyfTableTest', 'test_reconstruct_glyf_table_incorrect_size'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/woff2_test.py', 'Tests.ttLib.woff2_test', 'WOFF2GlyfTableTest', 'test_reconstruct_glyf_header_not_enough_data'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/woff2_test.py', 'Tests.ttLib.woff2_test', 'WOFF2GlyfTableTest', 'test_reconstruct_glyf_missing_glyphOrder']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/ttLib/woff2.py,WOFF2GlyfTableTest,test_reconstruct_glyf_missing_glyphOrder,glyphs = self.glyphs = {},"
tmp_value = {}
glyphs = tmp_value
self.glyphs = tmp_value
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/woff2_test.py', 'Tests.ttLib.woff2_test', 'WOFF2GlyfTableTest', 'test_reconstruct_loca_padded_2'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/woff2_test.py', 'Tests.ttLib.woff2_test', 'WOFF2GlyfTableTest', 'test_reconstruct_glyf_incorrect_glyphOrder'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/woff2_test.py', 'Tests.ttLib.woff2_test', 'WOFF2GlyfTableTest', 'test_reconstruct_glyf_padded_2'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/woff2_test.py', 'Tests.ttLib.woff2_test', 'WOFF2GlyfTableTest', 'test_reconstruct_glyf_padded_4'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/woff2_test.py', 'Tests.ttLib.woff2_test', 'WOFF2GlyfTableTest', 'test_reconstruct_glyf_unpadded'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/woff2_test.py', 'Tests.ttLib.woff2_test', 'WOFF2GlyfTableTest', 'test_roundtrip_glyf_transform_and_reconstruct'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/woff2_test.py', 'Tests.ttLib.woff2_test', 'WOFF2GlyfTableTest', 'test_reconstruct_loca_unpadded'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/woff2_test.py', 'Tests.ttLib.woff2_test', 'WOFF2GlyfTableTest', 'test_roundtrip_glyf_reconstruct_and_transform'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/woff2_test.py', 'Tests.ttLib.woff2_test', 'WOFF2GlyfTableTest', 'test_reconstruct_loca_padded_4'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/woff2_test.py', 'Tests.ttLib.woff2_test', 'WOFF2GlyfTableTest', 'test_reconstruct_glyf_table_incorrect_size'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/woff2_test.py', 'Tests.ttLib.woff2_test', 'WOFF2GlyfTableTest', 'test_reconstruct_glyf_header_not_enough_data'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/woff2_test.py', 'Tests.ttLib.woff2_test', 'WOFF2GlyfTableTest', 'test_reconstruct_glyf_missing_glyphOrder']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/ttLib/woff2.py,WOFF2HmtxTableTest,test_reconstruct_no_sidebearings,"(advanceWidth, lsb) = (advanceWidthArray[i], lsbArray[i])","
advanceWidth = advanceWidthArray[i]
lsb = lsbArray[i]
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/woff2_test.py', 'Tests.ttLib.woff2_test', 'WOFF2HmtxTableTest', 'test_reconstruct_proportional_sidebearings'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/woff2_test.py', 'Tests.ttLib.woff2_test', 'WOFF2HmtxTableTest', 'test_reconstruct_too_much_data'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/woff2_test.py', 'Tests.ttLib.woff2_test', 'WOFF2HmtxTableTest', 'test_reconstruct_flags_required_bits'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/woff2_test.py', 'Tests.ttLib.woff2_test', 'WOFF2HmtxTableTest', 'test_reconstruct_flags_reserved_bits'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/woff2_test.py', 'Tests.ttLib.woff2_test', 'WOFF2HmtxTableTest', 'test_reconstruct_monospaced_sidebearings'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/woff2_test.py', 'Tests.ttLib.woff2_test', 'WOFF2HmtxTableTest', 'test_reconstruct_no_sidebearings']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/ttLib/tables/_t_r_a_k.py,TrackingTableTest,test_compile_horiz_and_vert,"(padding, offset) = (b'\x00' * (alignedOffset - offset), alignedOffset)","
padding = b'\x00' * (alignedOffset - offset)
offset = alignedOffset
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/_t_r_a_k_test.py', 'Tests.ttLib.tables._t_r_a_k_test', 'TrackingTableTest', 'test_compile_vert'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/_t_r_a_k_test.py', 'Tests.ttLib.tables._t_r_a_k_test', 'TrackingTableTest', 'test_roundtrip_decompile_compile'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/_t_r_a_k_test.py', 'Tests.ttLib.tables._t_r_a_k_test', 'TrackingTableTest', 'test_compile_longword_aligned'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/_t_r_a_k_test.py', 'Tests.ttLib.tables._t_r_a_k_test', 'TrackingTableTest', 'test_compile_sizes_mismatch'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/_t_r_a_k_test.py', 'Tests.ttLib.tables._t_r_a_k_test', 'TrackingTableTest', 'test_compile_horiz'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/_t_r_a_k_test.py', 'Tests.ttLib.tables._t_r_a_k_test', 'TrackingTableTest', 'test_compile_horiz_and_vert']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/ttLib/tables/_k_e_r_n.py,KernTable_format_0_Test,test_decompileBadGlyphId,self.kernTable = kernTable = {},"
tmp_value = {}
self.kernTable = tmp_value
kernTable = tmp_value
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/_k_e_r_n_test.py', 'Tests.ttLib.tables._k_e_r_n_test', 'KernTable_format_0_Test', 'test_decompileBadGlyphId']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/ttLib/tables/_k_e_r_n.py,KernTable_format_0_Test,test_decompileBadGlyphId,"(nPairs, searchRange, entrySelector, rangeShift) = struct.unpack('>HHHH', data[:8])","
tmp_fun_0 = struct.unpack('>HHHH', data[:8])
nPairs = tmp_fun_0[0]
searchRange = tmp_fun_0[1]
entrySelector = tmp_fun_0[2]
rangeShift = tmp_fun_0[3]
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/_k_e_r_n_test.py', 'Tests.ttLib.tables._k_e_r_n_test', 'KernTable_format_0_Test', 'test_decompileBadGlyphId']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/ttLib/tables/_k_e_r_n.py,KernTable_format_0_Test,test_decompileBadGlyphId,"(version, length, subtableFormat, coverage) = struct.unpack('>HHBB', data[:6])","
tmp_fun_0 = struct.unpack('>HHBB', data[:6])
version = tmp_fun_0[0]
length = tmp_fun_0[1]
subtableFormat = tmp_fun_0[2]
coverage = tmp_fun_0[3]
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/_k_e_r_n_test.py', 'Tests.ttLib.tables._k_e_r_n_test', 'KernTable_format_0_Test', 'test_decompileBadGlyphId']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/ttLib/tables/_k_e_r_n.py,KernTable_format_0_Test,test_decompileBadGlyphId,"(length, coverage, subtableFormat, tupleIndex) = struct.unpack('>LBBH', data[:8])","
tmp_fun_0 = struct.unpack('>LBBH', data[:8])
length = tmp_fun_0[0]
coverage = tmp_fun_0[1]
subtableFormat = tmp_fun_0[2]
tupleIndex = tmp_fun_0[3]
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/_k_e_r_n_test.py', 'Tests.ttLib.tables._k_e_r_n_test', 'KernTable_format_0_Test', 'test_decompileBadGlyphId']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/ttLib/tables/_k_e_r_n.py,KernTable_format_0_Test,test_decompileBadGlyphId,"(left, right, value) = (next(it), next(it), next(it))","
left = next(it)
right = next(it)
value = next(it)
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/_k_e_r_n_test.py', 'Tests.ttLib.tables._k_e_r_n_test', 'KernTable_format_0_Test', 'test_decompileBadGlyphId']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/ttLib/tables/S_V_G_.py,,test_round_trip_ttx,pos = subTableStart = self.offsetToSVGDocIndex,"
tmp_value = self.offsetToSVGDocIndex
pos = tmp_value
subTableStart = tmp_value
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/S_V_G__test.py', 'Tests.ttLib.tables.S_V_G__test', '', 'test_decompile_and_compile'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/S_V_G__test.py', 'Tests.ttLib.tables.S_V_G__test', '', 'test_decompile_and_dump_ttx'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/S_V_G__test.py', 'Tests.ttLib.tables.S_V_G__test', '', 'test_round_trip_ttx']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/ttLib/tables/S_V_G_.py,,test_round_trip_ttx,"(docIndexEntry, data2) = sstruct.unpack2(doc_index_entry_format_0, data2, DocumentIndexEntry())","
tmp_fun_0 = sstruct.unpack2(doc_index_entry_format_0, data2, DocumentIndexEntry())
docIndexEntry = tmp_fun_0[0]
data2 = tmp_fun_0[1]
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/S_V_G__test.py', 'Tests.ttLib.tables.S_V_G__test', '', 'test_decompile_and_compile'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/S_V_G__test.py', 'Tests.ttLib.tables.S_V_G__test', '', 'test_decompile_and_dump_ttx'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/S_V_G__test.py', 'Tests.ttLib.tables.S_V_G__test', '', 'test_round_trip_ttx']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/ttLib/tables/otTables.py,MultipleSubstTest,test_preWrite_format1,alternates = self.alternates = {},"
tmp_value = {}
alternates = tmp_value
self.alternates = tmp_value
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/otTables_test.py', 'Tests.ttLib.tables.otTables_test', 'SingleSubstTest', 'test_preWrite_emptyMapping'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/otTables_test.py', 'Tests.ttLib.tables.otTables_test', 'SingleSubstTest', 'test_preWrite_format1'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/otTables_test.py', 'Tests.ttLib.tables.otTables_test', 'AlternateSubstTest', 'test_preWrite_format1'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/otTables_test.py', 'Tests.ttLib.tables.otTables_test', 'LigatureSubstTest', 'test_preWrite_format1'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/otTables_test.py', 'Tests.ttLib.tables.otTables_test', 'SingleSubstTest', 'test_preWrite_format2'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/otTables_test.py', 'Tests.ttLib.tables.otTables_test', 'MultipleSubstTest', 'test_preWrite_format1']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/ttLib/tables/otTables.py,MultipleSubstTest,test_preWrite_format1,"(glyphName, set) = items[i]","
glyphName = items[i][0]
set = items[i][1]
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/otTables_test.py', 'Tests.ttLib.tables.otTables_test', 'SingleSubstTest', 'test_preWrite_emptyMapping'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/otTables_test.py', 'Tests.ttLib.tables.otTables_test', 'SingleSubstTest', 'test_preWrite_format1'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/otTables_test.py', 'Tests.ttLib.tables.otTables_test', 'AlternateSubstTest', 'test_preWrite_format1'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/otTables_test.py', 'Tests.ttLib.tables.otTables_test', 'LigatureSubstTest', 'test_preWrite_format1'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/otTables_test.py', 'Tests.ttLib.tables.otTables_test', 'SingleSubstTest', 'test_preWrite_format2'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/otTables_test.py', 'Tests.ttLib.tables.otTables_test', 'MultipleSubstTest', 'test_preWrite_format1']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/ttLib/tables/otTables.py,,test_splitMarkBasePos,"(oldMarkCoverage, oldMarkRecords) = ([], [])","
oldMarkCoverage = []
oldMarkRecords = []
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/otTables_test.py', 'Tests.ttLib.tables.otTables_test', '', 'test_splitMarkBasePos']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/ttLib/tables/otTables.py,,test_splitMarkBasePos,"(newMarkCoverage, newMarkRecords) = ([], [])","
newMarkCoverage = []
newMarkRecords = []
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/otTables_test.py', 'Tests.ttLib.tables.otTables_test', '', 'test_splitMarkBasePos']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/ttLib/tables/otTables.py,,test_splitMarkBasePos,"(oldBaseRecords, newBaseRecords) = ([], [])","
oldBaseRecords = []
newBaseRecords = []
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/otTables_test.py', 'Tests.ttLib.tables.otTables_test', '', 'test_splitMarkBasePos']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/ttLib/tables/otTables.py,,test_splitMarkBasePos,"(oldBaseRecord, newBaseRecord) = (rec.__class__(), rec.__class__())","
oldBaseRecord = rec.__class__()
newBaseRecord = rec.__class__()
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/otTables_test.py', 'Tests.ttLib.tables.otTables_test', '', 'test_splitMarkBasePos']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/ttLib/tables/_n_a_m_e.py,NameTableTest,test_findMultilingualName_compiled,"(format, n, stringOffset) = struct.unpack(b'>HHH', data[:6])","
tmp_fun_0 = struct.unpack(b'>HHH', data[:6])
format = tmp_fun_0[0]
n = tmp_fun_0[1]
stringOffset = tmp_fun_0[2]
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/_n_a_m_e_test.py', 'Tests.ttLib.tables._n_a_m_e_test', 'NameTableTest', 'test_findMultilingualName_compiled']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/ttLib/tables/_n_a_m_e.py,NameTableTest,test_findMultilingualName_compiled,"(name, data) = sstruct.unpack2(nameRecordFormat, data, NameRecord())","
tmp_fun_0 = sstruct.unpack2(nameRecordFormat, data, NameRecord())
name = tmp_fun_0[0]
data = tmp_fun_0[1]
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/_n_a_m_e_test.py', 'Tests.ttLib.tables._n_a_m_e_test', 'NameTableTest', 'test_findMultilingualName_compiled']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/ttLib/tables/_n_a_m_e.py,NameRecordTest,test_toUnicode_UnicodeDecodeError,"(name.string, name.nameID, name.platformID, name.platEncID, name.langID) = (string, nameID, platformID, platEncID, langID)","
name.string = string
name.nameID = nameID
name.platformID = platformID
name.platEncID = platEncID
name.langID = langID
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/_n_a_m_e_test.py', 'Tests.ttLib.tables._n_a_m_e_test', 'NameRecordTest', 'test_extended_mac_encodings'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/_n_a_m_e_test.py', 'Tests.ttLib.tables._n_a_m_e_test', 'NameTableTest', 'test_getDebugName'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/_n_a_m_e_test.py', 'Tests.ttLib.tables._n_a_m_e_test', 'NameRecordTest', 'test_toUnicode_macromanian'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/_n_a_m_e_test.py', 'Tests.ttLib.tables._n_a_m_e_test', 'NameRecordTest', 'test_toUnicode_singleChar'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/_n_a_m_e_test.py', 'Tests.ttLib.tables._n_a_m_e_test', 'NameRecordTest', 'test_encoding_macroman_misc'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/_n_a_m_e_test.py', 'Tests.ttLib.tables._n_a_m_e_test', 'NameRecordTest', 'test_toUnicode_utf16be'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/_n_a_m_e_test.py', 'Tests.ttLib.tables._n_a_m_e_test', 'NameTableTest', 'test_names_sort_bytes_str_encoding_error'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/_n_a_m_e_test.py', 'Tests.ttLib.tables._n_a_m_e_test', 'NameRecordTest', 'test_toXML_macroman_actual_utf16be'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/_n_a_m_e_test.py', 'Tests.ttLib.tables._n_a_m_e_test', 'NameRecordTest', 'test_extended_unknown'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/_n_a_m_e_test.py', 'Tests.ttLib.tables._n_a_m_e_test', 'NameRecordTest', 'test_toXML_utf16be'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/_n_a_m_e_test.py', 'Tests.ttLib.tables._n_a_m_e_test', 'NameTableTest', 'test_names_sort_bytes_str'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/_n_a_m_e_test.py', 'Tests.ttLib.tables._n_a_m_e_test', 'NameRecordTest', 'test_toXML_utf16be_double_encoded'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/_n_a_m_e_test.py', 'Tests.ttLib.tables._n_a_m_e_test', 'NameRecordTest', 'test_toXML_unknownPlatEncID_ASCII'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/_n_a_m_e_test.py', 'Tests.ttLib.tables._n_a_m_e_test', 'NameRecordTest', 'test_extended_mac_encodings_errors'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/_n_a_m_e_test.py', 'Tests.ttLib.tables._n_a_m_e_test', 'NameRecordTest', 'test_toXML_utf16be_odd_length2'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/_n_a_m_e_test.py', 'Tests.ttLib.tables._n_a_m_e_test', 'NameRecordTest', 'test_toUnicode_macroman'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/_n_a_m_e_test.py', 'Tests.ttLib.tables._n_a_m_e_test', 'NameRecordTest', 'test_toXML_utf16be_odd_length1'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/_n_a_m_e_test.py', 'Tests.ttLib.tables._n_a_m_e_test', 'NameRecordTest', 'test_toXML_macroman'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/_n_a_m_e_test.py', 'Tests.ttLib.tables._n_a_m_e_test', 'NameRecordTest', 'test_toXML_unknownPlatEncID_nonASCII'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/_n_a_m_e_test.py', 'Tests.ttLib.tables._n_a_m_e_test', 'NameRecordTest', 'test_toUnicode_UnicodeDecodeError']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/ttLib/tables/O_S_2f_2.py,OS2TableTest,test_setUnicodeRanges,"(ul1, ul2) = (self.ulUnicodeRange1, self.ulUnicodeRange2)","
ul1 = self.ulUnicodeRange1
ul2 = self.ulUnicodeRange2
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/O_S_2f_2_test.py', 'Tests.ttLib.tables.O_S_2f_2_test', 'OS2TableTest', 'test_getUnicodeRanges'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/O_S_2f_2_test.py', 'Tests.ttLib.tables.O_S_2f_2_test', 'OS2TableTest', 'test_setUnicodeRanges']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/ttLib/tables/O_S_2f_2.py,OS2TableTest,test_setUnicodeRanges,"(ul3, ul4) = (self.ulUnicodeRange3, self.ulUnicodeRange4)","
ul3 = self.ulUnicodeRange3
ul4 = self.ulUnicodeRange4
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/O_S_2f_2_test.py', 'Tests.ttLib.tables.O_S_2f_2_test', 'OS2TableTest', 'test_getUnicodeRanges'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/O_S_2f_2_test.py', 'Tests.ttLib.tables.O_S_2f_2_test', 'OS2TableTest', 'test_setUnicodeRanges']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/ttLib/tables/TupleVariation.py,TupleVariationTest,test_inferRegion,"(start, end) = ({}, {})","
start = {}
end = {}
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/TupleVariation_test.py', 'Tests.ttLib.tables.TupleVariation_test', 'TupleVariationTest', 'test_inferRegion']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/ttLib/tables/_a_v_a_r.py,AxisVariationTableTest,test_decompile,segments = self.segments[axis] = {},"
tmp_value = {}
segments = tmp_value
self.segments[axis] = tmp_value
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/_a_v_a_r_test.py', 'Tests.ttLib.tables._a_v_a_r_test', 'AxisVariationTableTest', 'test_decompile']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/ttLib/tables/_a_v_a_r.py,AxisVariationTableTest,test_decompile,"(fromValue, toValue) = struct.unpack('>hh', data[pos:pos + 4])","
tmp_fun_0 = struct.unpack('>hh', data[pos:pos + 4])
fromValue = tmp_fun_0[0]
toValue = tmp_fun_0[1]
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/_a_v_a_r_test.py', 'Tests.ttLib.tables._a_v_a_r_test', 'AxisVariationTableTest', 'test_decompile']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/varLib/mutator.py,MutatorTest,test_varlib_mutator_CFF2,"(coordinates, _) = glyf._getCoordinatesAndControls(glyphname, hMetrics, vMetrics)","
tmp_fun_0 = glyf._getCoordinatesAndControls(glyphname, hMetrics, vMetrics)
coordinates = tmp_fun_0[0]
_ = tmp_fun_0[1]
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/varLib_test.py', 'Tests.varLib.varLib_test', 'BuildTest', 'test_kerning_merging'], ['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/mutator_test.py', 'Tests.varLib.mutator_test', 'MutatorTest', 'test_varlib_mutator_CFF2']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/varLib/mutator.py,MutatorTest,test_varlib_mutator_CFF2,"(origCoords, endPts) = (None, None)","
origCoords = None
endPts = None
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/varLib_test.py', 'Tests.varLib.varLib_test', 'BuildTest', 'test_kerning_merging'], ['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/mutator_test.py', 'Tests.varLib.mutator_test', 'MutatorTest', 'test_varlib_mutator_CFF2']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/varLib/mutator.py,MutatorTest,test_varlib_mutator_CFF2,"(tableTag, itemName) = MVAR_ENTRIES[mvarTag]","
tableTag = MVAR_ENTRIES[mvarTag][0]
itemName = MVAR_ENTRIES[mvarTag][1]
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/varLib_test.py', 'Tests.varLib.varLib_test', 'BuildTest', 'test_kerning_merging'], ['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/mutator_test.py', 'Tests.varLib.mutator_test', 'MutatorTest', 'test_varlib_mutator_CFF2']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/varLib/mutator.py,MutatorTest,test_varlib_mutator_CFF2,"(origCoords, g) = glyf._getCoordinatesAndControls(glyphname, hMetrics, vMetrics)","
tmp_fun_0 = glyf._getCoordinatesAndControls(glyphname, hMetrics, vMetrics)
origCoords = tmp_fun_0[0]
g = tmp_fun_0[1]
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/varLib_test.py', 'Tests.varLib.varLib_test', 'BuildTest', 'test_kerning_merging'], ['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/mutator_test.py', 'Tests.varLib.mutator_test', 'MutatorTest', 'test_varlib_mutator_CFF2']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/varLib/builder.py,TupleVarStoreAdapterTest,test_roundtrip,regionCount = self.VarRegionCount = len(self.VarRegionIndex),"
tmp_value = len(self.VarRegionIndex)
regionCount = tmp_value
self.VarRegionCount = tmp_value
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/instancer/instancer_test.py', 'Tests.varLib.instancer.instancer_test', 'TupleVarStoreAdapterTest', 'test_roundtrip']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/varLib/builder.py,TupleVarStoreAdapterTest,test_roundtrip,records = self.Item = [],"
tmp_value = []
records = tmp_value
self.Item = tmp_value
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/varLib/instancer/instancer_test.py', 'Tests.varLib.instancer.instancer_test', 'TupleVarStoreAdapterTest', 'test_roundtrip']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/cffLib/specializer.py,CFF2VFTestSpecialize,test_blend_round_trip,"(op, args) = commands[i]","
op = commands[i][0]
args = commands[i][1]
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/cffLib/specializer_test.py', 'Tests.cffLib.specializer_test', 'CFF2VFTestSpecialize', 'test_blend_round_trip']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/cffLib/specializer.py,CFF2VFTestSpecialize,test_blend_round_trip,"(op, args) = commands[i]","
op = commands[i][0]
args = commands[i][1]
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/cffLib/specializer_test.py', 'Tests.cffLib.specializer_test', 'CFF2VFTestSpecialize', 'test_blend_round_trip']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/cffLib/specializer.py,CFF2VFTestSpecialize,test_blend_round_trip,"(prv, nxt) = (commands[i - 1][0], commands[i + 1][0])","
prv = commands[i - 1][0]
nxt = commands[i + 1][0]
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/cffLib/specializer_test.py', 'Tests.cffLib.specializer_test', 'CFF2VFTestSpecialize', 'test_blend_round_trip']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/cffLib/specializer.py,CFF2VFTestSpecialize,test_blend_round_trip,"(op1, args1) = commands[i - 1]","
op1 = commands[i - 1][0]
args1 = commands[i - 1][1]
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/cffLib/specializer_test.py', 'Tests.cffLib.specializer_test', 'CFF2VFTestSpecialize', 'test_blend_round_trip']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/cffLib/specializer.py,CFF2VFTestSpecialize,test_blend_round_trip,"(op2, args2) = commands[i]","
op2 = commands[i][0]
args2 = commands[i][1]
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/cffLib/specializer_test.py', 'Tests.cffLib.specializer_test', 'CFF2VFTestSpecialize', 'test_blend_round_trip']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/cffLib/specializer.py,CFF2VFTestSpecialize,test_blend_round_trip,"(op, args) = commands[i]","
op = commands[i][0]
args = commands[i][1]
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/cffLib/specializer_test.py', 'Tests.cffLib.specializer_test', 'CFF2VFTestSpecialize', 'test_blend_round_trip']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/cffLib/specializer.py,CFF2VFTestSpecialize,test_blend_round_trip,"(op, args) = commands[i]","
op = commands[i][0]
args = commands[i][1]
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/cffLib/specializer_test.py', 'Tests.cffLib.specializer_test', 'CFF2VFTestSpecialize', 'test_blend_round_trip']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/cffLib/specializer.py,CFF2VFTestSpecialize,test_blend_round_trip,"(v1, v2) = (commands[i - 1][1], commands[i][1])","
v1 = commands[i - 1][1]
v2 = commands[i][1]
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/cffLib/specializer_test.py', 'Tests.cffLib.specializer_test', 'CFF2VFTestSpecialize', 'test_blend_round_trip']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/cffLib/specializer.py,CFF2VFTestSpecialize,test_blend_round_trip,"(c, args) = _categorizeVector(args)","
tmp_fun_0 = _categorizeVector(args)
c = tmp_fun_0[0]
args = tmp_fun_0[1]
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/cffLib/specializer_test.py', 'Tests.cffLib.specializer_test', 'CFF2VFTestSpecialize', 'test_blend_round_trip']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/cffLib/specializer.py,CFF2VFTestSpecialize,test_blend_round_trip,"(c1, args1) = _categorizeVector(args[:2])","
tmp_fun_0 = _categorizeVector(args[:2])
c1 = tmp_fun_0[0]
args1 = tmp_fun_0[1]
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/cffLib/specializer_test.py', 'Tests.cffLib.specializer_test', 'CFF2VFTestSpecialize', 'test_blend_round_trip']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/cffLib/specializer.py,CFF2VFTestSpecialize,test_blend_round_trip,"(c2, args2) = _categorizeVector(args[-2:])","
tmp_fun_0 = _categorizeVector(args[-2:])
c2 = tmp_fun_0[0]
args2 = tmp_fun_0[1]
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/cffLib/specializer_test.py', 'Tests.cffLib.specializer_test', 'CFF2VFTestSpecialize', 'test_blend_round_trip']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/cffLib/specializer.py,CFF2VFTestSpecialize,test_blend_round_trip,"(op, args) = commands[i]","
op = commands[i][0]
args = commands[i][1]
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/cffLib/specializer_test.py', 'Tests.cffLib.specializer_test', 'CFF2VFTestSpecialize', 'test_blend_round_trip']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/cffLib/specializer.py,CFF2VFTestSpecialize,test_blend_round_trip,"(op0, op1) = op[:2]","
op0 = op[:2][0]
op1 = op[:2][1]
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/cffLib/specializer_test.py', 'Tests.cffLib.specializer_test', 'CFF2VFTestSpecialize', 'test_blend_round_trip']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/cffLib/specializer.py,CFF2VFTestSpecialize,test_blend_round_trip,"(c, args) = _categorizeVector(args[1:3])","
tmp_fun_0 = _categorizeVector(args[1:3])
c = tmp_fun_0[0]
args = tmp_fun_0[1]
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/cffLib/specializer_test.py', 'Tests.cffLib.specializer_test', 'CFF2VFTestSpecialize', 'test_blend_round_trip']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/cffLib/specializer.py,CFF2VFTestSpecialize,test_blend_round_trip,"(_, other_args) = commands[i - 1]","
_ = commands[i - 1][0]
other_args = commands[i - 1][1]
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/cffLib/specializer_test.py', 'Tests.cffLib.specializer_test', 'CFF2VFTestSpecialize', 'test_blend_round_trip']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/cffLib/specializer.py,CFF2VFTestSpecialize,test_blend_round_trip,"(d0, d1) = op1[:2]","
d0 = op1[:2][0]
d1 = op1[:2][1]
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/cffLib/specializer_test.py', 'Tests.cffLib.specializer_test', 'CFF2VFTestSpecialize', 'test_blend_round_trip']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Lib/fontTools/cffLib/specializer.py,CFF2VFTestSpecialize,test_blend_round_trip,"(d2, d3) = op2[:2]","
d2 = op2[:2][0]
d3 = op2[:2][1]
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/cffLib/specializer_test.py', 'Tests.cffLib.specializer_test', 'CFF2VFTestSpecialize', 'test_blend_round_trip']]"
fonttools,https://github.com/fonttools/fonttools/tree/master/Snippets/interpolate.py,AxisTest,test_toXML,"(namerec.platformID, namerec.platEncID, namerec.langID) = (1, 0, 0)","
namerec.platformID = 1
namerec.platEncID = 0
namerec.langID = 0
",1,"[['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/_f_v_a_r_test.py', 'Tests.ttLib.tables._f_v_a_r_test', 'NamedInstanceTest', 'test_toXML_withPostScriptName'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/_f_v_a_r_test.py', 'Tests.ttLib.tables._f_v_a_r_test', 'NamedInstanceTest', 'test_toXML_withoutPostScriptName'], ['https://github.com/fonttools/fonttools/tree/master/Tests/ttLib/tables/_f_v_a_r_test.py', 'Tests.ttLib.tables._f_v_a_r_test', 'AxisTest', 'test_toXML']]"
asciimatics,https://github.com/peterbrittain/asciimatics/tree/master/asciimatics/parsers.py,TestParsers,test_ansi_terminal_parser_clear,"(new_offset, results) = _handle_escape(self._state)","
tmp_fun_0 = _handle_escape(self._state)
new_offset = tmp_fun_0[0]
results = tmp_fun_0[1]
",1,"[['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_parsers.py', 'tests.test_parsers', 'TestParsers', 'test_ansi_terminal_parser_delete'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_parsers.py', 'tests.test_parsers', 'TestParsers', 'test_ansi_terminal_parser_def_colours'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_parsers.py', 'tests.test_parsers', 'TestParsers', 'test_ansi_terminal_parser_palette'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_parsers.py', 'tests.test_parsers', 'TestParsers', 'test_ansi_terminal_parser_os_cmd'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_parsers.py', 'tests.test_parsers', 'TestParsers', 'test_ansi_terminal_parser_colours'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_parsers.py', 'tests.test_parsers', 'TestParsers', 'test_ansi_terminal_parser_cursor'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_parsers.py', 'tests.test_parsers', 'TestParsers', 'test_controlcode_parser'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_parsers.py', 'tests.test_parsers', 'TestParsers', 'test_asciimatics_parser'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_parsers.py', 'tests.test_parsers', 'TestParsers', 'test_ansi_terminal_parser_errors'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_parsers.py', 'tests.test_parsers', 'TestParsers', 'test_ansi_terminal_parser_tab'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_parsers.py', 'tests.test_parsers', 'TestParsers', 'test_ansi_terminal_parser_bell'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_parsers.py', 'tests.test_parsers', 'TestParsers', 'test_ansi_terminal_parser_clear']]"
asciimatics,https://github.com/peterbrittain/asciimatics/tree/master/asciimatics/parsers.py,TestParsers,test_ansi_terminal_parser_clear,"(x, y) = (0, 0)","
x = 0
y = 0
",1,"[['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_parsers.py', 'tests.test_parsers', 'TestParsers', 'test_ansi_terminal_parser_delete'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_parsers.py', 'tests.test_parsers', 'TestParsers', 'test_ansi_terminal_parser_def_colours'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_parsers.py', 'tests.test_parsers', 'TestParsers', 'test_ansi_terminal_parser_palette'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_parsers.py', 'tests.test_parsers', 'TestParsers', 'test_ansi_terminal_parser_os_cmd'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_parsers.py', 'tests.test_parsers', 'TestParsers', 'test_ansi_terminal_parser_colours'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_parsers.py', 'tests.test_parsers', 'TestParsers', 'test_ansi_terminal_parser_cursor'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_parsers.py', 'tests.test_parsers', 'TestParsers', 'test_controlcode_parser'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_parsers.py', 'tests.test_parsers', 'TestParsers', 'test_asciimatics_parser'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_parsers.py', 'tests.test_parsers', 'TestParsers', 'test_ansi_terminal_parser_errors'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_parsers.py', 'tests.test_parsers', 'TestParsers', 'test_ansi_terminal_parser_tab'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_parsers.py', 'tests.test_parsers', 'TestParsers', 'test_ansi_terminal_parser_bell'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_parsers.py', 'tests.test_parsers', 'TestParsers', 'test_ansi_terminal_parser_clear']]"
asciimatics,https://github.com/peterbrittain/asciimatics/tree/master/asciimatics/widgets/frame.py,TestWidgets,test_multi_column_list_box,fill_height = y = 0,"
tmp_value = 0
fill_height = tmp_value
y = tmp_value
",1,"[['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_dropdown_list_options'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_divider'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_label_alignment'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_load_callback'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_max_len'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_focus_callback'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_layout_disable'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_value_defaults'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_password'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_widget_labels'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_readonly'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_dropdown_list'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_cjk_forms'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_disabled_text'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_inline_colours'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_change_values'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_multi_column_list_box_scrollbar'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_textbox_hide_cursor'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_multi_column_list_box_delimiter'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_textbox_autoscroll'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_clear_widgets'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_vertical_divider'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_list_box_scrollbar'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_line_flow'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_label_colours'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_multi_column_list_box']]"
asciimatics,https://github.com/peterbrittain/asciimatics/tree/master/asciimatics/widgets/frame.py,TestWidgets,test_multi_column_list_box,"(x, y, height, width) = self._border_mgr.get_rectangle()","
tmp_fun_0 = self._border_mgr.get_rectangle()
x = tmp_fun_0[0]
y = tmp_fun_0[1]
height = tmp_fun_0[2]
width = tmp_fun_0[3]
",1,"[['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_dropdown_list_options'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_divider'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_label_alignment'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_load_callback'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_max_len'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_focus_callback'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_layout_disable'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_value_defaults'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_password'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_widget_labels'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_readonly'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_dropdown_list'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_cjk_forms'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_disabled_text'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_inline_colours'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_change_values'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_multi_column_list_box_scrollbar'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_textbox_hide_cursor'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_multi_column_list_box_delimiter'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_textbox_autoscroll'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_clear_widgets'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_vertical_divider'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_list_box_scrollbar'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_line_flow'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_label_colours'], ['https://github.com/peterbrittain/asciimatics/tree/master/tests/test_widgets.py', 'tests.test_widgets', 'TestWidgets', 'test_multi_column_list_box']]"
neat-python,https://github.com/CodeReclaimers/neat-python/tree/master/neat/distributed.py,,test_DistributedEvaluator_primary_restrictions,self.inqueue = self.outqueue = self.namespace = None,"
tmp_value = None
self.inqueue = tmp_value
self.outqueue = tmp_value
self.namespace = tmp_value
",1,"[['https://github.com/CodeReclaimers/neat-python/tree/master/tests/test_distributed.py', 'tests.test_distributed', '', 'test_DistributedEvaluator_primary_restrictions']]"
kazoo,https://github.com/python-zk/kazoo/tree/master/kazoo/hosts.py,HostsTestCase,test_hosts_list,"(host_ports, chroot) = hosts.partition('/')[::2]","
tmp_fun_0 = hosts.partition('/')[::2]
host_ports = tmp_fun_0[0]
chroot = tmp_fun_0[1]
",1,"[['https://github.com/python-zk/kazoo/tree/master/kazoo/tests/test_hosts.py', 'kazoo.tests.test_hosts', 'HostsTestCase', 'test_ipv6'], ['https://github.com/python-zk/kazoo/tree/master/kazoo/tests/test_hosts.py', 'kazoo.tests.test_hosts', 'HostsTestCase', 'test_ipv4'], ['https://github.com/python-zk/kazoo/tree/master/kazoo/tests/test_hosts.py', 'kazoo.tests.test_hosts', 'HostsTestCase', 'test_hosts_list']]"
kazoo,https://github.com/python-zk/kazoo/tree/master/kazoo/hosts.py,HostsTestCase,test_hosts_list,"(host_ports, chroot) = (hosts[:-1], hosts[-1])","
host_ports = hosts[:-1]
chroot = hosts[-1]
",1,"[['https://github.com/python-zk/kazoo/tree/master/kazoo/tests/test_hosts.py', 'kazoo.tests.test_hosts', 'HostsTestCase', 'test_ipv6'], ['https://github.com/python-zk/kazoo/tree/master/kazoo/tests/test_hosts.py', 'kazoo.tests.test_hosts', 'HostsTestCase', 'test_ipv4'], ['https://github.com/python-zk/kazoo/tree/master/kazoo/tests/test_hosts.py', 'kazoo.tests.test_hosts', 'HostsTestCase', 'test_hosts_list']]"
kazoo,https://github.com/python-zk/kazoo/tree/master/kazoo/hosts.py,HostsTestCase,test_hosts_list,"(host_ports, chroot) = (hosts, None)","
host_ports = hosts
chroot = None
",1,"[['https://github.com/python-zk/kazoo/tree/master/kazoo/tests/test_hosts.py', 'kazoo.tests.test_hosts', 'HostsTestCase', 'test_ipv6'], ['https://github.com/python-zk/kazoo/tree/master/kazoo/tests/test_hosts.py', 'kazoo.tests.test_hosts', 'HostsTestCase', 'test_ipv4'], ['https://github.com/python-zk/kazoo/tree/master/kazoo/tests/test_hosts.py', 'kazoo.tests.test_hosts', 'HostsTestCase', 'test_hosts_list']]"
youtube-dl,https://github.com/lrvick/youtube-dl/tree/master/youtube_dl/utils.py,TestUtil,test_parse_codecs,"(vcodec, acodec) = (None, None)","
vcodec = None
acodec = None
",1,"[['https://github.com/lrvick/youtube-dl/tree/master/test/test_utils.py', 'test.test_utils', 'TestUtil', 'test_parse_codecs']]"
pint,https://github.com/hgrecco/pint/tree/master/pint/formatting.py,TestFormatter,test_formatter,"(pos_terms, neg_terms) = ([], [])","
pos_terms = []
neg_terms = []
",1,"[['https://github.com/hgrecco/pint/tree/master/pint/testsuite/test_formatter.py', 'pint.testsuite.test_formatter', 'TestFormatter', 'test_formatter']]"
qark,https://github.com/linkedin/qark/tree/master/qark/scanner/plugin.py,,test_android_path,cls.min_sdk = cls.target_sdk = 1,"
tmp_value = 1
cls.min_sdk = tmp_value
cls.target_sdk = tmp_value
",1,"[['https://github.com/linkedin/qark/tree/master/tests/test_plugins/test_manifest_plugins/test_manifest_plugins.py', 'tests.test_plugins.test_manifest_plugins.test_manifest_plugins', '', 'test_task_reparenting'], ['https://github.com/linkedin/qark/tree/master/tests/test_plugins/test_manifest_plugins/test_manifest_plugins.py', 'tests.test_plugins.test_manifest_plugins.test_manifest_plugins', '', 'test_api_keys'], ['https://github.com/linkedin/qark/tree/master/tests/test_plugins/test_manifest_plugins/test_manifest_plugins.py', 'tests.test_plugins.test_manifest_plugins.test_manifest_plugins', '', 'test_single_task_launch_mode'], ['https://github.com/linkedin/qark/tree/master/tests/test_plugins/test_manifest_plugins/test_manifest_plugins.py', 'tests.test_plugins.test_manifest_plugins.test_manifest_plugins', '', 'test_vulnerable_exported_tags'], ['https://github.com/linkedin/qark/tree/master/tests/test_plugins/test_manifest_plugins/test_manifest_plugins.py', 'tests.test_plugins.test_manifest_plugins.test_manifest_plugins', '', 'test_android_path']]"
pyowm,https://github.com/csparpa/pyowm/tree/master/pyowm/utils/strings.py,TestStringUtils,test_class_from_dotted_path,"(modpath, class_name) = ('.'.join(tokens[:-1]), tokens[-1])","
modpath = '.'.join(tokens[:-1])
class_name = tokens[-1]
",1,"[['https://github.com/csparpa/pyowm/tree/master/tests/unit/utils/test_strings.py', 'tests.unit.utils.test_strings', 'TestStringUtils', 'test_class_from_dotted_path']]"
Minecraft-Overviewer,https://github.com/overviewer/Minecraft-Overviewer/tree/master/contrib/contributors.py,TestContributors,test_get_new_contributors_new_email,"(name, email) = (contributor['name'], contributor['email'])","
name = contributor['name']
email = contributor['email']
",1,"[['https://github.com/overviewer/Minecraft-Overviewer/tree/master/test/test_contributors.py', 'test.test_contributors', 'TestContributors', 'test_get_new_contributors_new_alias'], ['https://github.com/overviewer/Minecraft-Overviewer/tree/master/test/test_contributors.py', 'test.test_contributors', 'TestContributors', 'test_get_new_contributors_new_contributors_alphabetical_order'], ['https://github.com/overviewer/Minecraft-Overviewer/tree/master/test/test_contributors.py', 'test.test_contributors', 'TestContributors', 'test_get_new_contributors_new_email']]"
Minecraft-Overviewer,https://github.com/overviewer/Minecraft-Overviewer/tree/master/contrib/contributors.py,TestContributors,test_get_new_contributors_new_email,"(existing_name, existing_email) = (old_email_names.get(email), old_name_emails.get(name))","
existing_name = old_email_names.get(email)
existing_email = old_name_emails.get(name)
",1,"[['https://github.com/overviewer/Minecraft-Overviewer/tree/master/test/test_contributors.py', 'test.test_contributors', 'TestContributors', 'test_get_new_contributors_new_alias'], ['https://github.com/overviewer/Minecraft-Overviewer/tree/master/test/test_contributors.py', 'test.test_contributors', 'TestContributors', 'test_get_new_contributors_new_contributors_alphabetical_order'], ['https://github.com/overviewer/Minecraft-Overviewer/tree/master/test/test_contributors.py', 'test.test_contributors', 'TestContributors', 'test_get_new_contributors_new_email']]"
PyCNC,https://github.com/Nikolay-Kha/PyCNC/tree/master/cnc/hal_virtual.py,TestPulses,test_with_hal_virtual,ix = iy = iz = ie = 0,"
tmp_value = 0
ix = tmp_value
iy = tmp_value
iz = tmp_value
ie = tmp_value
",1,"[['https://github.com/Nikolay-Kha/PyCNC/tree/master/tests/test_pulses.py', 'tests.test_pulses', 'TestPulses', 'test_with_hal_virtual']]"
PyCNC,https://github.com/Nikolay-Kha/PyCNC/tree/master/cnc/hal_virtual.py,TestPulses,test_with_hal_virtual,"(lx, ly, lz, le) = (None, None, None, None)","
lx = None
ly = None
lz = None
le = None
",1,"[['https://github.com/Nikolay-Kha/PyCNC/tree/master/tests/test_pulses.py', 'tests.test_pulses', 'TestPulses', 'test_with_hal_virtual']]"
PyCNC,https://github.com/Nikolay-Kha/PyCNC/tree/master/cnc/hal_virtual.py,TestPulses,test_with_hal_virtual,"(dx, dy, dz, de) = (0, 0, 0, 0)","
dx = 0
dy = 0
dz = 0
de = 0
",1,"[['https://github.com/Nikolay-Kha/PyCNC/tree/master/tests/test_pulses.py', 'tests.test_pulses', 'TestPulses', 'test_with_hal_virtual']]"
PyCNC,https://github.com/Nikolay-Kha/PyCNC/tree/master/cnc/hal_virtual.py,TestPulses,test_with_hal_virtual,"(mx, my, mz, me) = (0, 0, 0, 0)","
mx = 0
my = 0
mz = 0
me = 0
",1,"[['https://github.com/Nikolay-Kha/PyCNC/tree/master/tests/test_pulses.py', 'tests.test_pulses', 'TestPulses', 'test_with_hal_virtual']]"
PyCNC,https://github.com/Nikolay-Kha/PyCNC/tree/master/cnc/hal_virtual.py,TestPulses,test_with_hal_virtual,"(cx, cy, cz, ce) = (0, 0, 0, 0)","
cx = 0
cy = 0
cz = 0
ce = 0
",1,"[['https://github.com/Nikolay-Kha/PyCNC/tree/master/tests/test_pulses.py', 'tests.test_pulses', 'TestPulses', 'test_with_hal_virtual']]"
PyCNC,https://github.com/Nikolay-Kha/PyCNC/tree/master/cnc/hal_virtual.py,TestPulses,test_with_hal_virtual,"(direction_x, direction_y, direction_z, direction_e) = (1, 1, 1, 1)","
direction_x = 1
direction_y = 1
direction_z = 1
direction_e = 1
",1,"[['https://github.com/Nikolay-Kha/PyCNC/tree/master/tests/test_pulses.py', 'tests.test_pulses', 'TestPulses', 'test_with_hal_virtual']]"
PyCNC,https://github.com/Nikolay-Kha/PyCNC/tree/master/cnc/hal_virtual.py,TestPulses,test_with_hal_virtual,"(direction_x, direction_y, direction_z, direction_e) = (tx, ty, tz, te)","
direction_x = tx
direction_y = ty
direction_z = tz
direction_e = te
",1,"[['https://github.com/Nikolay-Kha/PyCNC/tree/master/tests/test_pulses.py', 'tests.test_pulses', 'TestPulses', 'test_with_hal_virtual']]"
pluggy,https://github.com/pytest-dev/pluggy/tree/master/src/pluggy/_manager.py,,test_warn_when_deprecated_specified,self._plugin2hookcallers[plugin] = hookcallers = [],"
tmp_value = []
self._plugin2hookcallers[plugin] = tmp_value
hookcallers = tmp_value
",1,"[['https://github.com/pytest-dev/pluggy/tree/master/testing/test_details.py', 'testing.test_details', '', 'test_warning_on_call_vs_hookspec_arg_mismatch'], ['https://github.com/pytest-dev/pluggy/tree/master/testing/test_details.py', 'testing.test_details', '', 'test_repr'], ['https://github.com/pytest-dev/pluggy/tree/master/testing/test_details.py', 'testing.test_details', '', 'test_parse_hookimpl_override'], ['https://github.com/pytest-dev/pluggy/tree/master/testing/test_details.py', 'testing.test_details', '', 'test_plugin_getattr_raises_errors'], ['https://github.com/pytest-dev/pluggy/tree/master/testing/test_details.py', 'testing.test_details', '', 'test_warn_when_deprecated_specified']]"
pluggy,https://github.com/pytest-dev/pluggy/tree/master/src/pluggy/_hooks.py,,test_varnames_keyword_only,"(args, defaults) = (tuple(spec.args), spec.defaults)","
args = tuple(spec.args)
defaults = spec.defaults
",1,"[['https://github.com/pytest-dev/pluggy/tree/master/testing/test_helpers.py', 'testing.test_helpers', '', 'test_varnames'], ['https://github.com/pytest-dev/pluggy/tree/master/testing/test_helpers.py', 'testing.test_helpers', '', 'test_varnames_class'], ['https://github.com/pytest-dev/pluggy/tree/master/testing/test_helpers.py', 'testing.test_helpers', '', 'test_varnames_default'], ['https://github.com/pytest-dev/pluggy/tree/master/testing/test_helpers.py', 'testing.test_helpers', '', 'test_varnames_keyword_only']]"
pluggy,https://github.com/pytest-dev/pluggy/tree/master/src/pluggy/_hooks.py,,test_varnames_keyword_only,"(args, kwargs) = (args[:index], tuple(args[index:]))","
tmp0 = tuple(args[index:])
args = args[:index]
kwargs = tmp0
",1,"[['https://github.com/pytest-dev/pluggy/tree/master/testing/test_helpers.py', 'testing.test_helpers', '', 'test_varnames'], ['https://github.com/pytest-dev/pluggy/tree/master/testing/test_helpers.py', 'testing.test_helpers', '', 'test_varnames_class'], ['https://github.com/pytest-dev/pluggy/tree/master/testing/test_helpers.py', 'testing.test_helpers', '', 'test_varnames_default'], ['https://github.com/pytest-dev/pluggy/tree/master/testing/test_helpers.py', 'testing.test_helpers', '', 'test_varnames_keyword_only']]"
skll,https://github.com/EducationalTestingService/skll/tree/master/tests/utils.py,,test_learning_curve_min_examples_check_override,"(X, y) = make_classification(n_samples=num_examples, n_features=num_numeric_features, n_informative=num_numeric_features, n_redundant=0, n_classes=num_labels, weights=class_weights, random_state=random_state)","
tmp_fun_0 = make_classification(n_samples=num_examples, n_features=num_numeric_features, n_informative=num_numeric_features, n_redundant=0, n_classes=num_labels, weights=class_weights, random_state=random_state)
X = tmp_fun_0[0]
y = tmp_fun_0[1]
",1,"[['https://github.com/EducationalTestingService/skll/tree/master/tests/test_voting_learners_api_4.py', 'tests.test_voting_learners_api_4', '', 'test_cross_validate_with_continuous_labels'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_length'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_sampling_for_multinomialNB'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_skll_convert_libsvm_map'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_string_feature'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_learner.py', 'tests.test_custom_learner', '', 'test_custom_learner_model_loading'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_learner.py', 'tests.test_custom_learner', '', 'test_majority_class_custom_learner'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_multi_class'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_merge_different_hashers'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_predict_labels_not_trained_with_probability'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_mutually_exclusive_generate_predictions_args'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_hashing_for_multinomialNB'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_merge_different_labels_same_ids'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_multinomialnb_loading'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_console_bad_input_ext'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_mlp_classification'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_empty_labels'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_metrics.py', 'tests.test_custom_metrics', '', 'test_api_with_custom_prob_metric'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_learner_api_load_into_existing_instance'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_label_index_order'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_iteration_without_dictvectorizer'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_output.py', 'tests.test_output', '', 'test_learning_curve_min_examples_check'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_learner.py', 'tests.test_custom_learner', '', 'test_logistic_custom_learner'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_voting_learners_api_4.py', 'tests.test_voting_learners_api_4', '', 'test_cross_validate_grid_search_but_no_objective'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_subtract'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_not_trained_with_probability'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_filter_with_hashing'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_predict_labels_non_probabilistic'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_merge_different_vectorizers'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_equality'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_merge_missing_labels'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_metrics.py', 'tests.test_custom_metrics', '', 'test_api_with_inverted_custom_metric'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_non_probabilistic'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_write_hashed_featureset'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_output.py', 'tests.test_output', '', 'test_learning_curve_min_examples_check_override']]"
skll,https://github.com/EducationalTestingService/skll/tree/master/tests/utils.py,,test_learning_curve_min_examples_check_override,"(train_y, test_y) = (y[:num_train_examples], y[num_train_examples:])","
train_y = y[:num_train_examples]
test_y = y[num_train_examples:]
",1,"[['https://github.com/EducationalTestingService/skll/tree/master/tests/test_voting_learners_api_4.py', 'tests.test_voting_learners_api_4', '', 'test_cross_validate_with_continuous_labels'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_length'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_sampling_for_multinomialNB'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_skll_convert_libsvm_map'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_string_feature'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_learner.py', 'tests.test_custom_learner', '', 'test_custom_learner_model_loading'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_learner.py', 'tests.test_custom_learner', '', 'test_majority_class_custom_learner'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_multi_class'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_merge_different_hashers'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_predict_labels_not_trained_with_probability'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_mutually_exclusive_generate_predictions_args'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_hashing_for_multinomialNB'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_merge_different_labels_same_ids'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_multinomialnb_loading'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_console_bad_input_ext'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_mlp_classification'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_empty_labels'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_metrics.py', 'tests.test_custom_metrics', '', 'test_api_with_custom_prob_metric'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_learner_api_load_into_existing_instance'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_label_index_order'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_iteration_without_dictvectorizer'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_output.py', 'tests.test_output', '', 'test_learning_curve_min_examples_check'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_learner.py', 'tests.test_custom_learner', '', 'test_logistic_custom_learner'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_voting_learners_api_4.py', 'tests.test_voting_learners_api_4', '', 'test_cross_validate_grid_search_but_no_objective'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_subtract'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_not_trained_with_probability'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_filter_with_hashing'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_predict_labels_non_probabilistic'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_merge_different_vectorizers'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_equality'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_merge_missing_labels'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_metrics.py', 'tests.test_custom_metrics', '', 'test_api_with_inverted_custom_metric'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_non_probabilistic'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_write_hashed_featureset'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_output.py', 'tests.test_output', '', 'test_learning_curve_min_examples_check_override']]"
skll,https://github.com/EducationalTestingService/skll/tree/master/tests/utils.py,,test_learning_curve_min_examples_check_override,"(train_ids, test_ids) = (ids[:num_train_examples], ids[num_train_examples:])","
train_ids = ids[:num_train_examples]
test_ids = ids[num_train_examples:]
",1,"[['https://github.com/EducationalTestingService/skll/tree/master/tests/test_voting_learners_api_4.py', 'tests.test_voting_learners_api_4', '', 'test_cross_validate_with_continuous_labels'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_length'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_sampling_for_multinomialNB'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_skll_convert_libsvm_map'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_string_feature'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_learner.py', 'tests.test_custom_learner', '', 'test_custom_learner_model_loading'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_learner.py', 'tests.test_custom_learner', '', 'test_majority_class_custom_learner'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_multi_class'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_merge_different_hashers'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_predict_labels_not_trained_with_probability'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_mutually_exclusive_generate_predictions_args'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_hashing_for_multinomialNB'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_merge_different_labels_same_ids'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_multinomialnb_loading'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_console_bad_input_ext'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_mlp_classification'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_empty_labels'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_metrics.py', 'tests.test_custom_metrics', '', 'test_api_with_custom_prob_metric'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_learner_api_load_into_existing_instance'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_classification.py', 'tests.test_classification', '', 'test_label_index_order'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_iteration_without_dictvectorizer'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_output.py', 'tests.test_output', '', 'test_learning_curve_min_examples_check'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_learner.py', 'tests.test_custom_learner', '', 'test_logistic_custom_learner'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_voting_learners_api_4.py', 'tests.test_voting_learners_api_4', '', 'test_cross_validate_grid_search_but_no_objective'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_subtract'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_not_trained_with_probability'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_filter_with_hashing'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_predict_labels_non_probabilistic'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_merge_different_vectorizers'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_equality'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_merge_missing_labels'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_custom_metrics.py', 'tests.test_custom_metrics', '', 'test_api_with_inverted_custom_metric'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_generate_predictions_threshold_non_probabilistic'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_write_hashed_featureset'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_output.py', 'tests.test_output', '', 'test_learning_curve_min_examples_check_override']]"
skll,https://github.com/EducationalTestingService/skll/tree/master/tests/utils.py,,test_additional_metrics,"(X, y, weights) = make_regression(n_samples=num_examples, n_features=num_features, noise=sd_noise, random_state=random_state, coef=True)","
tmp_fun_0 = make_regression(n_samples=num_examples, n_features=num_features, noise=sd_noise, random_state=random_state, coef=True)
X = tmp_fun_0[0]
y = tmp_fun_0[1]
weights = tmp_fun_0[2]
",1,"[['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_feature_merging_order_invariance'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_regression.py', 'tests.test_regression', '', 'test_fancy_output'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_regression.py', 'tests.test_regression', '', 'test_additional_metrics']]"
skll,https://github.com/EducationalTestingService/skll/tree/master/tests/utils.py,,test_additional_metrics,"(train_features, test_features) = (features[:num_train_examples], features[num_train_examples:])","
train_features = features[:num_train_examples]
test_features = features[num_train_examples:]
",1,"[['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_feature_merging_order_invariance'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_regression.py', 'tests.test_regression', '', 'test_fancy_output'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_regression.py', 'tests.test_regression', '', 'test_additional_metrics']]"
skll,https://github.com/EducationalTestingService/skll/tree/master/tests/utils.py,,test_additional_metrics,"(train_y, test_y) = (y[:num_train_examples], y[num_train_examples:])","
train_y = y[:num_train_examples]
test_y = y[num_train_examples:]
",1,"[['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_feature_merging_order_invariance'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_regression.py', 'tests.test_regression', '', 'test_fancy_output'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_regression.py', 'tests.test_regression', '', 'test_additional_metrics']]"
skll,https://github.com/EducationalTestingService/skll/tree/master/tests/utils.py,,test_additional_metrics,"(train_ids, test_ids) = (ids[:num_train_examples], ids[num_train_examples:])","
train_ids = ids[:num_train_examples]
test_ids = ids[num_train_examples:]
",1,"[['https://github.com/EducationalTestingService/skll/tree/master/tests/test_featureset.py', 'tests.test_featureset', '', 'test_feature_merging_order_invariance'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_regression.py', 'tests.test_regression', '', 'test_fancy_output'], ['https://github.com/EducationalTestingService/skll/tree/master/tests/test_regression.py', 'tests.test_regression', '', 'test_additional_metrics']]"
skll,https://github.com/EducationalTestingService/skll/tree/master/skll/utils/commandline/skll_convert.py,,test_skll_convert_libsvm_map,"(_, label_map_str, feat_map_str) = comments.split('|')","
tmp_fun_0 = comments.split('|')
_ = tmp_fun_0[0]
label_map_str = tmp_fun_0[1]
feat_map_str = tmp_fun_0[2]
",1,"[['https://github.com/EducationalTestingService/skll/tree/master/tests/test_commandline_utils.py', 'tests.test_commandline_utils', '', 'test_skll_convert_libsvm_map']]"
picard,https://github.com/metabrainz/picard/tree/master/picard/mbjson.py,ArtistTranslationTest,test_locale_specific_match_second,"(transl, translsort) = (None, None)","
transl = None
translsort = None
",1,"[['https://github.com/metabrainz/picard/tree/master/test/test_mbjson.py', 'test.test_mbjson', 'ArtistTranslationTest', 'test_artist_no_match'], ['https://github.com/metabrainz/picard/tree/master/test/test_mbjson.py', 'test.test_mbjson', 'ArtistTranslationTest', 'test_locale_specific_match_first'], ['https://github.com/metabrainz/picard/tree/master/test/test_mbjson.py', 'test.test_mbjson', 'ArtistTranslationTest', 'test_artist_match_root_locale_fallback'], ['https://github.com/metabrainz/picard/tree/master/test/test_mbjson.py', 'test.test_mbjson', 'ArtistTranslationTest', 'test_locale_specific_match_second']]"
picard,https://github.com/metabrainz/picard/tree/master/picard/mbjson.py,ArtistTranslationTest,test_locale_specific_match_second,"(transl, translsort) = (node['name'], node['sort-name'])","
transl = node['name']
translsort = node['sort-name']
",1,"[['https://github.com/metabrainz/picard/tree/master/test/test_mbjson.py', 'test.test_mbjson', 'ArtistTranslationTest', 'test_artist_no_match'], ['https://github.com/metabrainz/picard/tree/master/test/test_mbjson.py', 'test.test_mbjson', 'ArtistTranslationTest', 'test_locale_specific_match_first'], ['https://github.com/metabrainz/picard/tree/master/test/test_mbjson.py', 'test.test_mbjson', 'ArtistTranslationTest', 'test_artist_match_root_locale_fallback'], ['https://github.com/metabrainz/picard/tree/master/test/test_mbjson.py', 'test.test_mbjson', 'ArtistTranslationTest', 'test_locale_specific_match_second']]"
picard,https://github.com/metabrainz/picard/tree/master/picard/i18n.py,Testbytes2human,test_00,os.environ['LANGUAGE'] = os.environ['LANG'] = current_locale,"
tmp_value = current_locale
os.environ['LANGUAGE'] = tmp_value
os.environ['LANG'] = tmp_value
",1,"[['https://github.com/metabrainz/picard/tree/master/test/test_bytes2human.py', 'test.test_bytes2human', 'Testbytes2human', 'test_00']]"
picard,https://github.com/metabrainz/picard/tree/master/picard/releasegroup.py,ReleaseTest,test_2,"(labels, catnums) = label_info_from_node(node['label-info'])","
tmp_fun_0 = label_info_from_node(node['label-info'])
labels = tmp_fun_0[0]
catnums = tmp_fun_0[1]
",1,"[['https://github.com/metabrainz/picard/tree/master/test/test_releaseversions.py', 'test.test_releaseversions', 'ReleaseTest', 'test_1'], ['https://github.com/metabrainz/picard/tree/master/test/test_releaseversions.py', 'test.test_releaseversions', 'ReleaseTest', 'test_3'], ['https://github.com/metabrainz/picard/tree/master/test/test_releaseversions.py', 'test.test_releaseversions', 'ReleaseTest', 'test_2']]"
picard,https://github.com/metabrainz/picard/tree/master/picard/releasegroup.py,ReleaseTest,test_2,"(value1, value2) = (a[key], b[key])","
value1 = a[key]
value2 = b[key]
",1,"[['https://github.com/metabrainz/picard/tree/master/test/test_releaseversions.py', 'test.test_releaseversions', 'ReleaseTest', 'test_1'], ['https://github.com/metabrainz/picard/tree/master/test/test_releaseversions.py', 'test.test_releaseversions', 'ReleaseTest', 'test_3'], ['https://github.com/metabrainz/picard/tree/master/test/test_releaseversions.py', 'test.test_releaseversions', 'ReleaseTest', 'test_2']]"
picard,https://github.com/metabrainz/picard/tree/master/picard/similarity.py,Similarity2Test,test_7,"(alist, blist) = (blist, alist)","
tmp0 = alist
alist = blist
blist = tmp0
",1,"[['https://github.com/metabrainz/picard/tree/master/test/test_similarity.py', 'test.test_similarity', 'Similarity2Test', 'test_1'], ['https://github.com/metabrainz/picard/tree/master/test/test_similarity.py', 'test.test_similarity', 'Similarity2Test', 'test_4'], ['https://github.com/metabrainz/picard/tree/master/test/test_similarity.py', 'test.test_similarity', 'Similarity2Test', 'test_6'], ['https://github.com/metabrainz/picard/tree/master/test/test_similarity.py', 'test.test_similarity', 'Similarity2Test', 'test_5'], ['https://github.com/metabrainz/picard/tree/master/test/test_similarity.py', 'test.test_similarity', 'Similarity2Test', 'test_2'], ['https://github.com/metabrainz/picard/tree/master/test/test_similarity.py', 'test.test_similarity', 'Similarity2Test', 'test_3'], ['https://github.com/metabrainz/picard/tree/master/test/test_similarity.py', 'test.test_similarity', 'Similarity2Test', 'test_7']]"
picard,https://github.com/metabrainz/picard/tree/master/picard/script/parser.py,ScriptParserTest,test_scriptfunction_unknown,self._px = self._x = 1,"
tmp_value = 1
self._px = tmp_value
self._x = tmp_value
",1,"[['https://github.com/metabrainz/picard/tree/master/test/test_script.py', 'test.test_script', 'ScriptParserTest', 'test_scriptfunction_unknown']]"
picard,https://github.com/metabrainz/picard/tree/master/picard/script/parser.py,ScriptParserTest,test_scriptfunction_unknown,self._py = self._y = 1,"
tmp_value = 1
self._py = tmp_value
self._y = tmp_value
",1,"[['https://github.com/metabrainz/picard/tree/master/test/test_script.py', 'test.test_script', 'ScriptParserTest', 'test_scriptfunction_unknown']]"
picard,https://github.com/metabrainz/picard/tree/master/picard/formats/asf.py,AsfUtilTest,test_unpack_image,"(type_, size) = struct.unpack_from('<bi', data)","
tmp_fun_0 = struct.unpack_from('<bi', data)
type_ = tmp_fun_0[0]
size = tmp_fun_0[1]
",1,"[['https://github.com/metabrainz/picard/tree/master/test/formats/test_asf.py', 'test.formats.test_asf', 'AsfUtilTest', 'test_pack_and_unpack_image'], ['https://github.com/metabrainz/picard/tree/master/test/formats/test_asf.py', 'test.formats.test_asf', 'AsfUtilTest', 'test_unpack_image']]"
picard,https://github.com/metabrainz/picard/tree/master/picard/formats/asf.py,AsfUtilTest,test_unpack_image,"(char, data) = (data[:2], data[2:])","
char = data[:2]
data = data[2:]
",1,"[['https://github.com/metabrainz/picard/tree/master/test/formats/test_asf.py', 'test.formats.test_asf', 'AsfUtilTest', 'test_pack_and_unpack_image'], ['https://github.com/metabrainz/picard/tree/master/test/formats/test_asf.py', 'test.formats.test_asf', 'AsfUtilTest', 'test_unpack_image']]"
picard,https://github.com/metabrainz/picard/tree/master/picard/formats/asf.py,AsfUtilTest,test_unpack_image,"(char, data) = (data[:2], data[2:])","
char = data[:2]
data = data[2:]
",1,"[['https://github.com/metabrainz/picard/tree/master/test/formats/test_asf.py', 'test.formats.test_asf', 'AsfUtilTest', 'test_pack_and_unpack_image'], ['https://github.com/metabrainz/picard/tree/master/test/formats/test_asf.py', 'test.formats.test_asf', 'AsfUtilTest', 'test_unpack_image']]"
picard,https://github.com/metabrainz/picard/tree/master/picard/util/bytes2human.py,Testbytes2human,test_calc_unit,"(k, b) = ('k', 'B')","
k = 'k'
b = 'B'
",1,"[['https://github.com/metabrainz/picard/tree/master/test/test_bytes2human.py', 'test.test_bytes2human', 'Testbytes2human', 'test_calc_unit_raises_value_error'], ['https://github.com/metabrainz/picard/tree/master/test/test_bytes2human.py', 'test.test_bytes2human', 'Testbytes2human', 'test_calc_unit']]"
picard,https://github.com/metabrainz/picard/tree/master/picard/util/bytes2human.py,Testbytes2human,test_calc_unit,"(k, b) = ('K', 'iB')","
k = 'K'
b = 'iB'
",1,"[['https://github.com/metabrainz/picard/tree/master/test/test_bytes2human.py', 'test.test_bytes2human', 'Testbytes2human', 'test_calc_unit_raises_value_error'], ['https://github.com/metabrainz/picard/tree/master/test/test_bytes2human.py', 'test.test_bytes2human', 'Testbytes2human', 'test_calc_unit']]"
term2048,https://github.com/bfontaine/term2048/tree/master/term2048/board.py,TestBoard,test_move_collapse_chain_line_right,"(chg, get) = (self.setLine, self.getLine)","
chg = self.setLine
get = self.getLine
",1,"[['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_collapse_chain_col'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_collapse_and_win'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_dont_add_tile_if_nothing_move'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_collapse_chain_four_same_tiles'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_collapse_chain_line_right2'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_collapse_triplet2'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_collapse_triplet1'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_add_tile_if_collapse'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_filled'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_collapse'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_dont_add_tile_if_nothing_move2'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_collapse_with_empty_cell_in_between'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_collapse_chain_line_left'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_add_tile_if_move'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_collapse_with_empty_cell_in_between2'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_collapse_chain_line_right']]"
term2048,https://github.com/bfontaine/term2048/tree/master/term2048/board.py,TestBoard,test_move_collapse_chain_line_right,"(collapsed, pts) = self.__collapseLineOrCol(line, d)","
tmp_fun_0 = self.__collapseLineOrCol(line, d)
collapsed = tmp_fun_0[0]
pts = tmp_fun_0[1]
",1,"[['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_collapse_chain_col'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_collapse_and_win'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_dont_add_tile_if_nothing_move'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_collapse_chain_four_same_tiles'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_collapse_chain_line_right2'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_collapse_triplet2'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_collapse_triplet1'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_add_tile_if_collapse'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_filled'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_collapse'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_dont_add_tile_if_nothing_move2'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_collapse_with_empty_cell_in_between'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_collapse_chain_line_left'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_add_tile_if_move'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_collapse_with_empty_cell_in_between2'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_collapse_chain_line_right']]"
term2048,https://github.com/bfontaine/term2048/tree/master/term2048/board.py,TestBoard,test_move_collapse_chain_line_right,"(chg, get) = (self.setCol, self.getCol)","
chg = self.setCol
get = self.getCol
",1,"[['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_collapse_chain_col'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_collapse_and_win'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_dont_add_tile_if_nothing_move'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_collapse_chain_four_same_tiles'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_collapse_chain_line_right2'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_collapse_triplet2'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_collapse_triplet1'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_add_tile_if_collapse'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_filled'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_collapse'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_dont_add_tile_if_nothing_move2'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_collapse_with_empty_cell_in_between'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_collapse_chain_line_left'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_add_tile_if_move'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_collapse_with_empty_cell_in_between2'], ['https://github.com/bfontaine/term2048/tree/master/tests/test_board.py', 'tests.test_board', 'TestBoard', 'test_move_collapse_chain_line_right']]"
sqlalchemy-mixins,https://github.com/absent1706/sqlalchemy-mixins/tree/master/sqlalchemy_mixins/smartquery.py,TestFullSmartQuery,test_schema_with_strings,"(entity, attr_name) = (aliases[parts[0]][0], prefix + parts[1])","
entity = aliases[parts[0]][0]
attr_name = prefix + parts[1]
",1,"[['https://github.com/absent1706/sqlalchemy-mixins/tree/master/sqlalchemy_mixins/tests/test_smartquery.py', 'sqlalchemy_mixins.tests.test_smartquery', 'TestFullSmartQuery', 'test_schema_with_class_properties'], ['https://github.com/absent1706/sqlalchemy-mixins/tree/master/sqlalchemy_mixins/tests/test_smartquery.py', 'sqlalchemy_mixins.tests.test_smartquery', 'TestSmartQueryAutoEagerLoad', 'test_lazy_dynamic'], ['https://github.com/absent1706/sqlalchemy-mixins/tree/master/sqlalchemy_mixins/tests/test_smartquery.py', 'sqlalchemy_mixins.tests.test_smartquery', 'TestFullSmartQuery', 'test_schema_with_strings']]"
sqlalchemy-mixins,https://github.com/absent1706/sqlalchemy-mixins/tree/master/sqlalchemy_mixins/smartquery.py,TestFullSmartQuery,test_schema_with_strings,"(entity, attr_name) = (root_cls, attr)","
entity = root_cls
attr_name = attr
",1,"[['https://github.com/absent1706/sqlalchemy-mixins/tree/master/sqlalchemy_mixins/tests/test_smartquery.py', 'sqlalchemy_mixins.tests.test_smartquery', 'TestFullSmartQuery', 'test_schema_with_class_properties'], ['https://github.com/absent1706/sqlalchemy-mixins/tree/master/sqlalchemy_mixins/tests/test_smartquery.py', 'sqlalchemy_mixins.tests.test_smartquery', 'TestSmartQueryAutoEagerLoad', 'test_lazy_dynamic'], ['https://github.com/absent1706/sqlalchemy-mixins/tree/master/sqlalchemy_mixins/tests/test_smartquery.py', 'sqlalchemy_mixins.tests.test_smartquery', 'TestFullSmartQuery', 'test_schema_with_strings']]"
sqlalchemy-mixins,https://github.com/absent1706/sqlalchemy-mixins/tree/master/sqlalchemy_mixins/smartquery.py,TestFullSmartQuery,test_schema_with_strings,"(entity, attr_name) = (aliases[parts[0]][0], parts[1])","
entity = aliases[parts[0]][0]
attr_name = parts[1]
",1,"[['https://github.com/absent1706/sqlalchemy-mixins/tree/master/sqlalchemy_mixins/tests/test_smartquery.py', 'sqlalchemy_mixins.tests.test_smartquery', 'TestFullSmartQuery', 'test_schema_with_class_properties'], ['https://github.com/absent1706/sqlalchemy-mixins/tree/master/sqlalchemy_mixins/tests/test_smartquery.py', 'sqlalchemy_mixins.tests.test_smartquery', 'TestSmartQueryAutoEagerLoad', 'test_lazy_dynamic'], ['https://github.com/absent1706/sqlalchemy-mixins/tree/master/sqlalchemy_mixins/tests/test_smartquery.py', 'sqlalchemy_mixins.tests.test_smartquery', 'TestFullSmartQuery', 'test_schema_with_strings']]"
sqlalchemy-mixins,https://github.com/absent1706/sqlalchemy-mixins/tree/master/sqlalchemy_mixins/smartquery.py,TestFullSmartQuery,test_schema_with_strings,"(entity, attr_name) = (root_cls, attr)","
entity = root_cls
attr_name = attr
",1,"[['https://github.com/absent1706/sqlalchemy-mixins/tree/master/sqlalchemy_mixins/tests/test_smartquery.py', 'sqlalchemy_mixins.tests.test_smartquery', 'TestFullSmartQuery', 'test_schema_with_class_properties'], ['https://github.com/absent1706/sqlalchemy-mixins/tree/master/sqlalchemy_mixins/tests/test_smartquery.py', 'sqlalchemy_mixins.tests.test_smartquery', 'TestSmartQueryAutoEagerLoad', 'test_lazy_dynamic'], ['https://github.com/absent1706/sqlalchemy-mixins/tree/master/sqlalchemy_mixins/tests/test_smartquery.py', 'sqlalchemy_mixins.tests.test_smartquery', 'TestFullSmartQuery', 'test_schema_with_strings']]"
dtaidistance,https://github.com/wannesm/dtaidistance/tree/master/dtaidistance/dtw.py,,test_psi_dtw_2b,"(r, c) = (len(s1), len(s2))","
r = len(s1)
c = len(s2)
",1,"[['https://github.com/wannesm/dtaidistance/tree/master/tests/test_benchmark.py', 'tests.test_benchmark', '', 'test_distance1_dist_python_list'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_warping.py', 'tests.test_warping', '', 'test_psi_dtw_1b'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_cython.py', 'tests.test_cython', '', 'test_overflowdistance'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_bugs.py', 'tests.test_bugs', '', 'test_bug2'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_dtw.py', 'tests.test_dtw', '', 'test_distance1_a'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_penalty.py', 'tests.test_penalty', '', 'test_penalty_cyclicalshift'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_warping.py', 'tests.test_warping', '', 'test_psi_dtw_2b']]"
dtaidistance,https://github.com/wannesm/dtaidistance/tree/master/dtaidistance/dtw.py,,test_psi_dtw_2b,"(psi_1b, psi_1e, psi_2b, psi_2e) = _process_psi_arg(psi)","
tmp_fun_0 = _process_psi_arg(psi)
psi_1b = tmp_fun_0[0]
psi_1e = tmp_fun_0[1]
psi_2b = tmp_fun_0[2]
psi_2e = tmp_fun_0[3]
",1,"[['https://github.com/wannesm/dtaidistance/tree/master/tests/test_benchmark.py', 'tests.test_benchmark', '', 'test_distance1_dist_python_list'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_warping.py', 'tests.test_warping', '', 'test_psi_dtw_1b'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_cython.py', 'tests.test_cython', '', 'test_overflowdistance'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_bugs.py', 'tests.test_bugs', '', 'test_bug2'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_dtw.py', 'tests.test_dtw', '', 'test_distance1_a'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_penalty.py', 'tests.test_penalty', '', 'test_penalty_cyclicalshift'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_warping.py', 'tests.test_warping', '', 'test_psi_dtw_2b']]"
dtaidistance,https://github.com/wannesm/dtaidistance/tree/master/dtaidistance/dtw.py,,test_psi_dtw_2a,"(r, c) = (len(s1), len(s2))","
r = len(s1)
c = len(s2)
",1,"[['https://github.com/wannesm/dtaidistance/tree/master/tests/test_dtw.py', 'tests.test_dtw', '', 'test_distance1_b'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_warping.py', 'tests.test_warping', '', 'test_psi_dtw_1a'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_warping.py', 'tests.test_warping', '', 'test_twoleadecg_1'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_bugs.py', 'tests.test_bugs', '', 'test_bug2'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_benchmark.py', 'tests.test_benchmark', '', 'test_distance1_wps_python_list'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_warping.py', 'tests.test_warping', '', 'test_psi_dtw_2a']]"
dtaidistance,https://github.com/wannesm/dtaidistance/tree/master/dtaidistance/dtw.py,,test_psi_dtw_2a,"(psi_1b, psi_1e, psi_2b, psi_2e) = _process_psi_arg(psi)","
tmp_fun_0 = _process_psi_arg(psi)
psi_1b = tmp_fun_0[0]
psi_1e = tmp_fun_0[1]
psi_2b = tmp_fun_0[2]
psi_2e = tmp_fun_0[3]
",1,"[['https://github.com/wannesm/dtaidistance/tree/master/tests/test_dtw.py', 'tests.test_dtw', '', 'test_distance1_b'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_warping.py', 'tests.test_warping', '', 'test_psi_dtw_1a'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_warping.py', 'tests.test_warping', '', 'test_twoleadecg_1'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_bugs.py', 'tests.test_bugs', '', 'test_bug2'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_benchmark.py', 'tests.test_benchmark', '', 'test_distance1_wps_python_list'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_warping.py', 'tests.test_warping', '', 'test_psi_dtw_2a']]"
dtaidistance,https://github.com/wannesm/dtaidistance/tree/master/dtaidistance/dtw.py,,test_condensed_index1,"(a, b) = (b, a)","
tmp0 = a
a = b
b = tmp0
",1,"[['https://github.com/wannesm/dtaidistance/tree/master/tests/test_dtw.py', 'tests.test_dtw', '', 'test_condensed_index1']]"
dtaidistance,https://github.com/wannesm/dtaidistance/tree/master/dtaidistance/dtw.py,,test_twoleadecg_1,"(dist, paths) = warping_paths(from_s, to_s, **kwargs)","
tmp_fun_0 = warping_paths(from_s, to_s, **kwargs)
dist = tmp_fun_0[0]
paths = tmp_fun_0[1]
",1,"[['https://github.com/wannesm/dtaidistance/tree/master/tests/test_warping.py', 'tests.test_warping', '', 'test_normalize'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_warping.py', 'tests.test_warping', '', 'test_psi_dtw_1a'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_bugsvis.py', 'tests.test_bugsvis', '', 'test_bug4'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_warping.py', 'tests.test_warping', '', 'test_twoleadecg_1']]"
dtaidistance,https://github.com/wannesm/dtaidistance/tree/master/dtaidistance/dtw.py,,test_twoleadecg_1,"(i, j) = (i - 1, j - 1)","
i = i - 1
j = j - 1
",1,"[['https://github.com/wannesm/dtaidistance/tree/master/tests/test_dtw2d.py', 'tests.test_dtw2d', '', 'test_visualisation_a'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_dtw2d.py', 'tests.test_dtw2d', '', 'test_visualisation_b'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_warping.py', 'tests.test_warping', '', 'test_twoleadecg_1']]"
dtaidistance,https://github.com/wannesm/dtaidistance/tree/master/dtaidistance/dtw_ndim_visualisation.py,,test_visualisation_a,"(fig, ax) = plt.subplots(nrows=2, ncols=1, sharex=True, sharey=True)","
tmp_fun_0 = plt.subplots(nrows=2, ncols=1, sharex=True, sharey=True)
fig = tmp_fun_0[0]
ax = tmp_fun_0[1]
",1,"[['https://github.com/wannesm/dtaidistance/tree/master/tests/test_dtw2d.py', 'tests.test_dtw2d', '', 'test_visualisation_a']]"
dtaidistance,https://github.com/wannesm/dtaidistance/tree/master/dtaidistance/dtw_ndim_visualisation.py,,test_visualisation_a,"(fig, ax) = (None, None)","
fig = None
ax = None
",1,"[['https://github.com/wannesm/dtaidistance/tree/master/tests/test_dtw2d.py', 'tests.test_dtw2d', '', 'test_visualisation_a']]"
dtaidistance,https://github.com/wannesm/dtaidistance/tree/master/dtaidistance/dtw_ndim_visualisation.py,,test_visualisation_b,"(py, px) = zip(*p)","
(py, px) = zip(*p)
",1,"[['https://github.com/wannesm/dtaidistance/tree/master/tests/test_dtw2d.py', 'tests.test_dtw2d', '', 'test_visualisation_b']]"
dtaidistance,https://github.com/wannesm/dtaidistance/tree/master/dtaidistance/dtw_ndim_visualisation.py,,test_visualisation_b,"(fig, ax) = (None, None)","
fig = None
ax = None
",1,"[['https://github.com/wannesm/dtaidistance/tree/master/tests/test_dtw2d.py', 'tests.test_dtw2d', '', 'test_visualisation_b']]"
dtaidistance,https://github.com/wannesm/dtaidistance/tree/master/dtaidistance/alignment.py,,test_sequences2,"(value, matrix) = dp(s1, s2, fn=substitution, border=_needleman_wunsch_border, penalty=0, window=window, max_dist=max_dist, max_step=max_step, max_length_diff=max_length_diff, psi=psi)","
tmp_fun_0 = dp(s1, s2, fn=substitution, border=_needleman_wunsch_border, penalty=0, window=window, max_dist=max_dist, max_step=max_step, max_length_diff=max_length_diff, psi=psi)
value = tmp_fun_0[0]
matrix = tmp_fun_0[1]
",1,"[['https://github.com/wannesm/dtaidistance/tree/master/tests/test_alignment.py', 'tests.test_alignment', '', 'test_sequences1'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_alignment.py', 'tests.test_alignment', '', 'test_sequences_custom'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_alignment.py', 'tests.test_alignment', '', 'test_sequences3'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_alignment.py', 'tests.test_alignment', '', 'test_sequences4'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_alignment.py', 'tests.test_alignment', '', 'test_sequences_blosum'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_alignment.py', 'tests.test_alignment', '', 'test_sequences2']]"
dtaidistance,https://github.com/wannesm/dtaidistance/tree/master/dtaidistance/alignment.py,,test_sequences2,"(i, j) = (int(paths.shape[0] - 1), int(paths.shape[1] - 1))","
i = int(paths.shape[0] - 1)
j = int(paths.shape[1] - 1)
",1,"[['https://github.com/wannesm/dtaidistance/tree/master/tests/test_alignment.py', 'tests.test_alignment', '', 'test_sequences1'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_alignment.py', 'tests.test_alignment', '', 'test_sequences_custom'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_alignment.py', 'tests.test_alignment', '', 'test_sequences3'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_alignment.py', 'tests.test_alignment', '', 'test_sequences4'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_alignment.py', 'tests.test_alignment', '', 'test_sequences_blosum'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_alignment.py', 'tests.test_alignment', '', 'test_sequences2']]"
dtaidistance,https://github.com/wannesm/dtaidistance/tree/master/dtaidistance/alignment.py,,test_sequences2,"(s1ip, s2ip) = p[0]","
s1ip = p[0][0]
s2ip = p[0][1]
",1,"[['https://github.com/wannesm/dtaidistance/tree/master/tests/test_alignment.py', 'tests.test_alignment', '', 'test_sequences1'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_alignment.py', 'tests.test_alignment', '', 'test_sequences_custom'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_alignment.py', 'tests.test_alignment', '', 'test_sequences3'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_alignment.py', 'tests.test_alignment', '', 'test_sequences4'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_alignment.py', 'tests.test_alignment', '', 'test_sequences_blosum'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_alignment.py', 'tests.test_alignment', '', 'test_sequences2']]"
dtaidistance,https://github.com/wannesm/dtaidistance/tree/master/dtaidistance/alignment.py,,test_sequences2,"(opi, opj) = ops[order[c]]","
opi = ops[order[c]][0]
opj = ops[order[c]][1]
",1,"[['https://github.com/wannesm/dtaidistance/tree/master/tests/test_alignment.py', 'tests.test_alignment', '', 'test_sequences1'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_alignment.py', 'tests.test_alignment', '', 'test_sequences_custom'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_alignment.py', 'tests.test_alignment', '', 'test_sequences3'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_alignment.py', 'tests.test_alignment', '', 'test_sequences4'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_alignment.py', 'tests.test_alignment', '', 'test_sequences_blosum'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_alignment.py', 'tests.test_alignment', '', 'test_sequences2']]"
dtaidistance,https://github.com/wannesm/dtaidistance/tree/master/dtaidistance/alignment.py,,test_sequences2,"(i, j) = (i + opi, j + opj)","
i = i + opi
j = j + opj
",1,"[['https://github.com/wannesm/dtaidistance/tree/master/tests/test_alignment.py', 'tests.test_alignment', '', 'test_sequences1'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_alignment.py', 'tests.test_alignment', '', 'test_sequences_custom'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_alignment.py', 'tests.test_alignment', '', 'test_sequences3'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_alignment.py', 'tests.test_alignment', '', 'test_sequences4'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_alignment.py', 'tests.test_alignment', '', 'test_sequences_blosum'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_alignment.py', 'tests.test_alignment', '', 'test_sequences2']]"
dtaidistance,https://github.com/wannesm/dtaidistance/tree/master/dtaidistance/alignment.py,,test_sequences2,"(s1ip, s2ip) = (s1i, s2i)","
s1ip = s1i
s2ip = s2i
",1,"[['https://github.com/wannesm/dtaidistance/tree/master/tests/test_alignment.py', 'tests.test_alignment', '', 'test_sequences1'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_alignment.py', 'tests.test_alignment', '', 'test_sequences_custom'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_alignment.py', 'tests.test_alignment', '', 'test_sequences3'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_alignment.py', 'tests.test_alignment', '', 'test_sequences4'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_alignment.py', 'tests.test_alignment', '', 'test_sequences_blosum'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_alignment.py', 'tests.test_alignment', '', 'test_sequences2']]"
dtaidistance,https://github.com/wannesm/dtaidistance/tree/master/dtaidistance/dtw_ndim.py,,test_distance1_a,"(r, c) = (len(s1), len(s2))","
r = len(s1)
c = len(s2)
",1,"[['https://github.com/wannesm/dtaidistance/tree/master/tests/test_dtw2d.py', 'tests.test_dtw2d', '', 'test_distance1_a']]"
dtaidistance,https://github.com/wannesm/dtaidistance/tree/master/dtaidistance/dtw_visualisation.py,,test_normalize,"(fig, ax) = plt.subplots(nrows=3, ncols=1, sharex='all', sharey='all')","
tmp_fun_0 = plt.subplots(nrows=3, ncols=1, sharex='all', sharey='all')
fig = tmp_fun_0[0]
ax = tmp_fun_0[1]
",1,"[['https://github.com/wannesm/dtaidistance/tree/master/tests/test_warping.py', 'tests.test_warping', '', 'test_normalize']]"
dtaidistance,https://github.com/wannesm/dtaidistance/tree/master/dtaidistance/dtw_visualisation.py,,test_normalize,"(fig, ax) = (None, None)","
fig = None
ax = None
",1,"[['https://github.com/wannesm/dtaidistance/tree/master/tests/test_warping.py', 'tests.test_warping', '', 'test_normalize']]"
dtaidistance,https://github.com/wannesm/dtaidistance/tree/master/dtaidistance/dtw_visualisation.py,,test_twoleadecg_1,"(fig, ax) = plt.subplots(nrows=2, ncols=1, sharex='all', sharey='all')","
tmp_fun_0 = plt.subplots(nrows=2, ncols=1, sharex='all', sharey='all')
fig = tmp_fun_0[0]
ax = tmp_fun_0[1]
",1,"[['https://github.com/wannesm/dtaidistance/tree/master/tests/test_warping.py', 'tests.test_warping', '', 'test_normalize'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_bugsvis.py', 'tests.test_bugsvis', '', 'test_bug4'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_warping.py', 'tests.test_warping', '', 'test_twoleadecg_1']]"
dtaidistance,https://github.com/wannesm/dtaidistance/tree/master/dtaidistance/dtw_visualisation.py,,test_twoleadecg_1,"(fig, ax) = (None, None)","
fig = None
ax = None
",1,"[['https://github.com/wannesm/dtaidistance/tree/master/tests/test_warping.py', 'tests.test_warping', '', 'test_normalize'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_bugsvis.py', 'tests.test_bugsvis', '', 'test_bug4'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_warping.py', 'tests.test_warping', '', 'test_twoleadecg_1']]"
dtaidistance,https://github.com/wannesm/dtaidistance/tree/master/dtaidistance/dtw_visualisation.py,,test_twoleadecg_1,"(py, px) = zip(*p)","
(py, px) = zip(*p)
",1,"[['https://github.com/wannesm/dtaidistance/tree/master/tests/test_warping.py', 'tests.test_warping', '', 'test_psi_dtw_1a'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_warping.py', 'tests.test_warping', '', 'test_twoleadecg_1']]"
dtaidistance,https://github.com/wannesm/dtaidistance/tree/master/dtaidistance/dtw_visualisation.py,,test_twoleadecg_1,"(fig, ax) = (None, None)","
fig = None
ax = None
",1,"[['https://github.com/wannesm/dtaidistance/tree/master/tests/test_warping.py', 'tests.test_warping', '', 'test_psi_dtw_1a'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_warping.py', 'tests.test_warping', '', 'test_twoleadecg_1']]"
dtaidistance,https://github.com/wannesm/dtaidistance/tree/master/dtaidistance/dtw_weighted.py,,test_split2,"(h1_min, th_min) = (np.inf, None)","
h1_min = np.inf
th_min = None
",1,"[['https://github.com/wannesm/dtaidistance/tree/master/tests/test_dtw_weighted_dt.py', 'tests.test_dtw_weighted_dt', '', 'test_split'], ['https://github.com/wannesm/dtaidistance/tree/master/tests/test_dtw_weighted_dt.py', 'tests.test_dtw_weighted_dt', '', 'test_split2']]"
pymemcache,https://github.com/pinterest/pymemcache/tree/master/pymemcache/client/rendezvous.py,,test_rendezvous_names,"(high_score, winner) = (score, node)","
high_score = score
winner = node
",1,"[['https://github.com/pinterest/pymemcache/tree/master/pymemcache/test/test_rendezvous.py', 'pymemcache.test.test_rendezvous', '', 'test_shrink'], ['https://github.com/pinterest/pymemcache/tree/master/pymemcache/test/test_rendezvous.py', 'pymemcache.test.test_rendezvous', '', 'test_get_node'], ['https://github.com/pinterest/pymemcache/tree/master/pymemcache/test/test_rendezvous.py', 'pymemcache.test.test_rendezvous', '', 'test_grow'], ['https://github.com/pinterest/pymemcache/tree/master/pymemcache/test/test_rendezvous.py', 'pymemcache.test.test_rendezvous', '', 'test_get_node_after_addition'], ['https://github.com/pinterest/pymemcache/tree/master/pymemcache/test/test_rendezvous.py', 'pymemcache.test.test_rendezvous', '', 'test_get_node_after_removal'], ['https://github.com/pinterest/pymemcache/tree/master/pymemcache/test/test_rendezvous.py', 'pymemcache.test.test_rendezvous', '', 'test_rendezvous_collision'], ['https://github.com/pinterest/pymemcache/tree/master/pymemcache/test/test_rendezvous.py', 'pymemcache.test.test_rendezvous', '', 'test_rendezvous_names']]"
pymemcache,https://github.com/pinterest/pymemcache/tree/master/pymemcache/client/rendezvous.py,,test_rendezvous_names,"(high_score, winner) = (score, max(str(node), str(winner)))","
high_score = score
winner = max(str(node), str(winner))
",1,"[['https://github.com/pinterest/pymemcache/tree/master/pymemcache/test/test_rendezvous.py', 'pymemcache.test.test_rendezvous', '', 'test_shrink'], ['https://github.com/pinterest/pymemcache/tree/master/pymemcache/test/test_rendezvous.py', 'pymemcache.test.test_rendezvous', '', 'test_get_node'], ['https://github.com/pinterest/pymemcache/tree/master/pymemcache/test/test_rendezvous.py', 'pymemcache.test.test_rendezvous', '', 'test_grow'], ['https://github.com/pinterest/pymemcache/tree/master/pymemcache/test/test_rendezvous.py', 'pymemcache.test.test_rendezvous', '', 'test_get_node_after_addition'], ['https://github.com/pinterest/pymemcache/tree/master/pymemcache/test/test_rendezvous.py', 'pymemcache.test.test_rendezvous', '', 'test_get_node_after_removal'], ['https://github.com/pinterest/pymemcache/tree/master/pymemcache/test/test_rendezvous.py', 'pymemcache.test.test_rendezvous', '', 'test_rendezvous_collision'], ['https://github.com/pinterest/pymemcache/tree/master/pymemcache/test/test_rendezvous.py', 'pymemcache.test.test_rendezvous', '', 'test_rendezvous_names']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/convert_matrix.py,TestConvertPandas,test_from_edgelist,"(attrs, multigraph_edge_key) = attrs","
tmp0 = attrs[1]
attrs = attrs[0]
multigraph_edge_key = tmp0
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/tests/test_convert_pandas.py', 'networkx.tests.test_convert_pandas', 'TestConvertPandas', 'test_from_edgelist']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/drawing/layout.py,TestLayout,test_adjacency_interface_numpy,"(nnodes, _) = A.shape","
nnodes = A.shape[0]
_ = A.shape[1]
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/drawing/tests/test_layout.py', 'networkx.drawing.tests.test_layout', 'TestLayout', 'test_adjacency_interface_numpy']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/generators/lattice.py,TestKFactor,test_k_factor3,"(row_name, rows) = m","
row_name = m[0]
rows = m[1]
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_regular.py', 'networkx.algorithms.tests.test_regular', 'TestKFactor', 'test_k_factor1'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_regular.py', 'networkx.algorithms.tests.test_regular', 'TestKFactor', 'test_k_factor3']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/generators/lattice.py,TestKFactor,test_k_factor3,"(col_name, cols) = n","
col_name = n[0]
cols = n[1]
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_regular.py', 'networkx.algorithms.tests.test_regular', 'TestKFactor', 'test_k_factor1'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_regular.py', 'networkx.algorithms.tests.test_regular', 'TestKFactor', 'test_k_factor3']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/generators/lattice.py,TestKFactor,test_k_factor3,"(periodic_r, periodic_c) = periodic","
periodic_r = periodic[0]
periodic_c = periodic[1]
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_regular.py', 'networkx.algorithms.tests.test_regular', 'TestKFactor', 'test_k_factor1'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_regular.py', 'networkx.algorithms.tests.test_regular', 'TestKFactor', 'test_k_factor3']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/generators/lattice.py,TestKFactor,test_k_factor3,periodic_r = periodic_c = periodic,"
tmp_value = periodic
periodic_r = tmp_value
periodic_c = tmp_value
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_regular.py', 'networkx.algorithms.tests.test_regular', 'TestKFactor', 'test_k_factor1'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_regular.py', 'networkx.algorithms.tests.test_regular', 'TestKFactor', 'test_k_factor3']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/generators/degree_seq.py,,test_incidence_matrix_simple,"(dmax, dsum, n) = (0, 0, 0)","
dmax = 0
dsum = 0
n = 0
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_threshold.py', 'networkx.algorithms.tests.test_threshold', 'TestGeneratorThreshold', 'test_threshold_sequence_graph_test'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_generators.py', 'networkx.algorithms.bipartite.tests.test_generators', 'TestGeneratorsBipartite', 'test_havel_hakimi_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_threshold.py', 'networkx.algorithms.tests.test_threshold', 'TestGeneratorThreshold', 'test_creation_sequences'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_threshold.py', 'networkx.algorithms.tests.test_threshold', 'TestGeneratorThreshold', 'test_shortest_path'], ['https://github.com/networkx/networkx/tree/master/networkx/linalg/tests/test_graphmatrix.py', 'networkx.linalg.tests.test_graphmatrix', '', 'test_incidence_matrix_simple']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/generators/degree_seq.py,,test_incidence_matrix_simple,"(dmax, dsum, n) = (max(dmax, d), dsum + d, n + 1)","
dmax = max(dmax, d)
dsum = dsum + d
n = n + 1
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_threshold.py', 'networkx.algorithms.tests.test_threshold', 'TestGeneratorThreshold', 'test_threshold_sequence_graph_test'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_generators.py', 'networkx.algorithms.bipartite.tests.test_generators', 'TestGeneratorsBipartite', 'test_havel_hakimi_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_threshold.py', 'networkx.algorithms.tests.test_threshold', 'TestGeneratorThreshold', 'test_creation_sequences'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_threshold.py', 'networkx.algorithms.tests.test_threshold', 'TestGeneratorThreshold', 'test_shortest_path'], ['https://github.com/networkx/networkx/tree/master/networkx/linalg/tests/test_graphmatrix.py', 'networkx.linalg.tests.test_graphmatrix', '', 'test_incidence_matrix_simple']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/generators/degree_seq.py,,test_incidence_matrix_simple,"(stubval, stubtarget) = modstubs[i]","
stubval = modstubs[i][0]
stubtarget = modstubs[i][1]
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_threshold.py', 'networkx.algorithms.tests.test_threshold', 'TestGeneratorThreshold', 'test_threshold_sequence_graph_test'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_generators.py', 'networkx.algorithms.bipartite.tests.test_generators', 'TestGeneratorsBipartite', 'test_havel_hakimi_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_threshold.py', 'networkx.algorithms.tests.test_threshold', 'TestGeneratorThreshold', 'test_creation_sequences'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_threshold.py', 'networkx.algorithms.tests.test_threshold', 'TestGeneratorThreshold', 'test_shortest_path'], ['https://github.com/networkx/networkx/tree/master/networkx/linalg/tests/test_graphmatrix.py', 'networkx.linalg.tests.test_graphmatrix', '', 'test_incidence_matrix_simple']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/generators/classic.py,TestConvert,test_digraphs,"(n_orig, nodes) = n","
n_orig = n[0]
nodes = n[1]
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/tests/test_convert.py', 'networkx.tests.test_convert', 'TestConvert', 'test_with_multiedges_self_loops'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_convert.py', 'networkx.tests.test_convert', 'TestConvert', 'test_digraphs']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/generators/interval_graph.py,TestIntervalGraph,test_interval_graph_1,"(min1, max1) = interval1 = tupled_intervals.pop()","
tmp_value = tupled_intervals.pop()
min1 = tmp_value[0]
max1 = tmp_value[1]
interval1 = tmp_value
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_interval_graph.py', 'networkx.generators.tests.test_interval_graph', 'TestIntervalGraph', 'test_interval_graph_5'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_interval_graph.py', 'networkx.generators.tests.test_interval_graph', 'TestIntervalGraph', 'test_interval_graph_0'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_interval_graph.py', 'networkx.generators.tests.test_interval_graph', 'TestIntervalGraph', 'test_interval_graph_2'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_interval_graph.py', 'networkx.generators.tests.test_interval_graph', 'TestIntervalGraph', 'test_interval_graph_3'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_interval_graph.py', 'networkx.generators.tests.test_interval_graph', 'TestIntervalGraph', 'test_interval_graph_1']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/generators/interval_graph.py,TestIntervalGraph,test_interval_graph_1,"(min2, max2) = interval2","
min2 = interval2[0]
max2 = interval2[1]
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_interval_graph.py', 'networkx.generators.tests.test_interval_graph', 'TestIntervalGraph', 'test_interval_graph_5'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_interval_graph.py', 'networkx.generators.tests.test_interval_graph', 'TestIntervalGraph', 'test_interval_graph_0'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_interval_graph.py', 'networkx.generators.tests.test_interval_graph', 'TestIntervalGraph', 'test_interval_graph_2'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_interval_graph.py', 'networkx.generators.tests.test_interval_graph', 'TestIntervalGraph', 'test_interval_graph_3'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_interval_graph.py', 'networkx.generators.tests.test_interval_graph', 'TestIntervalGraph', 'test_interval_graph_1']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/utils/misc.py,,test_undirected_aux_graph,"(a, b) = tee(iterable)","
tmp_fun_0 = tee(iterable)
a = tmp_fun_0[0]
b = tmp_fun_0[1]
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/connectivity/tests/test_edge_kcomponents.py', 'networkx.algorithms.connectivity.tests.test_edge_kcomponents', '', 'test_local_subgraph_difference'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/connectivity/tests/test_edge_kcomponents.py', 'networkx.algorithms.connectivity.tests.test_edge_kcomponents', '', 'test_directed_aux_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/connectivity/tests/test_edge_kcomponents.py', 'networkx.algorithms.connectivity.tests.test_edge_kcomponents', '', 'test_undirected_aux_graph']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/utils/misc.py,TestReadGraphML,test_read_undirected_multigraph_no_multiedge_graphml,"(u, v) = (e[0], e[1])","
u = e[0]
v = e[1]
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_classic.py', 'networkx.generators.tests.test_classic', 'TestGeneratorClassic', 'test_star_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_edgelist.py', 'networkx.algorithms.bipartite.tests.test_edgelist', 'TestEdgelist', 'test_edgelist_integers'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_edgelist.py', 'networkx.readwrite.tests.test_edgelist', '', 'test_comments_None'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_project.py', 'networkx.algorithms.bipartite.tests.test_project', 'TestBipartiteWeightedProjection', 'test_project_weighted_ratio'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_adjlist.py', 'networkx.readwrite.tests.test_adjlist', 'TestMultilineAdjlist', 'test_multiline_adjlist_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_line.py', 'networkx.generators.tests.test_line', 'TestGeneratorLine', 'test_create2'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_sparse6.py', 'networkx.readwrite.tests.test_sparse6', 'TestWriteSparse6', 'test_read_write_inverse'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_convert.py', 'networkx.tests.test_convert', 'TestConvert', 'test_digraphs'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_pajek.py', 'networkx.readwrite.tests.test_pajek', 'TestPajek', 'test_read_pajek'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_matching.py', 'networkx.algorithms.tests.test_matching', 'TestMaxWeightMatching', 'test_nested_s_blossom_relabel'], ['https://github.com/networkx/networkx/tree/master/networkx/classes/tests/test_graphviews.py', 'networkx.classes.tests.test_graphviews', 'TestChainsOfViews', 'test_restricted_induced_subgraph_chains'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_edgelist.py', 'networkx.algorithms.bipartite.tests.test_edgelist', 'TestEdgelist', 'test_read_edgelist_3'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/minors/tests/test_contraction.py', 'networkx.algorithms.minors.tests.test_contraction', 'TestQuotient', 'test_weighted_path'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/minors/tests/test_contraction.py', 'networkx.algorithms.minors.tests.test_contraction', 'TestQuotient', 'test_multigraph_blockmodel'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/tests/test_coding.py', 'networkx.algorithms.tree.tests.test_coding', 'TestPruferSequence', 'test_decoding'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_relabel.py', 'networkx.tests.test_relabel', 'TestRelabel', 'test_relabel_nodes_multidigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_matching.py', 'networkx.algorithms.tests.test_matching', 'TestMaxWeightMatching', 'test_nasty_blossom_least_slack'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_steinertree.py', 'networkx.algorithms.approximation.tests.test_steinertree', 'TestSteinerTree', 'test_metric_closure'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_steinertree.py', 'networkx.algorithms.approximation.tests.test_steinertree', 'TestSteinerTree', 'test_multigraph_steiner_tree'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_classic.py', 'networkx.generators.tests.test_classic', 'TestGeneratorClassic', 'test_barbell_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_adjlist.py', 'networkx.readwrite.tests.test_adjlist', 'TestMultilineAdjlist', 'test_multiline_adjlist_delimiter'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_classic.py', 'networkx.generators.tests.test_classic', 'TestGeneratorClassic', 'test_lollipop_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_classic.py', 'networkx.generators.tests.test_classic', 'TestGeneratorClassic', 'test_dorogovtsev_goltsev_mendes_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_edgelist.py', 'networkx.readwrite.tests.test_edgelist', '', 'test_parse_edgelist_no_data'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_traveling_salesman.py', 'networkx.algorithms.approximation.tests.test_traveling_salesman', '', 'test_held_karp_ascent_asymmetric_3'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_graphml.py', 'networkx.readwrite.tests.test_graphml', 'TestWriteGraphML', 'test_write_read_attribute_named_key_ids_graphml'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_graphml.py', 'networkx.readwrite.tests.test_graphml', 'TestWriteGraphML', 'test_write_generate_edge_id_from_attribute'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_matching.py', 'networkx.algorithms.tests.test_matching', 'TestMaxWeightMatching', 'test_negative_weights'], ['https://github.com/networkx/networkx/tree/master/networkx/classes/tests/test_function.py', 'networkx.classes.tests.test_function', '', 'test_selfloop_edges_multi_with_data_and_keys'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_lattice.py', 'networkx.generators.tests.test_lattice', 'TestGrid2DGraph', 'test_node_input'], ['https://github.com/networkx/networkx/tree/master/networkx/classes/tests/test_function.py', 'networkx.classes.tests.test_function', 'TestFunction', 'test_edges'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_interval_graph.py', 'networkx.generators.tests.test_interval_graph', 'TestIntervalGraph', 'test_interval_graph_2'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/operators/tests/test_product.py', 'networkx.algorithms.operators.tests.test_product', '', 'test_graph_power'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_project.py', 'networkx.algorithms.bipartite.tests.test_project', 'TestBipartiteProject', 'test_directed_projection'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_project.py', 'networkx.algorithms.bipartite.tests.test_project', 'TestBipartiteWeightedProjection', 'test_project_weighted_shared'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_edgelist.py', 'networkx.algorithms.bipartite.tests.test_edgelist', 'TestEdgelist', 'test_read_edgelist_1'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_pajek.py', 'networkx.readwrite.tests.test_pajek', 'TestPajek', 'test_unicode'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/minors/tests/test_contraction.py', 'networkx.algorithms.minors.tests.test_contraction', 'TestQuotient', 'test_barbell_plus'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_classic.py', 'networkx.generators.tests.test_classic', 'TestGeneratorClassic', 'test_ladder_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_classic.py', 'networkx.generators.tests.test_classic', 'TestGeneratorClassic', 'test_wheel_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_boundary.py', 'networkx.algorithms.tests.test_boundary', 'TestEdgeBoundary', 'test_complete_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_graphml.py', 'networkx.readwrite.tests.test_graphml', 'TestReadGraphML', 'test_read_undirected_multigraph_graphml'], ['https://github.com/networkx/networkx/tree/master/networkx/classes/tests/test_function.py', 'networkx.classes.tests.test_function', 'TestFunction', 'test_add_star'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_matching.py', 'networkx.algorithms.tests.test_matching', 'TestMaxWeightMatching', 'test_floating_point_weights'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/tests/test_coding.py', 'networkx.algorithms.tree.tests.test_coding', 'TestPruferSequence', 'test_inverse'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_convert.py', 'networkx.tests.test_convert', 'TestConvert', 'test_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/minors/tests/test_contraction.py', 'networkx.algorithms.minors.tests.test_contraction', 'TestQuotient', 'test_path__partition_provided_as_dict_of_tuples'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/minors/tests/test_contraction.py', 'networkx.algorithms.minors.tests.test_contraction', 'TestContraction', 'test_multigraph_keys'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_traveling_salesman.py', 'networkx.algorithms.approximation.tests.test_traveling_salesman', '', 'test_held_karp_ascent'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_edgelist.py', 'networkx.readwrite.tests.test_edgelist', '', 'test_parse_edgelist_with_data_list'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_project.py', 'networkx.algorithms.bipartite.tests.test_project', 'TestBipartiteWeightedProjection', 'test_generic_weighted_projected_graph_simple'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_edgelist.py', 'networkx.readwrite.tests.test_edgelist', 'TestEdgelist', 'test_edgelist_multigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_adjlist.py', 'networkx.readwrite.tests.test_adjlist', 'TestAdjlist', 'test_adjlist_multigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_matrix.py', 'networkx.algorithms.bipartite.tests.test_matrix', 'TestBiadjacencyMatrix', 'test_from_biadjacency_multigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_sparse6.py', 'networkx.readwrite.tests.test_sparse6', 'TestSparseGraph6', 'test_from_sparse6_bytes'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_graphml.py', 'networkx.readwrite.tests.test_graphml', 'TestWriteGraphML', 'test_default_attribute'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_adjlist.py', 'networkx.readwrite.tests.test_adjlist', 'TestMultilineAdjlist', 'test_multiline_adjlist_multidigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_classic.py', 'networkx.generators.tests.test_classic', 'TestGeneratorClassic', 'test_complete_1_partite_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_classic.py', 'networkx.generators.tests.test_classic', 'TestGeneratorClassic', 'test_circular_ladder_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_project.py', 'networkx.algorithms.bipartite.tests.test_project', 'TestBipartiteProject', 'test_path_collaboration_projected_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/minors/tests/test_contraction.py', 'networkx.algorithms.minors.tests.test_contraction', 'TestQuotient', 'test_blockmodel'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_p2g.py', 'networkx.readwrite.tests.test_p2g', 'TestP2G', 'test_write_read_p2g'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/minors/tests/test_contraction.py', 'networkx.algorithms.minors.tests.test_contraction', 'TestContraction', 'test_contract_selfloop_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/classes/tests/test_graphviews.py', 'networkx.classes.tests.test_graphviews', 'TestChainsOfViews', 'test_pickle'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_graph6.py', 'networkx.readwrite.tests.test_graph6', 'TestWriteGraph6', 'test_roundtrip'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_matching.py', 'networkx.algorithms.tests.test_matching', 'TestMaxWeightMatching', 'test_nasty_blossom2'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_graphml.py', 'networkx.readwrite.tests.test_graphml', 'TestReadGraphML', 'test_read_undirected_multigraph_only_ids_for_multiedges_graphml'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_classic.py', 'networkx.generators.tests.test_classic', 'TestGeneratorClassic', 'test_complete_0_partite_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_interval_graph.py', 'networkx.generators.tests.test_interval_graph', 'TestIntervalGraph', 'test_interval_graph_5'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_relabel.py', 'networkx.tests.test_relabel', 'TestRelabel', 'test_relabel_nodes_multigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_edgelist.py', 'networkx.readwrite.tests.test_edgelist', '', 'test_parse_edgelist_with_data_dict'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_dag.py', 'networkx.algorithms.tests.test_dag', 'TestDAG', 'test_reflexive_transitive_closure'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_project.py', 'networkx.algorithms.bipartite.tests.test_project', 'TestBipartiteProject', 'test_path_weighted_projected_directed_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/minors/tests/test_contraction.py', 'networkx.algorithms.minors.tests.test_contraction', 'TestQuotient', 'test_directed_path'], ['https://github.com/networkx/networkx/tree/master/networkx/classes/tests/test_graphviews.py', 'networkx.classes.tests.test_graphviews', 'TestToDirected', 'test_already_directed'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/minors/tests/test_contraction.py', 'networkx.algorithms.minors.tests.test_contraction', 'TestQuotient', 'test_directed_multigraph_path'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_edgelist.py', 'networkx.readwrite.tests.test_edgelist', '', 'test_read_weighted_edgelist'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/minors/tests/test_contraction.py', 'networkx.algorithms.minors.tests.test_contraction', 'TestQuotient', 'test_path'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_ego.py', 'networkx.generators.tests.test_ego', 'TestGeneratorEgo', 'test_ego'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_project.py', 'networkx.algorithms.bipartite.tests.test_project', 'TestBipartiteWeightedProjection', 'test_generic_weighted_projected_graph_custom'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_pajek.py', 'networkx.readwrite.tests.test_pajek', 'TestPajek', 'test_parse_pajek_simple'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_traveling_salesman.py', 'networkx.algorithms.approximation.tests.test_traveling_salesman', '', 'test_ascent_method_asymmetric_2'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_matching.py', 'networkx.algorithms.tests.test_matching', 'TestMaxWeightMatching', 'test_nasty_blossom_expand_recursively'], ['https://github.com/networkx/networkx/tree/master/networkx/classes/tests/test_function.py', 'networkx.classes.tests.test_function', 'TestFunction', 'test_add_cycle'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_matching.py', 'networkx.algorithms.tests.test_matching', 'TestMaxWeightMatching', 'test_nasty_blossom1'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_adjlist.py', 'networkx.readwrite.tests.test_adjlist', 'TestMultilineAdjlist', 'test_multiline_adjlist_integers'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_dag.py', 'networkx.algorithms.tests.test_dag', 'TestDAG', 'test_transitive_reduction'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_edgelist.py', 'networkx.readwrite.tests.test_edgelist', 'TestEdgelist', 'test_edgelist_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_classic.py', 'networkx.generators.tests.test_classic', 'TestGeneratorClassic', 'test_path_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_convert.py', 'networkx.tests.test_convert', 'TestConvert', 'test_to_edgelist'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/tests/test_operations.py', 'networkx.algorithms.tree.tests.test_operations', 'TestJoin', 'test_single'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/operators/tests/test_all.py', 'networkx.algorithms.operators.tests.test_all', '', 'test_union_all_and_compose_all'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_pajek.py', 'networkx.readwrite.tests.test_pajek', 'TestPajek', 'test_write_pajek'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_line.py', 'networkx.generators.tests.test_line', '', 'test_edge_func'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_traveling_salesman.py', 'networkx.algorithms.approximation.tests.test_traveling_salesman', '', 'test_ascent_method_asymmetric'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_edgelist.py', 'networkx.algorithms.bipartite.tests.test_edgelist', 'TestEdgelist', 'test_edgelist_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_matching.py', 'networkx.algorithms.tests.test_matching', 'TestMaxWeightMatching', 'test_nasty_blossom_augmenting'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_project.py', 'networkx.algorithms.bipartite.tests.test_project', 'TestBipartiteProject', 'test_directed_path_collaboration_projected_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_graphml.py', 'networkx.readwrite.tests.test_graphml', 'TestWriteGraphML', 'test_write_read_attribute_numeric_type_graphml'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_classic.py', 'networkx.generators.tests.test_classic', 'TestGeneratorClassic', 'test_complete_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_pajek.py', 'networkx.readwrite.tests.test_pajek', 'TestPajek', 'test_parse_pajet_mat'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_adjlist.py', 'networkx.readwrite.tests.test_adjlist', 'TestAdjlist', 'test_adjlist_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_adjlist.py', 'networkx.readwrite.tests.test_adjlist', 'TestMultilineAdjlist', 'test_multiline_adjlist_digraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_project.py', 'networkx.algorithms.bipartite.tests.test_project', 'TestBipartiteProject', 'test_path_projected_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_steinertree.py', 'networkx.algorithms.approximation.tests.test_steinertree', 'TestSteinerTree', 'test_steiner_tree'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/minors/tests/test_contraction.py', 'networkx.algorithms.minors.tests.test_contraction', 'TestQuotient', 'test_multigraph_path'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_edgelist.py', 'networkx.algorithms.bipartite.tests.test_edgelist', 'TestEdgelist', 'test_edgelist_multigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/minors/tests/test_contraction.py', 'networkx.algorithms.minors.tests.test_contraction', 'TestQuotient', 'test_path__partition_provided_as_dict_of_lists'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/tests/test_coding.py', 'networkx.algorithms.tree.tests.test_coding', 'TestPruferSequence', 'test_decoding2'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/minors/tests/test_contraction.py', 'networkx.algorithms.minors.tests.test_contraction', 'TestQuotient', 'test_quotient_graph_incomplete_partition'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_gpickle.py', 'networkx.readwrite.tests.test_gpickle', 'TestGpickle', 'test_gpickle'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_adjlist.py', 'networkx.readwrite.tests.test_adjlist', 'TestMultilineAdjlist', 'test_multiline_adjlist_multigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_matching.py', 'networkx.algorithms.tests.test_matching', 'TestMaxWeightMatching', 'test_trivial6'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_line.py', 'networkx.generators.tests.test_line', 'TestGeneratorLine', 'test_digraph2'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_edgelist.py', 'networkx.readwrite.tests.test_edgelist', 'TestEdgelist', 'test_edgelist_integers'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_adjlist.py', 'networkx.readwrite.tests.test_adjlist', 'TestAdjlist', 'test_adjlist_digraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_matching.py', 'networkx.algorithms.tests.test_matching', 'TestMaxWeightMatching', 'test_s_t_blossom'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_matching.py', 'networkx.algorithms.tests.test_matching', 'TestMaxWeightMatching', 'test_s_blossom'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_classic.py', 'networkx.generators.tests.test_classic', 'TestGeneratorClassic', 'test_circulant_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/operators/tests/test_binary.py', 'networkx.algorithms.operators.tests.test_binary', '', 'test_union_and_compose'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_sparse6.py', 'networkx.readwrite.tests.test_sparse6', 'TestSparseGraph6', 'test_read_sparse6'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_matching.py', 'networkx.algorithms.tests.test_matching', 'TestMaxWeightMatching', 'test_s_blossom_relabel_expand'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_gpickle.py', 'networkx.readwrite.tests.test_gpickle', 'TestGpickle', 'test_protocol'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_project.py', 'networkx.algorithms.bipartite.tests.test_project', 'TestBipartiteProject', 'test_star_projected_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_convert.py', 'networkx.tests.test_convert', 'TestConvert', 'test_with_multiedges_self_loops'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_dag.py', 'networkx.algorithms.tests.test_dag', 'TestDAG', 'test_transitive_closure_dag'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_interval_graph.py', 'networkx.generators.tests.test_interval_graph', 'TestIntervalGraph', 'test_interval_graph_0'], ['https://github.com/networkx/networkx/tree/master/networkx/classes/tests/test_function.py', 'networkx.classes.tests.test_function', 'TestFunction', 'test_degree'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_dag.py', 'networkx.algorithms.tests.test_dag', 'TestDAG', 'test_transitive_closure'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_p2g.py', 'networkx.readwrite.tests.test_p2g', 'TestP2G', 'test_read_p2g'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_graph6.py', 'networkx.readwrite.tests.test_graph6', 'TestFromGraph6Bytes', 'test_read_equals_from_bytes'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_project.py', 'networkx.algorithms.bipartite.tests.test_project', 'TestBipartiteWeightedProjection', 'test_project_weighted_newman'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_pajek.py', 'networkx.readwrite.tests.test_pajek', 'TestPajek', 'test_parse_pajek'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_convert.py', 'networkx.tests.test_convert', 'TestConvert', 'test_edgelists'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/minors/tests/test_contraction.py', 'networkx.algorithms.minors.tests.test_contraction', 'TestContraction', 'test_create_multigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_project.py', 'networkx.algorithms.bipartite.tests.test_project', 'TestBipartiteProject', 'test_path_projected_properties_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/classes/tests/test_function.py', 'networkx.classes.tests.test_function', 'TestFunction', 'test_add_path'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_classic.py', 'networkx.generators.tests.test_classic', 'TestGeneratorClassic', 'test_cycle_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/tests/test_coding.py', 'networkx.algorithms.tree.tests.test_coding', 'TestNestedTuple', 'test_sensible_relabeling'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_matching.py', 'networkx.algorithms.tests.test_matching', 'TestMaxWeightMatching', 'test_nested_s_blossom_relabel_expand'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_interval_graph.py', 'networkx.generators.tests.test_interval_graph', 'TestIntervalGraph', 'test_interval_graph_3'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_graphml.py', 'networkx.readwrite.tests.test_graphml', 'TestWriteGraphML', 'test_more_multigraph_keys'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_matching.py', 'networkx.algorithms.tests.test_matching', 'TestMaxWeightMatching', 'test_nested_s_blossom_expand'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_nonisomorphic_trees.py', 'networkx.generators.tests.test_nonisomorphic_trees', 'TestGeneratorNonIsomorphicTrees', 'test_nonisomorphic_trees'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_interval_graph.py', 'networkx.generators.tests.test_interval_graph', 'TestIntervalGraph', 'test_interval_graph_1'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_matching.py', 'networkx.algorithms.tests.test_matching', 'TestMaxWeightMatching', 'test_trivial3'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_project.py', 'networkx.algorithms.bipartite.tests.test_project', 'TestBipartiteWeightedProjection', 'test_project_weighted_overlap'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_line.py', 'networkx.generators.tests.test_line', 'TestGeneratorLine', 'test_create1'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_graph6.py', 'networkx.readwrite.tests.test_graph6', 'TestFromGraph6Bytes', 'test_from_graph6_bytes'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_adjlist.py', 'networkx.readwrite.tests.test_adjlist', 'TestAdjlist', 'test_adjlist_delimiter'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_adjlist.py', 'networkx.readwrite.tests.test_adjlist', 'TestAdjlist', 'test_adjlist_integers'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_graphml.py', 'networkx.readwrite.tests.test_graphml', 'TestReadGraphML', 'test_preserve_multi_edge_data'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_edgelist.py', 'networkx.readwrite.tests.test_edgelist', 'TestEdgelist', 'test_edgelist_digraph'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_graphml.py', 'networkx.readwrite.tests.test_graphml', 'TestReadGraphML', 'test_read_simple_undirected_graphml'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_graphml.py', 'networkx.readwrite.tests.test_graphml', 'TestWriteGraphML', 'test_multigraph_write_generate_edge_id_from_attribute'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_project.py', 'networkx.algorithms.bipartite.tests.test_project', 'TestBipartiteProject', 'test_project_multigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_atlas.py', 'networkx.generators.tests.test_atlas', 'TestAtlasGraph', 'test_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_matrix.py', 'networkx.algorithms.bipartite.tests.test_matrix', 'TestBiadjacencyMatrix', 'test_from_biadjacency_weight'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_convert_pandas.py', 'networkx.tests.test_convert_pandas', 'TestConvertPandas', 'test_from_edgelist'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_traveling_salesman.py', 'networkx.algorithms.approximation.tests.test_traveling_salesman', '', 'test_sample_spanning_tree'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_project.py', 'networkx.algorithms.bipartite.tests.test_project', 'TestBipartiteProject', 'test_path_weighted_projected_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/classes/tests/test_graphviews.py', 'networkx.classes.tests.test_graphviews', 'TestToUndirected', 'test_already_directed'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/minors/tests/test_contraction.py', 'networkx.algorithms.minors.tests.test_contraction', 'TestQuotient', 'test_barbell'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_classic.py', 'networkx.generators.tests.test_classic', 'TestGeneratorClassic', 'test_complete_2_partite_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_project.py', 'networkx.algorithms.bipartite.tests.test_project', 'TestBipartiteWeightedProjection', 'test_project_weighted_jaccard'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_edgelist.py', 'networkx.readwrite.tests.test_edgelist', 'TestEdgelist', 'test_edgelist_multidigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_matching.py', 'networkx.algorithms.tests.test_matching', 'TestMaxWeightMatching', 'test_trivial4'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/minors/tests/test_contraction.py', 'networkx.algorithms.minors.tests.test_contraction', 'TestQuotient', 'test_path__partition_provided_as_dict_of_sets'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_matching.py', 'networkx.algorithms.tests.test_matching', 'TestMaxWeightMatching', 'test_trivial5'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_adjlist.py', 'networkx.readwrite.tests.test_adjlist', 'TestAdjlist', 'test_adjlist_multidigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_graphml.py', 'networkx.readwrite.tests.test_graphml', 'TestReadGraphML', 'test_read_undirected_multigraph_no_multiedge_graphml']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/utils/misc.py,TestReadGraphML,test_read_undirected_multigraph_no_multiedge_graphml,"(u, v) = (e[0], e[1])","
u = e[0]
v = e[1]
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_classic.py', 'networkx.generators.tests.test_classic', 'TestGeneratorClassic', 'test_star_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_edgelist.py', 'networkx.algorithms.bipartite.tests.test_edgelist', 'TestEdgelist', 'test_edgelist_integers'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_edgelist.py', 'networkx.readwrite.tests.test_edgelist', '', 'test_comments_None'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_project.py', 'networkx.algorithms.bipartite.tests.test_project', 'TestBipartiteWeightedProjection', 'test_project_weighted_ratio'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_adjlist.py', 'networkx.readwrite.tests.test_adjlist', 'TestMultilineAdjlist', 'test_multiline_adjlist_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_line.py', 'networkx.generators.tests.test_line', 'TestGeneratorLine', 'test_create2'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_sparse6.py', 'networkx.readwrite.tests.test_sparse6', 'TestWriteSparse6', 'test_read_write_inverse'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_convert.py', 'networkx.tests.test_convert', 'TestConvert', 'test_digraphs'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_pajek.py', 'networkx.readwrite.tests.test_pajek', 'TestPajek', 'test_read_pajek'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_matching.py', 'networkx.algorithms.tests.test_matching', 'TestMaxWeightMatching', 'test_nested_s_blossom_relabel'], ['https://github.com/networkx/networkx/tree/master/networkx/classes/tests/test_graphviews.py', 'networkx.classes.tests.test_graphviews', 'TestChainsOfViews', 'test_restricted_induced_subgraph_chains'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_edgelist.py', 'networkx.algorithms.bipartite.tests.test_edgelist', 'TestEdgelist', 'test_read_edgelist_3'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/minors/tests/test_contraction.py', 'networkx.algorithms.minors.tests.test_contraction', 'TestQuotient', 'test_weighted_path'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/minors/tests/test_contraction.py', 'networkx.algorithms.minors.tests.test_contraction', 'TestQuotient', 'test_multigraph_blockmodel'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/tests/test_coding.py', 'networkx.algorithms.tree.tests.test_coding', 'TestPruferSequence', 'test_decoding'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_relabel.py', 'networkx.tests.test_relabel', 'TestRelabel', 'test_relabel_nodes_multidigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_matching.py', 'networkx.algorithms.tests.test_matching', 'TestMaxWeightMatching', 'test_nasty_blossom_least_slack'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_steinertree.py', 'networkx.algorithms.approximation.tests.test_steinertree', 'TestSteinerTree', 'test_metric_closure'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_steinertree.py', 'networkx.algorithms.approximation.tests.test_steinertree', 'TestSteinerTree', 'test_multigraph_steiner_tree'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_classic.py', 'networkx.generators.tests.test_classic', 'TestGeneratorClassic', 'test_barbell_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_adjlist.py', 'networkx.readwrite.tests.test_adjlist', 'TestMultilineAdjlist', 'test_multiline_adjlist_delimiter'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_classic.py', 'networkx.generators.tests.test_classic', 'TestGeneratorClassic', 'test_lollipop_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_classic.py', 'networkx.generators.tests.test_classic', 'TestGeneratorClassic', 'test_dorogovtsev_goltsev_mendes_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_edgelist.py', 'networkx.readwrite.tests.test_edgelist', '', 'test_parse_edgelist_no_data'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_traveling_salesman.py', 'networkx.algorithms.approximation.tests.test_traveling_salesman', '', 'test_held_karp_ascent_asymmetric_3'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_graphml.py', 'networkx.readwrite.tests.test_graphml', 'TestWriteGraphML', 'test_write_read_attribute_named_key_ids_graphml'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_graphml.py', 'networkx.readwrite.tests.test_graphml', 'TestWriteGraphML', 'test_write_generate_edge_id_from_attribute'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_matching.py', 'networkx.algorithms.tests.test_matching', 'TestMaxWeightMatching', 'test_negative_weights'], ['https://github.com/networkx/networkx/tree/master/networkx/classes/tests/test_function.py', 'networkx.classes.tests.test_function', '', 'test_selfloop_edges_multi_with_data_and_keys'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_lattice.py', 'networkx.generators.tests.test_lattice', 'TestGrid2DGraph', 'test_node_input'], ['https://github.com/networkx/networkx/tree/master/networkx/classes/tests/test_function.py', 'networkx.classes.tests.test_function', 'TestFunction', 'test_edges'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_interval_graph.py', 'networkx.generators.tests.test_interval_graph', 'TestIntervalGraph', 'test_interval_graph_2'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/operators/tests/test_product.py', 'networkx.algorithms.operators.tests.test_product', '', 'test_graph_power'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_project.py', 'networkx.algorithms.bipartite.tests.test_project', 'TestBipartiteProject', 'test_directed_projection'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_project.py', 'networkx.algorithms.bipartite.tests.test_project', 'TestBipartiteWeightedProjection', 'test_project_weighted_shared'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_edgelist.py', 'networkx.algorithms.bipartite.tests.test_edgelist', 'TestEdgelist', 'test_read_edgelist_1'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_pajek.py', 'networkx.readwrite.tests.test_pajek', 'TestPajek', 'test_unicode'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/minors/tests/test_contraction.py', 'networkx.algorithms.minors.tests.test_contraction', 'TestQuotient', 'test_barbell_plus'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_classic.py', 'networkx.generators.tests.test_classic', 'TestGeneratorClassic', 'test_ladder_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_classic.py', 'networkx.generators.tests.test_classic', 'TestGeneratorClassic', 'test_wheel_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_boundary.py', 'networkx.algorithms.tests.test_boundary', 'TestEdgeBoundary', 'test_complete_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_graphml.py', 'networkx.readwrite.tests.test_graphml', 'TestReadGraphML', 'test_read_undirected_multigraph_graphml'], ['https://github.com/networkx/networkx/tree/master/networkx/classes/tests/test_function.py', 'networkx.classes.tests.test_function', 'TestFunction', 'test_add_star'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_matching.py', 'networkx.algorithms.tests.test_matching', 'TestMaxWeightMatching', 'test_floating_point_weights'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/tests/test_coding.py', 'networkx.algorithms.tree.tests.test_coding', 'TestPruferSequence', 'test_inverse'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_convert.py', 'networkx.tests.test_convert', 'TestConvert', 'test_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/minors/tests/test_contraction.py', 'networkx.algorithms.minors.tests.test_contraction', 'TestQuotient', 'test_path__partition_provided_as_dict_of_tuples'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/minors/tests/test_contraction.py', 'networkx.algorithms.minors.tests.test_contraction', 'TestContraction', 'test_multigraph_keys'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_traveling_salesman.py', 'networkx.algorithms.approximation.tests.test_traveling_salesman', '', 'test_held_karp_ascent'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_edgelist.py', 'networkx.readwrite.tests.test_edgelist', '', 'test_parse_edgelist_with_data_list'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_project.py', 'networkx.algorithms.bipartite.tests.test_project', 'TestBipartiteWeightedProjection', 'test_generic_weighted_projected_graph_simple'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_edgelist.py', 'networkx.readwrite.tests.test_edgelist', 'TestEdgelist', 'test_edgelist_multigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_adjlist.py', 'networkx.readwrite.tests.test_adjlist', 'TestAdjlist', 'test_adjlist_multigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_matrix.py', 'networkx.algorithms.bipartite.tests.test_matrix', 'TestBiadjacencyMatrix', 'test_from_biadjacency_multigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_sparse6.py', 'networkx.readwrite.tests.test_sparse6', 'TestSparseGraph6', 'test_from_sparse6_bytes'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_graphml.py', 'networkx.readwrite.tests.test_graphml', 'TestWriteGraphML', 'test_default_attribute'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_adjlist.py', 'networkx.readwrite.tests.test_adjlist', 'TestMultilineAdjlist', 'test_multiline_adjlist_multidigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_classic.py', 'networkx.generators.tests.test_classic', 'TestGeneratorClassic', 'test_complete_1_partite_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_classic.py', 'networkx.generators.tests.test_classic', 'TestGeneratorClassic', 'test_circular_ladder_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_project.py', 'networkx.algorithms.bipartite.tests.test_project', 'TestBipartiteProject', 'test_path_collaboration_projected_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/minors/tests/test_contraction.py', 'networkx.algorithms.minors.tests.test_contraction', 'TestQuotient', 'test_blockmodel'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_p2g.py', 'networkx.readwrite.tests.test_p2g', 'TestP2G', 'test_write_read_p2g'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/minors/tests/test_contraction.py', 'networkx.algorithms.minors.tests.test_contraction', 'TestContraction', 'test_contract_selfloop_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/classes/tests/test_graphviews.py', 'networkx.classes.tests.test_graphviews', 'TestChainsOfViews', 'test_pickle'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_graph6.py', 'networkx.readwrite.tests.test_graph6', 'TestWriteGraph6', 'test_roundtrip'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_matching.py', 'networkx.algorithms.tests.test_matching', 'TestMaxWeightMatching', 'test_nasty_blossom2'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_graphml.py', 'networkx.readwrite.tests.test_graphml', 'TestReadGraphML', 'test_read_undirected_multigraph_only_ids_for_multiedges_graphml'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_classic.py', 'networkx.generators.tests.test_classic', 'TestGeneratorClassic', 'test_complete_0_partite_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_interval_graph.py', 'networkx.generators.tests.test_interval_graph', 'TestIntervalGraph', 'test_interval_graph_5'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_relabel.py', 'networkx.tests.test_relabel', 'TestRelabel', 'test_relabel_nodes_multigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_edgelist.py', 'networkx.readwrite.tests.test_edgelist', '', 'test_parse_edgelist_with_data_dict'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_dag.py', 'networkx.algorithms.tests.test_dag', 'TestDAG', 'test_reflexive_transitive_closure'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_project.py', 'networkx.algorithms.bipartite.tests.test_project', 'TestBipartiteProject', 'test_path_weighted_projected_directed_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/minors/tests/test_contraction.py', 'networkx.algorithms.minors.tests.test_contraction', 'TestQuotient', 'test_directed_path'], ['https://github.com/networkx/networkx/tree/master/networkx/classes/tests/test_graphviews.py', 'networkx.classes.tests.test_graphviews', 'TestToDirected', 'test_already_directed'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/minors/tests/test_contraction.py', 'networkx.algorithms.minors.tests.test_contraction', 'TestQuotient', 'test_directed_multigraph_path'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_edgelist.py', 'networkx.readwrite.tests.test_edgelist', '', 'test_read_weighted_edgelist'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/minors/tests/test_contraction.py', 'networkx.algorithms.minors.tests.test_contraction', 'TestQuotient', 'test_path'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_ego.py', 'networkx.generators.tests.test_ego', 'TestGeneratorEgo', 'test_ego'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_project.py', 'networkx.algorithms.bipartite.tests.test_project', 'TestBipartiteWeightedProjection', 'test_generic_weighted_projected_graph_custom'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_pajek.py', 'networkx.readwrite.tests.test_pajek', 'TestPajek', 'test_parse_pajek_simple'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_traveling_salesman.py', 'networkx.algorithms.approximation.tests.test_traveling_salesman', '', 'test_ascent_method_asymmetric_2'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_matching.py', 'networkx.algorithms.tests.test_matching', 'TestMaxWeightMatching', 'test_nasty_blossom_expand_recursively'], ['https://github.com/networkx/networkx/tree/master/networkx/classes/tests/test_function.py', 'networkx.classes.tests.test_function', 'TestFunction', 'test_add_cycle'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_matching.py', 'networkx.algorithms.tests.test_matching', 'TestMaxWeightMatching', 'test_nasty_blossom1'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_adjlist.py', 'networkx.readwrite.tests.test_adjlist', 'TestMultilineAdjlist', 'test_multiline_adjlist_integers'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_dag.py', 'networkx.algorithms.tests.test_dag', 'TestDAG', 'test_transitive_reduction'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_edgelist.py', 'networkx.readwrite.tests.test_edgelist', 'TestEdgelist', 'test_edgelist_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_classic.py', 'networkx.generators.tests.test_classic', 'TestGeneratorClassic', 'test_path_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_convert.py', 'networkx.tests.test_convert', 'TestConvert', 'test_to_edgelist'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/tests/test_operations.py', 'networkx.algorithms.tree.tests.test_operations', 'TestJoin', 'test_single'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/operators/tests/test_all.py', 'networkx.algorithms.operators.tests.test_all', '', 'test_union_all_and_compose_all'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_pajek.py', 'networkx.readwrite.tests.test_pajek', 'TestPajek', 'test_write_pajek'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_line.py', 'networkx.generators.tests.test_line', '', 'test_edge_func'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_traveling_salesman.py', 'networkx.algorithms.approximation.tests.test_traveling_salesman', '', 'test_ascent_method_asymmetric'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_edgelist.py', 'networkx.algorithms.bipartite.tests.test_edgelist', 'TestEdgelist', 'test_edgelist_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_matching.py', 'networkx.algorithms.tests.test_matching', 'TestMaxWeightMatching', 'test_nasty_blossom_augmenting'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_project.py', 'networkx.algorithms.bipartite.tests.test_project', 'TestBipartiteProject', 'test_directed_path_collaboration_projected_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_graphml.py', 'networkx.readwrite.tests.test_graphml', 'TestWriteGraphML', 'test_write_read_attribute_numeric_type_graphml'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_classic.py', 'networkx.generators.tests.test_classic', 'TestGeneratorClassic', 'test_complete_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_pajek.py', 'networkx.readwrite.tests.test_pajek', 'TestPajek', 'test_parse_pajet_mat'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_adjlist.py', 'networkx.readwrite.tests.test_adjlist', 'TestAdjlist', 'test_adjlist_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_adjlist.py', 'networkx.readwrite.tests.test_adjlist', 'TestMultilineAdjlist', 'test_multiline_adjlist_digraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_project.py', 'networkx.algorithms.bipartite.tests.test_project', 'TestBipartiteProject', 'test_path_projected_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_steinertree.py', 'networkx.algorithms.approximation.tests.test_steinertree', 'TestSteinerTree', 'test_steiner_tree'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/minors/tests/test_contraction.py', 'networkx.algorithms.minors.tests.test_contraction', 'TestQuotient', 'test_multigraph_path'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_edgelist.py', 'networkx.algorithms.bipartite.tests.test_edgelist', 'TestEdgelist', 'test_edgelist_multigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/minors/tests/test_contraction.py', 'networkx.algorithms.minors.tests.test_contraction', 'TestQuotient', 'test_path__partition_provided_as_dict_of_lists'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/tests/test_coding.py', 'networkx.algorithms.tree.tests.test_coding', 'TestPruferSequence', 'test_decoding2'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/minors/tests/test_contraction.py', 'networkx.algorithms.minors.tests.test_contraction', 'TestQuotient', 'test_quotient_graph_incomplete_partition'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_gpickle.py', 'networkx.readwrite.tests.test_gpickle', 'TestGpickle', 'test_gpickle'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_adjlist.py', 'networkx.readwrite.tests.test_adjlist', 'TestMultilineAdjlist', 'test_multiline_adjlist_multigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_matching.py', 'networkx.algorithms.tests.test_matching', 'TestMaxWeightMatching', 'test_trivial6'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_line.py', 'networkx.generators.tests.test_line', 'TestGeneratorLine', 'test_digraph2'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_edgelist.py', 'networkx.readwrite.tests.test_edgelist', 'TestEdgelist', 'test_edgelist_integers'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_adjlist.py', 'networkx.readwrite.tests.test_adjlist', 'TestAdjlist', 'test_adjlist_digraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_matching.py', 'networkx.algorithms.tests.test_matching', 'TestMaxWeightMatching', 'test_s_t_blossom'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_matching.py', 'networkx.algorithms.tests.test_matching', 'TestMaxWeightMatching', 'test_s_blossom'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_classic.py', 'networkx.generators.tests.test_classic', 'TestGeneratorClassic', 'test_circulant_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/operators/tests/test_binary.py', 'networkx.algorithms.operators.tests.test_binary', '', 'test_union_and_compose'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_sparse6.py', 'networkx.readwrite.tests.test_sparse6', 'TestSparseGraph6', 'test_read_sparse6'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_matching.py', 'networkx.algorithms.tests.test_matching', 'TestMaxWeightMatching', 'test_s_blossom_relabel_expand'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_gpickle.py', 'networkx.readwrite.tests.test_gpickle', 'TestGpickle', 'test_protocol'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_project.py', 'networkx.algorithms.bipartite.tests.test_project', 'TestBipartiteProject', 'test_star_projected_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_convert.py', 'networkx.tests.test_convert', 'TestConvert', 'test_with_multiedges_self_loops'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_dag.py', 'networkx.algorithms.tests.test_dag', 'TestDAG', 'test_transitive_closure_dag'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_interval_graph.py', 'networkx.generators.tests.test_interval_graph', 'TestIntervalGraph', 'test_interval_graph_0'], ['https://github.com/networkx/networkx/tree/master/networkx/classes/tests/test_function.py', 'networkx.classes.tests.test_function', 'TestFunction', 'test_degree'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_dag.py', 'networkx.algorithms.tests.test_dag', 'TestDAG', 'test_transitive_closure'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_p2g.py', 'networkx.readwrite.tests.test_p2g', 'TestP2G', 'test_read_p2g'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_graph6.py', 'networkx.readwrite.tests.test_graph6', 'TestFromGraph6Bytes', 'test_read_equals_from_bytes'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_project.py', 'networkx.algorithms.bipartite.tests.test_project', 'TestBipartiteWeightedProjection', 'test_project_weighted_newman'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_pajek.py', 'networkx.readwrite.tests.test_pajek', 'TestPajek', 'test_parse_pajek'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_convert.py', 'networkx.tests.test_convert', 'TestConvert', 'test_edgelists'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/minors/tests/test_contraction.py', 'networkx.algorithms.minors.tests.test_contraction', 'TestContraction', 'test_create_multigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_project.py', 'networkx.algorithms.bipartite.tests.test_project', 'TestBipartiteProject', 'test_path_projected_properties_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/classes/tests/test_function.py', 'networkx.classes.tests.test_function', 'TestFunction', 'test_add_path'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_classic.py', 'networkx.generators.tests.test_classic', 'TestGeneratorClassic', 'test_cycle_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/tests/test_coding.py', 'networkx.algorithms.tree.tests.test_coding', 'TestNestedTuple', 'test_sensible_relabeling'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_matching.py', 'networkx.algorithms.tests.test_matching', 'TestMaxWeightMatching', 'test_nested_s_blossom_relabel_expand'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_interval_graph.py', 'networkx.generators.tests.test_interval_graph', 'TestIntervalGraph', 'test_interval_graph_3'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_graphml.py', 'networkx.readwrite.tests.test_graphml', 'TestWriteGraphML', 'test_more_multigraph_keys'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_matching.py', 'networkx.algorithms.tests.test_matching', 'TestMaxWeightMatching', 'test_nested_s_blossom_expand'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_nonisomorphic_trees.py', 'networkx.generators.tests.test_nonisomorphic_trees', 'TestGeneratorNonIsomorphicTrees', 'test_nonisomorphic_trees'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_interval_graph.py', 'networkx.generators.tests.test_interval_graph', 'TestIntervalGraph', 'test_interval_graph_1'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_matching.py', 'networkx.algorithms.tests.test_matching', 'TestMaxWeightMatching', 'test_trivial3'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_project.py', 'networkx.algorithms.bipartite.tests.test_project', 'TestBipartiteWeightedProjection', 'test_project_weighted_overlap'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_line.py', 'networkx.generators.tests.test_line', 'TestGeneratorLine', 'test_create1'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_graph6.py', 'networkx.readwrite.tests.test_graph6', 'TestFromGraph6Bytes', 'test_from_graph6_bytes'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_adjlist.py', 'networkx.readwrite.tests.test_adjlist', 'TestAdjlist', 'test_adjlist_delimiter'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_adjlist.py', 'networkx.readwrite.tests.test_adjlist', 'TestAdjlist', 'test_adjlist_integers'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_graphml.py', 'networkx.readwrite.tests.test_graphml', 'TestReadGraphML', 'test_preserve_multi_edge_data'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_edgelist.py', 'networkx.readwrite.tests.test_edgelist', 'TestEdgelist', 'test_edgelist_digraph'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_graphml.py', 'networkx.readwrite.tests.test_graphml', 'TestReadGraphML', 'test_read_simple_undirected_graphml'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_graphml.py', 'networkx.readwrite.tests.test_graphml', 'TestWriteGraphML', 'test_multigraph_write_generate_edge_id_from_attribute'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_project.py', 'networkx.algorithms.bipartite.tests.test_project', 'TestBipartiteProject', 'test_project_multigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_atlas.py', 'networkx.generators.tests.test_atlas', 'TestAtlasGraph', 'test_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_matrix.py', 'networkx.algorithms.bipartite.tests.test_matrix', 'TestBiadjacencyMatrix', 'test_from_biadjacency_weight'], ['https://github.com/networkx/networkx/tree/master/networkx/tests/test_convert_pandas.py', 'networkx.tests.test_convert_pandas', 'TestConvertPandas', 'test_from_edgelist'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_traveling_salesman.py', 'networkx.algorithms.approximation.tests.test_traveling_salesman', '', 'test_sample_spanning_tree'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_project.py', 'networkx.algorithms.bipartite.tests.test_project', 'TestBipartiteProject', 'test_path_weighted_projected_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/classes/tests/test_graphviews.py', 'networkx.classes.tests.test_graphviews', 'TestToUndirected', 'test_already_directed'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/minors/tests/test_contraction.py', 'networkx.algorithms.minors.tests.test_contraction', 'TestQuotient', 'test_barbell'], ['https://github.com/networkx/networkx/tree/master/networkx/generators/tests/test_classic.py', 'networkx.generators.tests.test_classic', 'TestGeneratorClassic', 'test_complete_2_partite_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_project.py', 'networkx.algorithms.bipartite.tests.test_project', 'TestBipartiteWeightedProjection', 'test_project_weighted_jaccard'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_edgelist.py', 'networkx.readwrite.tests.test_edgelist', 'TestEdgelist', 'test_edgelist_multidigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_matching.py', 'networkx.algorithms.tests.test_matching', 'TestMaxWeightMatching', 'test_trivial4'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/minors/tests/test_contraction.py', 'networkx.algorithms.minors.tests.test_contraction', 'TestQuotient', 'test_path__partition_provided_as_dict_of_sets'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_matching.py', 'networkx.algorithms.tests.test_matching', 'TestMaxWeightMatching', 'test_trivial5'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_adjlist.py', 'networkx.readwrite.tests.test_adjlist', 'TestAdjlist', 'test_adjlist_multidigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_graphml.py', 'networkx.readwrite.tests.test_graphml', 'TestReadGraphML', 'test_read_undirected_multigraph_no_multiedge_graphml']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/utils/contextmanagers.py,TestReverseView,test_iter,"(G._pred, G._succ) = (G._succ, G._pred)","
tmp0 = G._pred
G._pred = G._succ
G._succ = tmp0
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/classes/tests/test_graphviews.py', 'networkx.classes.tests.test_graphviews', 'TestToDirected', 'test_iter'], ['https://github.com/networkx/networkx/tree/master/networkx/utils/tests/test_contextmanager.py', 'networkx.utils.tests.test_contextmanager', '', 'test_reversed'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_clique.py', 'networkx.algorithms.tests.test_clique', 'TestCliques', 'test_cliques_containing_node'], ['https://github.com/networkx/networkx/tree/master/networkx/classes/tests/test_graphviews.py', 'networkx.classes.tests.test_graphviews', 'TestReverseView', 'test_iter']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/utils/contextmanagers.py,TestReverseView,test_iter,"(G._pred, G._succ) = (G._succ, G._pred)","
tmp0 = G._pred
G._pred = G._succ
G._succ = tmp0
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/classes/tests/test_graphviews.py', 'networkx.classes.tests.test_graphviews', 'TestToDirected', 'test_iter'], ['https://github.com/networkx/networkx/tree/master/networkx/utils/tests/test_contextmanager.py', 'networkx.utils.tests.test_contextmanager', '', 'test_reversed'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_clique.py', 'networkx.algorithms.tests.test_clique', 'TestCliques', 'test_cliques_containing_node'], ['https://github.com/networkx/networkx/tree/master/networkx/classes/tests/test_graphviews.py', 'networkx.classes.tests.test_graphviews', 'TestReverseView', 'test_iter']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/threshold.py,TestGeneratorThreshold,test_creation_sequences,"(d, v) = ds.pop()","
tmp_fun_0 = ds.pop()
d = tmp_fun_0[0]
v = tmp_fun_0[1]
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_threshold.py', 'networkx.algorithms.tests.test_threshold', 'TestGeneratorThreshold', 'test_shortest_path'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_threshold.py', 'networkx.algorithms.tests.test_threshold', 'TestGeneratorThreshold', 'test_creation_sequences']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/threshold.py,TestGeneratorThreshold,test_creation_sequences,"(d, v) = ds.pop(0)","
tmp_fun_0 = ds.pop(0)
d = tmp_fun_0[0]
v = tmp_fun_0[1]
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_threshold.py', 'networkx.algorithms.tests.test_threshold', 'TestGeneratorThreshold', 'test_shortest_path'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_threshold.py', 'networkx.algorithms.tests.test_threshold', 'TestGeneratorThreshold', 'test_creation_sequences']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/quality.py,,test_modularity_increase,out_degree = in_degree = dict(G.degree(weight=weight)),"
tmp_value = dict(G.degree(weight=weight))
out_degree = tmp_value
in_degree = tmp_value
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_quality.py', 'networkx.algorithms.community.tests.test_quality', '', 'test_modularity'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_quality.py', 'networkx.algorithms.community.tests.test_quality', '', 'test_modularity_resolution'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_louvain.py', 'networkx.algorithms.community.tests.test_louvain', '', 'test_modularity_increase']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/modularity_max.py,,test_modularity_communities_directed_weighted,"a = b = {node: deg * q0 * 0.5 for (node, deg) in G.degree(weight=weight)}","
tmp_value = {node: deg * q0 * 0.5 for (node, deg) in G.degree(weight=weight)}
a = tmp_value
b = tmp_value
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greed_modularity_communities_multidigraph_weighted'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greedy_modularity_communities_multigraph_weighted'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greedy_modularity_communities_multigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greed_modularity_communities_multidigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greedy_modularity_communities_directed'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_modularity_communities_floating_point'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greedy_modularity_communities_relabeled'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_modularity_communities_weighted'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_n_communities_parameter'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_resolution_parameter_impact'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_modularity_communities_directed_weighted']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/modularity_max.py,,test_modularity_communities_directed_weighted,"(negdq, u, v) = H.pop()","
tmp_fun_0 = H.pop()
negdq = tmp_fun_0[0]
u = tmp_fun_0[1]
v = tmp_fun_0[2]
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greed_modularity_communities_multidigraph_weighted'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greedy_modularity_communities_multigraph_weighted'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greedy_modularity_communities_multigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greed_modularity_communities_multidigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greedy_modularity_communities_directed'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_modularity_communities_floating_point'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_greedy_modularity_communities_relabeled'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_modularity_communities_weighted'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_n_communities_parameter'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_resolution_parameter_impact'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_modularity_communities_directed_weighted']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/modularity_max.py,,test_resolution_parameter_impact,"(i, j, dq) = to_merge","
i = to_merge[0]
j = to_merge[1]
dq = to_merge[2]
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_resolution_parameter_impact']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/modularity_max.py,,test_resolution_parameter_impact,"(u, v) = (communities[i], communities[j])","
u = communities[i]
v = communities[j]
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/community/tests/test_modularity_max.py', 'networkx.algorithms.community.tests.test_modularity_max', '', 'test_resolution_parameter_impact']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/operations.py,TestGeneratorThreshold,test_creation_sequences,"(trees, roots) = zip(*rooted_trees)","
(trees, roots) = zip(*rooted_trees)
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_graphml.py', 'networkx.readwrite.tests.test_graphml', 'TestWriteGraphML', 'test_multigraph_write_generate_edge_id_from_attribute'], ['https://github.com/networkx/networkx/tree/master/networkx/readwrite/tests/test_graphml.py', 'networkx.readwrite.tests.test_graphml', 'TestWriteGraphML', 'test_write_generate_edge_id_from_attribute'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tests/test_threshold.py', 'networkx.algorithms.tests.test_threshold', 'TestGeneratorThreshold', 'test_creation_sequences']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/branchings.py,,test_edge_attribute_discard,"(G, B) = (self.G, self.B)","
G = self.G
B = self.B
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/tests/test_branchings.py', 'networkx.algorithms.tree.tests.test_branchings', '', 'test_edge_attribute_preservation_normal_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/tests/test_branchings.py', 'networkx.algorithms.tree.tests.test_branchings', '', 'test_edge_attribute_preservation_multigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/tests/test_branchings.py', 'networkx.algorithms.tree.tests.test_branchings', '', 'test_edge_attribute_discard']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/branchings.py,,test_edge_attribute_discard,"(edge, weight) = desired_edge(v)","
tmp_fun_0 = desired_edge(v)
edge = tmp_fun_0[0]
weight = tmp_fun_0[1]
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/tests/test_branchings.py', 'networkx.algorithms.tree.tests.test_branchings', '', 'test_edge_attribute_preservation_normal_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/tests/test_branchings.py', 'networkx.algorithms.tree.tests.test_branchings', '', 'test_edge_attribute_preservation_multigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/tests/test_branchings.py', 'networkx.algorithms.tree.tests.test_branchings', '', 'test_edge_attribute_discard']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/branchings.py,,test_edge_attribute_discard,"(isroot, edgekey) = is_root(self.graphs[self.level + 1], merged_node, edges)","
tmp_fun_0 = is_root(self.graphs[self.level + 1], merged_node, edges)
isroot = tmp_fun_0[0]
edgekey = tmp_fun_0[1]
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/tests/test_branchings.py', 'networkx.algorithms.tree.tests.test_branchings', '', 'test_edge_attribute_preservation_normal_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/tests/test_branchings.py', 'networkx.algorithms.tree.tests.test_branchings', '', 'test_edge_attribute_preservation_multigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/tests/test_branchings.py', 'networkx.algorithms.tree.tests.test_branchings', '', 'test_edge_attribute_discard']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/branchings.py,,test_edge_attribute_discard,"(u, v, d) = self.graphs[0].edge_index[edgekey]","
u = self.graphs[0].edge_index[edgekey][0]
v = self.graphs[0].edge_index[edgekey][1]
d = self.graphs[0].edge_index[edgekey][2]
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/tests/test_branchings.py', 'networkx.algorithms.tree.tests.test_branchings', '', 'test_edge_attribute_preservation_normal_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/tests/test_branchings.py', 'networkx.algorithms.tree.tests.test_branchings', '', 'test_edge_attribute_preservation_multigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/tests/test_branchings.py', 'networkx.algorithms.tree.tests.test_branchings', '', 'test_edge_attribute_discard']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/branchings.py,,test_edge_attribute_discard,"(Q_nodes, Q_edges) = get_path(B, v, u)","
tmp_fun_0 = get_path(B, v, u)
Q_nodes = tmp_fun_0[0]
Q_edges = tmp_fun_0[1]
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/tests/test_branchings.py', 'networkx.algorithms.tree.tests.test_branchings', '', 'test_edge_attribute_preservation_normal_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/tests/test_branchings.py', 'networkx.algorithms.tree.tests.test_branchings', '', 'test_edge_attribute_preservation_multigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/tests/test_branchings.py', 'networkx.algorithms.tree.tests.test_branchings', '', 'test_edge_attribute_discard']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/branchings.py,,test_edge_attribute_discard,"(Q_nodes, Q_edges) = (None, None)","
Q_nodes = None
Q_edges = None
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/tests/test_branchings.py', 'networkx.algorithms.tree.tests.test_branchings', '', 'test_edge_attribute_preservation_normal_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/tests/test_branchings.py', 'networkx.algorithms.tree.tests.test_branchings', '', 'test_edge_attribute_preservation_multigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/tests/test_branchings.py', 'networkx.algorithms.tree.tests.test_branchings', '', 'test_edge_attribute_discard']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/branchings.py,,test_edge_attribute_discard,"(u, v, data) = G.edge_index[edgekey]","
u = G.edge_index[edgekey][0]
v = G.edge_index[edgekey][1]
data = G.edge_index[edgekey][2]
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/tests/test_branchings.py', 'networkx.algorithms.tree.tests.test_branchings', '', 'test_edge_attribute_preservation_normal_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/tests/test_branchings.py', 'networkx.algorithms.tree.tests.test_branchings', '', 'test_edge_attribute_preservation_multigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/tests/test_branchings.py', 'networkx.algorithms.tree.tests.test_branchings', '', 'test_edge_attribute_discard']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/branchings.py,,test_edge_attribute_discard,"(u, v, data) = B.edge_index[edge_key]","
u = B.edge_index[edge_key][0]
v = B.edge_index[edge_key][1]
data = B.edge_index[edge_key][2]
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/tests/test_branchings.py', 'networkx.algorithms.tree.tests.test_branchings', '', 'test_edge_attribute_preservation_normal_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/tests/test_branchings.py', 'networkx.algorithms.tree.tests.test_branchings', '', 'test_edge_attribute_preservation_multigraph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/tree/tests/test_branchings.py', 'networkx.algorithms.tree.tests.test_branchings', '', 'test_edge_attribute_discard']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/steinertree.py,TestSteinerTree,test_metric_closure,"(u, (distance, path)) = next(all_paths_iter)","
tmp_fun_0 = next(all_paths_iter)
u = tmp_fun_0[0]
distance = tmp_fun_0[1][0]
path = tmp_fun_0[1][1]
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/approximation/tests/test_steinertree.py', 'networkx.algorithms.approximation.tests.test_steinertree', 'TestSteinerTree', 'test_metric_closure']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/connectivity/edge_kcomponents.py,,test_zero_k_exception,"(value, (S, T)) = nx.minimum_cut(H, source, sink)","
tmp_fun_0 = nx.minimum_cut(H, source, sink)
value = tmp_fun_0[0]
S = tmp_fun_0[1][0]
T = tmp_fun_0[1][1]
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/connectivity/tests/test_edge_kcomponents.py', 'networkx.algorithms.connectivity.tests.test_edge_kcomponents', '', 'test_local_subgraph_difference'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/connectivity/tests/test_edge_kcomponents.py', 'networkx.algorithms.connectivity.tests.test_edge_kcomponents', '', 'test_directed_aux_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/connectivity/tests/test_edge_kcomponents.py', 'networkx.algorithms.connectivity.tests.test_edge_kcomponents', '', 'test_undirected_aux_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/connectivity/tests/test_edge_kcomponents.py', 'networkx.algorithms.connectivity.tests.test_edge_kcomponents', '', 'test_zero_k_exception']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/connectivity/edge_kcomponents.py,,test_zero_k_exception,"(value_, (T_, S_)) = nx.minimum_cut(H, sink, source)","
tmp_fun_0 = nx.minimum_cut(H, sink, source)
value_ = tmp_fun_0[0]
T_ = tmp_fun_0[1][0]
S_ = tmp_fun_0[1][1]
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/connectivity/tests/test_edge_kcomponents.py', 'networkx.algorithms.connectivity.tests.test_edge_kcomponents', '', 'test_local_subgraph_difference'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/connectivity/tests/test_edge_kcomponents.py', 'networkx.algorithms.connectivity.tests.test_edge_kcomponents', '', 'test_directed_aux_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/connectivity/tests/test_edge_kcomponents.py', 'networkx.algorithms.connectivity.tests.test_edge_kcomponents', '', 'test_undirected_aux_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/connectivity/tests/test_edge_kcomponents.py', 'networkx.algorithms.connectivity.tests.test_edge_kcomponents', '', 'test_zero_k_exception']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/connectivity/edge_kcomponents.py,,test_zero_k_exception,"(value, S, T) = (value_, S_, T_)","
value = value_
S = S_
T = T_
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/connectivity/tests/test_edge_kcomponents.py', 'networkx.algorithms.connectivity.tests.test_edge_kcomponents', '', 'test_local_subgraph_difference'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/connectivity/tests/test_edge_kcomponents.py', 'networkx.algorithms.connectivity.tests.test_edge_kcomponents', '', 'test_directed_aux_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/connectivity/tests/test_edge_kcomponents.py', 'networkx.algorithms.connectivity.tests.test_edge_kcomponents', '', 'test_undirected_aux_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/connectivity/tests/test_edge_kcomponents.py', 'networkx.algorithms.connectivity.tests.test_edge_kcomponents', '', 'test_zero_k_exception']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/matrix.py,TestBiadjacencyMatrix,test_from_biadjacency_roundtrip,"(row, col, data) = ([], [], [])","
row = []
col = []
data = []
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_matrix.py', 'networkx.algorithms.bipartite.tests.test_matrix', 'TestBiadjacencyMatrix', 'test_empty_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_matrix.py', 'networkx.algorithms.bipartite.tests.test_matrix', 'TestBiadjacencyMatrix', 'test_biadjacency_matrix_order'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_matrix.py', 'networkx.algorithms.bipartite.tests.test_matrix', 'TestBiadjacencyMatrix', 'test_biadjacency_matrix_weight'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_matrix.py', 'networkx.algorithms.bipartite.tests.test_matrix', 'TestBiadjacencyMatrix', 'test_format_keyword'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_basic.py', 'networkx.algorithms.bipartite.tests.test_basic', 'TestBipartiteBasic', 'test_biadjacency_matrix_weight'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_matrix.py', 'networkx.algorithms.bipartite.tests.test_matrix', 'TestBiadjacencyMatrix', 'test_biadjacency_matrix'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_matrix.py', 'networkx.algorithms.bipartite.tests.test_matrix', 'TestBiadjacencyMatrix', 'test_duplicate_row'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_matrix.py', 'networkx.algorithms.bipartite.tests.test_matrix', 'TestBiadjacencyMatrix', 'test_duplicate_col'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_basic.py', 'networkx.algorithms.bipartite.tests.test_basic', 'TestBipartiteBasic', 'test_biadjacency_matrix_order'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_matrix.py', 'networkx.algorithms.bipartite.tests.test_matrix', 'TestBiadjacencyMatrix', 'test_null_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_basic.py', 'networkx.algorithms.bipartite.tests.test_basic', 'TestBipartiteBasic', 'test_biadjacency_matrix'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_matrix.py', 'networkx.algorithms.bipartite.tests.test_matrix', 'TestBiadjacencyMatrix', 'test_from_biadjacency_roundtrip']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/matrix.py,TestBiadjacencyMatrix,test_from_biadjacency_roundtrip,"(row, col, data) = zip(*((row_index[u], col_index[v], d.get(weight, 1)) for (u, v, d) in G.edges(row_order, data=True) if u in row_index and v in col_index))","
(row, col, data) = zip(*((row_index[u], col_index[v], d.get(weight, 1)) for (u, v, d) in G.edges(row_order, data=True) if u in row_index and v in col_index))
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_matrix.py', 'networkx.algorithms.bipartite.tests.test_matrix', 'TestBiadjacencyMatrix', 'test_empty_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_matrix.py', 'networkx.algorithms.bipartite.tests.test_matrix', 'TestBiadjacencyMatrix', 'test_biadjacency_matrix_order'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_matrix.py', 'networkx.algorithms.bipartite.tests.test_matrix', 'TestBiadjacencyMatrix', 'test_biadjacency_matrix_weight'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_matrix.py', 'networkx.algorithms.bipartite.tests.test_matrix', 'TestBiadjacencyMatrix', 'test_format_keyword'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_basic.py', 'networkx.algorithms.bipartite.tests.test_basic', 'TestBipartiteBasic', 'test_biadjacency_matrix_weight'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_matrix.py', 'networkx.algorithms.bipartite.tests.test_matrix', 'TestBiadjacencyMatrix', 'test_biadjacency_matrix'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_matrix.py', 'networkx.algorithms.bipartite.tests.test_matrix', 'TestBiadjacencyMatrix', 'test_duplicate_row'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_matrix.py', 'networkx.algorithms.bipartite.tests.test_matrix', 'TestBiadjacencyMatrix', 'test_duplicate_col'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_basic.py', 'networkx.algorithms.bipartite.tests.test_basic', 'TestBipartiteBasic', 'test_biadjacency_matrix_order'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_matrix.py', 'networkx.algorithms.bipartite.tests.test_matrix', 'TestBiadjacencyMatrix', 'test_null_graph'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_basic.py', 'networkx.algorithms.bipartite.tests.test_basic', 'TestBipartiteBasic', 'test_biadjacency_matrix'], ['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_matrix.py', 'networkx.algorithms.bipartite.tests.test_matrix', 'TestBiadjacencyMatrix', 'test_from_biadjacency_roundtrip']]"
networkx,https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/generators.py,TestGeneratorsBipartite,test_havel_hakimi_graph,"(degree, u) = astubs.pop()","
tmp_fun_0 = astubs.pop()
degree = tmp_fun_0[0]
u = tmp_fun_0[1]
",1,"[['https://github.com/networkx/networkx/tree/master/networkx/algorithms/bipartite/tests/test_generators.py', 'networkx.algorithms.bipartite.tests.test_generators', 'TestGeneratorsBipartite', 'test_havel_hakimi_graph']]"
toolz,https://github.com/pytoolz/toolz/tree/master/toolz/dicttoolz.py,TestDict,test_update_in,rv = inner = factory(),"
tmp_value = factory()
rv = tmp_value
inner = tmp_value
",1,"[['https://github.com/pytoolz/toolz/tree/master/toolz/tests/test_dicttoolz.py', 'toolz.tests.test_dicttoolz', 'TestDict', 'test_update_in']]"
toolz,https://github.com/pytoolz/toolz/tree/master/toolz/dicttoolz.py,TestDict,test_update_in,inner[k] = inner = dtemp,"
tmp_value = dtemp
inner[k] = tmp_value
inner = tmp_value
",1,"[['https://github.com/pytoolz/toolz/tree/master/toolz/tests/test_dicttoolz.py', 'toolz.tests.test_dicttoolz', 'TestDict', 'test_update_in']]"
toolz,https://github.com/pytoolz/toolz/tree/master/toolz/dicttoolz.py,TestDict,test_update_in,d = dtemp = factory(),"
tmp_value = factory()
d = tmp_value
dtemp = tmp_value
",1,"[['https://github.com/pytoolz/toolz/tree/master/toolz/tests/test_dicttoolz.py', 'toolz.tests.test_dicttoolz', 'TestDict', 'test_update_in']]"
toolz,https://github.com/pytoolz/toolz/tree/master/toolz/functoolz.py,,test_apply,"(func, args) = (func_and_args[0], func_and_args[1:])","
func = func_and_args[0]
args = func_and_args[1:]
",1,"[['https://github.com/pytoolz/toolz/tree/master/toolz/tests/test_functoolz.py', 'toolz.tests.test_functoolz', '', 'test_apply']]"
toolz,https://github.com/pytoolz/toolz/tree/master/toolz/functoolz.py,,test_thread_first,"(func, args) = (form[0], form[1:])","
func = form[0]
args = form[1:]
",1,"[['https://github.com/pytoolz/toolz/tree/master/toolz/tests/test_functoolz.py', 'toolz.tests.test_functoolz', '', 'test_thread_first']]"
toolz,https://github.com/pytoolz/toolz/tree/master/toolz/functoolz.py,,test_thread_last,"(func, args) = (form[0], form[1:])","
func = form[0]
args = form[1:]
",1,"[['https://github.com/pytoolz/toolz/tree/master/toolz/tests/test_functoolz.py', 'toolz.tests.test_functoolz', '', 'test_thread_last']]"
toolz,https://github.com/pytoolz/toolz/tree/master/toolz/functoolz.py,,test_memoize_curry_cache,"cache[k] = result = func(*args, **kwargs)","
tmp_value = func(*args, **kwargs)
cache[k] = tmp_value
result = tmp_value
",1,"[['https://github.com/pytoolz/toolz/tree/master/toolz/tests/test_functoolz.py', 'toolz.tests.test_functoolz', '', 'test_memoize_key_signature'], ['https://github.com/pytoolz/toolz/tree/master/toolz/tests/test_functoolz.py', 'toolz.tests.test_functoolz', '', 'test_memoize_wrapped'], ['https://github.com/pytoolz/toolz/tree/master/toolz/tests/test_functoolz.py', 'toolz.tests.test_functoolz', '', 'test_memoize'], ['https://github.com/pytoolz/toolz/tree/master/toolz/tests/test_functoolz.py', 'toolz.tests.test_functoolz', '', 'test_memoize_key'], ['https://github.com/pytoolz/toolz/tree/master/toolz/tests/test_functoolz.py', 'toolz.tests.test_functoolz', '', 'test_memoize_partial'], ['https://github.com/pytoolz/toolz/tree/master/toolz/tests/test_functoolz.py', 'toolz.tests.test_functoolz', '', 'test_memoize_curried'], ['https://github.com/pytoolz/toolz/tree/master/toolz/tests/test_functoolz.py', 'toolz.tests.test_functoolz', '', 'test_memoize_kwargs'], ['https://github.com/pytoolz/toolz/tree/master/toolz/tests/test_functoolz.py', 'toolz.tests.test_functoolz', '', 'test_memoize_curry_cache']]"
toolz,https://github.com/pytoolz/toolz/tree/master/toolz/itertoolz.py,,test_partition_all,"(lo, hi) = (0, n)","
lo = 0
hi = n
",1,"[['https://github.com/pytoolz/toolz/tree/master/toolz/tests/test_itertoolz.py', 'toolz.tests.test_itertoolz', '', 'test_partition_all']]"
docopt,https://github.com/docopt/docopt/tree/master//docopt.py,,test_option,"(short, long, argcount, value) = (None, None, 0, False)","
short = None
long = None
argcount = 0
value = False
",1,"[['https://github.com/docopt/docopt/tree/master//test_docopt.py', 'test_docopt', '', 'test_option']]"
docopt,https://github.com/docopt/docopt/tree/master//docopt.py,,test_option,"(options, _, description) = option_description.strip().partition('  ')","
tmp_fun_0 = option_description.strip().partition('  ')
options = tmp_fun_0[0]
_ = tmp_fun_0[1]
description = tmp_fun_0[2]
",1,"[['https://github.com/docopt/docopt/tree/master//test_docopt.py', 'test_docopt', '', 'test_option']]"
lbry-sdk,https://github.com/lbryio/lbry-sdk/tree/master/lbry/crypto/crypt.py,TestAESEncryptDecrypt,test_encrypt_decrypt,"(init_vector, data) = (data[:16], data[16:])","
init_vector = data[:16]
data = data[16:]
",1,"[['https://github.com/lbryio/lbry-sdk/tree/master/tests/unit/wallet/test_hash.py', 'tests.unit.wallet.test_hash', 'TestAESEncryptDecrypt', 'test_edge_case_invalid_password_valid_padding_invalid_unicode'], ['https://github.com/lbryio/lbry-sdk/tree/master/tests/unit/wallet/test_hash.py', 'tests.unit.wallet.test_hash', 'TestAESEncryptDecrypt', 'test_decrypt_error'], ['https://github.com/lbryio/lbry-sdk/tree/master/tests/unit/wallet/test_hash.py', 'tests.unit.wallet.test_hash', 'TestAESEncryptDecrypt', 'test_encrypt_iv_d'], ['https://github.com/lbryio/lbry-sdk/tree/master/tests/unit/wallet/test_hash.py', 'tests.unit.wallet.test_hash', 'TestAESEncryptDecrypt', 'test_encrypt_decrypt']]"
kneed,https://github.com/arvkevi/kneed/tree/master/kneed/shape_detector.py,,test_find_shape,"(x1, x2) = (int(len(x) * 0.2), int(len(x) * 0.8))","
x1 = int(len(x) * 0.2)
x2 = int(len(x) * 0.8)
",1,"[['https://github.com/arvkevi/kneed/tree/master/tests/test_sample.py', 'tests.test_sample', '', 'test_find_shape']]"
gallery-dl,https://github.com/mikf/gallery-dl/tree/master/gallery_dl/config.py,TestDataJob,test_num_string,conf[p] = conf = {},"
tmp_value = {}
conf[p] = tmp_value
conf = tmp_value
",1,"[['https://github.com/mikf/gallery-dl/tree/master/test/test_config.py', 'test.test_config', 'TestConfig', 'test_interpolate'], ['https://github.com/mikf/gallery-dl/tree/master/test/test_cookies.py', 'test.test_cookies', 'TestCookiejar', 'test_cookiefile'], ['https://github.com/mikf/gallery-dl/tree/master/test/test_cookies.py', 'test.test_cookies', 'TestCookieLogin', 'test_cookie_login'], ['https://github.com/mikf/gallery-dl/tree/master/test/test_job.py', 'test.test_job', 'TestInfoJob', 'test_custom'], ['https://github.com/mikf/gallery-dl/tree/master/test/test_config.py', 'test.test_config', 'TestConfig', 'test_set'], ['https://github.com/mikf/gallery-dl/tree/master/test/test_config.py', 'test.test_config', 'TestConfig', 'test_interpolate_common'], ['https://github.com/mikf/gallery-dl/tree/master/test/test_job.py', 'test.test_job', 'TestDownloadJob', 'test_extractor_filter'], ['https://github.com/mikf/gallery-dl/tree/master/test/test_util.py', 'test.test_util', 'TestOther', 'test_generate_token'], ['https://github.com/mikf/gallery-dl/tree/master/test/test_config.py', 'test.test_config', 'TestConfig', 'test_accumulate'], ['https://github.com/mikf/gallery-dl/tree/master/test/test_job.py', 'test.test_job', 'TestDataJob', 'test_sleep'], ['https://github.com/mikf/gallery-dl/tree/master/test/test_postprocessor.py', 'test.test_postprocessor', 'ZipTest', 'test_zip_write_mock'], ['https://github.com/mikf/gallery-dl/tree/master/test/test_job.py', 'test.test_job', 'TestDataJob', 'test_private'], ['https://github.com/mikf/gallery-dl/tree/master/test/test_oauth.py', 'test.test_oauth', 'TestOAuthSession', 'test_nonce'], ['https://github.com/mikf/gallery-dl/tree/master/test/test_job.py', 'test.test_job', 'TestDataJob', 'test_num_string']]"
XlsxWriter,https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/worksheet.py,TestAssembleWorksheet,test_assemble_xml_file_A1,"(first_col, last_col) = (last_col, first_col)","
tmp0 = first_col
first_col = last_col
last_col = tmp0
",1,"[['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/worksheet/test_worksheet06.py', 'xlsxwriter.test.worksheet.test_worksheet06', 'TestAssembleWorksheet', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/worksheet/test_worksheet03.py', 'xlsxwriter.test.worksheet.test_worksheet03', 'TestAssembleWorksheet', 'test_assemble_xml_file'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/worksheet/test_range_return_values.py', 'xlsxwriter.test.worksheet.test_range_return_values', 'TestRangeReturnValues', 'test_range_return_values'], ['https://github.com/jmcnamara/XlsxWriter/tree/master/xlsxwriter/test/worksheet/test_worksheet03.py', 'xlsxwriter.test.worksheet.test_worksheet03', 'TestAssembleWorksheet', 'test_assemble_xml_file_A1']]"
gspread,https://github.com/burnash/gspread/tree/master/gspread/utils.py,UtilsTest,test_a1_to_grid_range_unbounded,"(start_label, _, end_label) = name.partition(':')","
tmp_fun_0 = name.partition(':')
start_label = tmp_fun_0[0]
_ = tmp_fun_0[1]
end_label = tmp_fun_0[2]
",1,"[['https://github.com/burnash/gspread/tree/master/tests/utils_test.py', 'tests.utils_test', 'UtilsTest', 'test_a1_to_grid_range_improper_range'], ['https://github.com/burnash/gspread/tree/master/tests/utils_test.py', 'tests.utils_test', 'UtilsTest', 'test_a1_to_grid_range_other_directions'], ['https://github.com/burnash/gspread/tree/master/tests/utils_test.py', 'tests.utils_test', 'UtilsTest', 'test_a1_to_grid_range_simple'], ['https://github.com/burnash/gspread/tree/master/tests/utils_test.py', 'tests.utils_test', 'UtilsTest', 'test_a1_to_grid_range_unbounded']]"
gspread,https://github.com/burnash/gspread/tree/master/gspread/utils.py,UtilsTest,test_a1_to_grid_range_unbounded,"(start_row_index, start_column_index) = _a1_to_rowcol_unbounded(start_label)","
tmp_fun_0 = _a1_to_rowcol_unbounded(start_label)
start_row_index = tmp_fun_0[0]
start_column_index = tmp_fun_0[1]
",1,"[['https://github.com/burnash/gspread/tree/master/tests/utils_test.py', 'tests.utils_test', 'UtilsTest', 'test_a1_to_grid_range_improper_range'], ['https://github.com/burnash/gspread/tree/master/tests/utils_test.py', 'tests.utils_test', 'UtilsTest', 'test_a1_to_grid_range_other_directions'], ['https://github.com/burnash/gspread/tree/master/tests/utils_test.py', 'tests.utils_test', 'UtilsTest', 'test_a1_to_grid_range_simple'], ['https://github.com/burnash/gspread/tree/master/tests/utils_test.py', 'tests.utils_test', 'UtilsTest', 'test_a1_to_grid_range_unbounded']]"
gspread,https://github.com/burnash/gspread/tree/master/gspread/utils.py,UtilsTest,test_a1_to_grid_range_unbounded,"(end_row_index, end_column_index) = _a1_to_rowcol_unbounded(end_label or start_label)","
tmp_fun_0 = _a1_to_rowcol_unbounded(end_label or start_label)
end_row_index = tmp_fun_0[0]
end_column_index = tmp_fun_0[1]
",1,"[['https://github.com/burnash/gspread/tree/master/tests/utils_test.py', 'tests.utils_test', 'UtilsTest', 'test_a1_to_grid_range_improper_range'], ['https://github.com/burnash/gspread/tree/master/tests/utils_test.py', 'tests.utils_test', 'UtilsTest', 'test_a1_to_grid_range_other_directions'], ['https://github.com/burnash/gspread/tree/master/tests/utils_test.py', 'tests.utils_test', 'UtilsTest', 'test_a1_to_grid_range_simple'], ['https://github.com/burnash/gspread/tree/master/tests/utils_test.py', 'tests.utils_test', 'UtilsTest', 'test_a1_to_grid_range_unbounded']]"
gspread,https://github.com/burnash/gspread/tree/master/gspread/utils.py,UtilsTest,test_a1_to_grid_range_unbounded,"(start_row_index, end_row_index) = (end_row_index, start_row_index)","
tmp0 = start_row_index
start_row_index = end_row_index
end_row_index = tmp0
",1,"[['https://github.com/burnash/gspread/tree/master/tests/utils_test.py', 'tests.utils_test', 'UtilsTest', 'test_a1_to_grid_range_improper_range'], ['https://github.com/burnash/gspread/tree/master/tests/utils_test.py', 'tests.utils_test', 'UtilsTest', 'test_a1_to_grid_range_other_directions'], ['https://github.com/burnash/gspread/tree/master/tests/utils_test.py', 'tests.utils_test', 'UtilsTest', 'test_a1_to_grid_range_simple'], ['https://github.com/burnash/gspread/tree/master/tests/utils_test.py', 'tests.utils_test', 'UtilsTest', 'test_a1_to_grid_range_unbounded']]"
gspread,https://github.com/burnash/gspread/tree/master/gspread/utils.py,UtilsTest,test_a1_to_grid_range_unbounded,"(start_column_index, end_column_index) = (end_column_index, start_column_index)","
tmp0 = start_column_index
start_column_index = end_column_index
end_column_index = tmp0
",1,"[['https://github.com/burnash/gspread/tree/master/tests/utils_test.py', 'tests.utils_test', 'UtilsTest', 'test_a1_to_grid_range_improper_range'], ['https://github.com/burnash/gspread/tree/master/tests/utils_test.py', 'tests.utils_test', 'UtilsTest', 'test_a1_to_grid_range_other_directions'], ['https://github.com/burnash/gspread/tree/master/tests/utils_test.py', 'tests.utils_test', 'UtilsTest', 'test_a1_to_grid_range_simple'], ['https://github.com/burnash/gspread/tree/master/tests/utils_test.py', 'tests.utils_test', 'UtilsTest', 'test_a1_to_grid_range_unbounded']]"
icalendar,https://github.com/collective/icalendar/tree/master/src/icalendar/prop.py,TestProp,test_prop_vUTCOffset,"(sign, hours, minutes, seconds) = (ical[0:1], int(ical[1:3]), int(ical[3:5]), int(ical[5:7] or 0))","
sign = ical[0:1]
hours = int(ical[1:3])
minutes = int(ical[3:5])
seconds = int(ical[5:7] or 0)
",1,"[['https://github.com/collective/icalendar/tree/master/src/icalendar/tests/test_unit_prop.py', 'src.icalendar.tests.test_unit_prop', 'TestProp', 'test_prop_vUTCOffset']]"
altair,https://github.com/altair-viz/altair/tree/master/altair/utils/execeval.py,,test_eval_block_with_return,"(to_exec, to_eval) = (tree.body[:-1], tree.body[-1:])","
to_exec = tree.body[:-1]
to_eval = tree.body[-1:]
",1,"[['https://github.com/altair-viz/altair/tree/master/altair/utils/tests/test_execeval.py', 'altair.utils.tests.test_execeval', '', 'test_eval_block_without_return'], ['https://github.com/altair-viz/altair/tree/master/altair/utils/tests/test_execeval.py', 'altair.utils.tests.test_execeval', '', 'test_eval_block_with_return']]"
altair,https://github.com/altair-viz/altair/tree/master/altair/utils/execeval.py,,test_eval_block_with_return,"(to_exec, to_eval) = (tree.body, [])","
to_exec = tree.body
to_eval = []
",1,"[['https://github.com/altair-viz/altair/tree/master/altair/utils/tests/test_execeval.py', 'altair.utils.tests.test_execeval', '', 'test_eval_block_without_return'], ['https://github.com/altair-viz/altair/tree/master/altair/utils/tests/test_execeval.py', 'altair.utils.tests.test_execeval', '', 'test_eval_block_with_return']]"
altair,https://github.com/altair-viz/altair/tree/master/altair/vegalite/v4/api.py,,test_sequence,"(start, stop) = (0, start)","
tmp0 = start
start = 0
stop = tmp0
",1,"[['https://github.com/altair-viz/altair/tree/master/altair/vegalite/v4/tests/test_api.py', 'altair.vegalite.v4.tests.test_api', '', 'test_sequence']]"
altair,https://github.com/altair-viz/altair/tree/master/altair/vegalite/v3/api.py,,test_sequence,"(start, stop) = (0, start)","
tmp0 = start
start = 0
stop = tmp0
",1,"[['https://github.com/altair-viz/altair/tree/master/altair/vegalite/v3/tests/test_api.py', 'altair.vegalite.v3.tests.test_api', '', 'test_sequence']]"
gns3-server,https://github.com/GNS3/gns3-server/tree/master/gns3server/run.py,,test_locale_check,language = encoding = None,"
tmp_value = None
language = tmp_value
encoding = tmp_value
",1,"[['https://github.com/GNS3/gns3-server/tree/master/tests/test_run.py', 'tests.test_run', '', 'test_locale_check']]"
gns3-server,https://github.com/GNS3/gns3-server/tree/master/gns3server/run.py,,test_locale_check,"(language, encoding) = locale.getlocale()","
tmp_fun_0 = locale.getlocale()
language = tmp_fun_0[0]
encoding = tmp_fun_0[1]
",1,"[['https://github.com/GNS3/gns3-server/tree/master/tests/test_run.py', 'tests.test_run', '', 'test_locale_check']]"
pycco,https://github.com/pycco-docs/pycco/tree/master/pycco/main.py,,test_parse,has_code = docs_text = code_text = '',"
tmp_value = ''
has_code = tmp_value
docs_text = tmp_value
code_text = tmp_value
",1,"[['https://github.com/pycco-docs/pycco/tree/master/tests/test_pycco.py', 'tests.test_pycco', '', 'test_multi_line_leading_spaces'], ['https://github.com/pycco-docs/pycco/tree/master/tests/test_pycco.py', 'tests.test_pycco', '', 'test_skip_coding_directive'], ['https://github.com/pycco-docs/pycco/tree/master/tests/test_pycco.py', 'tests.test_pycco', '', 'test_comment_with_only_cross_ref'], ['https://github.com/pycco-docs/pycco/tree/master/tests/test_pycco.py', 'tests.test_pycco', '', 'test_indented_block'], ['https://github.com/pycco-docs/pycco/tree/master/tests/test_pycco.py', 'tests.test_pycco', '', 'test_ensure_multiline_string_support'], ['https://github.com/pycco-docs/pycco/tree/master/tests/test_pycco.py', 'tests.test_pycco', '', 'test_parse']]"
pycco,https://github.com/pycco-docs/pycco/tree/master/pycco/main.py,,test_parse,"(multistart, multiend) = (language.get('multistart'), language.get('multiend'))","
multistart = language.get('multistart')
multiend = language.get('multiend')
",1,"[['https://github.com/pycco-docs/pycco/tree/master/tests/test_pycco.py', 'tests.test_pycco', '', 'test_multi_line_leading_spaces'], ['https://github.com/pycco-docs/pycco/tree/master/tests/test_pycco.py', 'tests.test_pycco', '', 'test_skip_coding_directive'], ['https://github.com/pycco-docs/pycco/tree/master/tests/test_pycco.py', 'tests.test_pycco', '', 'test_comment_with_only_cross_ref'], ['https://github.com/pycco-docs/pycco/tree/master/tests/test_pycco.py', 'tests.test_pycco', '', 'test_indented_block'], ['https://github.com/pycco-docs/pycco/tree/master/tests/test_pycco.py', 'tests.test_pycco', '', 'test_ensure_multiline_string_support'], ['https://github.com/pycco-docs/pycco/tree/master/tests/test_pycco.py', 'tests.test_pycco', '', 'test_parse']]"
pycco,https://github.com/pycco-docs/pycco/tree/master/pycco/main.py,,test_parse,has_code = docs_text = '',"
tmp_value = ''
has_code = tmp_value
docs_text = tmp_value
",1,"[['https://github.com/pycco-docs/pycco/tree/master/tests/test_pycco.py', 'tests.test_pycco', '', 'test_multi_line_leading_spaces'], ['https://github.com/pycco-docs/pycco/tree/master/tests/test_pycco.py', 'tests.test_pycco', '', 'test_skip_coding_directive'], ['https://github.com/pycco-docs/pycco/tree/master/tests/test_pycco.py', 'tests.test_pycco', '', 'test_comment_with_only_cross_ref'], ['https://github.com/pycco-docs/pycco/tree/master/tests/test_pycco.py', 'tests.test_pycco', '', 'test_indented_block'], ['https://github.com/pycco-docs/pycco/tree/master/tests/test_pycco.py', 'tests.test_pycco', '', 'test_ensure_multiline_string_support'], ['https://github.com/pycco-docs/pycco/tree/master/tests/test_pycco.py', 'tests.test_pycco', '', 'test_parse']]"
pycco,https://github.com/pycco-docs/pycco/tree/master/pycco/main.py,,test_parse,code_text = has_code = docs_text = '',"
tmp_value = ''
code_text = tmp_value
has_code = tmp_value
docs_text = tmp_value
",1,"[['https://github.com/pycco-docs/pycco/tree/master/tests/test_pycco.py', 'tests.test_pycco', '', 'test_multi_line_leading_spaces'], ['https://github.com/pycco-docs/pycco/tree/master/tests/test_pycco.py', 'tests.test_pycco', '', 'test_skip_coding_directive'], ['https://github.com/pycco-docs/pycco/tree/master/tests/test_pycco.py', 'tests.test_pycco', '', 'test_comment_with_only_cross_ref'], ['https://github.com/pycco-docs/pycco/tree/master/tests/test_pycco.py', 'tests.test_pycco', '', 'test_indented_block'], ['https://github.com/pycco-docs/pycco/tree/master/tests/test_pycco.py', 'tests.test_pycco', '', 'test_ensure_multiline_string_support'], ['https://github.com/pycco-docs/pycco/tree/master/tests/test_pycco.py', 'tests.test_pycco', '', 'test_parse']]"
pycco,https://github.com/pycco-docs/pycco/tree/master/pycco/main.py,,test_parse,has_code = docs_text = code_text = '',"
tmp_value = ''
has_code = tmp_value
docs_text = tmp_value
code_text = tmp_value
",1,"[['https://github.com/pycco-docs/pycco/tree/master/tests/test_pycco.py', 'tests.test_pycco', '', 'test_multi_line_leading_spaces'], ['https://github.com/pycco-docs/pycco/tree/master/tests/test_pycco.py', 'tests.test_pycco', '', 'test_skip_coding_directive'], ['https://github.com/pycco-docs/pycco/tree/master/tests/test_pycco.py', 'tests.test_pycco', '', 'test_comment_with_only_cross_ref'], ['https://github.com/pycco-docs/pycco/tree/master/tests/test_pycco.py', 'tests.test_pycco', '', 'test_indented_block'], ['https://github.com/pycco-docs/pycco/tree/master/tests/test_pycco.py', 'tests.test_pycco', '', 'test_ensure_multiline_string_support'], ['https://github.com/pycco-docs/pycco/tree/master/tests/test_pycco.py', 'tests.test_pycco', '', 'test_parse']]"
tmuxomatic,https://github.com/oxidane/tmuxomatic/tree/master/windowgram/windowgram.py,Test_FlexCores,test_ScaleCore_VersionAssert,paneid = exp_w = exp_h = None,"
tmp_value = None
paneid = tmp_value
exp_w = tmp_value
exp_h = tmp_value
",1,"[['https://github.com/oxidane/tmuxomatic/tree/master/windowgram/windowgram_test.py', 'windowgram.windowgram_test', 'Test_FlexCores', 'test_ScaleCore'], ['https://github.com/oxidane/tmuxomatic/tree/master/windowgram/windowgram_test.py', 'windowgram.windowgram_test', 'Test_FlexCores', 'test_ScaleCore_ScaleRetries'], ['https://github.com/oxidane/tmuxomatic/tree/master/windowgram/windowgram_test.py', 'windowgram.windowgram_test', 'Test_FlexCores', 'test_ScaleCore_VersionAssert']]"
tmuxomatic,https://github.com/oxidane/tmuxomatic/tree/master/windowgram/windowgram.py,Test_FlexCores,test_ScaleCore_VersionAssert,"(try_w, try_h) = (w_chars, h_chars)","
try_w = w_chars
try_h = h_chars
",1,"[['https://github.com/oxidane/tmuxomatic/tree/master/windowgram/windowgram_test.py', 'windowgram.windowgram_test', 'Test_FlexCores', 'test_ScaleCore'], ['https://github.com/oxidane/tmuxomatic/tree/master/windowgram/windowgram_test.py', 'windowgram.windowgram_test', 'Test_FlexCores', 'test_ScaleCore_ScaleRetries'], ['https://github.com/oxidane/tmuxomatic/tree/master/windowgram/windowgram_test.py', 'windowgram.windowgram_test', 'Test_FlexCores', 'test_ScaleCore_VersionAssert']]"
tmuxomatic,https://github.com/oxidane/tmuxomatic/tree/master/windowgram/windowgram.py,Test_FlexCores,test_ScaleCore_VersionAssert,"(paneid, exp_w, exp_h) = retry","
paneid = retry[0]
exp_w = retry[1]
exp_h = retry[2]
",1,"[['https://github.com/oxidane/tmuxomatic/tree/master/windowgram/windowgram_test.py', 'windowgram.windowgram_test', 'Test_FlexCores', 'test_ScaleCore'], ['https://github.com/oxidane/tmuxomatic/tree/master/windowgram/windowgram_test.py', 'windowgram.windowgram_test', 'Test_FlexCores', 'test_ScaleCore_ScaleRetries'], ['https://github.com/oxidane/tmuxomatic/tree/master/windowgram/windowgram_test.py', 'windowgram.windowgram_test', 'Test_FlexCores', 'test_ScaleCore_VersionAssert']]"
tmuxomatic,https://github.com/oxidane/tmuxomatic/tree/master/windowgram/windowgram.py,Test_FlexCores,test_ScaleCore_VersionAssert,"(_, _, new_w, new_h) = Windowgram(windowgram_scaled).Panes_PaneXYWH(paneid)","
tmp_fun_0 = Windowgram(windowgram_scaled).Panes_PaneXYWH(paneid)
_ = tmp_fun_0[0]
_ = tmp_fun_0[1]
new_w = tmp_fun_0[2]
new_h = tmp_fun_0[3]
",1,"[['https://github.com/oxidane/tmuxomatic/tree/master/windowgram/windowgram_test.py', 'windowgram.windowgram_test', 'Test_FlexCores', 'test_ScaleCore'], ['https://github.com/oxidane/tmuxomatic/tree/master/windowgram/windowgram_test.py', 'windowgram.windowgram_test', 'Test_FlexCores', 'test_ScaleCore_ScaleRetries'], ['https://github.com/oxidane/tmuxomatic/tree/master/windowgram/windowgram_test.py', 'windowgram.windowgram_test', 'Test_FlexCores', 'test_ScaleCore_VersionAssert']]"
tmuxomatic,https://github.com/oxidane/tmuxomatic/tree/master/windowgram/windowgram.py,Test_Windowgram_Convert,test_Windowgram_Convert_StringToParsed,panes_x = panes_y = width = 0,"
tmp_value = 0
panes_x = tmp_value
panes_y = tmp_value
width = tmp_value
",1,"[['https://github.com/oxidane/tmuxomatic/tree/master/windowgram/windowgram_test.py', 'windowgram.windowgram_test', 'Test_Windowgram_Convert', 'test_Windowgram_Convert_StringToParsed']]"
tmuxomatic,https://github.com/oxidane/tmuxomatic/tree/master/windowgram/windowgram.py,Test_FlexCores,test_EdgeCore_SwipeSide,"(windowgram_parsed, error_string, error_line) = Windowgram_Convert.String_To_Parsed(self.windowgram_string, self.extend)","
tmp_fun_0 = Windowgram_Convert.String_To_Parsed(self.windowgram_string, self.extend)
windowgram_parsed = tmp_fun_0[0]
error_string = tmp_fun_0[1]
error_line = tmp_fun_0[2]
",1,"[['https://github.com/oxidane/tmuxomatic/tree/master/windowgram/windowgram_test.py', 'windowgram.windowgram_test', 'Test_FlexCores', 'test_EdgeCore_SwipeSide']]"
falcon,https://github.com/falconry/falcon/tree/master/falcon/testing/helpers.py,,test_route_main,"(old_stdout, old_stderr) = (sys.stdout, sys.stderr)","
old_stdout = sys.stdout
old_stderr = sys.stderr
",1,"[['https://github.com/falconry/falcon/tree/master/tests/test_cmd_inspect_app.py', 'tests.test_cmd_inspect_app', '', 'test_route_main']]"
falcon,https://github.com/falconry/falcon/tree/master/falcon/testing/helpers.py,,test_route_main,"(sys.stdout, sys.stderr) = (stdout, stderr)","
sys.stdout = stdout
sys.stderr = stderr
",1,"[['https://github.com/falconry/falcon/tree/master/tests/test_cmd_inspect_app.py', 'tests.test_cmd_inspect_app', '', 'test_route_main']]"
falcon,https://github.com/falconry/falcon/tree/master/falcon/testing/helpers.py,,test_route_main,"(sys.stderr, sys.stdout) = (old_stderr, old_stdout)","
sys.stderr = old_stderr
sys.stdout = old_stdout
",1,"[['https://github.com/falconry/falcon/tree/master/tests/test_cmd_inspect_app.py', 'tests.test_cmd_inspect_app', '', 'test_route_main']]"
FACT_core,https://github.com/fkie-cad/FACT_core/tree/master/src/web_interface/components/hex_highlighting.py,,test_hex_preview_merge,"(start_offset, relative_offset) = (0, offset)","
start_offset = 0
relative_offset = offset
",1,"[['https://github.com/fkie-cad/FACT_core/tree/master/src/test/unit/web_interface/test_hex_highlighting.py', 'src.test.unit.web_interface.test_hex_highlighting', '', 'test_hex_preview_data_rows'], ['https://github.com/fkie-cad/FACT_core/tree/master/src/test/unit/web_interface/test_hex_highlighting.py', 'src.test.unit.web_interface.test_hex_highlighting', '', 'test_hex_preview_merge']]"
FACT_core,https://github.com/fkie-cad/FACT_core/tree/master/src/web_interface/components/hex_highlighting.py,,test_hex_preview_merge,"(hex_content, str_preview) = _get_hex_and_str_preview(line)","
tmp_fun_0 = _get_hex_and_str_preview(line)
hex_content = tmp_fun_0[0]
str_preview = tmp_fun_0[1]
",1,"[['https://github.com/fkie-cad/FACT_core/tree/master/src/test/unit/web_interface/test_hex_highlighting.py', 'src.test.unit.web_interface.test_hex_highlighting', '', 'test_hex_preview_data_rows'], ['https://github.com/fkie-cad/FACT_core/tree/master/src/test/unit/web_interface/test_hex_highlighting.py', 'src.test.unit.web_interface.test_hex_highlighting', '', 'test_hex_preview_merge']]"
capirca,https://github.com/google/capirca/tree/master/tools/cgrep.py,CgrepTest,test_get_port_parents_fail,"(port, protocol) = options.port","
port = options.port[0]
protocol = options.port[1]
",1,"[['https://github.com/google/capirca/tree/master/tests/lib/cgrep_test.py', 'tests.lib.cgrep_test', 'CgrepTest', 'test_get_port_parents_range_udp'], ['https://github.com/google/capirca/tree/master/tests/lib/cgrep_test.py', 'tests.lib.cgrep_test', 'CgrepTest', 'test_get_port_parents'], ['https://github.com/google/capirca/tree/master/tests/lib/cgrep_test.py', 'tests.lib.cgrep_test', 'CgrepTest', 'test_get_port_parents_range_tcp'], ['https://github.com/google/capirca/tree/master/tests/lib/cgrep_test.py', 'tests.lib.cgrep_test', 'CgrepTest', 'test_get_port_parents_fail']]"
capirca,https://github.com/google/capirca/tree/master/tools/cgrep.py,CgrepTest,test_get_port_parents_fail,"(port, protocol) = (protocol, port)","
tmp0 = port
port = protocol
protocol = tmp0
",1,"[['https://github.com/google/capirca/tree/master/tests/lib/cgrep_test.py', 'tests.lib.cgrep_test', 'CgrepTest', 'test_get_port_parents_range_udp'], ['https://github.com/google/capirca/tree/master/tests/lib/cgrep_test.py', 'tests.lib.cgrep_test', 'CgrepTest', 'test_get_port_parents'], ['https://github.com/google/capirca/tree/master/tests/lib/cgrep_test.py', 'tests.lib.cgrep_test', 'CgrepTest', 'test_get_port_parents_range_tcp'], ['https://github.com/google/capirca/tree/master/tests/lib/cgrep_test.py', 'tests.lib.cgrep_test', 'CgrepTest', 'test_get_port_parents_fail']]"
pdfplumber,https://github.com/jsvine/pdfplumber/tree/master/pdfplumber/utils.py,Test,test_cluster_objects,"(get_0, get_1) = (itemgetter(0), itemgetter(1))","
get_0 = itemgetter(0)
get_1 = itemgetter(1)
",1,"[['https://github.com/jsvine/pdfplumber/tree/master/tests/test_utils.py', 'tests.test_utils', 'Test', 'test_cluster_objects']]"
pdfplumber,https://github.com/jsvine/pdfplumber/tree/master/pdfplumber/table.py,Test,test_orientation_errors,"(min_prop, max_prop) = ('x0', 'x1')","
min_prop = 'x0'
max_prop = 'x1'
",1,"[['https://github.com/jsvine/pdfplumber/tree/master/tests/test_table.py', 'tests.test_table', 'Test', 'test_orientation_errors']]"
pdfplumber,https://github.com/jsvine/pdfplumber/tree/master/pdfplumber/table.py,Test,test_orientation_errors,"(min_prop, max_prop) = ('top', 'bottom')","
min_prop = 'top'
max_prop = 'bottom'
",1,"[['https://github.com/jsvine/pdfplumber/tree/master/tests/test_table.py', 'tests.test_table', 'Test', 'test_orientation_errors']]"
dfply,https://github.com/kieferk/dfply/tree/master/dfply/summarize.py,,test_summarize_each,"(columns, values) = ([], [])","
columns = []
values = []
",1,"[['https://github.com/kieferk/dfply/tree/master/test/test_summarize.py', 'test.test_summarize', '', 'test_summarize_each']]"
rdflib,https://github.com/RDFLib/rdflib/tree/master/rdflib/util.py,TestUtilDateTime,test_util_parse_date_time,"(ymd, time) = val.split('T')","
tmp_fun_0 = val.split('T')
ymd = tmp_fun_0[0]
time = tmp_fun_0[1]
",1,"[['https://github.com/RDFLib/rdflib/tree/master/test/test_util.py', 'test.test_util', 'TestUtilDateTime', 'test_util_parse_date_timewithtz'], ['https://github.com/RDFLib/rdflib/tree/master/test/test_util.py', 'test.test_util', 'TestUtilDateTime', 'test_util_parse_date_time']]"
rdflib,https://github.com/RDFLib/rdflib/tree/master/rdflib/util.py,TestUtilDateTime,test_util_parse_date_time,"(hms, tz_str) = (time[0:8], time[8:])","
hms = time[0:8]
tz_str = time[8:]
",1,"[['https://github.com/RDFLib/rdflib/tree/master/test/test_util.py', 'test.test_util', 'TestUtilDateTime', 'test_util_parse_date_timewithtz'], ['https://github.com/RDFLib/rdflib/tree/master/test/test_util.py', 'test.test_util', 'TestUtilDateTime', 'test_util_parse_date_time']]"
rdflib,https://github.com/RDFLib/rdflib/tree/master/rdflib/util.py,TestUtilDateTime,test_util_parse_date_time,"(year, month, day) = ymd.split('-')","
tmp_fun_0 = ymd.split('-')
year = tmp_fun_0[0]
month = tmp_fun_0[1]
day = tmp_fun_0[2]
",1,"[['https://github.com/RDFLib/rdflib/tree/master/test/test_util.py', 'test.test_util', 'TestUtilDateTime', 'test_util_parse_date_timewithtz'], ['https://github.com/RDFLib/rdflib/tree/master/test/test_util.py', 'test.test_util', 'TestUtilDateTime', 'test_util_parse_date_time']]"
rdflib,https://github.com/RDFLib/rdflib/tree/master/rdflib/util.py,TestUtilDateTime,test_util_parse_date_time,"(hour, minute, second) = hms.split(':')","
tmp_fun_0 = hms.split(':')
hour = tmp_fun_0[0]
minute = tmp_fun_0[1]
second = tmp_fun_0[2]
",1,"[['https://github.com/RDFLib/rdflib/tree/master/test/test_util.py', 'test.test_util', 'TestUtilDateTime', 'test_util_parse_date_timewithtz'], ['https://github.com/RDFLib/rdflib/tree/master/test/test_util.py', 'test.test_util', 'TestUtilDateTime', 'test_util_parse_date_time']]"
rdflib,https://github.com/RDFLib/rdflib/tree/master/rdflib/term.py,TestValidityFunctions,test_is_valid_unicode,"(coding_func, param) = (getattr(value, 'decode'), 'utf-8')","
coding_func = getattr(value, 'decode')
param = 'utf-8'
",1,"[['https://github.com/RDFLib/rdflib/tree/master/test/test_term.py', 'test.test_term', 'TestValidityFunctions', 'test_is_valid_unicode']]"
rdflib,https://github.com/RDFLib/rdflib/tree/master/rdflib/term.py,TestValidityFunctions,test_is_valid_unicode,"(coding_func, param) = (str, value)","
coding_func = str
param = value
",1,"[['https://github.com/RDFLib/rdflib/tree/master/test/test_term.py', 'test.test_term', 'TestValidityFunctions', 'test_is_valid_unicode']]"
PyTorch-BigGraph,https://github.com/facebookresearch/PyTorch-BigGraph/tree/master/torchbiggraph/schema.py,TestInjectNestedValue,test_empty,"(index, path) = (int(path[0]), path[1:])","
index = int(path[0])
path = path[1:]
",1,"[['https://github.com/facebookresearch/PyTorch-BigGraph/tree/master/test/test_schema.py', 'test.test_schema', 'TestInjectNestedValue', 'test_mixed'], ['https://github.com/facebookresearch/PyTorch-BigGraph/tree/master/test/test_schema.py', 'test.test_schema', 'TestInjectNestedValue', 'test_empty']]"
PyTorch-BigGraph,https://github.com/facebookresearch/PyTorch-BigGraph/tree/master/torchbiggraph/schema.py,TestInjectNestedValue,test_empty,"(key, path) = (path[0], path[1:])","
key = path[0]
path = path[1:]
",1,"[['https://github.com/facebookresearch/PyTorch-BigGraph/tree/master/test/test_schema.py', 'test.test_schema', 'TestInjectNestedValue', 'test_mixed'], ['https://github.com/facebookresearch/PyTorch-BigGraph/tree/master/test/test_schema.py', 'test.test_schema', 'TestInjectNestedValue', 'test_empty']]"
opytimizer,https://github.com/gugarosa/opytimizer/tree/master/opytimizer/math/general.py,,test_kmeans,"(n_samples, n_variables, n_dimensions) = (x.shape[0], x.shape[1], x.shape[2])","
n_samples = x.shape[0]
n_variables = x.shape[1]
n_dimensions = x.shape[2]
",1,"[['https://github.com/gugarosa/opytimizer/tree/master/tests/opytimizer/math/test_general.py', 'tests.opytimizer.math.test_general', '', 'test_kmeans']]"
opytimizer,https://github.com/gugarosa/opytimizer/tree/master/opytimizer/core/node.py,,test_node_properties,"(min_depth, max_depth) = (0, -1)","
min_depth = 0
max_depth = -1
",1,"[['https://github.com/gugarosa/opytimizer/tree/master/tests/opytimizer/core/test_node.py', 'tests.opytimizer.core.test_node', '', 'test_node_properties']]"
opytimizer,https://github.com/gugarosa/opytimizer/tree/master/opytimizer/core/node.py,,test_node_properties,n_leaves = n_nodes = 0,"
tmp_value = 0
n_leaves = tmp_value
n_nodes = tmp_value
",1,"[['https://github.com/gugarosa/opytimizer/tree/master/tests/opytimizer/core/test_node.py', 'tests.opytimizer.core.test_node', '', 'test_node_properties']]"
opytimizer,https://github.com/gugarosa/opytimizer/tree/master/opytimizer/optimizers/swarm/eho.py,,test_eho_get_agents_from_clan,"(start, end) = (index * self.n_ci, (index + 1) * self.n_ci)","
start = index * self.n_ci
end = (index + 1) * self.n_ci
",1,"[['https://github.com/gugarosa/opytimizer/tree/master/tests/opytimizer/optimizers/swarm/test_eho.py', 'tests.opytimizer.optimizers.swarm.test_eho', '', 'test_eho_get_agents_from_clan']]"
opytimizer,https://github.com/gugarosa/opytimizer/tree/master/opytimizer/optimizers/swarm/abc.py,,test_abc_send_scout,"(max_trial, max_index) = (np.max(self.trial), np.argmax(self.trial))","
max_trial = np.max(self.trial)
max_index = np.argmax(self.trial)
",1,"[['https://github.com/gugarosa/opytimizer/tree/master/tests/opytimizer/optimizers/swarm/test_abc.py', 'tests.opytimizer.optimizers.swarm.test_abc', '', 'test_abc_send_scout']]"
opytimizer,https://github.com/gugarosa/opytimizer/tree/master/opytimizer/optimizers/swarm/bwo.py,,test_bwo_procreating,"(y1, y2) = (copy.deepcopy(x1), copy.deepcopy(x2))","
y1 = copy.deepcopy(x1)
y2 = copy.deepcopy(x2)
",1,"[['https://github.com/gugarosa/opytimizer/tree/master/tests/opytimizer/optimizers/swarm/test_bwo.py', 'tests.opytimizer.optimizers.swarm.test_bwo', '', 'test_bwo_procreating']]"
opytimizer,https://github.com/gugarosa/opytimizer/tree/master/opytimizer/optimizers/population/coa.py,,test_coa_get_agents_from_pack,"(start, end) = (index * self.n_c, (index + 1) * self.n_c)","
start = index * self.n_c
end = (index + 1) * self.n_c
",1,"[['https://github.com/gugarosa/opytimizer/tree/master/tests/opytimizer/optimizers/population/test_coa.py', 'tests.opytimizer.optimizers.population.test_coa', '', 'test_coa_get_agents_from_pack']]"
opytimizer,https://github.com/gugarosa/opytimizer/tree/master/opytimizer/optimizers/population/gco.py,,test_gco_light_zone,"(min_fit, max_fit) = (np.min(fits), np.max(fits))","
min_fit = np.min(fits)
max_fit = np.max(fits)
",1,"[['https://github.com/gugarosa/opytimizer/tree/master/tests/opytimizer/optimizers/population/test_gco.py', 'tests.opytimizer.optimizers.population.test_gco', '', 'test_gco_light_zone']]"
opytimizer,https://github.com/gugarosa/opytimizer/tree/master/opytimizer/optimizers/population/loa.py,,test_loa_mating_operator,"(a1, a2) = (copy.deepcopy(agent), copy.deepcopy(agent))","
a1 = copy.deepcopy(agent)
a2 = copy.deepcopy(agent)
",1,"[['https://github.com/gugarosa/opytimizer/tree/master/tests/opytimizer/optimizers/population/test_loa.py', 'tests.opytimizer.optimizers.population.test_loa', '', 'test_loa_mating_operator']]"
opytimizer,https://github.com/gugarosa/opytimizer/tree/master/opytimizer/optimizers/science/wca.py,,test_wca_update,"(space.agents[i], space.agents[0]) = (space.agents[0], space.agents[i])","
tmp0 = space.agents[i]
space.agents[i] = space.agents[0]
space.agents[0] = tmp0
",1,"[['https://github.com/gugarosa/opytimizer/tree/master/tests/opytimizer/optimizers/science/test_wca.py', 'tests.opytimizer.optimizers.science.test_wca', '', 'test_wca_update']]"
opytimizer,https://github.com/gugarosa/opytimizer/tree/master/opytimizer/optimizers/science/wca.py,,test_wca_update,"(space.agents[i], space.agents[j]) = (space.agents[j], space.agents[i])","
tmp0 = space.agents[i]
space.agents[i] = space.agents[j]
space.agents[j] = tmp0
",1,"[['https://github.com/gugarosa/opytimizer/tree/master/tests/opytimizer/optimizers/science/test_wca.py', 'tests.opytimizer.optimizers.science.test_wca', '', 'test_wca_update']]"
opytimizer,https://github.com/gugarosa/opytimizer/tree/master/opytimizer/optimizers/science/bh.py,,test_bh_update_position,"(agent.position, best_agent.position) = (best_agent.position, agent.position)","
tmp0 = agent.position
agent.position = best_agent.position
best_agent.position = tmp0
",1,"[['https://github.com/gugarosa/opytimizer/tree/master/tests/opytimizer/optimizers/science/test_bh.py', 'tests.opytimizer.optimizers.science.test_bh', '', 'test_bh_update_position']]"
opytimizer,https://github.com/gugarosa/opytimizer/tree/master/opytimizer/optimizers/science/bh.py,,test_bh_update_position,"(agent.fit, best_agent.fit) = (best_agent.fit, agent.fit)","
tmp0 = agent.fit
agent.fit = best_agent.fit
best_agent.fit = tmp0
",1,"[['https://github.com/gugarosa/opytimizer/tree/master/tests/opytimizer/optimizers/science/test_bh.py', 'tests.opytimizer.optimizers.science.test_bh', '', 'test_bh_update_position']]"
opytimizer,https://github.com/gugarosa/opytimizer/tree/master/opytimizer/optimizers/science/gsa.py,,test_gsa_calculate_force,"(best, worst) = (agents[0].fit, agents[-1].fit)","
best = agents[0].fit
worst = agents[-1].fit
",1,"[['https://github.com/gugarosa/opytimizer/tree/master/tests/opytimizer/optimizers/science/test_gsa.py', 'tests.opytimizer.optimizers.science.test_gsa', '', 'test_gsa_calculate_mass'], ['https://github.com/gugarosa/opytimizer/tree/master/tests/opytimizer/optimizers/science/test_gsa.py', 'tests.opytimizer.optimizers.science.test_gsa', '', 'test_gsa_calculate_force']]"
opytimizer,https://github.com/gugarosa/opytimizer/tree/master/opytimizer/optimizers/science/weo.py,,test_weo_update,"(best, worst) = (space.agents[0], space.agents[-1])","
best = space.agents[0]
worst = space.agents[-1]
",1,"[['https://github.com/gugarosa/opytimizer/tree/master/tests/opytimizer/optimizers/science/test_weo.py', 'tests.opytimizer.optimizers.science.test_weo', '', 'test_weo_update']]"
opytimizer,https://github.com/gugarosa/opytimizer/tree/master/opytimizer/optimizers/science/two.py,,test_two_update,"(best_fit, worst_fit) = (space.agents[0].fit, space.agents[-1].fit)","
best_fit = space.agents[0].fit
worst_fit = space.agents[-1].fit
",1,"[['https://github.com/gugarosa/opytimizer/tree/master/tests/opytimizer/optimizers/science/test_two.py', 'tests.opytimizer.optimizers.science.test_two', '', 'test_two_update']]"
opytimizer,https://github.com/gugarosa/opytimizer/tree/master/opytimizer/optimizers/science/moa.py,,test_moa_update,"(best, worst) = (space.agents[0], space.agents[-1])","
best = space.agents[0]
worst = space.agents[-1]
",1,"[['https://github.com/gugarosa/opytimizer/tree/master/tests/opytimizer/optimizers/science/test_moa.py', 'tests.opytimizer.optimizers.science.test_moa', '', 'test_moa_update']]"
opytimizer,https://github.com/gugarosa/opytimizer/tree/master/opytimizer/optimizers/social/isa.py,,test_isa_update,"(best, worst) = (space.agents[0], space.agents[-1])","
best = space.agents[0]
worst = space.agents[-1]
",1,"[['https://github.com/gugarosa/opytimizer/tree/master/tests/opytimizer/optimizers/social/test_isa.py', 'tests.opytimizer.optimizers.social.test_isa', '', 'test_isa_update']]"
opytimizer,https://github.com/gugarosa/opytimizer/tree/master/opytimizer/optimizers/social/bso.py,,test_bso_clusterize,"(ideas_idx_per_cluster, best_idx_per_cluster) = ([], [])","
ideas_idx_per_cluster = []
best_idx_per_cluster = []
",1,"[['https://github.com/gugarosa/opytimizer/tree/master/tests/opytimizer/optimizers/social/test_bso.py', 'tests.opytimizer.optimizers.social.test_bso', '', 'test_bso_clusterize']]"
opytimizer,https://github.com/gugarosa/opytimizer/tree/master/opytimizer/optimizers/social/qsa.py,,test_qsa_business_one,"(A_1, A_2, A_3) = (copy.deepcopy(agents[0]), copy.deepcopy(agents[1]), copy.deepcopy(agents[2]))","
A_1 = copy.deepcopy(agents[0])
A_2 = copy.deepcopy(agents[1])
A_3 = copy.deepcopy(agents[2])
",1,"[['https://github.com/gugarosa/opytimizer/tree/master/tests/opytimizer/optimizers/social/test_qsa.py', 'tests.opytimizer.optimizers.social.test_qsa', '', 'test_qsa_business_one']]"
opytimizer,https://github.com/gugarosa/opytimizer/tree/master/opytimizer/optimizers/social/qsa.py,,test_qsa_business_one,"(q_1, q_2, _) = self._calculate_queue(len(agents), A_1.fit, A_2.fit, A_3.fit)","
tmp_fun_0 = self._calculate_queue(len(agents), A_1.fit, A_2.fit, A_3.fit)
q_1 = tmp_fun_0[0]
q_2 = tmp_fun_0[1]
_ = tmp_fun_0[2]
",1,"[['https://github.com/gugarosa/opytimizer/tree/master/tests/opytimizer/optimizers/social/test_qsa.py', 'tests.opytimizer.optimizers.social.test_qsa', '', 'test_qsa_business_one']]"
opytimizer,https://github.com/gugarosa/opytimizer/tree/master/opytimizer/optimizers/evolutionary/es.py,,test_es_update_strategy,"(n_variables, n_dimensions) = (self.strategy.shape[1], self.strategy.shape[2])","
n_variables = self.strategy.shape[1]
n_dimensions = self.strategy.shape[2]
",1,"[['https://github.com/gugarosa/opytimizer/tree/master/tests/opytimizer/optimizers/evolutionary/test_es.py', 'tests.opytimizer.optimizers.evolutionary.test_es', '', 'test_es_update_strategy']]"
opytimizer,https://github.com/gugarosa/opytimizer/tree/master/opytimizer/optimizers/evolutionary/ga.py,,test_ga_crossover,"(alpha, beta) = (copy.deepcopy(father), copy.deepcopy(mother))","
alpha = copy.deepcopy(father)
beta = copy.deepcopy(mother)
",1,"[['https://github.com/gugarosa/opytimizer/tree/master/tests/opytimizer/optimizers/evolutionary/test_ga.py', 'tests.opytimizer.optimizers.evolutionary.test_ga', '', 'test_ga_crossover']]"
opytimizer,https://github.com/gugarosa/opytimizer/tree/master/opytimizer/optimizers/evolutionary/hs.py,,test_goghs_generate_opposition_harmony,"(A[j], B[j]) = (c.FLOAT_MAX, -c.FLOAT_MAX)","
A[j] = c.FLOAT_MAX
B[j] = -c.FLOAT_MAX
",1,"[['https://github.com/gugarosa/opytimizer/tree/master/tests/opytimizer/optimizers/evolutionary/test_hs.py', 'tests.opytimizer.optimizers.evolutionary.test_hs', '', 'test_goghs_generate_opposition_harmony']]"
opytimizer,https://github.com/gugarosa/opytimizer/tree/master/opytimizer/optimizers/evolutionary/ep.py,,test_ep_update_strategy,"(n_variables, n_dimensions) = (self.strategy.shape[1], self.strategy.shape[2])","
n_variables = self.strategy.shape[1]
n_dimensions = self.strategy.shape[2]
",1,"[['https://github.com/gugarosa/opytimizer/tree/master/tests/opytimizer/optimizers/evolutionary/test_ep.py', 'tests.opytimizer.optimizers.evolutionary.test_ep', '', 'test_ep_update_strategy']]"
opytimizer,https://github.com/gugarosa/opytimizer/tree/master/opytimizer/optimizers/evolutionary/bsa.py,,test_bsa_permute,"(self.old_agents[i], self.old_agents[j]) = (copy.deepcopy(self.old_agents[j]), copy.deepcopy(self.old_agents[i]))","
tmp0 = copy.deepcopy(self.old_agents[i])
self.old_agents[i] = copy.deepcopy(self.old_agents[j])
self.old_agents[j] = tmp0
",1,"[['https://github.com/gugarosa/opytimizer/tree/master/tests/opytimizer/optimizers/evolutionary/test_bsa.py', 'tests.opytimizer.optimizers.evolutionary.test_bsa', '', 'test_bsa_permute']]"
html5lib-python,https://github.com/html5lib/html5lib-python/tree/master/html5lib/_inputstream.py,,test_newlines,"(line, col) = self._position(self.chunkOffset)","
tmp_fun_0 = self._position(self.chunkOffset)
line = tmp_fun_0[0]
col = tmp_fun_0[1]
",1,"[['https://github.com/html5lib/html5lib-python/tree/master/html5lib/tests/test_stream.py', 'html5lib.tests.test_stream', '', 'test_position'], ['https://github.com/html5lib/html5lib-python/tree/master/html5lib/tests/test_stream.py', 'html5lib.tests.test_stream', '', 'test_newlines']]"
beancount,https://github.com/beancount/beancount/tree/master/beancount/utils/misc_utils.py,TestMiscUtils,test_longest,"(longest, length) = (None, -1)","
longest = None
length = -1
",1,"[['https://github.com/beancount/beancount/tree/master/beancount/utils/misc_utils_test.py', 'beancount.utils.misc_utils_test', 'TestMiscUtils', 'test_longest']]"
beancount,https://github.com/beancount/beancount/tree/master/beancount/utils/misc_utils.py,TestMiscUtils,test_longest,"(longest, length) = (element, len_element)","
longest = element
length = len_element
",1,"[['https://github.com/beancount/beancount/tree/master/beancount/utils/misc_utils_test.py', 'beancount.utils.misc_utils_test', 'TestMiscUtils', 'test_longest']]"
xonsh,https://github.com/xonsh/xonsh/tree/master/xonsh/tools.py,,test_subproc_toks_hello_bad_trailing_single_quotes,"(beg, end) = (toks[0].lexpos, toks[-1].lexpos + end_offset)","
beg = toks[0].lexpos
end = toks[-1].lexpos + end_offset
",1,"[['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_greedy_parens_statements_with_grep'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_and_paren'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_indent_ls_str'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_ls_l_semi_ls_first'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_indent_ls_no_min_semi_nl'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_paren_and_paren'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_hello_mom_first'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_capproc'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_paren'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_indent_ls_no_min_semi'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_pyeval_redirect'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_pyeval_nested_parens'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_git_semi'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_ls_l'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_not'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_hello_mom_second'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_semicolon_only'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_ls_l_semi_ls_second'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_ls_42_comment'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_hello_bad_leading_triple_quotes'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_not_paren'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_bash_macro'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_indent_ls'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_indent_ls_no_min_nl'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_python_macro'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_greedy_parens_statements'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_hello_bad_leading_single_quotes'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_greedy_parens'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_greedy_parens_inp'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_git'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_comment'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_hello_mom_triple_quotes_nl'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_capstdout'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_indent_ls_comment'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_indent_ls_nl'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_git_nl'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_pyeval'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_pyeval_parens'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_pyeval_multiline_string'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_hello_bad_trailing_triple_quotes'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_twopyeval'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_x'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_indent_ls_no_min'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_ls_str_comment'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_twopyeval_parens'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_pyeval_nested'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_ls_comment'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_paren_ws'], ['https://github.com/xonsh/xonsh/tree/master/tests/test_tools.py', 'tests.test_tools', '', 'test_subproc_toks_hello_bad_trailing_single_quotes']]"
xonsh,https://github.com/xonsh/xonsh/tree/master/xonsh/xoreutils/cat.py,TestCat,test_cat_dev_urandom,file_size = fobj = None,"
tmp_value = None
file_size = tmp_value
fobj = tmp_value
",1,"[['https://github.com/xonsh/xonsh/tree/master/tests/test_xoreutils.py', 'tests.test_xoreutils', 'TestCat', 'test_cat_dev_urandom']]"
xonsh,https://github.com/xonsh/xonsh/tree/master/xonsh/xoreutils/cat.py,TestCat,test_cat_dev_urandom,"(last_was_blank, line_count, read_size, endnow) = _cat_line(f, sep, last_was_blank, line_count, opts, out, enc, enc_errors, read_size)","
tmp_fun_0 = _cat_line(f, sep, last_was_blank, line_count, opts, out, enc, enc_errors, read_size)
last_was_blank = tmp_fun_0[0]
line_count = tmp_fun_0[1]
read_size = tmp_fun_0[2]
endnow = tmp_fun_0[3]
",1,"[['https://github.com/xonsh/xonsh/tree/master/tests/test_xoreutils.py', 'tests.test_xoreutils', 'TestCat', 'test_cat_dev_urandom']]"
CTCDecoder,https://github.com/githubharald/CTCDecoder/tree/master/ctc_decoder/prefix_search.py,,test_prefix_search,"(max_T, max_C) = mat.shape","
max_T = mat.shape[0]
max_C = mat.shape[1]
",1,"[['https://github.com/githubharald/CTCDecoder/tree/master/tests/test_mini_example.py', 'tests.test_mini_example', '', 'test_prefix_search']]"
CTCDecoder,https://github.com/githubharald/CTCDecoder/tree/master/ctc_decoder/prefix_search.py,,test_prefix_search,l_star = y_star = '',"
tmp_value = ''
l_star = tmp_value
y_star = tmp_value
",1,"[['https://github.com/githubharald/CTCDecoder/tree/master/tests/test_mini_example.py', 'tests.test_mini_example', '', 'test_prefix_search']]"
not-youtube-dl,https://github.com/scastillo/not-youtube-dl/tree/master/youtube_dl/utils.py,TestUtil,test_parse_codecs,"(vcodec, acodec) = (None, None)","
vcodec = None
acodec = None
",1,"[['https://github.com/scastillo/not-youtube-dl/tree/master/test/test_utils.py', 'test.test_utils', 'TestUtil', 'test_parse_codecs']]"
